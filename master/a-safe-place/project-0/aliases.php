<?php 
/**
 * FrenchToJDThis
 *
 * Convertit une date du calendrier français républicain en nombre de jours du calendrier Julien.
 *
 * @link http://php.net/manual/fr/function.frenchtojd.php Documentation pour FrenchToJD.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $month    Le mois, sous la forme d'un nombre entre 1 (pour Vendémiaire) à 13 (pour la période de 5-6 jours en à la fin de chaque année)
 * @param int      $day    Le jour, sous la forme d'un nombre compris entre 1 et 30
 * @param int      $year    L'année, sous la forme d'un nombre compris entre 1 et 14
 *
 * @return int	Le jour Julien pour la date fournie du calendrier français républicain, sous la forme d'un entier.
 *
 */
if(!function_exists('FrenchToJDThis'))
{
    function FrenchToJDThis($month, $day, $year)
    {
		$month = (int)$month;
		$day = (int)$day;
		$year = (int)$year;

		return FrenchToJD($month, $day, $year);
    }
}

/**
 * GregorianToJDThis
 *
 * Convertit une date grégorienne en nombre de jours du calendrier Julien.
 *
 * @link http://php.net/manual/fr/function.gregoriantojd.php Documentation pour GregorianToJD.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $month    Le mois, sous la forme d'un nombre compris entre 1 (pour Janvier) et 2 (pour Décembre)
 * @param int      $day    Le jour, sous la forme d'un nombre compris entre 1 et 31
 * @param int      $year    L'année, sous la forme d'un nombre compris entre -4714 et 9999
 *
 * @return int	Le jour Julien pour la date fournie du calendrier Grégorien, sous la forme d'un entier.
 *
 */
if(!function_exists('GregorianToJDThis'))
{
    function GregorianToJDThis($month, $day, $year)
    {
		$month = (int)$month;
		$day = (int)$day;
		$year = (int)$year;

		return GregorianToJD($month, $day, $year);
    }
}

/**
 * JDDayOfWeekThis
 *
 * Retourne le numéro du jour de la semaine.
 *
 * @link http://php.net/manual/fr/function.jddayofweek.php Documentation pour JDDayOfWeek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $julianday    Le numéro du jour Julien, sous la forme d'un entier
 * @param int      $mode
 *
 * @return mixed	Le jour de la semaine Grégorien, sous la forme d'un entier ou d'une chaîne de caractères.
 *
 */
if(!function_exists('JDDayOfWeekThis'))
{
    function JDDayOfWeekThis($julianday, $mode = CAL_DOW_DAYNO)
    {
		$julianday = (int)$julianday;
		$mode = (int)$mode;

		return JDDayOfWeek($julianday, $mode);
    }
}

/**
 * JDMonthNameThis
 *
 * Retourne le nom du mois.
 *
 * @link http://php.net/manual/fr/function.jdmonthname.php Documentation pour JDMonthName.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $julianday    Le jour Julien à analyser
 * @param int      $mode    Le calendrier dans lequel on récupère le nom du mois
 *
 * @return string	Le nom du mois pour le jour Julien donné, pour le calendrier calendar.
 *
 */
if(!function_exists('JDMonthNameThis'))
{
    function JDMonthNameThis($julianday, $mode)
    {
		$julianday = (int)$julianday;
		$mode = (int)$mode;

		return JDMonthName($julianday, $mode);
    }
}

/**
 * JDToFrenchThis
 *
 * Convertit le nombre de jours du calendrier Julien en date du calendrier français républicain.
 *
 * @link http://php.net/manual/fr/function.jdtofrench.php Documentation pour JDToFrench.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $juliandaycount    Le numéro du jour Julien, sous la forme d'un entier
 *
 * @return string	La date française républicaine, sous la forme d'une chaîne de caractères "mois/jour/année".
 *
 */
if(!function_exists('JDToFrenchThis'))
{
    function JDToFrenchThis($juliandaycount)
    {
		$juliandaycount = (int)$juliandaycount;

		return JDToFrench($juliandaycount);
    }
}

/**
 * JDToGregorianThis
 *
 * Convertit le nombre de jours du calendrier Julien en date grégorienne.
 *
 * @link http://php.net/manual/fr/function.jdtogregorian.php Documentation pour JDToGregorian.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $julianday    Le numéro du jour Julien, sous la forme d'un entier
 *
 * @return string	La date grégorienne, sous la forme d'une chaîne de caractères "mois/jour/année".
 *
 */
if(!function_exists('JDToGregorianThis'))
{
    function JDToGregorianThis($julianday)
    {
		$julianday = (int)$julianday;

		return JDToGregorian($julianday);
    }
}

/**
 * JDToJulianThis
 *
 * Convertit le nombre de jours du calendrier Julien en date du calendrier Julien.
 *
 * @link http://php.net/manual/fr/function.jdtojulian.php Documentation pour JDToJulian.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $julianday    Le nombre de jours Julien, sous la forme d'un entier
 *
 * @return string	La date Julien, sous la forme d'une chaîne de caractères "mois/jour/année".
 *
 */
if(!function_exists('JDToJulianThis'))
{
    function JDToJulianThis($julianday)
    {
		$julianday = (int)$julianday;

		return JDToJulian($julianday);
    }
}

/**
 * JewishToJDThis
 *
 * Convertit une date du calendrier Juif en nombre de jours du calendrier Julien.
 *
 * @link http://php.net/manual/fr/function.jewishtojd.php Documentation pour JewishToJD.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $month    Le mois, sous la forme d'un nombre entre 1 et 13
 * @param int      $day    Le jour, sous la forme d'un nombre entre 1 et 30
 * @param int      $year    L'année, sous la forme d'un nombre entre 1 et 9999
 *
 * @return int	Le jour Julien pour la date Juive donnée, sous la forme d'un entier.
 *
 */
if(!function_exists('JewishToJDThis'))
{
    function JewishToJDThis($month, $day, $year)
    {
		$month = (int)$month;
		$day = (int)$day;
		$year = (int)$year;

		return JewishToJD($month, $day, $year);
    }
}

/**
 * JulianToJDThis
 *
 * Convertit un jours du calendrier Julien en un nombre de jours du calendrier Julien.
 *
 * @link http://php.net/manual/fr/function.juliantojd.php Documentation pour JulianToJD.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $month    Le mois, sous la forme d'un nombre entre 1 (pour Janvier) et 2 (pour Décembre)
 * @param int      $day    Le jour, sous la forme d'un nombre entre 1 et 31
 * @param int      $year    L'année, sous la forme d'un nombre entre -4713 et 9999
 *
 * @return int	Le jour Julien pour la date Julienne donnée, sous la forme d'un entier.
 *
 */
if(!function_exists('JulianToJDThis'))
{
    function JulianToJDThis($month, $day, $year)
    {
		$month = (int)$month;
		$day = (int)$day;
		$year = (int)$year;

		return JulianToJD($month, $day, $year);
    }
}

/**
 * __autoloadThis
 *
 * Tente de charger une classe indéfinie.
 *
 * @link http://php.net/manual/fr/function.autoload.php Documentation pour __autoload.
 *
 * @version PHP 5
 *
 * @param string   $class    Nom de la classe à charger.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('__autoloadThis'))
{
    function __autoloadThis($class)
    {
		$class = (string)$class;

		return __autoload($class);
    }
}

/**
 * __halt_compilerThis
 *
 * Stoppe l'exécution du compilateur.
 *
 * @link http://php.net/manual/fr/function.halt-compiler.php Documentation pour __halt_compiler.
 *
 * @version PHP 5 >= 5.1.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('__halt_compilerThis'))
{
    function __halt_compilerThis()
    {
		return __halt_compiler();
    }
}

/**
 * absThis
 *
 * Valeur absolue.
 *
 * @link http://php.net/manual/fr/function.abs.php Documentation pour abs.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $number    La valeur numérique à traiter
 *
 * @return number	La valeur absolue du nombre number. Si le nombre est un nombre à virgule flottante (float), le type retourné est aussi un nombre à virgule flottante (float), sinon, c'est un entier (entier).
 *
 */
if(!function_exists('absThis'))
{
    function absThis($number)
    {
		$number = ($number);
		return abs($number);
    }
}

/**
 * acosThis
 *
 * Arc cosinus.
 *
 * @link http://php.net/manual/fr/function.acos.php Documentation pour acos.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	L'arc cosinus de arg, en radians.
 *
 */
if(!function_exists('acosThis'))
{
    function acosThis($arg)
    {
		$arg = (float)$arg;

		return acos($arg);
    }
}

/**
 * acoshThis
 *
 * Arc cosinus hyperbolique.
 *
 * @link http://php.net/manual/fr/function.acosh.php Documentation pour acosh.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $arg    La valeur à traiter
 *
 * @return float	L'arc cosinus hyperbolique de arg.
 *
 */
if(!function_exists('acoshThis'))
{
    function acoshThis($arg)
    {
		$arg = (float)$arg;

		return acosh($arg);
    }
}

/**
 * addcslashesThis
 *
 * Ajoute des slash dans une chaîne, à la mode du langage C.
 *
 * @link http://php.net/manual/fr/function.addcslashes.php Documentation pour addcslashes.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne à échapper.
 * @param string   $charlist    Une liste de caractères à échapper. Si charlist contient les caractères \n, \r etc., ils seront convertis à la mode du langage C, alors que les autres caractères non-alphanumériques ayant un code ASCII inférieur à 26, et supérieur à 26 sont remplacés par leur représentation octale. Lorsque vous définissez une séquence de caractères dans le paramètre charlist, assurez-vous que vous connaissez bien tous les caractères qui viennent entre vos limites d'intervalles. Attention à l'utilisation des caractères tels que 0, a, b, f, n, r, t et v. Ils seront convertis en \0, \a, \b, \f, \n, \r, \t et \v. En PHP, \0 (NULL), \r (retour chariot), \n (nouvelle ligne), \v (tabulation horizontale) et \t (tabulation) sont prédéfinis comme séquences d'échappement, tandis qu'en C, ce sont toutes les séquences cités ci-dessus qui sont des séquences d'échappement.
 *
 * @return string	Retourne la chaîne, échappée.
 *
 */
if(!function_exists('addcslashesThis'))
{
    function addcslashesThis($str, $charlist)
    {
		$str = (string)$str;
		$charlist = (string)$charlist;

		return addcslashes($str, $charlist);
    }
}

/**
 * addslashesThis
 *
 * Ajoute des antislashs dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.addslashes.php Documentation pour addslashes.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne à échapper.
 *
 * @return string	Retourne la chaîne échappée.
 *
 */
if(!function_exists('addslashesThis'))
{
    function addslashesThis($str)
    {
		$str = (string)$str;

		return addslashes($str);
    }
}

/**
 * aggregateThis
 *
 * Agrège dynamiquement des classes et objets.
 *
 * @link http://php.net/manual/fr/function.aggregate.php Documentation pour aggregate.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('aggregateThis'))
{
    function aggregateThis($object, $class_name)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;

		return aggregate($object, $class_name);
    }
}

/**
 * aggregate_infoThis
 *
 * Récupère les informations d'agrégation pour un objet donné.
 *
 * @link http://php.net/manual/fr/function.aggregate-info.php Documentation pour aggregate_info.
 *
 * @version PHP 4 >= 4.3.0
 *
 * @param object   $object
 *
 * @return array	Retourne un tableau associatif avec les méthodes et propriétés de chaque classe qui a été agrégée pour former l'objet object. La clé du tableau principal est le nom de la classe agrégée.
 *
 */
if(!function_exists('aggregate_infoThis'))
{
    function aggregate_infoThis($object)
    {
		$object = (object)$object;

		return aggregate_info($object);
    }
}

/**
 * aggregate_methodsThis
 *
 * Agrège dynamiquement les méthodes d'une classe à un objet.
 *
 * @link http://php.net/manual/fr/function.aggregate-methods.php Documentation pour aggregate_methods.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('aggregate_methodsThis'))
{
    function aggregate_methodsThis($object, $class_name)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;

		return aggregate_methods($object, $class_name);
    }
}

/**
 * aggregate_methods_by_listThis
 *
 * Agrège sélectivement les méthodes d'une classe grâce à une liste.
 *
 * @link http://php.net/manual/fr/function.aggregate-methods-by-list.php Documentation pour aggregate_methods_by_list.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name
 * @param array    $methods_list
 * @param bool     $exclude    Le paramètre optionnel exclude sert à décider si l'expression régulière sélectionne les méthodes (exclude vaut FALSE), ou bien si elle sert à identifier les méthodes qui doivent être exclues (exclude vaut TRUE).
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('aggregate_methods_by_listThis'))
{
    function aggregate_methods_by_listThis($object, $class_name, $methods_list, $exclude = false)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;
		$methods_list = (array)$methods_list;
		$exclude = (bool)$exclude;

		return aggregate_methods_by_list($object, $class_name, $methods_list, $exclude);
    }
}

/**
 * aggregate_methods_by_regexpThis
 *
 * Agrège sélectivement les méthodes d'une classe grâce à une expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.aggregate-methods-by-regexp.php Documentation pour aggregate_methods_by_regexp.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name
 * @param string   $regexp
 * @param bool     $exclude    Le paramètre optionnel exclude sert à décider si l'expression rationnelle sélectionne les méthodes (exclude vaut FALSE), ou bien si elle sert à identifier les méthodes qui doivent être exclues (exclude vaut TRUE).
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('aggregate_methods_by_regexpThis'))
{
    function aggregate_methods_by_regexpThis($object, $class_name, $regexp, $exclude = false)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;
		$regexp = (string)$regexp;
		$exclude = (bool)$exclude;

		return aggregate_methods_by_regexp($object, $class_name, $regexp, $exclude);
    }
}

/**
 * aggregate_propertiesThis
 *
 * Agrège dynamiquement les propriétés d'une classe à un objet.
 *
 * @link http://php.net/manual/fr/function.aggregate-properties.php Documentation pour aggregate_properties.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('aggregate_propertiesThis'))
{
    function aggregate_propertiesThis($object, $class_name)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;

		return aggregate_properties($object, $class_name);
    }
}

/**
 * aggregate_properties_by_listThis
 *
 * Agrège sélectivement les propriétés d'une classe grâce à une liste.
 *
 * @link http://php.net/manual/fr/function.aggregate-properties-by-list.php Documentation pour aggregate_properties_by_list.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name
 * @param array    $properties_list
 * @param bool     $exclude    Le paramètre optionnel exclude sert à décider si l'expression régulière sélectionne les propriétés (exclude vaut FALSE), ou bien si elle sert à identifier les propriétés qui doivent être exclues (exclude vaut TRUE).
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('aggregate_properties_by_listThis'))
{
    function aggregate_properties_by_listThis($object, $class_name, $properties_list, $exclude = false)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;
		$properties_list = (array)$properties_list;
		$exclude = (bool)$exclude;

		return aggregate_properties_by_list($object, $class_name, $properties_list, $exclude);
    }
}

/**
 * aggregate_properties_by_regexpThis
 *
 * Agrège sélectivement les propriétés d'une classe grâce à une expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.aggregate-properties-by-regexp.php Documentation pour aggregate_properties_by_regexp.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name
 * @param string   $regexp
 * @param bool     $exclude    Le paramètre optionnel exclude sert à décider si l'expression rationnelle sélectionne les propriétés (exclude vaut FALSE), ou bien si elle sert à identifier les propriétés qui doivent être exclues (exclude vaut TRUE).
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('aggregate_properties_by_regexpThis'))
{
    function aggregate_properties_by_regexpThis($object, $class_name, $regexp, $exclude = false)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;
		$regexp = (string)$regexp;
		$exclude = (bool)$exclude;

		return aggregate_properties_by_regexp($object, $class_name, $regexp, $exclude);
    }
}

/**
 * apache_child_terminateThis
 *
 * Termine le processus Apache après cette requête.
 *
 * @link http://php.net/manual/fr/function.apache-child-terminate.php Documentation pour apache_child_terminate.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 * @return bool	Retourne TRUE si PHP fonctionne en tant que module d'Apache 1, que la version d'Apache n'est pas multithread et que la directive PHP child_terminate est activée (désactivée par défaut). Si ces conditions ne sont pas respectées, FALSE est retourné et une erreur de niveau E_WARNING est générée.
 *
 */
if(!function_exists('apache_child_terminateThis'))
{
    function apache_child_terminateThis()
    {
		return apache_child_terminate();
    }
}

/**
 * apache_get_modulesThis
 *
 * Retourne la liste des modules Apache chargés.
 *
 * @link http://php.net/manual/fr/function.apache-get-modules.php Documentation pour apache_get_modules.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 * @return array	Un tableau contenant les modules Apache chargés.
 *
 */
if(!function_exists('apache_get_modulesThis'))
{
    function apache_get_modulesThis()
    {
		return apache_get_modules();
    }
}

/**
 * apache_get_versionThis
 *
 * Récupère la version d'Apache.
 *
 * @link http://php.net/manual/fr/function.apache-get-version.php Documentation pour apache_get_version.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 * @return string	Retourne la version d'Apache en cas de réussite ou FALSE si une erreur survient.
 *
 */
if(!function_exists('apache_get_versionThis'))
{
    function apache_get_versionThis()
    {
		return apache_get_version();
    }
}

/**
 * apache_getenvThis
 *
 * Lit une variable de processus Apache.
 *
 * @link http://php.net/manual/fr/function.apache-getenv.php Documentation pour apache_getenv.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $variable    La variable d'environnement Apache.
 * @param bool     $walk_to_top    Si passé à TRUE, récupération de la variable de haut niveau disponible pour toutes les couches d'Apache.
 *
 * @return string	La valeur de la variable d'environnement d'Apache en cas de réussite ou FALSE en cas d'échec.
 *
 */
if(!function_exists('apache_getenvThis'))
{
    function apache_getenvThis($variable, $walk_to_top = false)
    {
		$variable = (string)$variable;
		$walk_to_top = (bool)$walk_to_top;

		return apache_getenv($variable, $walk_to_top);
    }
}

/**
 * apache_lookup_uriThis
 *
 * Effectue une requête partielle pour l'URI spécifiée et renvoie toutes les informations la concernant.
 *
 * @link http://php.net/manual/fr/function.apache-lookup-uri.php Documentation pour apache_lookup_uri.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier (URI) qui sera demandé.
 *
 * @return object	Un objet des informations relatives à l'URI. Les propriétés de l'objet sont les suivantes :
 *
 */
if(!function_exists('apache_lookup_uriThis'))
{
    function apache_lookup_uriThis($filename)
    {
		$filename = (string)$filename;

		return apache_lookup_uri($filename);
    }
}

/**
 * apache_noteThis
 *
 * Affiche ou affecte la table des notes d'Apache.
 *
 * @link http://php.net/manual/fr/function.apache-note.php Documentation pour apache_note.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $note_name    Le nom de la note.
 * @param string   $note_value    La valeur de la note.
 *
 * @return string	Si la fonction est appelée avec un argument, elle renvoie la valeur courante de la variable note_name. Si elle est appelée avec deux arguments, elle affecte à la note note_name la valeur note_value et elle retournera la valeur précédente de la variable note_name. Si la note ne peut être récupérée, FALSE est retourné.
 *
 */
if(!function_exists('apache_noteThis'))
{
    function apache_noteThis($note_name, $note_value = "")
    {
		$note_name = (string)$note_name;
		$note_value = (string)$note_value;

		return apache_note($note_name, $note_value);
    }
}

/**
 * apache_request_headersThis
 *
 * Récupère tous les en-têtes HTTP de la requête.
 *
 * @link http://php.net/manual/fr/function.apache-request-headers.php Documentation pour apache_request_headers.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return array	Un tableau associatif avec tous les en-têtes HTTP de la requête courante ou FALSE en cas d'échec.
 *
 */
if(!function_exists('apache_request_headersThis'))
{
    function apache_request_headersThis()
    {
		return apache_request_headers();
    }
}

/**
 * apache_reset_timeoutThis
 *
 * Remet à sa position initiale le temporisateur d'Apache.
 *
 * @link http://php.net/manual/fr/function.apache-reset-timeout.php Documentation pour apache_reset_timeout.
 *
 * @version PHP 5 >= 5.1.0
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('apache_reset_timeoutThis'))
{
    function apache_reset_timeoutThis()
    {
		return apache_reset_timeout();
    }
}

/**
 * apache_response_headersThis
 *
 * Récupère tous les en-têtes de réponse HTTP.
 *
 * @link http://php.net/manual/fr/function.apache-response-headers.php Documentation pour apache_response_headers.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return array	Un tableau de tous les en-têtes de réponse d'Apache en cas de réussite ou FALSE si une erreur survient.
 *
 */
if(!function_exists('apache_response_headersThis'))
{
    function apache_response_headersThis()
    {
		return apache_response_headers();
    }
}

/**
 * apache_setenvThis
 *
 * Modifie une variable de processus Apache.
 *
 * @link http://php.net/manual/fr/function.apache-setenv.php Documentation pour apache_setenv.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $variable    La variable d'environnement qui sera modifiée.
 * @param string   $value    La nouvelle valeur de variable.
 * @param bool     $walk_to_top    Si passé à TRUE, assignation de la variable de haut niveau disponible pour toutes les couches d'Apache.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('apache_setenvThis'))
{
    function apache_setenvThis($variable, $value, $walk_to_top = false)
    {
		$variable = (string)$variable;
		$value = (string)$value;
		$walk_to_top = (bool)$walk_to_top;

		return apache_setenv($variable, $value, $walk_to_top);
    }
}

/**
 * apd_dump_function_tableThis
 *
 * Affiche la table courante de fonction.
 *
 * @link http://php.net/manual/fr/function.apd-dump-function-table.php Documentation pour apd_dump_function_table.
 *
 * @version Unknown
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('apd_dump_function_tableThis'))
{
    function apd_dump_function_tableThis()
    {
		return apd_dump_function_table();
    }
}

/**
 * arrayThis
 *
 * Crée un tableau.
 *
 * @link http://php.net/manual/fr/function.array.php Documentation pour array.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $item    La syntaxe "index => valeur", séparée par des virgules, définit les index et leur valeur. Un index peut être une chaîne ou un nombre. Si l'index est omis, un index numérique sera automatiquement généré (commençant à 0). Si l'index est un entier, le prochain index généré prendra la valeur d'index la plus grande + 1. Notez que si deux index identiques sont définis, le dernier remplacera le premier. Avoir une virgule après avoir défini la dernière entrée, bien qu'inutile, est une syntaxe valide.
 *
 * @return array	Retourne un tableau des paramètres. Les paramètres peuvent fournir un index en utilisant l'opérateur =>. Lisez la section sur les types-tableaux pour plus d'informations sur ce qu'est un tableau.
 *
 */
if(!function_exists('arrayThis'))
{
    function arrayThis($item1 = NULL)
    {
		$item1 = ($item1);
		return array($item1);
    }
}

/**
 * array_change_key_caseThis
 *
 * Change la casse des clés d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-change-key-case.php Documentation pour array_change_key_case.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param array    $input    Le tableau à traiter
 * @param int      $case    Soit CASE_UPPER (majuscules), soit CASE_LOWER (minuscules, valeur par défaut)
 *
 * @return array	Retourne un tableau dont les clés ont été transformées en majuscule ou en minuscule, ou FALSE si input n'est pas un tableau.
 *
 */
if(!function_exists('array_change_key_caseThis'))
{
    function array_change_key_caseThis($input, $case = CASE_LOWER)
    {
		$input = (array)$input;
		$case = (int)$case;

		return array_change_key_case($input, $case);
    }
}

/**
 * array_chunkThis
 *
 * Sépare un tableau en tableaux de taille inférieure.
 *
 * @link http://php.net/manual/fr/function.array-chunk.php Documentation pour array_chunk.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param array    $input    Le tableau à traiter
 * @param int      $size    La taille de chaque tableau
 * @param bool     $preserve_keys    Lorsque définit à TRUE, les clés seront préservées. Par défaut, vaut FALSE ce qui réindexera le tableau résultant numériquement
 *
 * @return array	Retourne un tableau multidimensionnel indexé numériquement, commençant à zéro, dont chaque dimension contient size éléments.
 *
 */
if(!function_exists('array_chunkThis'))
{
    function array_chunkThis($input, $size, $preserve_keys = false)
    {
		$input = (array)$input;
		$size = (int)$size;
		$preserve_keys = (bool)$preserve_keys;

		return array_chunk($input, $size, $preserve_keys);
    }
}

/**
 * array_columnThis
 *
 * Retourne les valeurs d'une colonne d'un tableau d'entrée.
 *
 * @link http://php.net/manual/fr/function.array-column.php Documentation pour array_column.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param array    $input    Un tableau multi-dimensionnel depuis lequel la colonne de valeurs sera prélevée.
 * @param mixed     $column_key    La colonne de valeurs à retourner. Cette valeur peut être la clé entière de la colonne que vous souhaitez récupérer, ou bien le nom de la clé pour un tableau associatif. Il peut aussi valoir NULL pour retourner le tableau complet (utile en conjonction du paramètre index_key pour ré-indexer le tableau).
 * @param mixed     $index_key    La colonne à utiliser comme index/clé pour le tableau retourné. Cette valeur peut être la clé entière de la colonne, ou le nom de la clé.
 *
 * @return array	Retourne un tableau de valeurs représentant une seule colonne depuis le tableau d'entrée.
 *
 */
if(!function_exists('array_columnThis'))
{
    function array_columnThis($input, $column_key, $index_key = NULL)
    {
		$input = (array)$input;
		$column_key = ($column_key);
		$index_key = ($index_key);
		return array_column($input, $column_key, $index_key);
    }
}

/**
 * array_combineThis
 *
 * Crée un tableau à partir de deux autres tableaux.
 *
 * @link http://php.net/manual/fr/function.array-combine.php Documentation pour array_combine.
 *
 * @version PHP 5
 *
 * @param array    $keys    Tableau de clés à utiliser. Les valeurs illégales pour les clés seront converties en chaîne de caractères.
 * @param array    $values    Tableau de valeurs à utiliser
 *
 * @return array	Retourne le tableau combiné ou FALSE si le nombre d'éléments de chaque tableau n'est pas identique.
 *
 */
if(!function_exists('array_combineThis'))
{
    function array_combineThis($keys, $values)
    {
		$keys = (array)$keys;
		$values = (array)$values;

		return array_combine($keys, $values);
    }
}

/**
 * array_count_valuesThis
 *
 * Compte le nombre de valeurs d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-count-values.php Documentation pour array_count_values.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $input    Le tableau de valeurs à compter
 *
 * @return array	Retourne un tableau associatif de valeurs ayant les clés correspondant à input et leurs nombres comme valeurs.
 *
 */
if(!function_exists('array_count_valuesThis'))
{
    function array_count_valuesThis($input)
    {
		$input = (array)$input;

		return array_count_values($input);
    }
}

/**
 * array_diffThis
 *
 * Calcule la différence entre des tableaux.
 *
 * @link http://php.net/manual/fr/function.array-diff.php Documentation pour array_diff.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param array    $array1    Le tableau depuis lequel comparer
 * @param array    $array2    Un tableau avec lequel comparer
 * @param array    $item    Plus de tableaux avec lesquels comparer
 *
 * @return array	Retourne un tableau contenant toutes les entités du tableau array1 qui ne sont présentes dans aucun des autres tableaux.
 *
 */
if(!function_exists('array_diffThis'))
{
    function array_diffThis($array1, $array2, $array3 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;

		return array_diff($array1, $array2, $array3);
    }
}

/**
 * array_diff_assocThis
 *
 * Calcule la différence de deux tableaux, en prenant aussi en compte les clés.
 *
 * @link http://php.net/manual/fr/function.array-diff-assoc.php Documentation pour array_diff_assoc.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param array    $array1    Le tableau à comparer
 * @param array    $array2    Le tableau à comparer
 * @param array    $item    Plus de tableaux à comparer
 *
 * @return array	Retourne un tableau contenant toutes les valeurs du tableau array1 qui ne sont pas présentes dans les autres tableaux.
 *
 */
if(!function_exists('array_diff_assocThis'))
{
    function array_diff_assocThis($array1, $array2, $array3 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;

		return array_diff_assoc($array1, $array2, $array3);
    }
}

/**
 * array_diff_keyThis
 *
 * Calcule la différence de deux tableaux en utilisant les clés pour comparaison.
 *
 * @link http://php.net/manual/fr/function.array-diff-key.php Documentation pour array_diff_key.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param array    $array1    Le tableau à comparer
 * @param array    $array2    Le tableau à comparer
 * @param array    $item    Plus de tableaux à comparer
 *
 * @return array	Retourne un tableau contenant toutes les entrées du tableau array1 dont les clés ne sont présentes dans aucun des autres tableaux.
 *
 */
if(!function_exists('array_diff_keyThis'))
{
    function array_diff_keyThis($array1, $array2, $array3 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;

		return array_diff_key($array1, $array2, $array3);
    }
}

/**
 * array_diff_uassocThis
 *
 * Calcule la différence entre deux tableaux associatifs, à l'aide d'une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.array-diff-uassoc.php Documentation pour array_diff_uassoc.
 *
 * @version PHP 5
 *
 * @param array    $array1    Le tableau à comparer
 * @param array    $array2    Le tableau à comparer
 * @param array    $item    Plus de tableaux à comparer
 * @param callable     $key_compare_func    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 *
 * @return array	Retourne un tableau contenant toutes les entrées du tableau array1 qui ne sont présentes dans aucun autre tableau.
 *
 */
if(!function_exists('array_diff_uassocThis'))
{
    function array_diff_uassocThis($array1, $array2, $array3, $key_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$key_compare_func = is_callable($key_compare_func) ? $key_compare_func : NULL;

		return array_diff_uassoc($array1, $array2, $array3, $key_compare_func);
    }
}

/**
 * array_diff_ukeyThis
 *
 * Calcule la différence entre deux tableaux en utilisant une fonction de rappel sur les clés pour comparaison.
 *
 * @link http://php.net/manual/fr/function.array-diff-ukey.php Documentation pour array_diff_ukey.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param array    $array1    Le tableau à comparer
 * @param array    $array2    Le tableau à comparer
 * @param array    $item    Plus de tableaux à comparer
 * @param callable     $key_compare_func    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 *
 * @return array	Retourne un tableau contenant toutes les entrées du tableau array1 qui ne sont présentes dans aucun autre tableau.
 *
 */
if(!function_exists('array_diff_ukeyThis'))
{
    function array_diff_ukeyThis($array1, $array2, $array3, $key_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$key_compare_func = is_callable($key_compare_func) ? $key_compare_func : NULL;

		return array_diff_ukey($array1, $array2, $array3, $key_compare_func);
    }
}

/**
 * array_fillThis
 *
 * Remplit un tableau avec une même valeur.
 *
 * @link http://php.net/manual/fr/function.array-fill.php Documentation pour array_fill.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param int      $start_index    Le premier index du tableau retourné. Si start_index est négatif, le premier index du tableau retourné sera start_index, suivi par des indices commençant à zéro (voir l'exemple).
 * @param int      $num    Nombre d'éléments à insérer. Doit être supérieur à zéro.
 * @param mixed     $value    Valeur à utiliser pour remplir le tableau
 *
 * @return array	Retourne le tableau rempli.
 *
 */
if(!function_exists('array_fillThis'))
{
    function array_fillThis($start_index, $num, $value)
    {
		$start_index = (int)$start_index;
		$num = (int)$num;
		$value = ($value);
		return array_fill($start_index, $num, $value);
    }
}

/**
 * array_fill_keysThis
 *
 * Remplit un tableau avec des valeurs, en spécifiant les clés.
 *
 * @link http://php.net/manual/fr/function.array-fill-keys.php Documentation pour array_fill_keys.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param array    $keys    Tableau de valeurs qui sera utilisé comme clés. Les valeurs illégales pour les clés seront converties en chaînes de caractères.
 * @param mixed     $value    Valeur à utiliser pour remplir le tableau.
 *
 * @return array	Retourne le tableau rempli.
 *
 */
if(!function_exists('array_fill_keysThis'))
{
    function array_fill_keysThis($keys, $value)
    {
		$keys = (array)$keys;
		$value = ($value);
		return array_fill_keys($keys, $value);
    }
}

/**
 * array_filterThis
 *
 * Filtre les éléments d'un tableau grâce à une fonction utilisateur.
 *
 * @link http://php.net/manual/fr/function.array-filter.php Documentation pour array_filter.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param array    $input    Le tableau à évaluer
 * @param callable     $callback    La fonction utilisateur à utiliser Si aucune fonction utilisateur n'est fournie, toutes les entrées du tableau input valant FALSE (voir la conversion en booléen) seront effacées.
 *
 * @return array	Retourne le tableau filtré.
 *
 */
if(!function_exists('array_filterThis'))
{
    function array_filterThis($input, $callback = "")
    {
		$input = (array)$input;
		$callback = is_callable($callback) ? $callback : NULL;

		return array_filter($input, $callback);
    }
}

/**
 * array_flipThis
 *
 * Remplace les clés par les valeurs, et les valeurs par les clés.
 *
 * @link http://php.net/manual/fr/function.array-flip.php Documentation pour array_flip.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $trans    Un tableau de paire clés/valeurs à inverser.
 *
 * @return array	Retourne un tableau inversé en cas de succès, NULL si une erreur survient.
 *
 */
if(!function_exists('array_flipThis'))
{
    function array_flipThis($trans)
    {
		$trans = (array)$trans;

		return array_flip($trans);
    }
}

/**
 * array_intersectThis
 *
 * Calcule l'intersection de tableaux.
 *
 * @link http://php.net/manual/fr/function.array-intersect.php Documentation pour array_intersect.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param array    $array1    Le tableau contenant les valeurs maîtres à vérifier.
 * @param array    $array2    Un tableau contenant les valeurs à comparer.
 * @param array    $item    Une liste variable de tableaux à comparer.
 *
 * @return array	Retourne un tableau contenant toutes les valeurs du tableau array1 dont les valeurs existent dans tous les arguments.
 *
 */
if(!function_exists('array_intersectThis'))
{
    function array_intersectThis($array1, $array2, $array3 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;

		return array_intersect($array1, $array2, $array3);
    }
}

/**
 * array_intersect_assocThis
 *
 * Calcule l'intersection de deux tableaux avec des tests sur les index.
 *
 * @link http://php.net/manual/fr/function.array-intersect-assoc.php Documentation pour array_intersect_assoc.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param array    $array1    Le tableau avec les valeurs maîtres à vérifier.
 * @param array    $array2    Un tableau contenant les valeurs à comparer.
 * @param array    $item    Une liste variable de tableaux à comparer.
 *
 * @return array	Retourne un tableau associatif contenant toutes les valeurs du tableau array1 qui sont présentes dans tous les arguments.
 *
 */
if(!function_exists('array_intersect_assocThis'))
{
    function array_intersect_assocThis($array1, $array2, $array3 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;

		return array_intersect_assoc($array1, $array2, $array3);
    }
}

/**
 * array_intersect_keyThis
 *
 * Calcule l'intersection de deux tableaux en utilisant les clés pour comparaison.
 *
 * @link http://php.net/manual/fr/function.array-intersect-key.php Documentation pour array_intersect_key.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param array    $array1    Le tableau contenant les clés maîtres à vérifier.
 * @param array    $array2    Un tableau contenant les clés à comparer.
 * @param array    $item    Une liste variable de tableaux à comparer.
 *
 * @return array	Retourne un tableau associatif contenant toutes les entrées du tableau array1 qui ont des clés présentes dans tous les arguments.
 *
 */
if(!function_exists('array_intersect_keyThis'))
{
    function array_intersect_keyThis($array1, $array2, $array3 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;

		return array_intersect_key($array1, $array2, $array3);
    }
}

/**
 * array_intersect_uassocThis
 *
 * Calcule l'intersection de deux tableaux avec des tests sur les index, compare les index en utilisant une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.array-intersect-uassoc.php Documentation pour array_intersect_uassoc.
 *
 * @version PHP 5
 *
 * @param array    $array1    Tableau initial pour la comparaison des autres tableaux.
 * @param array    $array2    Premier tableau dont on doit comparer les clés.
 * @param array    $item    Liste variable de tableaux à comparer.
 * @param callable     $key_compare_func    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 *
 * @return array	Retourne les valeurs du tableau array1 dont les valeurs existent dans tous les autres arguments.
 *
 */
if(!function_exists('array_intersect_uassocThis'))
{
    function array_intersect_uassocThis($array1, $array2, $array3, $key_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$key_compare_func = is_callable($key_compare_func) ? $key_compare_func : NULL;

		return array_intersect_uassoc($array1, $array2, $array3, $key_compare_func);
    }
}

/**
 * array_intersect_ukeyThis
 *
 * Calcule l'intersection de deux tableaux en utilisant une fonction de rappel sur les clés pour comparaison.
 *
 * @link http://php.net/manual/fr/function.array-intersect-ukey.php Documentation pour array_intersect_ukey.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param array    $array1    Tableau initial pour la comparaison des tableaux.
 * @param array    $array2    Premier tableau utilisé pour comparer les clés.
 * @param array    $item    Liste variable de tableaux à comparer.
 * @param callable     $key_compare_func    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 *
 * @return array	Retourne les valeurs du tableau array1 dont les clés existent dans tous les arguments.
 *
 */
if(!function_exists('array_intersect_ukeyThis'))
{
    function array_intersect_ukeyThis($array1, $array2, $array3, $key_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$key_compare_func = is_callable($key_compare_func) ? $key_compare_func : NULL;

		return array_intersect_ukey($array1, $array2, $array3, $key_compare_func);
    }
}

/**
 * array_key_existsThis
 *
 * Vérifie si une clé existe dans un tableau.
 *
 * @link http://php.net/manual/fr/function.array-key-exists.php Documentation pour array_key_exists.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param mixed     $key    Valeur à vérifier.
 * @param array    $search    Un tableau contenant les clés à vérifier.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('array_key_existsThis'))
{
    function array_key_existsThis($key, $search)
    {
		$key = ($key);
		$search = (array)$search;

		return array_key_exists($key, $search);
    }
}

/**
 * array_keysThis
 *
 * Retourne toutes les clés ou un ensemble des clés d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-keys.php Documentation pour array_keys.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $input    Un tableau contenant les clés à retourner.
 * @param mixed     $search_value    Si spécifié, alors seulement les clés contenant ces valeurs seront retournées.
 * @param bool     $strict    Le paramètre strict force la comparaison en mode strict, incluant le type, avec l'opérateur ===.
 *
 * @return array	Retourne un tableau de toutes les clés dans input.
 *
 */
if(!function_exists('array_keysThis'))
{
    function array_keysThis($input, $search_value = NULL, $strict = false)
    {
		$input = (array)$input;
		$search_value = ($search_value);
		$strict = (bool)$strict;

		return array_keys($input, $search_value, $strict);
    }
}

/**
 * array_mapThis
 *
 * Applique une fonction sur les éléments d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-map.php Documentation pour array_map.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param callable     $callback    La fonction de rappel à exécuter pour chaque élément de chaque tableau.
 * @param array    $arr1    Un tableau à exécuter via la fonction de callback.
 * @param array    $item    Liste des tableaux à exécuter via la fonction de callback.
 *
 * @return array	Retourne un tableau contenant tous les éléments du tableau arr1 après avoir appliqué la fonction de callback sur chacun d'eux.
 *
 */
if(!function_exists('array_mapThis'))
{
    function array_mapThis($callback, $arr1, $arr2 = NULL)
    {
		$callback = is_callable($callback) ? $callback : NULL;
		$arr1 = (array)$arr1;
		$arr2 = (array)$arr2;

		return array_map($callback, $arr1, $arr2);
    }
}

/**
 * array_mergeThis
 *
 * Fusionne plusieurs tableaux en un seul.
 *
 * @link http://php.net/manual/fr/function.array-merge.php Documentation pour array_merge.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $array1    Tableau initial à fusionner.
 * @param array    $item    Liste de tableaux à fusionner.
 *
 * @return array	Retourne le tableau résultant.
 *
 */
if(!function_exists('array_mergeThis'))
{
    function array_mergeThis($array1, $array2 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;

		return array_merge($array1, $array2);
    }
}

/**
 * array_merge_recursiveThis
 *
 * Combine plusieurs tableaux ensemble, récursivement.
 *
 * @link http://php.net/manual/fr/function.array-merge-recursive.php Documentation pour array_merge_recursive.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param array    $array1    Tableau initial à rassembler.
 * @param array    $item    Liste variable de tableaux à rassembler récursivement.
 *
 * @return array	Un tableau de valeurs résultantes de la fusion des arguments.
 *
 */
if(!function_exists('array_merge_recursiveThis'))
{
    function array_merge_recursiveThis($array1, $array2 = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;

		return array_merge_recursive($array1, $array2);
    }
}

/**
 * array_multisortThis
 *
 * Trie les tableaux multidimensionnels.
 *
 * @link http://php.net/manual/fr/function.array-multisort.php Documentation pour array_multisort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$arr    Un tableau à trier.
 * @param mixed     $arg    Optionnellement, d'autres tableaux, ou des options de tri pour l'argument précédent : Type d'options de tri :
 * @param mixed     $arg    D'autres arguments.
 * @param mixed     $item
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('array_multisortThis'))
{
    function array_multisortThis(&$arr, $arg = SORT_ASC, $arg = SORT_REGULAR, $arg1 = NULL)
    {
		$arr = (array)$arr;
		$arg = ($arg);
		$arg = ($arg);
		$arg1 = ($arg1);
		return array_multisort($arr, $arg, $arg, $arg1);
    }
}

/**
 * array_padThis
 *
 * Complète un tableau avec une valeur jusqu'à la longueur spécifiée.
 *
 * @link http://php.net/manual/fr/function.array-pad.php Documentation pour array_pad.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $input    Tableau initial de valeurs à compléter.
 * @param int      $pad_size    Nouvelle taille du tableau.
 * @param mixed     $pad_value    Valeur à insérer si l'argument input est plus petit que l'argument pad_size.
 *
 * @return array	Retourne une copie du tableau input complétée jusqu'à la taille de pad_size avec la valeur pad_value. Si pad_size est positif, alors le tableau est complété à droite, s'il est négatif, il est complété à gauche. Si la valeur absolue de pad_size est plus petite que la taille du tableau input, alors le tableau n'est pas complété.
 *
 */
if(!function_exists('array_padThis'))
{
    function array_padThis($input, $pad_size, $pad_value)
    {
		$input = (array)$input;
		$pad_size = (int)$pad_size;
		$pad_value = ($pad_value);
		return array_pad($input, $pad_size, $pad_value);
    }
}

/**
 * array_popThis
 *
 * Dépile un élément de la fin d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-pop.php Documentation pour array_pop.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau duquel on récupère la valeur.
 *
 * @return mixed	Retourne la dernière valeur du tableau array. Si array est vide (ou n'est pas un tableau), NULL sera retourné.
 *
 */
if(!function_exists('array_popThis'))
{
    function array_popThis(&$array)
    {
		$array = (array)$array;

		return array_pop($array);
    }
}

/**
 * array_productThis
 *
 * Calcule le produit des valeurs du tableau.
 *
 * @link http://php.net/manual/fr/function.array-product.php Documentation pour array_product.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param array    $array    Le tableau.
 *
 * @return number	Retourne le produit, sous la forme d'un entier ou d'un nombre décimal.
 *
 */
if(!function_exists('array_productThis'))
{
    function array_productThis($array)
    {
		$array = (array)$array;

		return array_product($array);
    }
}

/**
 * array_pushThis
 *
 * Empile un ou plusieurs éléments à la fin d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-push.php Documentation pour array_push.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param mixed     $var    La valeur à insérer.
 * @param mixed     $item
 *
 * @return int	Retourne le nouveau nombre d'éléments dans le tableau.
 *
 */
if(!function_exists('array_pushThis'))
{
    function array_pushThis(&$array, $var, $var1 = NULL)
    {
		$array = (array)$array;
		$var = ($var);
		$var1 = ($var1);
		return array_push($array, $var, $var1);
    }
}

/**
 * array_randThis
 *
 * Prend une ou plusieurs valeurs, au hasard dans un tableau.
 *
 * @link http://php.net/manual/fr/function.array-rand.php Documentation pour array_rand.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $input    Le tableau d'entrée.
 * @param int      $num_req    Spécifie le nombre d'entrées que vous voulez récupérer. Essayer de récupérer plus d'entrées que le tableau n'en contient résultera dans une erreur de niveau E_WARNING.
 *
 * @return mixed	Si vous ne demandez qu'une seule entrée, array_rand() retourne l'index de la valeur. Sinon, elle retourne un tableau d'index. Cela vous permet de faire une sélection au hasard de clés, ou bien de valeurs.
 *
 */
if(!function_exists('array_randThis'))
{
    function array_randThis($input, $num_req = 1)
    {
		$input = (array)$input;
		$num_req = (int)$num_req;

		return array_rand($input, $num_req);
    }
}

/**
 * array_reduceThis
 *
 * Réduit itérativement un tableau.
 *
 * @link http://php.net/manual/fr/function.array-reduce.php Documentation pour array_reduce.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param array    $input    Le tableau d'entrée.
 * @param callable     $function    La fonction de rappel.
 * @param mixed     $initial    Si l'argument optionnel initial est disponible, il sera utilisé pour initialiser le processus, ou bien comme valeur finale si le tableau est vide.
 *
 * @return mixed	Retourne la valeur résultante.
 *
 */
if(!function_exists('array_reduceThis'))
{
    function array_reduceThis($input, $function, $initial = NULL)
    {
		$input = (array)$input;
		$function = is_callable($function) ? $function : NULL;
		$initial = ($initial);
		return array_reduce($input, $function, $initial);
    }
}

/**
 * array_replaceThis
 *
 * Remplace les éléments d'un tableau par ceux d'autres tableaux.
 *
 * @link http://php.net/manual/fr/function.array-replace.php Documentation pour array_replace.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param array    $array    Le tableau dans lequel les éléments sont remplacés.
 * @param array    $array1    Les tableaux dont les valeurs finiront dans le premier tableau.
 * @param array    $item    Plus de tableaux depuis lesquels les éléments peuvent être extraits. Les valeurs des futurs tableaux écraseront les valeurs précédentes.
 *
 * @return array	Retourne un tableau ou NULL si une erreur survient.
 *
 */
if(!function_exists('array_replaceThis'))
{
    function array_replaceThis($array, $array1, $array2 = NULL)
    {
		$array = (array)$array;
		$array1 = (array)$array1;
		$array2 = (array)$array2;

		return array_replace($array, $array1, $array2);
    }
}

/**
 * array_replace_recursiveThis
 *
 * Replaces elements from passed arrays into the first array recursively.
 *
 * @link http://php.net/manual/fr/function.array-replace-recursive.php Documentation pour array_replace_recursive.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param array    $array    Le tableau dans lequel les éléments sont remplacés.
 * @param array    $array1    Les tableaux dont les valeurs finiront dans le premier tableau.
 * @param array    $item    Optionnel. Plus de tableaux depuis lesquels les éléments peuvent être extraits.
 *
 * @return array	Retourne un tableau ou NULL si une erreur survient.
 *
 */
if(!function_exists('array_replace_recursiveThis'))
{
    function array_replace_recursiveThis($array, $array1, $array2 = NULL)
    {
		$array = (array)$array;
		$array1 = (array)$array1;
		$array2 = (array)$array2;

		return array_replace_recursive($array, $array1, $array2);
    }
}

/**
 * array_reverseThis
 *
 * Inverse l'ordre des éléments d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-reverse.php Documentation pour array_reverse.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $array    Le tableau d'entrée.
 * @param bool     $preserve_keys    Si définit à TRUE, les clés numériques seront préservées. Les clés non-numériques ne seront pas affectées par cette configuration, et seront toujours préservées.
 *
 * @return array	Retourne le tableau dans l'ordre inverse.
 *
 */
if(!function_exists('array_reverseThis'))
{
    function array_reverseThis($array, $preserve_keys = false)
    {
		$array = (array)$array;
		$preserve_keys = (bool)$preserve_keys;

		return array_reverse($array, $preserve_keys);
    }
}

/**
 * array_searchThis
 *
 * Recherche dans un tableau la clé associée à une valeur.
 *
 * @link http://php.net/manual/fr/function.array-search.php Documentation pour array_search.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param mixed     $needle    La valeur à chercher.
 * @param array    $haystack    Le tableau.
 * @param bool     $strict    Si le troisième paramètre strict vaut TRUE, alors array_search() cherchera des éléments identiques dans haystack. Cela signifie que cette fonction s'assurera aussi que le type de needle est le même que celui de la valeur trouvée dans haystack, et que les objets proviennent de la même instance.
 *
 * @return mixed	Retourne la clé pour needle si elle est trouvée dans le tableau, FALSE sinon.
 *
 */
if(!function_exists('array_searchThis'))
{
    function array_searchThis($needle, $haystack, $strict = false)
    {
		$needle = ($needle);
		$haystack = (array)$haystack;
		$strict = (bool)$strict;

		return array_search($needle, $haystack, $strict);
    }
}

/**
 * array_shiftThis
 *
 * Dépile un élément au début d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-shift.php Documentation pour array_shift.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 *
 * @return mixed	Retourne la valeur dépilée, ou NULL si le tableau est vide ou si la valeur d'entrée n'est pas un tableau.
 *
 */
if(!function_exists('array_shiftThis'))
{
    function array_shiftThis(&$array)
    {
		$array = (array)$array;

		return array_shift($array);
    }
}

/**
 * array_sliceThis
 *
 * Extrait une portion de tableau.
 *
 * @link http://php.net/manual/fr/function.array-slice.php Documentation pour array_slice.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $array    Le tableau d'entrée.
 * @param int      $offset    Si offset est non-négatif, la série commencera à cet offset dans le tableau array. Si offset est négatif, cette série commencera à l'offset offset, mais en commençant à la fin du tableau array.
 * @param int      $length    Si length est fourni et positif, alors la série retournée aura autant d'éléments. Si le tableau est moins long que length, alors seuls les éléments de tableaux disponibles seront présents. Si length est fourni et négatif, alors la série contiendra les éléments depuis l'offset offset jusqu'à length éléments en partant de la fin. Si length est omis, la séquence lira tous les éléments du tableau, depuis l'offset précisé jusqu'à la fin du tableau.
 * @param bool     $preserve_keys    Notez que, par défaut, la fonction array_slice() va réordonner et réinitialiser les indices numériques du tableau. Vous pouvez modifier ce comportement en définissant le paramètre preserve_keys à TRUE.
 *
 * @return array	Retourne la portion du tableau.
 *
 */
if(!function_exists('array_sliceThis'))
{
    function array_sliceThis($array, $offset, $length = NULL, $preserve_keys = false)
    {
		$array = (array)$array;
		$offset = (int)$offset;
		$length = (int)$length;
		$preserve_keys = (bool)$preserve_keys;

		return array_slice($array, $offset, $length, $preserve_keys);
    }
}

/**
 * array_spliceThis
 *
 * Efface et remplace une portion de tableau.
 *
 * @link http://php.net/manual/fr/function.array-splice.php Documentation pour array_splice.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$input    Le tableau d'entrée.
 * @param int      $offset    Si offset est positif, la série commencera à cet offset dans le tableau input. Si offset est négatif, cette série commencera à l'offset offset, mais en commençant à la fin du tableau input.
 * @param int      $length    Si length est donné et positif, alors la série aura autant d'éléments. Si length est donné et négatif, les éléments seront pris dans l'ordre inverse. Si length est omis, la séquence lira tous les éléments du tableau, depuis l'offset offset jusqu'à la fin du tableau. Conseil : pour supprimer tous les éléments du tableau depuis offset jusqu'à la fin, même si un tableau de remplacement replacement est spécifié, utilisez count($input) à la place de length.
 * @param mixed     $replacement    Si replacement est précisé, alors les éléments supprimés sont remplacés par les éléments de ce tableau. Si l'offset et length sont tels que la taille du tableau ne change pas, alors les éléments du tableau de remplacement replacement sont insérés à partir de l'offset offset. Notez que les clés numériques de input ne sont pas préservées. Si le tableau de remplacement replacement ne contient qu'un seul élément, il n'est pas obligatoire de forcer le type en tableau avec array(), à moins que cette variable ne soit elle-même un tableau, un objet ou NULL.
 *
 * @return array	Retourne le tableau contenant les éléments supprimés.
 *
 */
if(!function_exists('array_spliceThis'))
{
    function array_spliceThis(&$input, $offset, $length = 0, $replacement = NULL)
    {
		$input = (array)$input;
		$offset = (int)$offset;
		$length = (int)$length;
		$replacement = ($replacement);
		return array_splice($input, $offset, $length, $replacement);
    }
}

/**
 * array_sumThis
 *
 * Calcule la somme des valeurs du tableau.
 *
 * @link http://php.net/manual/fr/function.array-sum.php Documentation pour array_sum.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param array    $array    Le tableau d'entrée.
 *
 * @return number	Retourne la somme des valeurs, sous la forme d'un entier ou d'un nombre décimal.
 *
 */
if(!function_exists('array_sumThis'))
{
    function array_sumThis($array)
    {
		$array = (array)$array;

		return array_sum($array);
    }
}

/**
 * array_udiffThis
 *
 * Calcule la différence entre deux tableaux en utilisant une fonction rappel.
 *
 * @link http://php.net/manual/fr/function.array-udiff.php Documentation pour array_udiff.
 *
 * @version PHP 5
 *
 * @param array    $array1    Le premier tableau.
 * @param array    $array2    Le second tableau.
 * @param array    $item    La fonction de comparaison. La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 * @param callable     $data_compare_func
 *
 * @return array	Retourne un tableau contenant toutes les valeurs du tableau array1 qui ne sont pas présentes dans aucun autre argument.
 *
 */
if(!function_exists('array_udiffThis'))
{
    function array_udiffThis($array1, $array2, $array3, $data_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$data_compare_func = is_callable($data_compare_func) ? $data_compare_func : NULL;

		return array_udiff($array1, $array2, $array3, $data_compare_func);
    }
}

/**
 * array_udiff_assocThis
 *
 * Calcule la différence entre des tableaux avec vérification des index, compare les données avec une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.array-udiff-assoc.php Documentation pour array_udiff_assoc.
 *
 * @version PHP 5
 *
 * @param array    $array1    Le premier tableau.
 * @param array    $array2    Le second tableau.
 * @param array    $item    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 * @param callable     $data_compare_func
 *
 * @return array	array_udiff_assoc() retourne un tableau contenant toutes les valeurs de array1 qui ne sont présentes dans aucun autre des arguments array2, .... Notez que les clés sont utilisées dans les comparaisons contrairement à array_diff() et array_udiff(). La comparaison des données est effectuée en utilisant une fonction de rappel fournie par l'utilisateur, data_compare_func. Ce comportement est différent de celui de array_diff_assoc() qui utilise une fonction de comparaison interne.
 *
 */
if(!function_exists('array_udiff_assocThis'))
{
    function array_udiff_assocThis($array1, $array2, $array3, $data_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$data_compare_func = is_callable($data_compare_func) ? $data_compare_func : NULL;

		return array_udiff_assoc($array1, $array2, $array3, $data_compare_func);
    }
}

/**
 * array_udiff_uassocThis
 *
 * Calcule la différence de deux tableaux associatifs, compare les données et les index avec une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.array-udiff-uassoc.php Documentation pour array_udiff_uassoc.
 *
 * @version PHP 5
 *
 * @param array    $array1    Le premier tableau.
 * @param array    $array2    Le second tableau.
 * @param array    $item    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 * @param callable     $data_compare_func    La comparaison des clés (indices) est effectuée par la fonction de rappel key_compare_func. Ce comportement est différent de celui de array_udiff_assoc(), vu que cette dernière utilise une fonction interne pour comparer les indices.
 * @param callable     $key_compare_func
 *
 * @return array	Retourne un tableau contenant toutes les valeurs du tableau array1 qui ne sont pas présentes dans aucun autre argument.
 *
 */
if(!function_exists('array_udiff_uassocThis'))
{
    function array_udiff_uassocThis($array1, $array2, $array3, $data_compare_func, $key_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$data_compare_func = is_callable($data_compare_func) ? $data_compare_func : NULL;
		$key_compare_func = is_callable($key_compare_func) ? $key_compare_func : NULL;

		return array_udiff_uassoc($array1, $array2, $array3, $data_compare_func, $key_compare_func);
    }
}

/**
 * array_uintersectThis
 *
 * Calcule l'intersection de deux tableaux, compare les données en utilisant une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.array-uintersect.php Documentation pour array_uintersect.
 *
 * @version PHP 5
 *
 * @param array    $array1    Le premier tableau.
 * @param array    $array2    Le second tableau.
 * @param array    $item    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 * @param callable     $data_compare_func
 *
 * @return array	Retourne un tableau contenant toutes les valeurs du tableau array1 qui sont présentes dans tous les arguments.
 *
 */
if(!function_exists('array_uintersectThis'))
{
    function array_uintersectThis($array1, $array2, $array3, $data_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$data_compare_func = is_callable($data_compare_func) ? $data_compare_func : NULL;

		return array_uintersect($array1, $array2, $array3, $data_compare_func);
    }
}

/**
 * array_uintersect_assocThis
 *
 * Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les données en utilisant une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.array-uintersect-assoc.php Documentation pour array_uintersect_assoc.
 *
 * @version PHP 5
 *
 * @param array    $array1    Le premier tableau.
 * @param array    $array2    Le second tableau.
 * @param array    $item    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 * @param callable     $data_compare_func
 *
 * @return array	Retourne un tableau contenant toutes les valeurs du tableau array1 qui sont présentes dans tous les autres arguments.
 *
 */
if(!function_exists('array_uintersect_assocThis'))
{
    function array_uintersect_assocThis($array1, $array2, $array3, $data_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$data_compare_func = is_callable($data_compare_func) ? $data_compare_func : NULL;

		return array_uintersect_assoc($array1, $array2, $array3, $data_compare_func);
    }
}

/**
 * array_uintersect_uassocThis
 *
 * Calcule l'intersection de deux tableaux avec des tests sur l'index, compare les données et les indexes des deux tableaux en utilisant une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.array-uintersect-uassoc.php Documentation pour array_uintersect_uassoc.
 *
 * @version PHP 5
 *
 * @param array    $array1    Le premier tableau.
 * @param array    $array2    Le second tableau.
 * @param array    $item    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 * @param callable     $data_compare_func    Fonction de rappel utilisée pour la comparaison des clés.
 * @param callable     $key_compare_func
 *
 * @return array	Retourne un tableau contenant toutes les valeurs du tableau array1 qui sont présentes dans tous les arguments.
 *
 */
if(!function_exists('array_uintersect_uassocThis'))
{
    function array_uintersect_uassocThis($array1, $array2, $array3, $data_compare_func, $key_compare_func = NULL)
    {
		$array1 = (array)$array1;
		$array2 = (array)$array2;
		$array3 = (array)$array3;
		$data_compare_func = is_callable($data_compare_func) ? $data_compare_func : NULL;
		$key_compare_func = is_callable($key_compare_func) ? $key_compare_func : NULL;

		return array_uintersect_uassoc($array1, $array2, $array3, $data_compare_func, $key_compare_func);
    }
}

/**
 * array_uniqueThis
 *
 * Dédoublonne un tableau.
 *
 * @link http://php.net/manual/fr/function.array-unique.php Documentation pour array_unique.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param array    $array    Le tableau d'entrée.
 * @param int      $sort_flags    Le second paramètre optionnel sort_flags peut être utilisé pour modifier la façon dont s'effectue le tri en utilisant les valeurs suivantes : Drapeau de type de tri :
 *
 * @return array	Retourne le tableau filtré.
 *
 */
if(!function_exists('array_uniqueThis'))
{
    function array_uniqueThis($array, $sort_flags = SORT_STRING)
    {
		$array = (array)$array;
		$sort_flags = (int)$sort_flags;

		return array_unique($array, $sort_flags);
    }
}

/**
 * array_unshiftThis
 *
 * Empile un ou plusieurs éléments au début d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-unshift.php Documentation pour array_unshift.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param mixed     $var    Les variables à ajouter.
 * @param mixed     $item
 *
 * @return int	Retourne le nouveau nombre d'éléments du tableau array.
 *
 */
if(!function_exists('array_unshiftThis'))
{
    function array_unshiftThis(&$array, $var, $var1 = NULL)
    {
		$array = (array)$array;
		$var = ($var);
		$var1 = ($var1);
		return array_unshift($array, $var, $var1);
    }
}

/**
 * array_valuesThis
 *
 * Retourne toutes les valeurs d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-values.php Documentation pour array_values.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $input    Le tableau.
 *
 * @return array	Retourne un tableau de valeurs indexé.
 *
 */
if(!function_exists('array_valuesThis'))
{
    function array_valuesThis($input)
    {
		$input = (array)$input;

		return array_values($input);
    }
}

/**
 * array_walkThis
 *
 * Exécute une fonction sur chacun des éléments d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-walk.php Documentation pour array_walk.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param callable     $funcname    Typiquement, funcname prend deux paramètres. La valeur du paramètre input étant le premier et la clé/index, le second. Seules les valeurs du array peuvent être modifiées; sa structure ne peut pas, c'est à dire que vous ne pouvez ajouter, supprimer ou réordonner des éléments. Si la fonction de callback ne respecte pas cette règle, le comportement va devenir indéfini et imprévisible.
 * @param mixed     $userdata    Si le paramètre optionnel userdata est fourni, il sera passé comme troisième paramètre à la fonction définie par l'utilisateur funcname.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('array_walkThis'))
{
    function array_walkThis(&$array, $funcname, $userdata = NULL)
    {
		$array = (array)$array;
		$funcname = is_callable($funcname) ? $funcname : NULL;
		$userdata = ($userdata);
		return array_walk($array, $funcname, $userdata);
    }
}

/**
 * array_walk_recursiveThis
 *
 * Applique une fonction de rappel récursivement à chaque membre d'un tableau.
 *
 * @link http://php.net/manual/fr/function.array-walk-recursive.php Documentation pour array_walk_recursive.
 *
 * @version PHP 5
 *
 * @param array    &$input    Le tableau d'entrée.
 * @param callable     $funcname    Typiquement, funcname prend 2 paramètres. Le paramètre input, représentant la valeur, est le premier, l'index/clé, le deuxième.
 * @param mixed     $userdata    Si le paramètre optionnel userdata est fourni, il sera passé comme troisième paramètre à la fonction de rappel funcname.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('array_walk_recursiveThis'))
{
    function array_walk_recursiveThis(&$input, $funcname, $userdata = NULL)
    {
		$input = (array)$input;
		$funcname = is_callable($funcname) ? $funcname : NULL;
		$userdata = ($userdata);
		return array_walk_recursive($input, $funcname, $userdata);
    }
}

/**
 * arsortThis
 *
 * Trie un tableau en ordre inverse.
 *
 * @link http://php.net/manual/fr/function.arsort.php Documentation pour arsort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param int      $sort_flags    Vous pouvez modifier le comportement de cette fonction en utilisant le paramètre optionnel sort_flags. Pour plus de détails, voyez la fonction sort().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('arsortThis'))
{
    function arsortThis(&$array, $sort_flags = SORT_REGULAR)
    {
		$array = (array)$array;
		$sort_flags = (int)$sort_flags;

		return arsort($array, $sort_flags);
    }
}

/**
 * asinThis
 *
 * Arc sinus.
 *
 * @link http://php.net/manual/fr/function.asin.php Documentation pour asin.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	L'arc sinus de arg, en radians.
 *
 */
if(!function_exists('asinThis'))
{
    function asinThis($arg)
    {
		$arg = (float)$arg;

		return asin($arg);
    }
}

/**
 * asinhThis
 *
 * Arc sinus hyperbolique.
 *
 * @link http://php.net/manual/fr/function.asinh.php Documentation pour asinh.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	L'arc sinus hyperbolique de arg
 *
 */
if(!function_exists('asinhThis'))
{
    function asinhThis($arg)
    {
		$arg = (float)$arg;

		return asinh($arg);
    }
}

/**
 * asortThis
 *
 * Trie un tableau et conserve l'association des index.
 *
 * @link http://php.net/manual/fr/function.asort.php Documentation pour asort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param int      $sort_flags    Vous pouvez modifier le comportement de cette fonction en utilisant le paramètre optionnel sort_flags. Pour plus de détails, voyez le manuel pour la fonction sort().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('asortThis'))
{
    function asortThis(&$array, $sort_flags = SORT_REGULAR)
    {
		$array = (array)$array;
		$sort_flags = (int)$sort_flags;

		return asort($array, $sort_flags);
    }
}

/**
 * assertThis
 *
 * Vérifie si une assertion est fausse.
 *
 * @link http://php.net/manual/fr/function.assert.php Documentation pour assert.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $assertion    L'assertion.
 * @param string   $description    Une description optionnelle, qui sera incluse dans le message d'échec si l'assertion échoue.
 *
 * @return bool	FALSE si l'assertion est fausse, TRUE sinon.
 *
 */
if(!function_exists('assertThis'))
{
    function assertThis($assertion, $description = NULL)
    {
		$assertion = ($assertion);
		$description = (string)$description;

		return assert($assertion, $description);
    }
}

/**
 * assert_optionsThis
 *
 * Fixe et lit différentes options d'assertions.
 *
 * @link http://php.net/manual/fr/function.assert-options.php Documentation pour assert_options.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $what
 * @param mixed     $value    Une nouvelle valeur, optionnelle, pour l'option.
 *
 * @return mixed	Retourne la valeur originale de l'option, ou bien FALSE en cas d'erreur.
 *
 */
if(!function_exists('assert_optionsThis'))
{
    function assert_optionsThis($what, $value = NULL)
    {
		$what = (int)$what;
		$value = ($value);
		return assert_options($what, $value);
    }
}

/**
 * atanThis
 *
 * Arc tangente.
 *
 * @link http://php.net/manual/fr/function.atan.php Documentation pour atan.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	L'arc tangent de arg, en radians.
 *
 */
if(!function_exists('atanThis'))
{
    function atanThis($arg)
    {
		$arg = (float)$arg;

		return atan($arg);
    }
}

/**
 * atan2This
 *
 * Arc tangent de deux variables.
 *
 * @link http://php.net/manual/fr/function.atan2.php Documentation pour atan2.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $y    le dividende
 * @param float    $x    le diviseur
 *
 * @return float	L'arc tangent de deux variables y/x, en radians.
 *
 */
if(!function_exists('atan2This'))
{
    function atan2This($y, $x)
    {
		$y = (float)$y;
		$x = (float)$x;

		return atan2($y, $x);
    }
}

/**
 * atanhThis
 *
 * Arc tangente hyperbolique.
 *
 * @link http://php.net/manual/fr/function.atanh.php Documentation pour atanh.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	L'arc tangente hyperbolique de arg.
 *
 */
if(!function_exists('atanhThis'))
{
    function atanhThis($arg)
    {
		$arg = (float)$arg;

		return atanh($arg);
    }
}

/**
 * base64_decodeThis
 *
 * Décode une chaîne en MIME base64.
 *
 * @link http://php.net/manual/fr/function.base64-decode.php Documentation pour base64_decode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $data    Les données à décoder.
 * @param bool     $strict    Retourne FALSE si l'entrée contient des caractères hors de l'alphabet base64.
 *
 * @return string	Retourne les données décodées ou FALSE si une erreur survient. Les informations initiales peuvent être binaires.
 *
 */
if(!function_exists('base64_decodeThis'))
{
    function base64_decodeThis($data, $strict = false)
    {
		$data = (string)$data;
		$strict = (bool)$strict;

		return base64_decode($data, $strict);
    }
}

/**
 * base64_encodeThis
 *
 * Encode une chaîne en MIME base64.
 *
 * @link http://php.net/manual/fr/function.base64-encode.php Documentation pour base64_encode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $data    Les données à encoder.
 *
 * @return string	Les données encodées, sous la forme d'une chaîne de caractères ou FALSE si une erreur survient.
 *
 */
if(!function_exists('base64_encodeThis'))
{
    function base64_encodeThis($data)
    {
		$data = (string)$data;

		return base64_encode($data);
    }
}

/**
 * base_convertThis
 *
 * Convertit un nombre entre des bases arbitraires.
 *
 * @link http://php.net/manual/fr/function.base-convert.php Documentation pour base_convert.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $number    Le nombre à convertir
 * @param int      $frombase    La base number dans laquelle il est
 * @param int      $tobase    La base dans laquelle on doit convertir le nombre number
 *
 * @return string	Le nombre number converti dans la base tobase
 *
 */
if(!function_exists('base_convertThis'))
{
    function base_convertThis($number, $frombase, $tobase)
    {
		$number = (string)$number;
		$frombase = (int)$frombase;
		$tobase = (int)$tobase;

		return base_convert($number, $frombase, $tobase);
    }
}

/**
 * basenameThis
 *
 * Retourne le nom du fichier dans un chemin.
 *
 * @link http://php.net/manual/fr/function.basename.php Documentation pour basename.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Un chemin. Sous Windows, les caractères (/) et antislash (\) sont utilisés comme séparateurs de dossier. Sous les autres OS, seul le caractère slash (/) est utilisé.
 * @param string   $suffix    Si suffix est fourni, le suffixe sera aussi supprimé.
 *
 * @return string	Retourne le nom de base du chemin path.
 *
 */
if(!function_exists('basenameThis'))
{
    function basenameThis($path, $suffix = NULL)
    {
		$path = (string)$path;
		$suffix = (string)$suffix;

		return basename($path, $suffix);
    }
}

/**
 * bcaddThis
 *
 * Additionne deux nombres de grande taille.
 *
 * @link http://php.net/manual/fr/function.bcadd.php Documentation pour bcadd.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande gauche, sous la forme d'une chaîne de caractères.
 * @param string   $right_operand    L'opérande droite, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Ce paramètre optionnel est utilisé pour définir le nombre de digits après la décimale à placer dans le résultat. Vous pouvez également définir la précision globale par défaut pour toutes les fonctions en utilisant la fonction bcscale().
 *
 * @return string	La somme des deux opérandes, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('bcaddThis'))
{
    function bcaddThis($left_operand, $right_operand, $scale = NULL)
    {
		$left_operand = (string)$left_operand;
		$right_operand = (string)$right_operand;
		$scale = (int)$scale;

		return bcadd($left_operand, $right_operand, $scale);
    }
}

/**
 * bccompThis
 *
 * Compare deux nombres de grande taille.
 *
 * @link http://php.net/manual/fr/function.bccomp.php Documentation pour bccomp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande de gauche, sous la forme d'une chaîne de caractères.
 * @param string   $right_operand    L'opérande de droite, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Le paramètre optionnel scale est utilisé pour définir le nombre de digits après la décimale qui sera utilisé dans la comparaison.
 *
 * @return int	Retourne 0 si les deux opérandes sont égaux, 1 si l'opérande left_operand est plus grand que l'opérande right_operand, -1 sinon.
 *
 */
if(!function_exists('bccompThis'))
{
    function bccompThis($left_operand, $right_operand, $scale = NULL)
    {
		$left_operand = (string)$left_operand;
		$right_operand = (string)$right_operand;
		$scale = (int)$scale;

		return bccomp($left_operand, $right_operand, $scale);
    }
}

/**
 * bcdivThis
 *
 * Divise deux nombres de grande taille.
 *
 * @link http://php.net/manual/fr/function.bcdiv.php Documentation pour bcdiv.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande de gauche, sous la forme d'une chaîne de caractères.
 * @param string   $right_operand    L'opérande de droite, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Ce paramètre optionnel est utilisé pour définir le nombre de digits après la décimale à placer dans le résultat. Vous pouvez également définir la précision globale par défaut pour toutes les fonctions en utilisant la fonction bcscale().
 *
 * @return string	Retourne le résultat de la division, sous la forme d'une chaîne de caractères, ou NULL si l'opérande right_operand vaut 0.
 *
 */
if(!function_exists('bcdivThis'))
{
    function bcdivThis($left_operand, $right_operand, $scale = NULL)
    {
		$left_operand = (string)$left_operand;
		$right_operand = (string)$right_operand;
		$scale = (int)$scale;

		return bcdiv($left_operand, $right_operand, $scale);
    }
}

/**
 * bcmodThis
 *
 * Retourne le reste d'une division entre nombres de grande taille.
 *
 * @link http://php.net/manual/fr/function.bcmod.php Documentation pour bcmod.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande de gauche, sous la forme d'une chaîne de caractères.
 * @param string   $modulus    Le modulo, sous la forme d'une chaîne de caractères.
 *
 * @return string	Retourne le modulo, sous la forme d'une chaîne de caractères, ou NULL si modulus vaut 0.
 *
 */
if(!function_exists('bcmodThis'))
{
    function bcmodThis($left_operand, $modulus)
    {
		$left_operand = (string)$left_operand;
		$modulus = (string)$modulus;

		return bcmod($left_operand, $modulus);
    }
}

/**
 * bcmulThis
 *
 * Multiplie deux nombres de grande taille.
 *
 * @link http://php.net/manual/fr/function.bcmul.php Documentation pour bcmul.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande de gauche, sous la forme d'une chaîne de caractères.
 * @param string   $right_operand    L'opérande de droite, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Ce paramètre optionnel est utilisé pour définir le nombre de digits après la décimale à placer dans le résultat. Vous pouvez également définir la précision globale par défaut pour toutes les fonctions en utilisant la fonction bcscale().
 *
 * @return string	Retourne le résultat, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('bcmulThis'))
{
    function bcmulThis($left_operand, $right_operand, $scale = NULL)
    {
		$left_operand = (string)$left_operand;
		$right_operand = (string)$right_operand;
		$scale = (int)$scale;

		return bcmul($left_operand, $right_operand, $scale);
    }
}

/**
 * bcpowThis
 *
 * Élève un nombre à une puissance donnée.
 *
 * @link http://php.net/manual/fr/function.bcpow.php Documentation pour bcpow.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande de gauche, sous la forme d'une chaîne de caractères.
 * @param string   $right_operand    L'opérande de droite, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Ce paramètre optionnel est utilisé pour définir le nombre de digits après la décimale à placer dans le résultat. Vous pouvez également définir la précision globale par défaut pour toutes les fonctions en utilisant la fonction bcscale().
 *
 * @return string	Retourne le résultat, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('bcpowThis'))
{
    function bcpowThis($left_operand, $right_operand, $scale = NULL)
    {
		$left_operand = (string)$left_operand;
		$right_operand = (string)$right_operand;
		$scale = (int)$scale;

		return bcpow($left_operand, $right_operand, $scale);
    }
}

/**
 * bcpowmodThis
 *
 * Calcule le reste modulo d'un nombre élevé à une puissance.
 *
 * @link http://php.net/manual/fr/function.bcpowmod.php Documentation pour bcpowmod.
 *
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande de gauche, sous la forme d'une chaîne de caractères.
 * @param string   $right_operand    L'opérande de droite, sous la forme d'une chaîne de caractères.
 * @param string   $modulus    Le modulo, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Ce paramètre optionnel est utilisé pour définir le nombre de digits après la décimale à placer dans le résultat. Vous pouvez également définir la précision globale par défaut pour toutes les fonctions en utilisant la fonction bcscale().
 *
 * @return string	Retourne le résultat, sous la forme d'une chaîne de caractères, ou NULL si modulus vaut 0.
 *
 */
if(!function_exists('bcpowmodThis'))
{
    function bcpowmodThis($left_operand, $right_operand, $modulus, $scale = NULL)
    {
		$left_operand = (string)$left_operand;
		$right_operand = (string)$right_operand;
		$modulus = (string)$modulus;
		$scale = (int)$scale;

		return bcpowmod($left_operand, $right_operand, $modulus, $scale);
    }
}

/**
 * bcscaleThis
 *
 * Spécifie le nombre de décimales par défaut pour toutes les fonctions.
 *
 * @link http://php.net/manual/fr/function.bcscale.php Documentation pour bcscale.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $scale    Le facteur de précision.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('bcscaleThis'))
{
    function bcscaleThis($scale)
    {
		$scale = (int)$scale;

		return bcscale($scale);
    }
}

/**
 * bcsqrtThis
 *
 * Récupère la racine carrée d'un nombre de grande taille.
 *
 * @link http://php.net/manual/fr/function.bcsqrt.php Documentation pour bcsqrt.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $operand    L'opérande, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Ce paramètre optionnel est utilisé pour définir le nombre de digits après la décimale à placer dans le résultat. Vous pouvez également définir la précision globale par défaut pour toutes les fonctions en utilisant la fonction bcscale().
 *
 * @return string	Retourne la racine carrée de l'opérande, sous la forme d'une chaîne de caractères, ou NULL si l'opérande operand est négatif.
 *
 */
if(!function_exists('bcsqrtThis'))
{
    function bcsqrtThis($operand, $scale = NULL)
    {
		$operand = (string)$operand;
		$scale = (int)$scale;

		return bcsqrt($operand, $scale);
    }
}

/**
 * bcsubThis
 *
 * Soustrait un nombre de grande taille d'un autre.
 *
 * @link http://php.net/manual/fr/function.bcsub.php Documentation pour bcsub.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $left_operand    L'opérande de gauche, sous la forme d'une chaîne de caractères.
 * @param string   $right_operand    L'opérande de droite, sous la forme d'une chaîne de caractères.
 * @param int      $scale    Ce paramètre optionnel est utilisé pour définir le nombre de digits après la décimale à placer dans le résultat. Vous pouvez également définir la précision globale par défaut pour toutes les fonctions en utilisant la fonction bcscale().
 *
 * @return string	Le résultat de la soustraction, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('bcsubThis'))
{
    function bcsubThis($left_operand, $right_operand, $scale = NULL)
    {
		$left_operand = (string)$left_operand;
		$right_operand = (string)$right_operand;
		$scale = (int)$scale;

		return bcsub($left_operand, $right_operand, $scale);
    }
}

/**
 * bin2hexThis
 *
 * Convertit des données binaires en représentation hexadécimale.
 *
 * @link http://php.net/manual/fr/function.bin2hex.php Documentation pour bin2hex.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    Une chaîne de caractères.
 *
 * @return string	Retourne la représentation hexadécimale de la chaîne fournie.
 *
 */
if(!function_exists('bin2hexThis'))
{
    function bin2hexThis($str)
    {
		$str = (string)$str;

		return bin2hex($str);
    }
}

/**
 * bind_textdomain_codesetThis
 *
 * Spécifie le jeu de caractères utilisé pour les messages du domaine DOMAIN.
 *
 * @link http://php.net/manual/fr/function.bind-textdomain-codeset.php Documentation pour bind_textdomain_codeset.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $domain    Le domaine
 * @param string   $codeset    Le jeu de caractères
 *
 * @return string	Une chaîne de caractères en cas de succès.
 *
 */
if(!function_exists('bind_textdomain_codesetThis'))
{
    function bind_textdomain_codesetThis($domain, $codeset)
    {
		$domain = (string)$domain;
		$codeset = (string)$codeset;

		return bind_textdomain_codeset($domain, $codeset);
    }
}

/**
 * bindecThis
 *
 * Convertit de binaire en décimal.
 *
 * @link http://php.net/manual/fr/function.bindec.php Documentation pour bindec.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $binary_string    La chaîne binaire à convertir.
 *
 * @return number	La valeur décimale de binary_string
 *
 */
if(!function_exists('bindecThis'))
{
    function bindecThis($binary_string)
    {
		$binary_string = (string)$binary_string;

		return bindec($binary_string);
    }
}

/**
 * bindtextdomainThis
 *
 * Fixe le chemin d'un domaine.
 *
 * @link http://php.net/manual/fr/function.bindtextdomain.php Documentation pour bindtextdomain.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $domain    Le domaine
 * @param string   $directory    Le chemin vers le dossier
 *
 * @return string	Le chemin complet vers le domaine.
 *
 */
if(!function_exists('bindtextdomainThis'))
{
    function bindtextdomainThis($domain, $directory)
    {
		$domain = (string)$domain;
		$directory = (string)$directory;

		return bindtextdomain($domain, $directory);
    }
}

/**
 * boolvalThis
 *
 * Récupère la valeur booléenne d'une variable.
 *
 * @link http://php.net/manual/fr/function.boolval.php Documentation pour boolval.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param mixed     $var    La valeur scalaire qui sera convertie en booléen.
 *
 * @return boolean	La valeur booléenne du paramètre var.
 *
 */
if(!function_exists('boolvalThis'))
{
    function boolvalThis($var)
    {
		$var = ($var);
		return boolval($var);
    }
}

/**
 * bzcloseThis
 *
 * Ferme un fichier bzip2.
 *
 * @link http://php.net/manual/fr/function.bzclose.php Documentation pour bzclose.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $bz    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès par la fonction bzopen().
 *
 * @return int	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('bzcloseThis'))
{
    function bzcloseThis($bz)
    {
		$bz = is_resource($bz) ? $bz : NULL;

		return bzclose($bz);
    }
}

/**
 * bzcompressThis
 *
 * Compresse une chaîne avec bzip2.
 *
 * @link http://php.net/manual/fr/function.bzcompress.php Documentation pour bzcompress.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $source    La chaîne à compresser.
 * @param int      $blocksize    Spécifie la taille de bloc utilisée durant la compression et doit être un nombre de 1 à 9, sachant que 9 représente la meilleure compression, mais qu'elle utilise plus de ressources pour se faire.
 * @param int      $workfactor    Contrôle le comportement de la compression dans les pires cas de données hautement répétitives. Cette valeur peut aller de 0 à 250 (0 est une valeur spéciale). En dehors de workfactor, le résultat sera le même.
 *
 * @return mixed	La chaîne compressée ou un numéro d'erreur si une erreur survient.
 *
 */
if(!function_exists('bzcompressThis'))
{
    function bzcompressThis($source, $blocksize = 4, $workfactor = 0)
    {
		$source = (string)$source;
		$blocksize = (int)$blocksize;
		$workfactor = (int)$workfactor;

		return bzcompress($source, $blocksize, $workfactor);
    }
}

/**
 * bzdecompressThis
 *
 * Décompresse une chaîne bzip2.
 *
 * @link http://php.net/manual/fr/function.bzdecompress.php Documentation pour bzdecompress.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $source    La chaîne à décompresser.
 * @param int      $small    Si ce paramètre vaut TRUE, un autre algorithme de décompression sera utilisé : il consomme moins de mémoire (le maximum demandé tombe autour de 300 ko), mais fonctionne globalement à la moitié de la vitesse. Reportez-vous à la » documentation bzip2 pour plus de détails sur cette fonctionnalité.
 *
 * @return mixed	La chaîne décompressée ou un numéro d'erreur si une erreur survient.
 *
 */
if(!function_exists('bzdecompressThis'))
{
    function bzdecompressThis($source, $small = 0)
    {
		$source = (string)$source;
		$small = (int)$small;

		return bzdecompress($source, $small);
    }
}

/**
 * bzerrnoThis
 *
 * Retourne le code d'erreur bzip2.
 *
 * @link http://php.net/manual/fr/function.bzerrno.php Documentation pour bzerrno.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $bz    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès avec la fonction bzopen().
 *
 * @return int	Retourne le code erreur sous la forme d'un entier.
 *
 */
if(!function_exists('bzerrnoThis'))
{
    function bzerrnoThis($bz)
    {
		$bz = is_resource($bz) ? $bz : NULL;

		return bzerrno($bz);
    }
}

/**
 * bzerrorThis
 *
 * Retourne le numéro et le message d'erreur bzip2 dans un tableau.
 *
 * @link http://php.net/manual/fr/function.bzerror.php Documentation pour bzerror.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $bz    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès par la fonction bzopen().
 *
 * @return array	Retourne un tableau associatif, avec le code erreur dans l'entrée errno, et le message d'erreur dans l'entrée errstr.
 *
 */
if(!function_exists('bzerrorThis'))
{
    function bzerrorThis($bz)
    {
		$bz = is_resource($bz) ? $bz : NULL;

		return bzerror($bz);
    }
}

/**
 * bzerrstrThis
 *
 * Retourne le message d'erreur bzip2.
 *
 * @link http://php.net/manual/fr/function.bzerrstr.php Documentation pour bzerrstr.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $bz    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès par la fonction bzopen().
 *
 * @return string	Retourne une chaîne contenant le message d'erreur.
 *
 */
if(!function_exists('bzerrstrThis'))
{
    function bzerrstrThis($bz)
    {
		$bz = is_resource($bz) ? $bz : NULL;

		return bzerrstr($bz);
    }
}

/**
 * bzflushThis
 *
 * Force l'écriture de toutes les données compressées.
 *
 * @link http://php.net/manual/fr/function.bzflush.php Documentation pour bzflush.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $bz    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès par la fonction bzopen().
 *
 * @return int	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('bzflushThis'))
{
    function bzflushThis($bz)
    {
		$bz = is_resource($bz) ? $bz : NULL;

		return bzflush($bz);
    }
}

/**
 * bzopenThis
 *
 * Ouvre un fichier compressé avec bzip2.
 *
 * @link http://php.net/manual/fr/function.bzopen.php Documentation pour bzopen.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier à ouvrir.
 * @param string   $mode    Similaire à la fonction fopen(), seules les options 'r' (pour lecture), et 'w' (pour écriture) sont supportées. Toute autre option fera que la fonction retournera FALSE.
 *
 * @return resource	Si l'ouverture échoue, bzopen() retourne FALSE, sinon, il retourne un pointeur vers le fichier ouvert.
 *
 */
if(!function_exists('bzopenThis'))
{
    function bzopenThis($filename, $mode)
    {
		$filename = (string)$filename;
		$mode = (string)$mode;

		return bzopen($filename, $mode);
    }
}

/**
 * bzreadThis
 *
 * Lecture binaire d'un fichier bzip2.
 *
 * @link http://php.net/manual/fr/function.bzread.php Documentation pour bzread.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $bz    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès par la fonction bzopen().
 * @param int      $length    Si non spécifié, bzread() lira 1024 (non-compressé) octets à la fois. Un maximum de 8192 octets non-compressés sera lu à la fois.
 *
 * @return string	Retourne les données non-compressées ou FALSE si une erreur survient.
 *
 */
if(!function_exists('bzreadThis'))
{
    function bzreadThis($bz, $length = 1024)
    {
		$bz = is_resource($bz) ? $bz : NULL;
		$length = (int)$length;

		return bzread($bz, $length);
    }
}

/**
 * bzwriteThis
 *
 * Écriture binaire dans un fichier bzip2.
 *
 * @link http://php.net/manual/fr/function.bzwrite.php Documentation pour bzwrite.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $bz    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès par la fonction bzopen().
 * @param string   $data    Les données écrites.
 * @param int      $length    Si fourni, l'écriture s'arrêtera après que length (non-compressé) octets aient été écrits ou bien que la fin de data soit atteinte, le premier des deux qui survient.
 *
 * @return int	Retourne le nombre d'octets écrits ou FALSE si une erreur survient.
 *
 */
if(!function_exists('bzwriteThis'))
{
    function bzwriteThis($bz, $data, $length = NULL)
    {
		$bz = is_resource($bz) ? $bz : NULL;
		$data = (string)$data;
		$length = (int)$length;

		return bzwrite($bz, $data, $length);
    }
}

/**
 * cal_days_in_monthThis
 *
 * Retourne le nombre de jours dans un mois, pour une année et un calendrier donné.
 *
 * @link http://php.net/manual/fr/function.cal-days-in-month.php Documentation pour cal_days_in_month.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $calendar    Calendrier à utiliser pour le calcul
 * @param int      $month    Mois dans le calendrier sélectionné
 * @param int      $year    Année dans le calendrier sélectionné
 *
 * @return int	Le nombre de jours dans le mois sélectionné, dans le calendrier fourni.
 *
 */
if(!function_exists('cal_days_in_monthThis'))
{
    function cal_days_in_monthThis($calendar, $month, $year)
    {
		$calendar = (int)$calendar;
		$month = (int)$month;
		$year = (int)$year;

		return cal_days_in_month($calendar, $month, $year);
    }
}

/**
 * cal_from_jdThis
 *
 * Convertit le nombre de jours Julien en un calendrier spécifique.
 *
 * @link http://php.net/manual/fr/function.cal-from-jd.php Documentation pour cal_from_jd.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $jd    Jour Julien, sous la forme d'un entier
 * @param int      $calendar    Calendrier à utiliser
 *
 * @return array	Retourne un tableau contenant des informations sur le calendrier, comme le mois, le jour, l'année, le jour de la semaine, les noms abrégés et complets des jours de la semaine et du mois, et la date, sous la forme d'une chaîne de caractères "mois/jour/année".
 *
 */
if(!function_exists('cal_from_jdThis'))
{
    function cal_from_jdThis($jd, $calendar)
    {
		$jd = (int)$jd;
		$calendar = (int)$calendar;

		return cal_from_jd($jd, $calendar);
    }
}

/**
 * cal_infoThis
 *
 * Retourne des détails sur un calendrier.
 *
 * @link http://php.net/manual/fr/function.cal-info.php Documentation pour cal_info.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $calendar    Calendrier dont on souhaite des informations. Si aucun calendrier n'est spécifié, des informations sur tous les calendriers seront retournées.
 *
 */
if(!function_exists('cal_infoThis'))
{
    function cal_infoThis($calendar = -1)
    {
		$calendar = (int)$calendar;

		return cal_info($calendar);
    }
}

/**
 * cal_to_jdThis
 *
 * Convertit un calendrier en nombre de jours Julien.
 *
 * @link http://php.net/manual/fr/function.cal-to-jd.php Documentation pour cal_to_jd.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $calendar    Calendrier à convertir. Un parmi CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH ou CAL_FRENCH.
 * @param int      $month    Le mois, sous la forme d'un nombre. L'intervalle valide dépend du calendrier calendar
 * @param int      $day    Le jour, sous la forme d'un nombre. L'intervalle valide dépend du calendrier calendar
 * @param int      $year    L'année, sous la forme d'un nombre. L'intervalle valide dépend du calendrier calendar
 *
 * @return int	Le nombre de jour Julien.
 *
 */
if(!function_exists('cal_to_jdThis'))
{
    function cal_to_jdThis($calendar, $month, $day, $year)
    {
		$calendar = (int)$calendar;
		$month = (int)$month;
		$day = (int)$day;
		$year = (int)$year;

		return cal_to_jd($calendar, $month, $day, $year);
    }
}

/**
 * call_user_funcThis
 *
 * Appelle une fonction de rappel fournie par le premier argument.
 *
 * @link http://php.net/manual/fr/function.call-user-func.php Documentation pour call_user_func.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param callable     $callback    La fonction de rappel à appeler.
 * @param mixed     $parameter    0 ou plus de paramètres à passer à la fonction de rappel.
 * @param mixed     $item
 *
 * @return mixed	Retourne la valeur retournée par la fonction de rappel, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('call_user_funcThis'))
{
    function call_user_funcThis($callback, $parameter = NULL, $parameter1 = NULL)
    {
		$callback = is_callable($callback) ? $callback : NULL;
		$parameter = ($parameter);
		$parameter1 = ($parameter1);
		return call_user_func($callback, $parameter, $parameter1);
    }
}

/**
 * call_user_func_arrayThis
 *
 * Appelle une fonction de rappel avec les paramètres rassemblés en tableau.
 *
 * @link http://php.net/manual/fr/function.call-user-func-array.php Documentation pour call_user_func_array.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param callable     $callback    La fonction de rappel à appeler.
 * @param array    $param_arr    Les paramètres à passer à la fonction de rappel, sous la forme d'un tableau indexé.
 *
 * @return mixed	Retourne la valeur retournée par la fonction de rappel, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('call_user_func_arrayThis'))
{
    function call_user_func_arrayThis($callback, $param_arr)
    {
		$callback = is_callable($callback) ? $callback : NULL;
		$param_arr = (array)$param_arr;

		return call_user_func_array($callback, $param_arr);
    }
}

/**
 * ceilThis
 *
 * Arrondit au nombre supérieur.
 *
 * @link http://php.net/manual/fr/function.ceil.php Documentation pour ceil.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $value    La valeur à arrondir
 *
 * @return float	La valeur value arrondie à l'entier supérieur. La valeur retournée est un nombre à virgule flottante (nombre décimal), car ces nombres peuvent être plus grands que les entiers.
 *
 */
if(!function_exists('ceilThis'))
{
    function ceilThis($value)
    {
		$value = (float)$value;

		return ceil($value);
    }
}

/**
 * chdirThis
 *
 * Change de dossier.
 *
 * @link http://php.net/manual/fr/function.chdir.php Documentation pour chdir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $directory    Le nouveau répertoire courant
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('chdirThis'))
{
    function chdirThis($directory)
    {
		$directory = (string)$directory;

		return chdir($directory);
    }
}

/**
 * checkdateThis
 *
 * Valide une date grégorienne.
 *
 * @link http://php.net/manual/fr/function.checkdate.php Documentation pour checkdate.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $month    Le mois doit être compris entre 1 et 2.
 * @param int      $day    Le jour doit être un jour autorisé par le mois donné. Les années bissextiles sont prises en compte.
 * @param int      $year    L'année est comprise entre 1 et 32767 inclus.
 *
 * @return bool	Retourne TRUE si la date fournie est valide, FALSE sinon.
 *
 */
if(!function_exists('checkdateThis'))
{
    function checkdateThis($month, $day, $year)
    {
		$month = (int)$month;
		$day = (int)$day;
		$year = (int)$year;

		return checkdate($month, $day, $year);
    }
}

/**
 * checkdnsrrThis
 *
 * Résolution DNS d'une adresse IP.
 *
 * @link http://php.net/manual/fr/function.checkdnsrr.php Documentation pour checkdnsrr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    host peut être soit une adresse IP au format numérique, soit un nom d'hôte.
 * @param string   $type    type peut être l'une des valeurs suivantes : A, MX, NS, SOA, PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT ou ANY.
 *
 * @return bool	Retourne TRUE si un enregistrement a été trouvé, et FALSE en cas d'erreur ou si aucun enregistrement n'a été trouvé.
 *
 */
if(!function_exists('checkdnsrrThis'))
{
    function checkdnsrrThis($host, $type = "MX")
    {
		$host = (string)$host;
		$type = (string)$type;

		return checkdnsrr($host, $type);
    }
}

/**
 * chgrpThis
 *
 * Change le groupe d'un fichier.
 *
 * @link http://php.net/manual/fr/function.chgrp.php Documentation pour chgrp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 * @param mixed     $group    Un nom ou un numéro de groupe.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('chgrpThis'))
{
    function chgrpThis($filename, $group)
    {
		$filename = (string)$filename;
		$group = ($group);
		return chgrp($filename, $group);
    }
}

/**
 * chmodThis
 *
 * Change le mode du fichier.
 *
 * @link http://php.net/manual/fr/function.chmod.php Documentation pour chmod.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 * @param int      $mode    Il est à noter que le mode mode est considéré comme un nombre en notation octale. Afin de vous en assurer, vous pouvez préfixer cette valeur par un zéro (mode) : Le paramètre mode est constitué de trois valeurs octales qui spécifient les droits pour le propriétaire, le groupe du propriétaire et les autres, respectivement. Chaque composant peut être calculé en ajoutant les droits désirés. Le chiffre 1 donne les droits d'exécution, le chiffre 2 les droits d'écriture et le chiffre 4 les droits de lecture. Ajoutez simplement ces nombres pour spécifier les droits voulus. Vous pouvez aussi lire le manuel des systèmes Unix avec man 1 chmod et man 2 chmod.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('chmodThis'))
{
    function chmodThis($filename, $mode)
    {
		$filename = (string)$filename;
		$mode = (int)$mode;

		return chmod($filename, $mode);
    }
}

/**
 * chownThis
 *
 * Change le propriétaire du fichier.
 *
 * @link http://php.net/manual/fr/function.chown.php Documentation pour chown.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 * @param mixed     $user    Un nom ou un numéro d'utilisateur.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('chownThis'))
{
    function chownThis($filename, $user)
    {
		$filename = (string)$filename;
		$user = ($user);
		return chown($filename, $user);
    }
}

/**
 * chrThis
 *
 * Retourne un caractère à partir de son code ASCII.
 *
 * @link http://php.net/manual/fr/function.chr.php Documentation pour chr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $ascii    Le code ascii.
 *
 * @return string	Retourne le caractère à partir de son code ASCII.
 *
 */
if(!function_exists('chrThis'))
{
    function chrThis($ascii)
    {
		$ascii = (int)$ascii;

		return chr($ascii);
    }
}

/**
 * chrootThis
 *
 * Change le dossier racine.
 *
 * @link http://php.net/manual/fr/function.chroot.php Documentation pour chroot.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $directory    Le répertoire vers lequel changer la racine.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('chrootThis'))
{
    function chrootThis($directory)
    {
		$directory = (string)$directory;

		return chroot($directory);
    }
}

/**
 * chunk_splitThis
 *
 * Scinde une chaîne.
 *
 * @link http://php.net/manual/fr/function.chunk-split.php Documentation pour chunk_split.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $body    La chaîne à scinder.
 * @param int      $chunklen    La taille de la portion.
 * @param string   $end    Le caractère de fin de la séquence.
 *
 * @return string	Retourne la chaîne scindée.
 *
 */
if(!function_exists('chunk_splitThis'))
{
    function chunk_splitThis($body, $chunklen = 76, $end = "\r\n")
    {
		$body = (string)$body;
		$chunklen = (int)$chunklen;
		$end = (string)$end;

		return chunk_split($body, $chunklen, $end);
    }
}

/**
 * class_aliasThis
 *
 * Crée un alias de classe.
 *
 * @link http://php.net/manual/fr/function.class-alias.php Documentation pour class_alias.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $original    La classe originale.
 * @param string   $alias    Le nom de l'alias de la classe.
 * @param bool     $autoload    Si l'on doit charger automatiquement si la classe originale n'est pas trouvée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('class_aliasThis'))
{
    function class_aliasThis($original, $alias, $autoload = TRUE)
    {
		$original = (string)$original;
		$alias = (string)$alias;
		$autoload = (bool)$autoload;

		return class_alias($original, $alias, $autoload);
    }
}

/**
 * class_existsThis
 *
 * Vérifie si une classe a été définie.
 *
 * @link http://php.net/manual/fr/function.class-exists.php Documentation pour class_exists.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $class_name    Le nom de la classe. Il est recherché de manière in-sensible à la casse.
 * @param bool     $autoload    Si l'on doit appeler __autoload ou non par défaut.
 *
 * @return bool	Retourne TRUE si class_name est une classe définie, FALSE sinon.
 *
 */
if(!function_exists('class_existsThis'))
{
    function class_existsThis($class_name, $autoload = true)
    {
		$class_name = (string)$class_name;
		$autoload = (bool)$autoload;

		return class_exists($class_name, $autoload);
    }
}

/**
 * class_implementsThis
 *
 * Retourne les interfaces implémentées par une classe donnée.
 *
 * @link http://php.net/manual/fr/function.class-implements.php Documentation pour class_implements.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param mixed     $class    Un objet (instance) ou une chaîne de caractères (nom de la classe).
 * @param bool     $autoload    Si TRUE, autorise cette fonction à charger la classe automatiquement grâce à la méthode magique __autoload().
 *
 * @return array	Retourne un tableau ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('class_implementsThis'))
{
    function class_implementsThis($class, $autoload = true)
    {
		$class = ($class);
		$autoload = (bool)$autoload;

		return class_implements($class, $autoload);
    }
}

/**
 * class_parentsThis
 *
 * Retourne la classe parente d'une classe.
 *
 * @link http://php.net/manual/fr/function.class-parents.php Documentation pour class_parents.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param mixed     $class    Un objet (instance) ou une chaîne de caractères (nom de la classe).
 * @param bool     $autoload    Si TRUE, autorise cette fonction à charger la classe automatiquement grâce à la méthode magique __autoload().
 *
 * @return array	Retourne un tableau ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('class_parentsThis'))
{
    function class_parentsThis($class, $autoload = true)
    {
		$class = ($class);
		$autoload = (bool)$autoload;

		return class_parents($class, $autoload);
    }
}

/**
 * class_usesThis
 *
 * Retourne le trait utilisé par une classe donnée.
 *
 * @link http://php.net/manual/fr/function.class-uses.php Documentation pour class_uses.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param mixed     $class    Un objet ou un nom de classe sous forme de chaine.
 * @param bool     $autoload    Si oui ou non l'auto-chargement __autoload() doit être déclenché.
 *
 * @return array	Un tableau en cas de succès, FALSE sinon.
 *
 */
if(!function_exists('class_usesThis'))
{
    function class_usesThis($class, $autoload = true)
    {
		$class = ($class);
		$autoload = (bool)$autoload;

		return class_uses($class, $autoload);
    }
}

/**
 * clearstatcacheThis
 *
 * Efface le cache de stat().
 *
 * @link http://php.net/manual/fr/function.clearstatcache.php Documentation pour clearstatcache.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param bool     $clear_realpath_cache    Si l'on doit ou non vider le cache réel.
 * @param string   $filename    Nettoie le cache réel ainsi que le cache stat d'un fichier spécifique. Ne peut être utilisé que si le paramètre clear_realpath_cache vaut TRUE.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('clearstatcacheThis'))
{
    function clearstatcacheThis($clear_realpath_cache = false, $filename = NULL)
    {
		$clear_realpath_cache = (bool)$clear_realpath_cache;
		$filename = (string)$filename;

		return clearstatcache($clear_realpath_cache, $filename);
    }
}

/**
 * cli_get_process_titleThis
 *
 * Retourne le titre du processus courant.
 *
 * @link http://php.net/manual/fr/function.cli-get-process-title.php Documentation pour cli_get_process_title.
 *
 * @version PHP 5 >= 5.5.0
 * @return string	Retourne le titre du processus courant, sous la forme d'une chaîne de caractères, ou NULL si une erreur survient.
 *
 */
if(!function_exists('cli_get_process_titleThis'))
{
    function cli_get_process_titleThis()
    {
		return cli_get_process_title();
    }
}

/**
 * cli_set_process_titleThis
 *
 * Modifie le titre du processus.
 *
 * @link http://php.net/manual/fr/function.cli-set-process-title.php Documentation pour cli_set_process_title.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $title
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('cli_set_process_titleThis'))
{
    function cli_set_process_titleThis($title)
    {
		$title = (string)$title;

		return cli_set_process_title($title);
    }
}

/**
 * closedirThis
 *
 * Ferme le pointeur sur le dossier.
 *
 * @link http://php.net/manual/fr/function.closedir.php Documentation pour closedir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $dir_handle    La ressource de dossier ouverte précédemment avec opendir().
 *
 */
if(!function_exists('closedirThis'))
{
    function closedirThis($dir_handle = NULL)
    {
		$dir_handle = is_resource($dir_handle) ? $dir_handle : NULL;

		return closedir($dir_handle);
    }
}

/**
 * closelogThis
 *
 * Ferme la connexion à l'historique système.
 *
 * @link http://php.net/manual/fr/function.closelog.php Documentation pour closelog.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('closelogThis'))
{
    function closelogThis()
    {
		return closelog();
    }
}

/**
 * com_create_guidThis
 *
 * Génère un identifiant unique global (GUID).
 *
 * @link http://php.net/manual/fr/function.com-create-guid.php Documentation pour com_create_guid.
 *
 * @version PHP 5
 * @return string	Retourne le GUID, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('com_create_guidThis'))
{
    function com_create_guidThis()
    {
		return com_create_guid();
    }
}

/**
 * com_event_sinkThis
 *
 * Connecte des événements d'un objet COM sur un objet PHP.
 *
 * @link http://php.net/manual/fr/function.com-event-sink.php Documentation pour com_event_sink.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param variant  $comobject
 * @param object   $sinkobject    sinkobject devra être une instance de la classe avec des noms de méthodes suivant le dispinterface désiré ; vous devriez utiliser com_print_typeinfo() pour l'aide à la génération d'un gabarit de classe pour cela.
 * @param mixed     $sinkinterface    PHP devrait être capable d'utiliser le type par défaut de dispinterface spécifié par la Typelib associée avec l'objet comobject, mais vous pouvez changer cela en spécifiant dans le paramètre sinkinterface le dispinterface que vous souhaitez utiliser.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('com_event_sinkThis'))
{
    function com_event_sinkThis($comobject, $sinkobject, $sinkinterface = NULL)
    {
		$comobject = ($comobject);
		$sinkobject = (object)$sinkobject;
		$sinkinterface = ($sinkinterface);
		return com_event_sink($comobject, $sinkobject, $sinkinterface);
    }
}

/**
 * com_get_active_objectThis
 *
 * Retourne un objet représentant l'instance actuelle d'un objet COM.
 *
 * @link http://php.net/manual/fr/function.com-get-active-object.php Documentation pour com_get_active_object.
 *
 * @version PHP 5
 *
 * @param string   $progid    Le paramètre Progid doit être soit le ProgID, soit le CLSID de l'objet dont vous voulez avoir l'accès (par exemple, Word.Application).
 * @param int      $code_page    utilise les mêmes règles que dans la COM classe.
 *
 * @return variant	Si l'objet demandé est en cours d'exécution, la fonction retournera à votre script ce que toute autre objet COM retournerait.
 *
 */
if(!function_exists('com_get_active_objectThis'))
{
    function com_get_active_objectThis($progid, $code_page = NULL)
    {
		$progid = (string)$progid;
		$code_page = (int)$code_page;

		return com_get_active_object($progid, $code_page);
    }
}

/**
 * com_invokeThis
 *
 * Appelle une méthode d'un composant (déconseillé).
 *
 * @link http://php.net/manual/fr/function.com-invoke.php Documentation pour com_invoke.
 *
 * @version PHP 4
 *
 * @param resource $com_object
 * @param string   $function_name
 * @param mixed     $function_parameters
 *
 */
if(!function_exists('com_invokeThis'))
{
    function com_invokeThis($com_object, $function_name, $function_parameters = NULL)
    {
		$com_object = is_resource($com_object) ? $com_object : NULL;
		$function_name = (string)$function_name;
		$function_parameters = ($function_parameters);
		return com_invoke($com_object, $function_name, $function_parameters);
    }
}

/**
 * com_load_typelibThis
 *
 * Charge un Typelib.
 *
 * @link http://php.net/manual/fr/function.com-load-typelib.php Documentation pour com_load_typelib.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $typelib_name    typelib_name peut être une des valeurs suivantes :
 * @param bool     $case_insensitive    Le paramètre case_insensitive se comporte comme le paramètre du même nom de la fonction define().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('com_load_typelibThis'))
{
    function com_load_typelibThis($typelib_name, $case_insensitive = true)
    {
		$typelib_name = (string)$typelib_name;
		$case_insensitive = (bool)$case_insensitive;

		return com_load_typelib($typelib_name, $case_insensitive);
    }
}

/**
 * com_message_pumpThis
 *
 * Traite un message COM dans un délai donné.
 *
 * @link http://php.net/manual/fr/function.com-message-pump.php Documentation pour com_message_pump.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param int      $timeoutms    Le délai, en millisecondes. Si vous ne spécifiez pas de valeur pour le paramètre timeoutms, alors il voudra 0. Une valeur à 0 signifie que les messages seront traités immédiatement ; s'il y a des messages dans la file d'attente, ils seront distribués aussitôt ; s'il n'y a aucun message dans la file d'attente, la fonction retournera FALSE immédiatement sans attendre.
 *
 * @return bool	Si un ou plusieurs messages arrivent avant le délai d'expiration, ils seront distribués et la fonction retournera TRUE. Si le délai d'expiration survient et qu'aucun message n'est traité, la valeur retournée sera FALSE.
 *
 */
if(!function_exists('com_message_pumpThis'))
{
    function com_message_pumpThis($timeoutms = 0)
    {
		$timeoutms = (int)$timeoutms;

		return com_message_pump($timeoutms);
    }
}

/**
 * com_print_typeinfoThis
 *
 * Affiche une définition de classe PHP pour une interface répartissable.
 *
 * @link http://php.net/manual/fr/function.com-print-typeinfo.php Documentation pour com_print_typeinfo.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param object   $comobject    comobject doit être soit une instance d'un objet COM, soit le nom d'une bibliothèque type (qui doit être résolu en accord des règles définies dans la fonction com_load_typelib()).
 * @param string   $dispinterface    Le nom d'une interface descendante IDispatch que vous souhaitez afficher.
 * @param bool     $wantsink    Si le paramètre wantsink vaut TRUE, l'interface d'évier correspondante sera affichée à la place.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('com_print_typeinfoThis'))
{
    function com_print_typeinfoThis($comobject, $dispinterface = NULL, $wantsink = false)
    {
		$comobject = (object)$comobject;
		$dispinterface = (string)$dispinterface;
		$wantsink = (bool)$wantsink;

		return com_print_typeinfo($comobject, $dispinterface, $wantsink);
    }
}

/**
 * compactThis
 *
 * Crée un tableau à partir de variables et de leur valeur.
 *
 * @link http://php.net/manual/fr/function.compact.php Documentation pour compact.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $varname    compact() accepte différents paramètres varname. Les paramètres peuvent être des variables contenant des chaînes, ou un tableau de chaînes, qui peut contenir d'autres tableaux de noms de variables, que compact() traitera récursivement.
 * @param mixed     $item
 *
 * @return array	Retourne le tableau de sortie contenant toutes les variables ajoutées.
 *
 */
if(!function_exists('compactThis'))
{
    function compactThis($varname, $varname1 = NULL)
    {
		$varname = ($varname);
		$varname1 = ($varname1);
		return compact($varname, $varname1);
    }
}

/**
 * connection_abortedThis
 *
 * Indique si l'internaute a abandonné la connexion HTTP.
 *
 * @link http://php.net/manual/fr/function.connection-aborted.php Documentation pour connection_aborted.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne 1 si le client est déconnecté, 0 sinon.
 *
 */
if(!function_exists('connection_abortedThis'))
{
    function connection_abortedThis()
    {
		return connection_aborted();
    }
}

/**
 * connection_statusThis
 *
 * Retourne les bits de statut de la connexion HTTP.
 *
 * @link http://php.net/manual/fr/function.connection-status.php Documentation pour connection_status.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne les bits de statut de la connexion, qui peuvent être utilisés avec les constantes CONNECTION_XXX pour déterminer le statut de la connexion.
 *
 */
if(!function_exists('connection_statusThis'))
{
    function connection_statusThis()
    {
		return connection_status();
    }
}

/**
 * connection_timeoutThis
 *
 * Indique si le script a expiré.
 *
 * @link http://php.net/manual/fr/function.connection-timeout.php Documentation pour connection_timeout.
 *
 * @version PHP 4 <= 4.0.4
 * @return int	Retourne 1 si le script a expiré, 0 sinon.
 *
 */
if(!function_exists('connection_timeoutThis'))
{
    function connection_timeoutThis()
    {
		return connection_timeout();
    }
}

/**
 * constantThis
 *
 * Retourne la valeur d'une constante.
 *
 * @link http://php.net/manual/fr/function.constant.php Documentation pour constant.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $name    Le nom de la constante.
 *
 * @return mixed	Retourne la valeur de la constante, ou NULL si la constante n'est pas définie.
 *
 */
if(!function_exists('constantThis'))
{
    function constantThis($name)
    {
		$name = (string)$name;

		return constant($name);
    }
}

/**
 * convert_cyr_stringThis
 *
 * Convertit une chaîne d'un jeu de caractères cyrillique à l'autre.
 *
 * @link http://php.net/manual/fr/function.convert-cyr-string.php Documentation pour convert_cyr_string.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne à convertir.
 * @param string   $from    Le jeu de caractères cyrillique, comme simple caractère.
 * @param string   $to    Le jeu de caractères cyrillique cible, comme simple caractère.
 *
 * @return string	Retourne la chaîne convertie.
 *
 */
if(!function_exists('convert_cyr_stringThis'))
{
    function convert_cyr_stringThis($str, $from, $to)
    {
		$str = (string)$str;
		$from = (string)$from;
		$to = (string)$to;

		return convert_cyr_string($str, $from, $to);
    }
}

/**
 * convert_uudecodeThis
 *
 * Décode une chaîne au format uuencode.
 *
 * @link http://php.net/manual/fr/function.convert-uudecode.php Documentation pour convert_uudecode.
 *
 * @version PHP 5
 *
 * @param string   $data    Les données, au format uuencode.
 *
 * @return string	Retourne les données décodées, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('convert_uudecodeThis'))
{
    function convert_uudecodeThis($data)
    {
		$data = (string)$data;

		return convert_uudecode($data);
    }
}

/**
 * convert_uuencodeThis
 *
 * Encode une chaîne de caractères en utilisant l'algorithme uuencode.
 *
 * @link http://php.net/manual/fr/function.convert-uuencode.php Documentation pour convert_uuencode.
 *
 * @version PHP 5
 *
 * @param string   $data    Les données à encoder.
 *
 * @return string	Retourne les données, au format uuencode.
 *
 */
if(!function_exists('convert_uuencodeThis'))
{
    function convert_uuencodeThis($data)
    {
		$data = (string)$data;

		return convert_uuencode($data);
    }
}

/**
 * copyThis
 *
 * Copie un fichier.
 *
 * @link http://php.net/manual/fr/function.copy.php Documentation pour copy.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $source    Chemin vers le fichier source.
 * @param string   $dest    Le chemin de destination. Si dest est une URL, la copie peut échouer si ce protocole ne supporte pas l'écrasement de fichiers existants.
 * @param resource $context    Une ressource de contexte valide, créée par la fonction stream_context_create().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('copyThis'))
{
    function copyThis($source, $dest, $context = NULL)
    {
		$source = (string)$source;
		$dest = (string)$dest;
		$context = is_resource($context) ? $context : NULL;

		return copy($source, $dest, $context);
    }
}

/**
 * cosThis
 *
 * Cosinus.
 *
 * @link http://php.net/manual/fr/function.cos.php Documentation pour cos.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'angle, en radians
 *
 * @return float	Le cosinus de arg.
 *
 */
if(!function_exists('cosThis'))
{
    function cosThis($arg)
    {
		$arg = (float)$arg;

		return cos($arg);
    }
}

/**
 * coshThis
 *
 * Cosinus hyperbolique.
 *
 * @link http://php.net/manual/fr/function.cosh.php Documentation pour cosh.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	Le cosinus hyperbolique de arg.
 *
 */
if(!function_exists('coshThis'))
{
    function coshThis($arg)
    {
		$arg = (float)$arg;

		return cosh($arg);
    }
}

/**
 * countThis
 *
 * Compte tous les éléments d'un tableau ou quelque chose d'un objet.
 *
 * @link http://php.net/manual/fr/function.count.php Documentation pour count.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    Le tableau ou l'objet
 * @param int      $mode    Si le paramètre optionnel mode vaut COUNT_RECURSIVE (ou 1), count() va compter récursivement les tableaux. C'est particulièrement pratique pour compter le nombre d'éléments d'un tableau.
 *
 * @return int	Retourne le nombre d'éléments dans var. Si le paramètre var n'est ni un objet, ni un tableau, 1 sera retourné. Il y a néanmoins une exception : si le paramètre var vaut NULL, 0 sera retourné.
 *
 */
if(!function_exists('countThis'))
{
    function countThis($var, $mode = COUNT_NORMAL)
    {
		$var = ($var);
		$mode = (int)$mode;

		return count($var, $mode);
    }
}

/**
 * count_charsThis
 *
 * Retourne des statistiques sur les caractères utilisés dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.count-chars.php Documentation pour count_chars.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne analysée.
 * @param int      $mode    Voir les valeurs retournées.
 *
 * @return mixed	Suivant la valeur de mode, count_chars() retourne les informations suivantes :
 *
 */
if(!function_exists('count_charsThis'))
{
    function count_charsThis($string, $mode = 0)
    {
		$string = (string)$string;
		$mode = (int)$mode;

		return count_chars($string, $mode);
    }
}

/**
 * crc32This
 *
 * Calcule la somme de contrôle CRC32.
 *
 * @link http://php.net/manual/fr/function.crc32.php Documentation pour crc32.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $str    Les données.
 *
 * @return int	Retourne la somme de contrôle crc32 de la chaîne str, sous la forme d'un entier.
 *
 */
if(!function_exists('crc32This'))
{
    function crc32This($str)
    {
		$str = (string)$str;

		return crc32($str);
    }
}

/**
 * create_functionThis
 *
 * Crée une fonction anonyme.
 *
 * @link http://php.net/manual/fr/function.create-function.php Documentation pour create_function.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $args    Les arguments de la fonction.
 * @param string   $code    Le code de la fonction.
 *
 * @return string	Retourne un nom de fonction unique, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('create_functionThis'))
{
    function create_functionThis($args, $code)
    {
		$args = (string)$args;
		$code = (string)$code;

		return create_function($args, $code);
    }
}

/**
 * cryptThis
 *
 * Hachage à sens unique (indéchiffrable).
 *
 * @link http://php.net/manual/fr/function.crypt.php Documentation pour crypt.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne à hacher.
 * @param string   $salt    Si l'argument salt n'est pas fourni, le comportement est défini par l'implémentation de l'algorithme et peut provoquer des résultats inattendus.
 *
 * @return string	Retourne la chaîne hachée ou une chaîne qui sera inférieure à 13 caractères et qui est garantie de différer du salt en cas d'erreur.
 *
 */
if(!function_exists('cryptThis'))
{
    function cryptThis($str, $salt = NULL)
    {
		$str = (string)$str;
		$salt = (string)$salt;

		return crypt($str, $salt);
    }
}

/**
 * ctype_alnumThis
 *
 * Vérifie qu'une chaîne est alphanumérique.
 *
 * @link http://php.net/manual/fr/function.ctype-alnum.php Documentation pour ctype_alnum.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text sont soit des lettres, soit des chiffres, FALSE sinon.
 *
 */
if(!function_exists('ctype_alnumThis'))
{
    function ctype_alnumThis($text)
    {
		$text = (string)$text;

		return ctype_alnum($text);
    }
}

/**
 * ctype_alphaThis
 *
 * Vérifie qu'une chaîne est alphabétique.
 *
 * @link http://php.net/manual/fr/function.ctype-alpha.php Documentation pour ctype_alpha.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text est une lettre de la locale courante, FALSE sinon.
 *
 */
if(!function_exists('ctype_alphaThis'))
{
    function ctype_alphaThis($text)
    {
		$text = (string)$text;

		return ctype_alpha($text);
    }
}

/**
 * ctype_cntrlThis
 *
 * Vérifie qu'un caractère est un caractère de contrôle.
 *
 * @link http://php.net/manual/fr/function.ctype-cntrl.php Documentation pour ctype_cntrl.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si chaque caractère de text est un caractère de contrôle de la locale courante, FALSE sinon.
 *
 */
if(!function_exists('ctype_cntrlThis'))
{
    function ctype_cntrlThis($text)
    {
		$text = (string)$text;

		return ctype_cntrl($text);
    }
}

/**
 * ctype_digitThis
 *
 * Vérifie qu'une chaîne est un entier.
 *
 * @link http://php.net/manual/fr/function.ctype-digit.php Documentation pour ctype_digit.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text sont des entiers, FALSE sinon.
 *
 */
if(!function_exists('ctype_digitThis'))
{
    function ctype_digitThis($text)
    {
		$text = (string)$text;

		return ctype_digit($text);
    }
}

/**
 * ctype_graphThis
 *
 * Vérifie qu'une chaîne est imprimable.
 *
 * @link http://php.net/manual/fr/function.ctype-graph.php Documentation pour ctype_graph.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text ont une représentation graphique et créeront une impression sur l'écran, FALSE sinon.
 *
 */
if(!function_exists('ctype_graphThis'))
{
    function ctype_graphThis($text)
    {
		$text = (string)$text;

		return ctype_graph($text);
    }
}

/**
 * ctype_lowerThis
 *
 * Vérifie qu'une chaîne est en minuscules.
 *
 * @link http://php.net/manual/fr/function.ctype-lower.php Documentation pour ctype_lower.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text sont en minuscule dans la locale courante.
 *
 */
if(!function_exists('ctype_lowerThis'))
{
    function ctype_lowerThis($text)
    {
		$text = (string)$text;

		return ctype_lower($text);
    }
}

/**
 * ctype_printThis
 *
 * Vérifie qu'une chaîne est imprimable.
 *
 * @link http://php.net/manual/fr/function.ctype-print.php Documentation pour ctype_print.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text seront imprimables (y compris les espaces blancs). Retourne FALSE si text contient des caractères de contrôle ou des caractères qui ne s'afficheront pas ou non pas de fonction de contrôle.
 *
 */
if(!function_exists('ctype_printThis'))
{
    function ctype_printThis($text)
    {
		$text = (string)$text;

		return ctype_print($text);
    }
}

/**
 * ctype_punctThis
 *
 * Vérifie qu'une chaîne contient de la ponctuation.
 *
 * @link http://php.net/manual/fr/function.ctype-punct.php Documentation pour ctype_punct.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text sont des caractères de ponctuation, FALSE sinon.
 *
 */
if(!function_exists('ctype_punctThis'))
{
    function ctype_punctThis($text)
    {
		$text = (string)$text;

		return ctype_punct($text);
    }
}

/**
 * ctype_spaceThis
 *
 * Vérifie qu'une chaîne n'est faite que de caractères blancs.
 *
 * @link http://php.net/manual/fr/function.ctype-space.php Documentation pour ctype_space.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text vont créer des espaces blancs, FALSE sinon. Cela inclut le tabulations, les tabulations verticales, les nouvelles lignes, les retours chariots et les retours à la ligne.
 *
 */
if(!function_exists('ctype_spaceThis'))
{
    function ctype_spaceThis($text)
    {
		$text = (string)$text;

		return ctype_space($text);
    }
}

/**
 * ctype_upperThis
 *
 * Vérifie qu'une chaîne est en majuscules.
 *
 * @link http://php.net/manual/fr/function.ctype-upper.php Documentation pour ctype_upper.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text sont en majuscules dans la locale courante.
 *
 */
if(!function_exists('ctype_upperThis'))
{
    function ctype_upperThis($text)
    {
		$text = (string)$text;

		return ctype_upper($text);
    }
}

/**
 * ctype_xdigitThis
 *
 * Vérifie qu'un caractère représente un nombre hexadécimal.
 *
 * @link http://php.net/manual/fr/function.ctype-xdigit.php Documentation pour ctype_xdigit.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $text    La chaîne testée.
 *
 * @return bool	Retourne TRUE si tous les caractères de text sont des chiffres hexadécimaux, c'est-à-dire un chiffre ou une des lettres [A-Fa-f], FALSE sinon.
 *
 */
if(!function_exists('ctype_xdigitThis'))
{
    function ctype_xdigitThis($text)
    {
		$text = (string)$text;

		return ctype_xdigit($text);
    }
}

/**
 * curl_closeThis
 *
 * Ferme une session CURL.
 *
 * @link http://php.net/manual/fr/function.curl-close.php Documentation pour curl_close.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('curl_closeThis'))
{
    function curl_closeThis($ch)
    {
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_close($ch);
    }
}

/**
 * curl_copy_handleThis
 *
 * Copie une ressource cURL avec toutes ses préférences.
 *
 * @link http://php.net/manual/fr/function.curl-copy-handle.php Documentation pour curl_copy_handle.
 *
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return resource	Retourne une nouvelle ressource cURL.
 *
 */
if(!function_exists('curl_copy_handleThis'))
{
    function curl_copy_handleThis($ch)
    {
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_copy_handle($ch);
    }
}

/**
 * curl_errnoThis
 *
 * Retourne le dernier message d'erreur cURL.
 *
 * @link http://php.net/manual/fr/function.curl-errno.php Documentation pour curl_errno.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return int	Retourne le numéro de l'erreur ou 0 si aucune erreur n'est survenue.
 *
 */
if(!function_exists('curl_errnoThis'))
{
    function curl_errnoThis($ch)
    {
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_errno($ch);
    }
}

/**
 * curl_errorThis
 *
 * Retourne une chaîne contenant le dernier message d'erreur cURL.
 *
 * @link http://php.net/manual/fr/function.curl-error.php Documentation pour curl_error.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return string	Retourne le message d'erreur ou '' (chaîne vide) si aucune erreur n'est survenue.
 *
 */
if(!function_exists('curl_errorThis'))
{
    function curl_errorThis($ch)
    {
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_error($ch);
    }
}

/**
 * curl_escapeThis
 *
 * Encode URL la chaîne fournie.
 *
 * @link http://php.net/manual/fr/function.curl-escape.php Documentation pour curl_escape.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 * @param string   $str
 *
 * @return string	Retourne la chaîne encodée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_escapeThis'))
{
    function curl_escapeThis($ch, $str)
    {
		$ch = is_resource($ch) ? $ch : NULL;
		$str = (string)$str;

		return curl_escape($ch, $str);
    }
}

/**
 * curl_execThis
 *
 * Exécute une session cURL.
 *
 * @link http://php.net/manual/fr/function.curl-exec.php Documentation pour curl_exec.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Cependant, si l'option CURLOPT_RETURNTRANSFER est définie, la fonction retournera le résultat en cas de succès, et FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_execThis'))
{
    function curl_execThis($ch)
    {
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_exec($ch);
    }
}

/**
 * curl_file_createThis
 *
 * Crée un objet CURLFile.
 *
 * @link http://php.net/manual/fr/function.curl-file-create.php Documentation pour curl_file_create.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $filename
 * @param string   $mimetype
 * @param string   $postname
 *
 */
if(!function_exists('curl_file_createThis'))
{
    function curl_file_createThis($filename, $mimetype = NULL, $postname = NULL)
    {
		$filename = (string)$filename;
		$mimetype = (string)$mimetype;
		$postname = (string)$postname;

		return curl_file_create($filename, $mimetype, $postname);
    }
}

/**
 * curl_getinfoThis
 *
 * Lit les informations détaillant un transfert cURL.
 *
 * @link http://php.net/manual/fr/function.curl-getinfo.php Documentation pour curl_getinfo.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 * @param int      $opt    Ce paramètre peut prendre l'une des valeurs suivantes :
 *
 * @return mixed	Si opt est fourni, la valeur retournée sera une chaîne. Sinon, ce sera un tableau associatif contenant les éléments suivants (qui correspond à opt), ou FALSE si une erreur survient :
 *
 */
if(!function_exists('curl_getinfoThis'))
{
    function curl_getinfoThis($ch, $opt = 0)
    {
		$ch = is_resource($ch) ? $ch : NULL;
		$opt = (int)$opt;

		return curl_getinfo($ch, $opt);
    }
}

/**
 * curl_initThis
 *
 * Initialise une session cURL.
 *
 * @link http://php.net/manual/fr/function.curl-init.php Documentation pour curl_init.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $url    Si fourni, alors CURLOPT_URL prendra cette valeur. Vous pouvez manuellement fixer cette valeur avec la fonction curl_setopt().
 *
 * @return resource	Retourne une session cURL en cas de succès, FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_initThis'))
{
    function curl_initThis($url = NULL)
    {
		$url = (string)$url;

		return curl_init($url);
    }
}

/**
 * curl_multi_add_handleThis
 *
 * Ajoute une ressource cURL à un cURL multiple.
 *
 * @link http://php.net/manual/fr/function.curl-multi-add-handle.php Documentation pour curl_multi_add_handle.
 *
 * @version PHP 5
 *
 * @param resource $mh    Un gestionnaire cURL multiple retourné par la fonction curl_multi_init().
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return int	Retourne 0 en cas de succès, ou un des codes erreurs CURLM_XXX.
 *
 */
if(!function_exists('curl_multi_add_handleThis'))
{
    function curl_multi_add_handleThis($mh, $ch)
    {
		$mh = is_resource($mh) ? $mh : NULL;
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_multi_add_handle($mh, $ch);
    }
}

/**
 * curl_multi_closeThis
 *
 * Termine un jeu de sessions cURL.
 *
 * @link http://php.net/manual/fr/function.curl-multi-close.php Documentation pour curl_multi_close.
 *
 * @version PHP 5
 *
 * @param resource $mh    Un gestionnaire cURL multiple retourné par la fonction curl_multi_init().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('curl_multi_closeThis'))
{
    function curl_multi_closeThis($mh)
    {
		$mh = is_resource($mh) ? $mh : NULL;

		return curl_multi_close($mh);
    }
}

/**
 * curl_multi_execThis
 *
 * Exécute les sous-requêtes de la session cURL.
 *
 * @link http://php.net/manual/fr/function.curl-multi-exec.php Documentation pour curl_multi_exec.
 *
 * @version PHP 5
 *
 * @param resource $mh    Un gestionnaire cURL multiple retourné par la fonction curl_multi_init().
 * @param int      &$still_running    Une référence à un drapeau, qui annonce si les opérations sont toujours en cours.
 *
 * @return int	Un code cURL, défini dans les constantes prédéfinies cURL.
 *
 */
if(!function_exists('curl_multi_execThis'))
{
    function curl_multi_execThis($mh, &$still_running)
    {
		$mh = is_resource($mh) ? $mh : NULL;
		$still_running = (int)$still_running;

		return curl_multi_exec($mh, $still_running);
    }
}

/**
 * curl_multi_getcontentThis
 *
 * Retourne le contenu obtenu avec l'option CURLOPT_RETURNTRANSFER.
 *
 * @link http://php.net/manual/fr/function.curl-multi-getcontent.php Documentation pour curl_multi_getcontent.
 *
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return string	Retourne le contenu du gestionnaire cURL, si CURLOPT_RETURNTRANSFER est défini.
 *
 */
if(!function_exists('curl_multi_getcontentThis'))
{
    function curl_multi_getcontentThis($ch)
    {
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_multi_getcontent($ch);
    }
}

/**
 * curl_multi_info_readThis
 *
 * Lit les informations sur les transferts actuels.
 *
 * @link http://php.net/manual/fr/function.curl-multi-info-read.php Documentation pour curl_multi_info_read.
 *
 * @version PHP 5
 *
 * @param resource $mh    Un gestionnaire cURL multiple retourné par la fonction curl_multi_init().
 * @param int      &$msgs_in_queue    Nombre de messages encore présents dans la file d'attente
 *
 * @return array	Retourne un tableau associatif contenant le message en cas de succès, FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_multi_info_readThis'))
{
    function curl_multi_info_readThis($mh, &$msgs_in_queue = NULL)
    {
		$mh = is_resource($mh) ? $mh : NULL;
		$msgs_in_queue = (int)$msgs_in_queue;

		return curl_multi_info_read($mh, $msgs_in_queue);
    }
}

/**
 * curl_multi_initThis
 *
 * Retourne un nouveau cURL multiple.
 *
 * @link http://php.net/manual/fr/function.curl-multi-init.php Documentation pour curl_multi_init.
 *
 * @version PHP 5
 * @return resource	Retourne un gestionnaire cURL multiple en cas de succès, FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_multi_initThis'))
{
    function curl_multi_initThis()
    {
		return curl_multi_init();
    }
}

/**
 * curl_multi_remove_handleThis
 *
 * Retire une ressource cURL d'un cURL multiple.
 *
 * @link http://php.net/manual/fr/function.curl-multi-remove-handle.php Documentation pour curl_multi_remove_handle.
 *
 * @version PHP 5
 *
 * @param resource $mh    Un gestionnaire cURL multiple retourné par la fonction curl_multi_init().
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return int	Retourne 0 en cas de succès, ou un des codes erreurs CURLM_XXX.
 *
 */
if(!function_exists('curl_multi_remove_handleThis'))
{
    function curl_multi_remove_handleThis($mh, $ch)
    {
		$mh = is_resource($mh) ? $mh : NULL;
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_multi_remove_handle($mh, $ch);
    }
}

/**
 * curl_multi_selectThis
 *
 * Attend une activité sur n'importe quelle connexion curl_multi.
 *
 * @link http://php.net/manual/fr/function.curl-multi-select.php Documentation pour curl_multi_select.
 *
 * @version PHP 5
 *
 * @param resource $mh    Un gestionnaire cURL multiple retourné par la fonction curl_multi_init().
 * @param float    $timeout    Durée maximale, en secondes, à attendre une réponse.
 *
 * @return int	Retourne le nombre de sockets contenues dans le jeu de sockets, en cas de succès. En cas d'échec, la fonction retournera -1 sur un échec de sélection ou lors d'un dépassement du délai d'attente (depuis l'appel du sous système de sélection).
 *
 */
if(!function_exists('curl_multi_selectThis'))
{
    function curl_multi_selectThis($mh, $timeout = 1)
    {
		$mh = is_resource($mh) ? $mh : NULL;
		$timeout = (float)$timeout;

		return curl_multi_select($mh, $timeout);
    }
}

/**
 * curl_multi_setoptThis
 *
 * Définit une option pour le gestionnaire multiple cURL.
 *
 * @link http://php.net/manual/fr/function.curl-multi-setopt.php Documentation pour curl_multi_setopt.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $mh
 * @param int      $option    Une des constantes CURLMOPT_*.
 * @param mixed     $value
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_multi_setoptThis'))
{
    function curl_multi_setoptThis($mh, $option, $value)
    {
		$mh = is_resource($mh) ? $mh : NULL;
		$option = (int)$option;
		$value = ($value);
		return curl_multi_setopt($mh, $option, $value);
    }
}

/**
 * curl_multi_strerrorThis
 *
 * Retourne la description d'un code erreur.
 *
 * @link http://php.net/manual/fr/function.curl-multi-strerror.php Documentation pour curl_multi_strerror.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param int      $errornum
 *
 * @return string	Retourne la description d'un code erreur valide, NULL sinon.
 *
 */
if(!function_exists('curl_multi_strerrorThis'))
{
    function curl_multi_strerrorThis($errornum)
    {
		$errornum = (int)$errornum;

		return curl_multi_strerror($errornum);
    }
}

/**
 * curl_pauseThis
 *
 * Met en pause, ou sort de la pause une connexion.
 *
 * @link http://php.net/manual/fr/function.curl-pause.php Documentation pour curl_pause.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 * @param int      $bitmask    Une constante parmi CURLPAUSE_*.
 *
 * @return int	Retourne un code erreur (CURLE_OK correspond à aucune erreur).
 *
 */
if(!function_exists('curl_pauseThis'))
{
    function curl_pauseThis($ch, $bitmask)
    {
		$ch = is_resource($ch) ? $ch : NULL;
		$bitmask = (int)$bitmask;

		return curl_pause($ch, $bitmask);
    }
}

/**
 * curl_resetThis
 *
 * Ré-initialise toutes les options d'un gestionnaire de session libcurl.
 *
 * @link http://php.net/manual/fr/function.curl-reset.php Documentation pour curl_reset.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('curl_resetThis'))
{
    function curl_resetThis($ch)
    {
		$ch = is_resource($ch) ? $ch : NULL;

		return curl_reset($ch);
    }
}

/**
 * curl_setoptThis
 *
 * Définit une option de transmission cURL.
 *
 * @link http://php.net/manual/fr/function.curl-setopt.php Documentation pour curl_setopt.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 * @param int      $option    L'option CURLOPT_XXX à définir.
 * @param mixed     $value    La valeur à définir pour option. value doit être un bool pour les valeurs suivantes du paramètre option : value doit être un integer pour les valeurs suivantes du paramètres option : value doit être une chaîne pour les valeurs suivantes du paramètres option : value doit être un tableau pour les valeurs suivantes du paramètres option : value doit être une ressource (utilisant fopen(), par exemple) pour les valeurs suivantes du paramètre option : value doit être le nom d'une fonction ou d'une Closure valide pour les valeurs suivantes du paramètres option :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_setoptThis'))
{
    function curl_setoptThis($ch, $option, $value)
    {
		$ch = is_resource($ch) ? $ch : NULL;
		$option = (int)$option;
		$value = ($value);
		return curl_setopt($ch, $option, $value);
    }
}

/**
 * curl_setopt_arrayThis
 *
 * Fixe plusieurs options pour un transfert cURL.
 *
 * @link http://php.net/manual/fr/function.curl-setopt-array.php Documentation pour curl_setopt_array.
 *
 * @version PHP 5 >= 5.1.3
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 * @param array    $options    Un tableau spécifiant quelles options à fixer avec leurs valeurs. Les clés devraient être des constantes valides de curl_setopt() ou leur entier équivalent.
 *
 * @return bool	Retourne TRUE si toutes les options ont été fixées correctement. Si une option ne peut pas être fixée correctement, FALSE est retourné immédiatement, en ignorant toutes les options futures dans le tableau options.
 *
 */
if(!function_exists('curl_setopt_arrayThis'))
{
    function curl_setopt_arrayThis($ch, $options)
    {
		$ch = is_resource($ch) ? $ch : NULL;
		$options = (array)$options;

		return curl_setopt_array($ch, $options);
    }
}

/**
 * curl_share_closeThis
 *
 * Ferme un jeu de gestionnaires cURL.
 *
 * @link http://php.net/manual/fr/function.curl-share-close.php Documentation pour curl_share_close.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $sh
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('curl_share_closeThis'))
{
    function curl_share_closeThis($sh)
    {
		$sh = is_resource($sh) ? $sh : NULL;

		return curl_share_close($sh);
    }
}

/**
 * curl_share_initThis
 *
 * Initialise un gestionnaire partagé curl.
 *
 * @link http://php.net/manual/fr/function.curl-share-init.php Documentation pour curl_share_init.
 *
 * @version PHP 5 >= 5.5.0
 * @return resource	Retourne une ressource de type "cURL Share Handle".
 *
 */
if(!function_exists('curl_share_initThis'))
{
    function curl_share_initThis()
    {
		return curl_share_init();
    }
}

/**
 * curl_share_setoptThis
 *
 * Définit une option pour un transfert cURL.
 *
 * @link http://php.net/manual/fr/function.curl-share-setopt.php Documentation pour curl_share_setopt.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $sh
 * @param int      $option
 * @param string   $value
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_share_setoptThis'))
{
    function curl_share_setoptThis($sh, $option, $value)
    {
		$sh = is_resource($sh) ? $sh : NULL;
		$option = (int)$option;
		$value = (string)$value;

		return curl_share_setopt($sh, $option, $value);
    }
}

/**
 * curl_strerrorThis
 *
 * Retourne la chaîne descriptive du code erreur.
 *
 * @link http://php.net/manual/fr/function.curl-strerror.php Documentation pour curl_strerror.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param int      $errornum    Une constante parmi CURLE_*.
 *
 * @return string	Retourne la description de l'erreur ou NULL pour un code erreur invalide.
 *
 */
if(!function_exists('curl_strerrorThis'))
{
    function curl_strerrorThis($errornum)
    {
		$errornum = (int)$errornum;

		return curl_strerror($errornum);
    }
}

/**
 * curl_unescapeThis
 *
 * URL-décode la chaîne fournie.
 *
 * @link http://php.net/manual/fr/function.curl-unescape.php Documentation pour curl_unescape.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $ch    Un gestionnaire cURL retourné par la fonction curl_init().
 * @param string   $str
 *
 * @return string	Retourne la chaîne non-échappée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('curl_unescapeThis'))
{
    function curl_unescapeThis($ch, $str)
    {
		$ch = is_resource($ch) ? $ch : NULL;
		$str = (string)$str;

		return curl_unescape($ch, $str);
    }
}

/**
 * curl_versionThis
 *
 * Retourne la version courante de cURL.
 *
 * @link http://php.net/manual/fr/function.curl-version.php Documentation pour curl_version.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $age
 *
 * @return array	Retourne un tableau associatif contenant les éléments suivants :
 *
 */
if(!function_exists('curl_versionThis'))
{
    function curl_versionThis($age = CURLVERSION_NOW)
    {
		$age = (int)$age;

		return curl_version($age);
    }
}

/**
 * currentThis
 *
 * Retourne l'élément courant du tableau.
 *
 * @link http://php.net/manual/fr/function.current.php Documentation pour current.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau.
 *
 * @return mixed	current() ne fait que retourner l'élément courant pointé par le pointeur interne du tableau array. current() ne déplace pas le pointeur. Si le pointeur est au-delà du dernier élément de la liste, current() retourne FALSE.
 *
 */
if(!function_exists('currentThis'))
{
    function currentThis(&$array)
    {
		$array = (array)$array;

		return current($array);
    }
}

/**
 * dateThis
 *
 * Formate une date/heure locale.
 *
 * @link http://php.net/manual/fr/function.date.php Documentation pour date.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    Le format de la date désirée. Voir les options de formatage ci-dessous. Il existe aussi de nombreuses constantes de dates qui peuvent être utilisées, ce qui fait que DATE_RSS va remplacer le format "D, d M Y H:i:s". Les caractères non reconnus seront imprimés tels quels. "Z" retournera toujours 0 lorsqu'il est utilisé avec gmdate().
 * @param int      $timestamp    Le paramètre optionnel timestamp est un timestamp Unix de type entier qui vaut par défaut l'heure courante locale si le paramètre timestamp n'est pas fourni. En d'autres termes, il vaut par défaut la valeur de la fonction time().
 *
 * @return string	Retourne une date formatée. Si une valeur non-numérique est utilisée dans le paramètre timestamp, FALSE sera retourné et une erreur de niveau E_WARNING est émise.
 *
 */
if(!function_exists('dateThis'))
{
    function dateThis($format, $timestamp = NULL)
    {
		$format = (string)$format;
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;

		return date($format, $timestamp);
    }
}

/**
 * date_default_timezone_getThis
 *
 * Récupère le décalage horaire par défaut utilisé par toutes les fonctions date/heure d'un script.
 *
 * @link http://php.net/manual/fr/function.date-default-timezone-get.php Documentation pour date_default_timezone_get.
 *
 * @version PHP 5 >= 5.1.0
 * @return string	Retourne une chaîne de caractères.
 *
 */
if(!function_exists('date_default_timezone_getThis'))
{
    function date_default_timezone_getThis()
    {
		return date_default_timezone_get();
    }
}

/**
 * date_default_timezone_setThis
 *
 * Définit le décalage horaire par défaut de toutes les fonctions date/heure.
 *
 * @link http://php.net/manual/fr/function.date-default-timezone-set.php Documentation pour date_default_timezone_set.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $timezone_identifier    L'identifiant de décalage horaire, comme UTC ou Europe/Lisbon. La liste des identifiants valides est disponible dans le Liste des Fuseaux Horaires Supportés.
 *
 * @return bool	Cette fonction retourne FALSE si timezone_identifier n'est pas valide, TRUE sinon.
 *
 */
if(!function_exists('date_default_timezone_setThis'))
{
    function date_default_timezone_setThis($timezone_identifier)
    {
		$timezone_identifier = (string)$timezone_identifier;

		return date_default_timezone_set($timezone_identifier);
    }
}

/**
 * date_parseThis
 *
 * Retourne un tableau associatif avec des informations détaillées sur une date donnée.
 *
 * @link http://php.net/manual/fr/function.date-parse.php Documentation pour date_parse.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $date    Date dans un format accepté par la fonction strtotime().
 *
 * @return array	Retourne un tableau contenant des informations sur la date analysée en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('date_parseThis'))
{
    function date_parseThis($date)
    {
		$date = (string)$date;

		return date_parse($date);
    }
}

/**
 * date_parse_from_formatThis
 *
 * Récupère les informations d'une date donnée suivant un format spécifique.
 *
 * @link http://php.net/manual/fr/function.date-parse-from-format.php Documentation pour date_parse_from_format.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $format    Format accepté par la méthode DateTime::createFromFormat().
 * @param string   $date    Chaîne représentant la date.
 *
 * @return array	Retourne un tableau associatif avec des informations détaillées sur la date donnée.
 *
 */
if(!function_exists('date_parse_from_formatThis'))
{
    function date_parse_from_formatThis($format, $date)
    {
		$format = (string)$format;
		$date = (string)$date;

		return date_parse_from_format($format, $date);
    }
}

/**
 * date_sun_infoThis
 *
 * Retourne un tableau avec les informations sur le lever/coucher du soleil ainsi que le début et la fin de l'aube.
 *
 * @link http://php.net/manual/fr/function.date-sun-info.php Documentation pour date_sun_info.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param int      $time    Timestamp.
 * @param float    $latitude    Latitude, en degrés.
 * @param float    $longitude    Longitude, en degrés.
 *
 * @return array	Retourne un tableau en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('date_sun_infoThis'))
{
    function date_sun_infoThis($time, $latitude, $longitude)
    {
		$time = (int)$time;
		$latitude = (float)$latitude;
		$longitude = (float)$longitude;

		return date_sun_info($time, $latitude, $longitude);
    }
}

/**
 * date_sunriseThis
 *
 * Retourne l'heure de lever du soleil pour un jour et un endroit donnés.
 *
 * @link http://php.net/manual/fr/function.date-sunrise.php Documentation pour date_sunrise.
 *
 * @version PHP 5
 *
 * @param int      $timestamp    Le timestamp Unix du jour pour lequel l'heure de lever du soleil est donnée.
 * @param int      $format
 * @param float    $latitude    Par défaut, c'est le Nord. Passez une valeur négative pour le Sud. Voir aussi date.default_latitude.
 * @param float    $longitude    Par défaut, c'est l'Est. Passez une valeur négative pour l'Ouest. Voir aussi date.default_longitude.
 * @param float    $zenith    Par défaut : date.sunrise_zenith
 * @param float    $gmt_offset    Spécifié en heures.
 *
 * @return mixed	Retourne l'heure de lever du soleil dans le format spécifié en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('date_sunriseThis'))
{
    function date_sunriseThis($timestamp, $format = SUNFUNCS_RET_STRING, $latitude = NULL, $longitude = NULL, $zenith = NULL, $gmt_offset = 0)
    {
		$timestamp = (int)$timestamp;
		$format = (int)$format;
		$latitude = empty($latitude) ? (float)ini_get("date.default_latitude") : (float)$latitude;
		$longitude = empty($longitude) ? (float)ini_get("date.default_longitude") : (float)$longitude;
		$zenith = empty($zenith) ? (float)ini_get("date.sunrise_zenith") : (float)$zenith;
		$gmt_offset = (float)$gmt_offset;

		return date_sunrise($timestamp, $format, $latitude, $longitude, $zenith, $gmt_offset);
    }
}

/**
 * date_sunsetThis
 *
 * Retourne l'heure de coucher du soleil pour un jour et un endroit donnés.
 *
 * @link http://php.net/manual/fr/function.date-sunset.php Documentation pour date_sunset.
 *
 * @version PHP 5
 *
 * @param int      $timestamp    Le timestamp Unix du jour pour lequel l'heure du coucher du soleil est donnée.
 * @param int      $format
 * @param float    $latitude    Par défaut, c'est le Nord. Passez une valeur négative pour le Sud. Voir aussi date.default_latitude.
 * @param float    $longitude    Par défaut, c'est l'Est. Passez une valeur négative pour l'Ouest. Voir aussi date.default_longitude.
 * @param float    $zenith    Par défaut : date.sunrise_zenith
 * @param float    $gmt_offset    Spécifié en heures.
 *
 * @return mixed	Retourne l'heure de coucher du soleil dans le format spécifié ou FALSE si une erreur survient.
 *
 */
if(!function_exists('date_sunsetThis'))
{
    function date_sunsetThis($timestamp, $format = SUNFUNCS_RET_STRING, $latitude = NULL, $longitude = NULL, $zenith = NULL, $gmt_offset = 0)
    {
		$timestamp = (int)$timestamp;
		$format = (int)$format;
		$latitude = empty($latitude) ? (float)ini_get("date.default_latitude") : (float)$latitude;
		$longitude = empty($longitude) ? (float)ini_get("date.default_longitude") : (float)$longitude;
		$zenith = empty($zenith) ? (float)ini_get("date.sunset_zenith") : (float)$zenith;
		$gmt_offset = (float)$gmt_offset;

		return date_sunset($timestamp, $format, $latitude, $longitude, $zenith, $gmt_offset);
    }
}

/**
 * dba_closeThis
 *
 * Ferme une base DBA.
 *
 * @link http://php.net/manual/fr/function.dba-close.php Documentation pour dba_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le gestionnaire de la base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('dba_closeThis'))
{
    function dba_closeThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_close($handle);
    }
}

/**
 * dba_deleteThis
 *
 * Efface une ligne dans une base DBA.
 *
 * @link http://php.net/manual/fr/function.dba-delete.php Documentation pour dba_delete.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $key    La clé de l'entrée à effacer.
 * @param resource $handle    Le gestionnaire de la base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_deleteThis'))
{
    function dba_deleteThis($key, $handle)
    {
		$key = (string)$key;
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_delete($key, $handle);
    }
}

/**
 * dba_existsThis
 *
 * Vérifie qu'une clé DBA existe.
 *
 * @link http://php.net/manual/fr/function.dba-exists.php Documentation pour dba_exists.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $key    La clé à vérifier.
 * @param resource $handle    Le gestionnaire de base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return bool	Retourne TRUE si la clé existe, FALSE sinon.
 *
 */
if(!function_exists('dba_existsThis'))
{
    function dba_existsThis($key, $handle)
    {
		$key = (string)$key;
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_exists($key, $handle);
    }
}

/**
 * dba_fetchThis
 *
 * Lit les données liées à une clé DBA.
 *
 * @link http://php.net/manual/fr/function.dba-fetch.php Documentation pour dba_fetch.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $key    La clé correspondant aux données.
 * @param resource $handle    Le nombre de paires clé-valeur que vous souhaitez ignorer lors de l'utilisation de bases cdb. Cette valeur sera ignorée pour toutes les autres bases de données qui ne supportent pas les clés multiples avec le même nom.
 *
 * @return string	Retourne la chaîne associée si la paire clé/valeur est trouvée, FALSE sinon.
 *
 */
if(!function_exists('dba_fetchThis'))
{
    function dba_fetchThis($key, $handle)
    {
		$key = (string)$key;
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_fetch($key, $handle);
    }
}

/**
 * dba_firstkeyThis
 *
 * Lit la première clé DBA.
 *
 * @link http://php.net/manual/fr/function.dba-firstkey.php Documentation pour dba_firstkey.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le gestionnaire de base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return string	Retourne la clé en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_firstkeyThis'))
{
    function dba_firstkeyThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_firstkey($handle);
    }
}

/**
 * dba_handlersThis
 *
 * Liste les gestionnaires DBA disponibles.
 *
 * @link http://php.net/manual/fr/function.dba-handlers.php Documentation pour dba_handlers.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param bool     $full_info    Active l'affiche de toutes les informations dans le résultat.
 *
 * @return array	Retourne un tableau de gestionnaires disponibles. Si full_info est défini à TRUE, le tableau sera associé avec les noms des gestionnaires en tant que clés, et les informations en tant que valeurs. Sinon, le résultat sera un tableau indexé par les noms des gestionnaires.
 *
 */
if(!function_exists('dba_handlersThis'))
{
    function dba_handlersThis($full_info = false)
    {
		$full_info = (bool)$full_info;

		return dba_handlers($full_info);
    }
}

/**
 * dba_insertThis
 *
 * Insère une entrée DBA.
 *
 * @link http://php.net/manual/fr/function.dba-insert.php Documentation pour dba_insert.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $key    La clé de l'entrée à insérer. Si cette clé existe déjà dans la base de données, cette fonction échouera. Utilisez la fonction dba_replace() si vous devez remplacer une clé existante.
 * @param string   $value    La valeur à insérer.
 * @param resource $handle    Le gestionnaire de base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_insertThis'))
{
    function dba_insertThis($key, $value, $handle)
    {
		$key = (string)$key;
		$value = (string)$value;
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_insert($key, $value, $handle);
    }
}

/**
 * dba_key_splitThis
 *
 * Transforme une représentation de clé DBA par chaîne en une représentation par tableau.
 *
 * @link http://php.net/manual/fr/function.dba-key-split.php Documentation pour dba_key_split.
 *
 * @version PHP 5
 *
 * @param mixed     $key    La clé sous forme de chaîne de caractères.
 *
 * @return mixed	Retourne un tableau sous la forme array(0 => group, 1 => nom_valeur). Cette fonction retourne FALSE si key vaut NULL ou FALSE.
 *
 */
if(!function_exists('dba_key_splitThis'))
{
    function dba_key_splitThis($key)
    {
		$key = ($key);
		return dba_key_split($key);
    }
}

/**
 * dba_listThis
 *
 * Liste tous les fichiers de bases de données DBA ouverts.
 *
 * @link http://php.net/manual/fr/function.dba-list.php Documentation pour dba_list.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return array	Un tableau associatif, sous la forme idressource => nomfichier.
 *
 */
if(!function_exists('dba_listThis'))
{
    function dba_listThis()
    {
		return dba_list();
    }
}

/**
 * dba_nextkeyThis
 *
 * Lit la clé DBA suivante.
 *
 * @link http://php.net/manual/fr/function.dba-nextkey.php Documentation pour dba_nextkey.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le gestionnaire de base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return string	Retourne la clé en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_nextkeyThis'))
{
    function dba_nextkeyThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_nextkey($handle);
    }
}

/**
 * dba_openThis
 *
 * Ouvre une base de données DBA.
 *
 * @link http://php.net/manual/fr/function.dba-open.php Documentation pour dba_open.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Chemin sur votre système de fichiers.
 * @param string   $mode    Il vaut r pour lecture seule, w pour lecture/écriture, c pour lecture/écriture, et création si la base n'existe pas, et n pour création, écrasement et accès en lecture/écriture. La base de données est créée en mode BTree ; les autres modes (comme Hash ou Queue) ne sont pas supportés. De plus, vous pouvez choisir la méthode de verrouillage de la base avec le caractère suivant. Utilisez l pour verrouiller la base avec un fichier .lck, ou d pour verrouiller la base elle-même. Il est important que vos application utilisent ces options de manière cohérente. Si vous voulez tester la possibilité d'accès, et ne pas attendre la disponibilité du verrou, vous pouvez ajouter la lettre t comme troisième caractère. Lorsque vous êtes absolument certain que votre base ne requière pas de verrou, vous pouvez utiliser le tiret - à la place de l ou d. Lorsque vous n'utilisez ni d, ni l ni -, dba va verrouiller en mode d.
 * @param string   $handler    Le nom du gestionnaire qui doit être utilisé pour accéder à path. C'est passé à tous les paramètres facultatifs donnés à dba_open() et peut agir au nom d'eux.
 * @param mixed     $item
 *
 * @return resource	Retourne un gestionnaire positif en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_openThis'))
{
    function dba_openThis($path, $mode, $handler = NULL, $handler1 = NULL)
    {
		$path = (string)$path;
		$mode = (string)$mode;
		$handler = (string)$handler;
		$handler1 = ($handler1);
		return dba_open($path, $mode, $handler, $handler1);
    }
}

/**
 * dba_optimizeThis
 *
 * Optimise une base DBA.
 *
 * @link http://php.net/manual/fr/function.dba-optimize.php Documentation pour dba_optimize.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le gestionnaire de base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_optimizeThis'))
{
    function dba_optimizeThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_optimize($handle);
    }
}

/**
 * dba_popenThis
 *
 * Ouvre une connexion persistante à une base de données DBA.
 *
 * @link http://php.net/manual/fr/function.dba-popen.php Documentation pour dba_popen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Chemin sur votre système de fichiers.
 * @param string   $mode    Il vaut r pour lecture seule, w pour lecture/écriture, c pour lecture/écriture, et création si la base n'existe pas, et n pour création, écrasement, et accès en lecture/écriture.
 * @param string   $handler    Le nom du gestionnaire qui doit être utilisé pour accéder à path. Le gestionnaire reçoit tous les paramètres supplémentaires passés à la fonction dba_popen().
 * @param mixed     $item
 *
 * @return resource	Retourne un gestionnaire positif en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_popenThis'))
{
    function dba_popenThis($path, $mode, $handler = NULL, $handler1 = NULL)
    {
		$path = (string)$path;
		$mode = (string)$mode;
		$handler = (string)$handler;
		$handler1 = ($handler1);
		return dba_popen($path, $mode, $handler, $handler1);
    }
}

/**
 * dba_replaceThis
 *
 * Remplace ou insère une ligne DBA.
 *
 * @link http://php.net/manual/fr/function.dba-replace.php Documentation pour dba_replace.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $key    La clé de l'entrée à remplacer.
 * @param string   $value    La valeur utilisée pour le remplacement.
 * @param resource $handle    Le gestionnaire de base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_replaceThis'))
{
    function dba_replaceThis($key, $value, $handle)
    {
		$key = (string)$key;
		$value = (string)$value;
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_replace($key, $value, $handle);
    }
}

/**
 * dba_syncThis
 *
 * Synchronise une base de données DBA.
 *
 * @link http://php.net/manual/fr/function.dba-sync.php Documentation pour dba_sync.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le gestionnaire de base de données, retourné par la fonction dba_open() ou la fonction dba_popen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dba_syncThis'))
{
    function dba_syncThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return dba_sync($handle);
    }
}

/**
 * dbase_add_recordThis
 *
 * Ajoute un enregistrement dans une base de données dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-add-record.php Documentation pour dbase_add_record.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 * @param array    $record    Un tableau de données indexé. Le nombre d'éléments doit être égal au nombre de champs dans la base de données, sinon la fonction dbase_add_record() échouera.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_add_recordThis'))
{
    function dbase_add_recordThis($dbase_identifier, $record)
    {
		$dbase_identifier = (int)$dbase_identifier;
		$record = (array)$record;

		return dbase_add_record($dbase_identifier, $record);
    }
}

/**
 * dbase_closeThis
 *
 * Ferme une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-close.php Documentation pour dbase_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_closeThis'))
{
    function dbase_closeThis($dbase_identifier)
    {
		$dbase_identifier = (int)$dbase_identifier;

		return dbase_close($dbase_identifier);
    }
}

/**
 * dbase_createThis
 *
 * Crée une base de données dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-create.php Documentation pour dbase_create.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom de la base de données. Il peut être un chemin relatif ou absolu vers le fichier où dBase stockera vos données.
 * @param array    $fields    Un tableau de tableaux, chaque tableau décrit le format d'un champ de la base de données. Chaque champ est constitué d'un nom, d'un caractère indiquant le type du champ et optionnellement, une longueur et une précision.
 *
 * @return int	Retourne un identifiant de lien à la base de données si la base de données a été créée avec succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_createThis'))
{
    function dbase_createThis($filename, $fields)
    {
		$filename = (string)$filename;
		$fields = (array)$fields;

		return dbase_create($filename, $fields);
    }
}

/**
 * dbase_delete_recordThis
 *
 * Efface un enregistrement dans une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-delete-record.php Documentation pour dbase_delete_record.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 * @param int      $record_number    Un entier compris entre 1 et le nombre maximal d'enregistrements dans la base de données (tel que retourné par la fonction dbase_numrecords()).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_delete_recordThis'))
{
    function dbase_delete_recordThis($dbase_identifier, $record_number)
    {
		$dbase_identifier = (int)$dbase_identifier;
		$record_number = (int)$record_number;

		return dbase_delete_record($dbase_identifier, $record_number);
    }
}

/**
 * dbase_get_header_infoThis
 *
 * Récupère des informations d'en-tête d'une base de données dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-get-header-info.php Documentation pour dbase_get_header_info.
 *
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 *
 * @return array	Un tableau indexé avec une entrée pour chaque colonne de la base de données. L'index du tableau commence à 0.
 *
 */
if(!function_exists('dbase_get_header_infoThis'))
{
    function dbase_get_header_infoThis($dbase_identifier)
    {
		$dbase_identifier = (int)$dbase_identifier;

		return dbase_get_header_info($dbase_identifier);
    }
}

/**
 * dbase_get_recordThis
 *
 * Lit un enregistrement dans une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-get-record.php Documentation pour dbase_get_record.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 * @param int      $record_number    L'index de l'enregistrement.
 *
 * @return array	Un tableau indexé avec l'enregistrement. Ce tableau inclut également une clé associée nommée deleted qui est définie à 1 si l'enregistrement a été marqué pour effacement (voir dbase_delete_record()).
 *
 */
if(!function_exists('dbase_get_recordThis'))
{
    function dbase_get_recordThis($dbase_identifier, $record_number)
    {
		$dbase_identifier = (int)$dbase_identifier;
		$record_number = (int)$record_number;

		return dbase_get_record($dbase_identifier, $record_number);
    }
}

/**
 * dbase_get_record_with_namesThis
 *
 * Lit un enregistrement dans une base dBase, sous la forme d'un tableau associatif.
 *
 * @link http://php.net/manual/fr/function.dbase-get-record-with-names.php Documentation pour dbase_get_record_with_names.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 * @param int      $record_number    L'index de l'enregistrement.
 *
 * @return array	L'enregistrement, sous la forme d'un tableau associatif. Ceci inclut également une clé nommée deleted qui est définie à 1 si l'enregistrement a été marqué pour effacement (voir la fonction dbase_delete_record()).
 *
 */
if(!function_exists('dbase_get_record_with_namesThis'))
{
    function dbase_get_record_with_namesThis($dbase_identifier, $record_number)
    {
		$dbase_identifier = (int)$dbase_identifier;
		$record_number = (int)$record_number;

		return dbase_get_record_with_names($dbase_identifier, $record_number);
    }
}

/**
 * dbase_numfieldsThis
 *
 * Compte le nombre de champs d'une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-numfields.php Documentation pour dbase_numfields.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 *
 * @return int	Le nombre de champs de la base de données, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_numfieldsThis'))
{
    function dbase_numfieldsThis($dbase_identifier)
    {
		$dbase_identifier = (int)$dbase_identifier;

		return dbase_numfields($dbase_identifier);
    }
}

/**
 * dbase_numrecordsThis
 *
 * Compte le nombre d'enregistrements dans une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-numrecords.php Documentation pour dbase_numrecords.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 *
 * @return int	Le nombre d'enregistrements dans la base de données ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_numrecordsThis'))
{
    function dbase_numrecordsThis($dbase_identifier)
    {
		$dbase_identifier = (int)$dbase_identifier;

		return dbase_numrecords($dbase_identifier);
    }
}

/**
 * dbase_openThis
 *
 * Ouvre une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-open.php Documentation pour dbase_open.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom de la base de données. Il peut être un chemin relatif ou absolu vers le fichier où dBase stockera vos données.
 * @param int      $mode    Un entier correspondant à celui utilisé pour l'appel système open() (Typiquement, 0 signifie lecture seule, 1 signifie écriture seule, et 2 signifie lecture et écriture).
 *
 * @return int	Retourne un identifiant de lien à la base de données si la base de données est ouverte avec succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_openThis'))
{
    function dbase_openThis($filename, $mode)
    {
		$filename = (string)$filename;
		$mode = (int)$mode;

		return dbase_open($filename, $mode);
    }
}

/**
 * dbase_packThis
 *
 * Compacte une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-pack.php Documentation pour dbase_pack.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par dbase_open() ou dbase_create().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_packThis'))
{
    function dbase_packThis($dbase_identifier)
    {
		$dbase_identifier = (int)$dbase_identifier;

		return dbase_pack($dbase_identifier);
    }
}

/**
 * dbase_replace_recordThis
 *
 * Remplace un enregistrement dans une base dBase.
 *
 * @link http://php.net/manual/fr/function.dbase-replace-record.php Documentation pour dbase_replace_record.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $dbase_identifier    L'identifiant du lien à la base de données, retourné par la fonction dbase_open() ou la fonction dbase_create().
 * @param array    $record    Un tableau indexé des données. Le nombre d'éléments doit être égal au nombre de champs dans la base de données, sinon la fonction dbase_replace_record() échouera.
 * @param int      $record_number    Un entier entre 1 et le nombre total d'enregistrements dans la base de données (comme retourné par la fonction dbase_numrecords()).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dbase_replace_recordThis'))
{
    function dbase_replace_recordThis($dbase_identifier, $record, $record_number)
    {
		$dbase_identifier = (int)$dbase_identifier;
		$record = (array)$record;
		$record_number = (int)$record_number;

		return dbase_replace_record($dbase_identifier, $record, $record_number);
    }
}

/**
 * dcgettextThis
 *
 * Remplace le domaine lors d'une recherche.
 *
 * @link http://php.net/manual/fr/function.dcgettext.php Documentation pour dcgettext.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $domain    Le domaine
 * @param string   $message    Le message
 * @param int      $category    La catégorie
 *
 * @return string	Une chaîne de caractères en cas de succès.
 *
 */
if(!function_exists('dcgettextThis'))
{
    function dcgettextThis($domain, $message, $category)
    {
		$domain = (string)$domain;
		$message = (string)$message;
		$category = (int)$category;

		return dcgettext($domain, $message, $category);
    }
}

/**
 * dcngettextThis
 *
 * Version plurielle de dcgettext.
 *
 * @link http://php.net/manual/fr/function.dcngettext.php Documentation pour dcngettext.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $domain    Le domaine
 * @param string   $msgid1
 * @param string   $msgid2
 * @param int      $n
 * @param int      $category
 *
 * @return string	Une chaîne de caractères en cas de succès.
 *
 */
if(!function_exists('dcngettextThis'))
{
    function dcngettextThis($domain, $msgid1, $msgid2, $n, $category)
    {
		$domain = (string)$domain;
		$msgid1 = (string)$msgid1;
		$msgid2 = (string)$msgid2;
		$n = (int)$n;
		$category = (int)$category;

		return dcngettext($domain, $msgid1, $msgid2, $n, $category);
    }
}

/**
 * deaggregateThis
 *
 * Désagrège un objet.
 *
 * @link http://php.net/manual/fr/function.deaggregate.php Documentation pour deaggregate.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param object   $object
 * @param string   $class_name    Si le paramètre optionnel class_name est passé, seules les méthodes et propriétés de cette classe sont désagrégées. Sinon, toutes les méthodes et propriétés agrégées sont retirées.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('deaggregateThis'))
{
    function deaggregateThis($object, $class_name = NULL)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;

		return deaggregate($object, $class_name);
    }
}

/**
 * debug_backtraceThis
 *
 * Génère le contexte de déboguage.
 *
 * @link http://php.net/manual/fr/function.debug-backtrace.php Documentation pour debug_backtrace.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $options    Depuis PHP 5.3.6, ce paramètre est un masque d'options suivantes :
 * @param int      $limit    Depuis 5.4.0, ce paramètre peut être utilisé pour limiter le nombre de trames dans la pile retournée. Par défaut (limit=0), la fonction retourne toutes les trames de la pile.
 *
 * @return array	Retourne un tableau de tableaux associatifs. Les éléments de retour possibles sont les suivants :
 *
 */
if(!function_exists('debug_backtraceThis'))
{
    function debug_backtraceThis($options = DEBUG_BACKTRACE_PROVIDE_OBJECT, $limit = 0)
    {
		$options = (int)$options;
		$limit = (int)$limit;

		return debug_backtrace($options, $limit);
    }
}

/**
 * debug_print_backtraceThis
 *
 * Affiche la pile d'exécution PHP.
 *
 * @link http://php.net/manual/fr/function.debug-print-backtrace.php Documentation pour debug_print_backtrace.
 *
 * @version PHP 5
 *
 * @param int      $options    Depuis 5.3.6, ce paramètre est un masque d'options suivantes :
 * @param int      $limit    Depuis 5.4.0, ce paramètre peut être utilisé pour limiter le nombre de trames de la pile à afficher. Par défaut (limit=0), toutes les trames de la pile seront affichées.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('debug_print_backtraceThis'))
{
    function debug_print_backtraceThis($options = 0, $limit = 0)
    {
		$options = (int)$options;
		$limit = (int)$limit;

		return debug_print_backtrace($options, $limit);
    }
}

/**
 * debug_zval_dumpThis
 *
 * Extrait une représentation sous forme de chaîne d'une valeur interne à Zend pour affichage.
 *
 * @link http://php.net/manual/fr/function.debug-zval-dump.php Documentation pour debug_zval_dump.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $variable    La variable à évaluer.
 * @param mixed     $item
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('debug_zval_dumpThis'))
{
    function debug_zval_dumpThis($variable, $variable1 = NULL)
    {
		$variable = ($variable);
		$variable1 = ($variable1);
		return debug_zval_dump($variable, $variable1);
    }
}

/**
 * decbinThis
 *
 * Convertit de décimal en binaire.
 *
 * @link http://php.net/manual/fr/function.decbin.php Documentation pour decbin.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $number    Valeur décimale à convertir
 *
 * @return string	Une représentation binaire de number.
 *
 */
if(!function_exists('decbinThis'))
{
    function decbinThis($number)
    {
		$number = (int)$number;

		return decbin($number);
    }
}

/**
 * dechexThis
 *
 * Convertit de décimal en hexadécimal.
 *
 * @link http://php.net/manual/fr/function.dechex.php Documentation pour dechex.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $number    La valeur décimale à convertir. Vu que le type entier de PHP est signé, mais que la fonction dechex() ne fonctionne qu'avec des entiers non-signés, les entiers négatifs seront traités comme s'ils étaient non-signés.
 *
 * @return string	Une représentation hexadécimale de number.
 *
 */
if(!function_exists('dechexThis'))
{
    function dechexThis($number)
    {
		$number = (int)$number;

		return dechex($number);
    }
}

/**
 * decoctThis
 *
 * Convertit de décimal en octal.
 *
 * @link http://php.net/manual/fr/function.decoct.php Documentation pour decoct.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $number    Valeur décimale à convertir
 *
 * @return string	Une représentation octale de number.
 *
 */
if(!function_exists('decoctThis'))
{
    function decoctThis($number)
    {
		$number = (int)$number;

		return decoct($number);
    }
}

/**
 * defineThis
 *
 * Définit une constante.
 *
 * @link http://php.net/manual/fr/function.define.php Documentation pour define.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $name    Le nom de la constante.
 * @param mixed     $value    La valeur de la constante ; seuls les scalaires et les valeurs NULL sont autorisées. Les valeurs scalaires sont les valeurs entier, nombre décimal, chaîne de caractères ou booléen. Il est techniquement possible de définir des constantes de type ressource, mais cela est fortement déconseillé, et peut causer des comportements inattendus.
 * @param bool     $case_insensitive    S'il vaut TRUE, le nom de la constante sera insensible à la casse : CONSTANT et Constant représentent des valeurs identiques.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('defineThis'))
{
    function defineThis($name, $value, $case_insensitive = false)
    {
		$name = (string)$name;
		$value = ($value);
		$case_insensitive = (bool)$case_insensitive;

		return define($name, $value, $case_insensitive);
    }
}

/**
 * define_syslog_variablesThis
 *
 * Initialise toutes les variables relatives aux fonctions syslog.
 *
 * @link http://php.net/manual/fr/function.define-syslog-variables.php Documentation pour define_syslog_variables.
 *
 * @version PHP 4
 * @version PHP 5 < 5.4.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('define_syslog_variablesThis'))
{
    function define_syslog_variablesThis()
    {
		return define_syslog_variables();
    }
}

/**
 * definedThis
 *
 * Vérifie l'existence d'une constante.
 *
 * @link http://php.net/manual/fr/function.defined.php Documentation pour defined.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $name    Le nom de la constante.
 *
 * @return bool	Retourne TRUE si le nom de la constante fournie par le paramètre name a été définie, FALSE sinon.
 *
 */
if(!function_exists('definedThis'))
{
    function definedThis($name)
    {
		$name = (string)$name;

		return defined($name);
    }
}

/**
 * deg2radThis
 *
 * Convertit un nombre de degrés en radians.
 *
 * @link http://php.net/manual/fr/function.deg2rad.php Documentation pour deg2rad.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $number    L'angle, en degrés
 *
 * @return float	L'équivalent, en radians, de number.
 *
 */
if(!function_exists('deg2radThis'))
{
    function deg2radThis($number)
    {
		$number = (float)$number;

		return deg2rad($number);
    }
}

/**
 * dgettextThis
 *
 * Remplace le domaine courant.
 *
 * @link http://php.net/manual/fr/function.dgettext.php Documentation pour dgettext.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $domain    Le domaine
 * @param string   $message    Le message
 *
 * @return string	Une chaîne de caractères en cas de succès.
 *
 */
if(!function_exists('dgettextThis'))
{
    function dgettextThis($domain, $message)
    {
		$domain = (string)$domain;
		$message = (string)$message;

		return dgettext($domain, $message);
    }
}

/**
 * dio_closeThis
 *
 * Ferme l'accès au fichier.
 *
 * @link http://php.net/manual/fr/function.dio-close.php Documentation pour dio_close.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('dio_closeThis'))
{
    function dio_closeThis($fd)
    {
		$fd = is_resource($fd) ? $fd : NULL;

		return dio_close($fd);
    }
}

/**
 * dio_fcntlThis
 *
 * Exécute une fonction fichier de langage C.
 *
 * @link http://php.net/manual/fr/function.dio-fcntl.php Documentation pour dio_fcntl.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 * @param int      $cmd    Peut être une de ces opérations suivantes :
 * @param mixed     $args    args est un tableau associatif lorsque cmd vaut F_SETLK ou F_SETLLW, avec les entrées suivantes :
 *
 * @return mixed	Retourne le résultat d'un appel en C.
 *
 */
if(!function_exists('dio_fcntlThis'))
{
    function dio_fcntlThis($fd, $cmd, $args = NULL)
    {
		$fd = is_resource($fd) ? $fd : NULL;
		$cmd = (int)$cmd;
		$args = ($args);
		return dio_fcntl($fd, $cmd, $args);
    }
}

/**
 * dio_openThis
 *
 * Ouvre un nouveau fichier avec les permissions spécifiées.
 *
 * @link http://php.net/manual/fr/function.dio-open.php Documentation pour dio_open.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $filename    Le chemin vers le fichier à ouvrir.
 * @param int      $flags    Le paramètre flags est une valeur comprenant des drapeaux depuis la liste suivante. Cette valeur doit inclure une constante parmi O_RDONLY, O_WRONLY, ou O_RDWR. À cette constante, vous pouvez y ajouter n'importe quel drapeaux depuis cette liste.
 * @param int      $mode    Si flags contient O_CREAT, mode définira les permissions du fichier (permissions de création). Mode est requis pour une opération correcte lorsque O_CREAT est spécifié dans le mode et est ignoré sinon. Les permissions assignées au fichier créé seront affectées par la configuration du processus umask.
 *
 * @return resource	Une ressource de fichier ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('dio_openThis'))
{
    function dio_openThis($filename, $flags, $mode = 0)
    {
		$filename = (string)$filename;
		$flags = (int)$flags;
		$mode = (int)$mode;

		return dio_open($filename, $flags, $mode);
    }
}

/**
 * dio_readThis
 *
 * Lit les octets dans un fichier.
 *
 * @link http://php.net/manual/fr/function.dio-read.php Documentation pour dio_read.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 * @param int      $len    Le nombre d'octets à lire. Si le paramètre n'est pas spécifié, dio_read() lit un bloc de 1 ko.
 *
 * @return string	Les octets lus de fd.
 *
 */
if(!function_exists('dio_readThis'))
{
    function dio_readThis($fd, $len = 1024)
    {
		$fd = is_resource($fd) ? $fd : NULL;
		$len = (int)$len;

		return dio_read($fd, $len);
    }
}

/**
 * dio_seekThis
 *
 * Déplace le pointeur interne de fichier.
 *
 * @link http://php.net/manual/fr/function.dio-seek.php Documentation pour dio_seek.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 * @param int      $pos    La nouvelle position.
 * @param int      $whence    Spécifie comment la position pos devrait être interprétée :
 *
 */
if(!function_exists('dio_seekThis'))
{
    function dio_seekThis($fd, $pos, $whence = SEEK_SET)
    {
		$fd = is_resource($fd) ? $fd : NULL;
		$pos = (int)$pos;
		$whence = (int)$whence;

		return dio_seek($fd, $pos, $whence);
    }
}

/**
 * dio_statThis
 *
 * Lit des informations sur le fichier.
 *
 * @link http://php.net/manual/fr/function.dio-stat.php Documentation pour dio_stat.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 *
 * @return array	Retourne un tableau associatif avec les clés suivantes :
 *
 */
if(!function_exists('dio_statThis'))
{
    function dio_statThis($fd)
    {
		$fd = is_resource($fd) ? $fd : NULL;

		return dio_stat($fd);
    }
}

/**
 * dio_tcsetattrThis
 *
 * Modifie les attributs du terminal et le taux de baud du port série.
 *
 * @link http://php.net/manual/fr/function.dio-tcsetattr.php Documentation pour dio_tcsetattr.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 * @param array    $options    Les options actuellement disponibles sont :
 *
 * @return bool	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('dio_tcsetattrThis'))
{
    function dio_tcsetattrThis($fd, $options)
    {
		$fd = is_resource($fd) ? $fd : NULL;
		$options = (array)$options;

		return dio_tcsetattr($fd, $options);
    }
}

/**
 * dio_truncateThis
 *
 * Tronque un fichier.
 *
 * @link http://php.net/manual/fr/function.dio-truncate.php Documentation pour dio_truncate.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 * @param int      $offset    La position en octets.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dio_truncateThis'))
{
    function dio_truncateThis($fd, $offset)
    {
		$fd = is_resource($fd) ? $fd : NULL;
		$offset = (int)$offset;

		return dio_truncate($fd, $offset);
    }
}

/**
 * dio_writeThis
 *
 * Écrit des données dans le fichier avec la possibilité de tronquer sa longueur.
 *
 * @link http://php.net/manual/fr/function.dio-write.php Documentation pour dio_write.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fd    La ressource de fichier retournée par dio_open().
 * @param string   $data    Les données à écrire.
 * @param int      $len    La grandeur des données à écrire en octets. S'il n'est pas spécifié, la fonction écrit toutes les données au fichier spécifié.
 *
 * @return int	Retourne le nombre d'octets écrits dans fd.
 *
 */
if(!function_exists('dio_writeThis'))
{
    function dio_writeThis($fd, $data, $len = 0)
    {
		$fd = is_resource($fd) ? $fd : NULL;
		$data = (string)$data;
		$len = (int)$len;

		return dio_write($fd, $data, $len);
    }
}

/**
 * dirThis
 *
 * Retourne une instance de la classe Directory.
 *
 * @link http://php.net/manual/fr/function.dir.php Documentation pour dir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $directory    Le dossier à ouvrir
 * @param resource $context
 *
 * @return Directory	Retourne une instance de la classe Directory en cas de succès, NULL si de mauvais arguments sont passés, ou FALSE pour les autres types d'erreur.
 *
 */
if(!function_exists('dirThis'))
{
    function dirThis($directory, $context = NULL)
    {
		$directory = (string)$directory;
		$context = is_resource($context) ? $context : NULL;

		return dir($directory, $context);
    }
}

/**
 * dirnameThis
 *
 * Renvoie le nom du dossier parent.
 *
 * @link http://php.net/manual/fr/function.dirname.php Documentation pour dirname.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Un chemin. Sous Windows, les slash (/) et antislash (\) sont utilisés comme séparateurs de dossier. Dans les autres environnements, seul le slash (/) est utilisé.
 *
 * @return string	Retourne le dossier parent du chemin. S'il n'y a pas de slash dans le chemin path, un point ('.') sera retourné, indiquant le dossier courant. Sinon, la chaîne retournée sera le chemin path dont on aura supprimé tous les /component.
 *
 */
if(!function_exists('dirnameThis'))
{
    function dirnameThis($path)
    {
		$path = (string)$path;

		return dirname($path);
    }
}

/**
 * disk_free_spaceThis
 *
 * Renvoie l'espace disque disponible sur le système de fichiers ou la partition.
 *
 * @link http://php.net/manual/fr/function.disk-free-space.php Documentation pour disk_free_space.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $directory    Un dossier du système de fichiers ou une partition d'un disque.
 *
 * @return float	Retourne le nombre d'octets disponible, sous la forme d'un nombre décimal ou FALSE si une erreur survient.
 *
 */
if(!function_exists('disk_free_spaceThis'))
{
    function disk_free_spaceThis($directory)
    {
		$directory = (string)$directory;

		return disk_free_space($directory);
    }
}

/**
 * disk_total_spaceThis
 *
 * Retourne la taille d'un dossier ou d'une partition.
 *
 * @link http://php.net/manual/fr/function.disk-total-space.php Documentation pour disk_total_space.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $directory    Un dossier du système de fichiers ou la partition d'un disque.
 *
 * @return float	Retourne la taille en octets, sous la forme d'un nombre décimal ou FALSE si une erreur survient.
 *
 */
if(!function_exists('disk_total_spaceThis'))
{
    function disk_total_spaceThis($directory)
    {
		$directory = (string)$directory;

		return disk_total_space($directory);
    }
}

/**
 * dlThis
 *
 * Charge une extension PHP à la volée.
 *
 * @link http://php.net/manual/fr/function.dl.php Documentation pour dl.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $library    Ce paramètre est seulement le nom de fichier de l'extension, qui dépend de votre plate-forme. Par exemple l'extension sockets (si compilée comme module partagé, et non par défaut), sera appelée sockets.so sous Unix, et php_sockets.dll sous Windows. Le dossier à partir duquel sont chargées vos extensions dépend de votre plate-forme : Windows - S'il n'est pas explicitement indiqué dans le fichier php.ini, le dossier des extensions est c:\php4\extensions\ (PHP 4) ou C:\php5\ (PHP 5) par défaut. Unix - S'il n'est pas explicitement indiqué dans le fichier php.ini, le dossier des extensions dépend de
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Si la fonctionnalité de chargement de module n'est pas disponible, ou a été désactivée (soit en désactivant la directive enable_dl ou en activant le safe mode dans le php.ini) une E_ERROR sera émise et l'exécution du script sera stoppée. Si la fonction dl() échoue parce que la bibliothèque n'a pu être trouvée, dl() retournera FALSE et émettra un message d'alerte E_WARNING.
 *
 */
if(!function_exists('dlThis'))
{
    function dlThis($library)
    {
		$library = (string)$library;

		return dl($library);
    }
}

/**
 * dngettextThis
 *
 * Version plurielle de dgettext.
 *
 * @link http://php.net/manual/fr/function.dngettext.php Documentation pour dngettext.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $domain    Le domaine
 * @param string   $msgid1
 * @param string   $msgid2
 * @param int      $n
 *
 * @return string	Une chaîne de caractères en cas de succès.
 *
 */
if(!function_exists('dngettextThis'))
{
    function dngettextThis($domain, $msgid1, $msgid2, $n)
    {
		$domain = (string)$domain;
		$msgid1 = (string)$msgid1;
		$msgid2 = (string)$msgid2;
		$n = (int)$n;

		return dngettext($domain, $msgid1, $msgid2, $n);
    }
}

/**
 * dns_get_recordThis
 *
 * Lit les données DNS associées à un hôte.
 *
 * @link http://php.net/manual/fr/function.dns-get-record.php Documentation pour dns_get_record.
 *
 * @version PHP 5
 *
 * @param string   $hostname    hostname doit être un nom d'hôte DNS valide, comme www.example.com. Des résolutions inversées peuvent être faites avec la notation in-addr.arpa, mais la fonction gethostbyaddr() est plus efficace pour faire des résolutions inverses.
 * @param int      $type    Par défaut, dns_get_record() va rechercher toutes les ressources associées à hostname. Pour limiter la taille de la requête, le paramètre optionnel type peut prendre l'une des valeurs constantes suivantes : DNS_A, DNS_CNAME, DNS_HINFO, DNS_MX, DNS_NS, DNS_PTR, DNS_SOA, DNS_TXT, DNS_AAAA, DNS_SRV, DNS_NAPTR, DNS_A6, DNS_ALL ou DNS_ANY.
 * @param array    &$authns    Passé par référence, et, s'il est fourni, recevra les enregistrements de ressources pour les Authoritative Name Servers.
 * @param array    &$addtl    Passé par référence, et, s'il est fourni, recevra tous les enregistrements supplémentaires.
 * @param bool     &$raw    Dans le cas du mode brut, nous requêtons uniquement le type demandé au lieu de parcourir tous les types avant d'accéder à celui demandé.
 *
 * @return array	dns_get_record() retourne un tableau de tableaux associatifs, ou FALSE si une erreur survient. Chaque tableau contient au minimum les index suivants :
 *
 */
if(!function_exists('dns_get_recordThis'))
{
    function dns_get_recordThis($hostname, $type = DNS_ANY, &$authns = NULL, &$addtl = NULL, &$raw = false)
    {
		$hostname = (string)$hostname;
		$type = (int)$type;
		$authns = (array)$authns;
		$addtl = (array)$addtl;
		$raw = (bool)$raw;

		return dns_get_record($hostname, $type, $authns, $addtl, $raw);
    }
}

/**
 * dom_import_simplexmlThis
 *
 * Transforme un objet SimpleXMLElement en un objet DOMElement.
 *
 * @link http://php.net/manual/fr/function.dom-import-simplexml.php Documentation pour dom_import_simplexml.
 *
 * @version PHP 5
 *
 * @param SimpleXMLElement     $node    Le noeud SimpleXMLElement.
 *
 * @return DOMElement	Le noeud DOMElement à ajouter ou FALSE si une erreur survient.
 *
 */
if(!function_exists('dom_import_simplexmlThis'))
{
    function dom_import_simplexmlThis($node)
    {
		$node = is_object($node) ? $node : NULL;

		return dom_import_simplexml($node);
    }
}

/**
 * dotnet_loadThis
 *
 * Charge un module DOTNET.
 *
 * @link http://php.net/manual/fr/function.dotnet-load.php Documentation pour dotnet_load.
 *
 * @version PHP 4
 *
 * @param string   $assembly_name
 * @param string   $datatype_name
 * @param int      $codepage
 *
 */
if(!function_exists('dotnet_loadThis'))
{
    function dotnet_loadThis($assembly_name, $datatype_name = NULL, $codepage = NULL)
    {
		$assembly_name = (string)$assembly_name;
		$datatype_name = (string)$datatype_name;
		$codepage = (int)$codepage;

		return dotnet_load($assembly_name, $datatype_name, $codepage);
    }
}

/**
 * eachThis
 *
 * Retourne chaque paire clé/valeur d'un tableau.
 *
 * @link http://php.net/manual/fr/function.each.php Documentation pour each.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 *
 * @return array	Retourne la paire clé/valeur courante du tableau array et avance le pointeur de tableau. Cette paire est retournée dans un tableau de 4 éléments, avec les clés 0, 1, key, et value. Les éléments 0 et key contiennent le nom de la clé et 1 et value contiennent la valeur.
 *
 */
if(!function_exists('eachThis'))
{
    function eachThis(&$array)
    {
		$array = (array)$array;

		return each($array);
    }
}

/**
 * easter_dateThis
 *
 * Retourne un timestamp UNIX pour Pâques, à minuit pour une année donnée.
 *
 * @link http://php.net/manual/fr/function.easter-date.php Documentation pour easter_date.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $year    L'année, sous la forme d'un nombre compris entre 1970 et 2037
 *
 * @return int	La date pour Pâques, sous la forme d'un timestamp unix.
 *
 */
if(!function_exists('easter_dateThis'))
{
    function easter_dateThis($year = NULL)
    {
		$year = (int)$year;

		return easter_date($year);
    }
}

/**
 * easter_daysThis
 *
 * Retourne le nombre de jours entre le 21 Mars et Pâques, pour une année donnée.
 *
 * @link http://php.net/manual/fr/function.easter-days.php Documentation pour easter_days.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $year    L'année, sous la forme d'un nombre positif
 * @param int      $method    Permet le calcul des dates de Pâques en se basant sur le calendrier Grégorien pour les années entre 1582 et 1752 lorsque définit à CAL_EASTER_ROMAN. Voir les constantes des calendriers pour plus de constantes valides.
 *
 * @return int	Le nombre de jours entre le 21 Mars et Pâques, pour l'année year fournie.
 *
 */
if(!function_exists('easter_daysThis'))
{
    function easter_daysThis($year = NULL, $method = CAL_EASTER_DEFAULT)
    {
		$year = (int)$year;
		$method = (int)$method;

		return easter_days($year, $method);
    }
}

/**
 * echoThis
 *
 * Affiche une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.echo.php Documentation pour echo.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $arg1    Le paramètre à afficher.
 * @param string   $item
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('echoThis'))
{
    function echoThis($arg1, $arg2 = NULL)
    {
		$arg1 = (string)$arg1;
		$arg2 = (string)$arg2;

		return echo($arg1, $arg2);
    }
}

/**
 * emptyThis
 *
 * Détermine si une variable est vide.
 *
 * @link http://php.net/manual/fr/function.empty.php Documentation pour empty.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    Variable à vérifier. Aucune alerte n'est générée si la variable n'existe pas. Cela signifie que empty() est strictement équivalent à !isset($var) || $var == false.
 *
 * @return bool	Retourne FALSE si var existe et est non-vide, et dont la valeur n'est pas zéro.
 *
 */
if(!function_exists('emptyThis'))
{
    function emptyThis($var)
    {
		$var = ($var);
		return empty($var);
    }
}

/**
 * endThis
 *
 * Positionne le pointeur de tableau en fin de tableau.
 *
 * @link http://php.net/manual/fr/function.end.php Documentation pour end.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau. Ce tableau est passé par référence car il sera modifié par la fonction. Cela signifie que vous devez passer une vraie variable et non une fonction retournant un tableau, car actuellement, seules les variables peuvent être passées par référence.
 *
 * @return mixed	Retourne la valeur du dernier élément ou FALSE si le tableau est vide.
 *
 */
if(!function_exists('endThis'))
{
    function endThis(&$array)
    {
		$array = (array)$array;

		return end($array);
    }
}

/**
 * eregThis
 *
 * Recherche par expression rationnelle standard.
 *
 * @link http://php.net/manual/fr/function.ereg.php Documentation pour ereg.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Expression rationnelle sensible à la casse.
 * @param string   $string    La chaîne d'entrée.
 * @param array    &$regs    Si au moins une séquence est trouvée (éventuellement dans les parenthèses capturantes de pattern), et que la fonction est appelée avec un troisième argument regs, les résultats seront enregistrés dans regs. $regs[1] contiendra la première parenthèse capturante (celle qui commence le plus tôt), $regs[2] contiendra la deuxième parenthèse capturante (celle qui commence après la première), et ainsi de suite. $regs[0] contient une copie de la chaîne.
 *
 * @return int	Retourne la longueur de l'occurrence trouvée si une occurrence a été trouvée dans la chaîne string et FALSE dans le cas contraire ou si une erreur est survenue.
 *
 */
if(!function_exists('eregThis'))
{
    function eregThis($pattern, $string, &$regs = NULL)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$regs = (array)$regs;

		return ereg($pattern, $string, $regs);
    }
}

/**
 * ereg_replaceThis
 *
 * >Remplacement par expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.ereg-replace.php Documentation pour ereg_replace.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Une expression rationnelle POSIX.
 * @param string   $replacement    Si pattern contient des parenthèses capturantes, replacement pourra contenir des séquences de la forme \digit, qui seront remplacées par le texte capturé par la parenthèse capturante numéro digit. \0 correspond à la chaîne originale complète. De 0 à 9 parenthèses capturantes peuvent être utilisées. Les parenthèses peuvent être imbriquées, et leur numéro d'ordre est défini par leurs parenthèses ouvrantes.
 * @param string   $string    La chaîne d'entrée.
 *
 * @return string	La chaîne modifiée est retournée. (Ce qui signifie que la chaîne originale sera retournée si aucune occurrence n'est trouvée.)
 *
 */
if(!function_exists('ereg_replaceThis'))
{
    function ereg_replaceThis($pattern, $replacement, $string)
    {
		$pattern = (string)$pattern;
		$replacement = (string)$replacement;
		$string = (string)$string;

		return ereg_replace($pattern, $replacement, $string);
    }
}

/**
 * eregiThis
 *
 * Recherche par expression rationnelle insensible à la casse.
 *
 * @link http://php.net/manual/fr/function.eregi.php Documentation pour eregi.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Expression rationnelle insensible à la casse.
 * @param string   $string    La chaîne d'entrée.
 * @param array    &$regs    Si des correspondances sont trouvées pour les sous-masques entre parenthèses de pattern et que la fonction est appelé avec le troisième argument regs, les correspondances seront stockées dans des éléments du tableau regs. $regs[1] contiendra la sous-chaîne qui commence à la première parenthèse la plus à gauche ; $regs[2], la seconde, et ainsi de suite. $regs[0] contiendra une copie complète de la chaîne matchée.
 *
 * @return int	Retourne la longueur de la chaîne trouvée si une correspondance pour le masque pattern a été trouvée dans string, ou FALSE si aucune correspondance n'a été trouvée ou si une erreur est survenue.
 *
 */
if(!function_exists('eregiThis'))
{
    function eregiThis($pattern, $string, &$regs = NULL)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$regs = (array)$regs;

		return eregi($pattern, $string, $regs);
    }
}

/**
 * eregi_replaceThis
 *
 * Remplacement par expression rationnelle insensible à la casse.
 *
 * @link http://php.net/manual/fr/function.eregi-replace.php Documentation pour eregi_replace.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Une expression rationnelle POSIX.
 * @param string   $replacement    Si pattern contient des sous-masques mis entre parenthèses, replacement contiendra des sous-chaînes, sous la forme \digit, qui seront remplacées par le texte correspondant au sous-masque mis entre parenthèses ; \0 correspondra au contenu complet de la chaîne. Il est possible d'utiliser jusqu'à 9 sous-chaînes. Les parenthèses peuvent être imbriquées et seront comptées à partir de la parenthèse ouvrante.
 * @param string   $string    La chaîne d'entrée.
 *
 * @return string	La chaîne modifiée est retournée. Si aucune correspondance n'est trouvée dans string, alors elle sera retournée sans aucune modification.
 *
 */
if(!function_exists('eregi_replaceThis'))
{
    function eregi_replaceThis($pattern, $replacement, $string)
    {
		$pattern = (string)$pattern;
		$replacement = (string)$replacement;
		$string = (string)$string;

		return eregi_replace($pattern, $replacement, $string);
    }
}

/**
 * error_get_lastThis
 *
 * Récupère la dernière erreur survenue.
 *
 * @link http://php.net/manual/fr/function.error-get-last.php Documentation pour error_get_last.
 *
 * @version PHP 5 >= 5.2.0
 * @return array	Retourne un tableau associatif décrivant la dernière erreur avec les clés "type", "message", "file" et "line". Si l'erreur a été causée par une fonctione interne à PHP, le message commencera par le nom de cette fonction. Retourne NULL s'il n'y a actuellement aucune erreur.
 *
 */
if(!function_exists('error_get_lastThis'))
{
    function error_get_lastThis()
    {
		return error_get_last();
    }
}

/**
 * error_logThis
 *
 * Envoi un message d'erreur vers le gestionnaire d'erreurs défini.
 *
 * @link http://php.net/manual/fr/function.error-log.php Documentation pour error_log.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $message    Le message d'erreur qui doit être stocké.
 * @param int      $message_type    Spécifie la destination du message d'erreur. Les types possibles de messages sont :
 * @param string   $destination    La destination. Cela dépend du paramètre message_type décrit ci-dessus.
 * @param string   $extra_headers    Les en-têtes supplémentaires. Ils sont utilisés lorsque le paramètre message_type est défini à 1. Ce type de message utilise la même fonction interne que la fonction mail().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('error_logThis'))
{
    function error_logThis($message, $message_type = 0, $destination = NULL, $extra_headers = NULL)
    {
		$message = (string)$message;
		$message_type = (int)$message_type;
		$destination = (string)$destination;
		$extra_headers = (string)$extra_headers;

		return error_log($message, $message_type, $destination, $extra_headers);
    }
}

/**
 * error_reportingThis
 *
 * Fixe le niveau de rapport d'erreurs PHP.
 *
 * @link http://php.net/manual/fr/function.error-reporting.php Documentation pour error_reporting.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $level    Le nouveau niveau error_reporting. Il peut être un champ de bits ou une combinaison de constantes. L'utilisation des constantes est vivement recommandée pour assurer une compatibilité maximale avec les futures versions. Au fur et à mesure que de nouveaux niveaux d'erreurs sont créés, les valeurs évoluent, c'est pourquoi les anciennes valeurs n'ont plus forcément la même signification. Les constantes représentant les niveaux d'erreurs disponibles et la signification de ces niveaux d'erreurs est décrite dans le manuel sur les constantes prédéfinies.
 *
 * @return int	Retourne l'ancien niveau d'error_reporting ou le niveau d'erreurs courant si le paramètre level n'est pas fourni.
 *
 */
if(!function_exists('error_reportingThis'))
{
    function error_reportingThis($level = NULL)
    {
		$level = (int)$level;

		return error_reporting($level);
    }
}

/**
 * escapeshellargThis
 *
 * Protège une chaîne de caractères pour utilisation en ligne de commande.
 *
 * @link http://php.net/manual/fr/function.escapeshellarg.php Documentation pour escapeshellarg.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param string   $arg    L'argument à échapper.
 *
 * @return string	La chaîne échappée.
 *
 */
if(!function_exists('escapeshellargThis'))
{
    function escapeshellargThis($arg)
    {
		$arg = (string)$arg;

		return escapeshellarg($arg);
    }
}

/**
 * escapeshellcmdThis
 *
 * Protège les caractères spéciaux du Shell.
 *
 * @link http://php.net/manual/fr/function.escapeshellcmd.php Documentation pour escapeshellcmd.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $command    La commande à échapper.
 *
 * @return string	La chaîne échappée.
 *
 */
if(!function_exists('escapeshellcmdThis'))
{
    function escapeshellcmdThis($command)
    {
		$command = (string)$command;

		return escapeshellcmd($command);
    }
}

/**
 * evalThis
 *
 * Exécute une chaîne comme un script PHP.
 *
 * @link http://php.net/manual/fr/function.eval.php Documentation pour eval.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $code    Code PHP valide à évaluer. Le code ne doit pas être entouré de balises PHP ouvrante et fermante, i.e. 'echo "Hi!";' doit être passé au lieu de '<? echo "Hi!"; >'. Il est toujours possible de quitter et de retourner en mode PHP en utilisant les balises PHP appropriées, i.e. 'echo "En mode PHP !"; ?>En mode HTML !<? echo "Retour en mode PHP !";'. Mise à part cela, le code PHP passé doit être valide. Ceci inclut que toutes les instructions doivent se terminer par un point-virgule. 'echo "Hi!"' par exemple résultera en une erreur fatale, alors que 'echo "Hi!";' fonctionnera. Une instruction return terminera immédiatement l'évaluation du code. Le code sera exécuté dans le scope du code appelant la fonction eval(). Aussi, toutes les variables définies ou modifiées dans l'appel à la fonction eval() resteront visibles après la fin de l'exécution de la fonction.
 *
 * @return mixed	eval() retourne NULL sauf si return est appelé dans le code évalué, auquel cas la valeur passée à return est retournée. Dans le cas d'une erreur de syntaxe dans le code évalué, eval() retourne FALSE et l'exécution du code suivant continue normalement. Il n'est pas possible d'attraper l'erreur d'analyse de la fonction eval() en utilisant la fonction set_error_handler().
 *
 */
if(!function_exists('evalThis'))
{
    function evalThis($code)
    {
		$code = (string)$code;

		return eval($code);
    }
}

/**
 * execThis
 *
 * Exécute un programme externe.
 *
 * @link http://php.net/manual/fr/function.exec.php Documentation pour exec.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $command    La commande à exécuter.
 * @param array    &$output    Si l'argument output est présent, alors ce tableau sera rempli par les lignes retournées par la commande. Les espaces de début et de fin de chaîne, comme \n, ne seront pas inclus dans ce tableau. Il faut noter que si ce tableau contient des éléments, exec() ajoutera les nouvelles lignes à la fin du tableau. Si vous ne voulez pas que les nouveaux éléments soient concaténés, utilisez la fonction unset() avec ce tableau avant de le passer à exec().
 * @param int      &$return_var    Si l'argument return_var est présent en plus du tableau output, alors le statut de retour d'exécution sera inscrit dans cette variable.
 *
 * @return string	La dernière ligne du résultat de la commande. Pour exécuter une commande et obtenir le résultat sans aucun traitement, il faut utiliser la fonction passthru().
 *
 */
if(!function_exists('execThis'))
{
    function execThis($command, &$output = NULL, &$return_var = NULL)
    {
		$command = (string)$command;
		$output = (array)$output;
		$return_var = (int)$return_var;

		return exec($command, $output, $return_var);
    }
}

/**
 * exif_imagetypeThis
 *
 * Détermine le type d'une image.
 *
 * @link http://php.net/manual/fr/function.exif-imagetype.php Documentation pour exif_imagetype.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $filename
 *
 * @return int	Lorsqu'une valeur valide est trouvée, la constante appropriée est retournée, et sinon, FALSE. La valeur retournée est la même que la fonction getimagesize() à l'index 2, mais cette fonction est bien plus rapide.
 *
 */
if(!function_exists('exif_imagetypeThis'))
{
    function exif_imagetypeThis($filename)
    {
		$filename = (string)$filename;

		return exif_imagetype($filename);
    }
}

/**
 * exif_read_dataThis
 *
 * Lit les en-têtes EXIF dans les images JPEG ou TIFF.
 *
 * @link http://php.net/manual/fr/function.exif-read-data.php Documentation pour exif_read_data.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier image à lire. Il ne peut pas être une URL.
 * @param string   $sections    Liste de valeur séparées par des virgules des sections qui devront être présentées dans le tableau de résultat. Si aucune des sections demandées n'est trouvée, la valeur retournée est FALSE.
 * @param bool     $arrays    Spécifie si chaque section doit être un tableau ou non. Les sections COMPUTED, THUMBNAIL et COMMENT seront toujours transformées en tableau, car elle contiennent des noms qui risquent d'être en conflit.
 * @param bool     $thumbnail    Lorsque défini à TRUE, la miniature elle-même est lue. Sinon, seules les données contenues dans le taf seront lues.
 *
 * @return array	Retourne un tableau associatif où les indexes sont les noms des en-têtes et les valeurs sont les valeurs associées à ces en-têtes. Si aucune donnée ne peut être retournée, exif_read_data() retournera FALSE.
 *
 */
if(!function_exists('exif_read_dataThis'))
{
    function exif_read_dataThis($filename, $sections = NULL, $arrays = false, $thumbnail = false)
    {
		$filename = (string)$filename;
		$sections = (string)$sections;
		$arrays = (bool)$arrays;
		$thumbnail = (bool)$thumbnail;

		return exif_read_data($filename, $sections, $arrays, $thumbnail);
    }
}

/**
 * exif_tagnameThis
 *
 * Lit le nom d'en-tête EXIF d'un index.
 *
 * @link http://php.net/manual/fr/function.exif-tagname.php Documentation pour exif_tagname.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param int      $index    L'id de Tag pour lequel un nom sera recherché.
 *
 * @return string	exif_tagname() retourne FALSE si index n'est pas un id de tag EXIF défini, sinon elle retourne le nom de l'en-tête.
 *
 */
if(!function_exists('exif_tagnameThis'))
{
    function exif_tagnameThis($index)
    {
		$index = (int)$index;

		return exif_tagname($index);
    }
}

/**
 * exif_thumbnailThis
 *
 * Récupère la miniature d'une image TIFF ou JPEG.
 *
 * @link http://php.net/manual/fr/function.exif-thumbnail.php Documentation pour exif_thumbnail.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier image à lire. Cette image contient une miniature.
 * @param int      &$width    La largeur retournée de la miniature retournée.
 * @param int      &$height    La hauteur retournée de la miniature retournée.
 * @param int      &$imagetype    Le type de l'image retourné de la miniature retournée. Peut être soit TIFF, soit JPEG.
 *
 * @return string	Retourne la miniature embarquée ou FALSE si l'image ne contient pas de miniature.
 *
 */
if(!function_exists('exif_thumbnailThis'))
{
    function exif_thumbnailThis($filename, &$width = NULL, &$height = NULL, &$imagetype = NULL)
    {
		$filename = (string)$filename;
		$width = (int)$width;
		$height = (int)$height;
		$imagetype = (int)$imagetype;

		return exif_thumbnail($filename, $width, $height, $imagetype);
    }
}

/**
 * exitThis
 *
 * Affiche un message et termine le script courant.
 *
 * @link http://php.net/manual/fr/function.exit.php Documentation pour exit.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $status    Si status est une chaîne de caractères, cette fonction affichera le status juste avant de sortir. Si le paramètre status est un entier, cette valeur pourra être utilisée comme statut de sortie et ne sera pas affichée. Le statut de sortie peut être dans l'intervalle 0-255, le statut de sortie 255 est réservé par PHP et ne doit pas être utilisé. Le statut 0 est utilisé pour terminer le programme avec succès.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('exitThis'))
{
    function exitThis($status = NULL)
    {
		$status = (string)$status;

		return exit($status);
    }
}

/**
 * expThis
 *
 * Calcul l'exponentielle de e.
 *
 * @link http://php.net/manual/fr/function.exp.php Documentation pour exp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	'e', à la puissance arg.
 *
 */
if(!function_exists('expThis'))
{
    function expThis($arg)
    {
		$arg = (float)$arg;

		return exp($arg);
    }
}

/**
 * explodeThis
 *
 * Coupe une chaîne en segments.
 *
 * @link http://php.net/manual/fr/function.explode.php Documentation pour explode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $delimiter    Le séparateur.
 * @param string   $string    La chaîne initiale.
 * @param int      $limit    Si limit est défini et positif, le tableau retourné contient, au maximum, limit éléments, et le dernier élément contiendra le reste de la chaîne. Si le paramètre limit est négatif, tous les éléments, excepté les -limit derniers éléments sont retournés. Si limit vaut zéro, il est traité comme valant 1.
 *
 * @return array	Retourne un tableau de chaînes de caractères créées en découpant la chaîne du paramètre string en plusieurs morceaux suivant le paramètre delimiter.
 *
 */
if(!function_exists('explodeThis'))
{
    function explodeThis($delimiter, $string, $limit = NULL)
    {
		$delimiter = (string)$delimiter;
		$string = (string)$string;
		$limit = (int)$limit;

		return explode($delimiter, $string, $limit);
    }
}

/**
 * expm1This
 *
 * Calcule précisément exponentiel moins un.
 *
 * @link http://php.net/manual/fr/function.expm1.php Documentation pour expm1.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	'e' à la puissance arg, moins un.
 *
 */
if(!function_exists('expm1This'))
{
    function expm1This($arg)
    {
		$arg = (float)$arg;

		return expm1($arg);
    }
}

/**
 * extension_loadedThis
 *
 * Détermine si une extension est chargée ou non.
 *
 * @link http://php.net/manual/fr/function.extension-loaded.php Documentation pour extension_loaded.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $name    Le nom de l'extension. Vous pouvez connaître le nom des différentes extensions PHP en utilisant la fonction phpinfo() ou bien si vous utilisez la version CGI ou CLI de PHP, vous pouvez utiliser l'option de ligne de commande -m pour afficher toutes les extensions disponibles :
 *
 * @return bool	Retourne TRUE si l'extension name a été chargée, FALSE sinon.
 *
 */
if(!function_exists('extension_loadedThis'))
{
    function extension_loadedThis($name)
    {
		$name = (string)$name;

		return extension_loaded($name);
    }
}

/**
 * extractThis
 *
 * Importe les variables dans la table des symboles.
 *
 * @link http://php.net/manual/fr/function.extract.php Documentation pour extract.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$var_array    Un tableau associatif. Cette fonction crée les variables dont les noms sont les index de ce tableau, et leur affecte la valeur associée. Pour chaque paire clé/valeur, extract() crée une variable, avec les paramètres extract_type et prefix. Vous devez utiliser un tableau associatif. Un tableau indexé numériquement ne produira aucun résultat, à moins que vous n'utilisiez l'option EXTR_PREFIX_ALL ou EXTR_PREFIX_INVALID.
 * @param int      $extract_type    Le traitement des collisions est déterminé par extract_type. Ce paramètre peut prendre une des valeurs suivantes : Si extract_type est omis, extract() utilise EXTR_OVERWRITE par défaut.
 * @param string   $prefix
 *
 * @return int	Retourne le nombre de variables importées avec succès dans la table des symboles.
 *
 */
if(!function_exists('extractThis'))
{
    function extractThis(&$var_array, $extract_type = EXTR_OVERWRITE, $prefix = NULL)
    {
		$var_array = (array)$var_array;
		$extract_type = (int)$extract_type;
		$prefix = (string)$prefix;

		return extract($var_array, $extract_type, $prefix);
    }
}

/**
 * ezmlm_hashThis
 *
 * Calcule le hachage demandé par EZMLM.
 *
 * @link http://php.net/manual/fr/function.ezmlm-hash.php Documentation pour ezmlm_hash.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $addr    L'adresse E-Mail qui doit être hachée.
 *
 * @return int	La valeur du hachage de addr.
 *
 */
if(!function_exists('ezmlm_hashThis'))
{
    function ezmlm_hashThis($addr)
    {
		$addr = (string)$addr;

		return ezmlm_hash($addr);
    }
}

/**
 * fam_cancel_monitorThis
 *
 * Termine le monitoring.
 *
 * @link http://php.net/manual/fr/function.fam-cancel-monitor.php Documentation pour fam_cancel_monitor.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 * @param resource $fam_monitor    Une ressource retournée par une des fonctions fam_monitor_XXX.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fam_cancel_monitorThis'))
{
    function fam_cancel_monitorThis($fam, $fam_monitor)
    {
		$fam = is_resource($fam) ? $fam : NULL;
		$fam_monitor = is_resource($fam_monitor) ? $fam_monitor : NULL;

		return fam_cancel_monitor($fam, $fam_monitor);
    }
}

/**
 * fam_closeThis
 *
 * Ferme la connexion FAM.
 *
 * @link http://php.net/manual/fr/function.fam-close.php Documentation pour fam_close.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('fam_closeThis'))
{
    function fam_closeThis($fam)
    {
		$fam = is_resource($fam) ? $fam : NULL;

		return fam_close($fam);
    }
}

/**
 * fam_monitor_collectionThis
 *
 * Surveille les changements d'une collection de fichiers dans un dossier.
 *
 * @link http://php.net/manual/fr/function.fam-monitor-collection.php Documentation pour fam_monitor_collection.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 * @param string   $dirname    Chemin vers le dossier contenant les fichiers à surveiller
 * @param int      $depth    La profondeur maximale de recherche à partir de ce dossier
 * @param string   $mask    Un masque restreignant les noms de fichier
 *
 * @return resource	Retourne une ressource ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fam_monitor_collectionThis'))
{
    function fam_monitor_collectionThis($fam, $dirname, $depth, $mask)
    {
		$fam = is_resource($fam) ? $fam : NULL;
		$dirname = (string)$dirname;
		$depth = (int)$depth;
		$mask = (string)$mask;

		return fam_monitor_collection($fam, $dirname, $depth, $mask);
    }
}

/**
 * fam_monitor_directoryThis
 *
 * Surveiller les changements dans un dossier.
 *
 * @link http://php.net/manual/fr/function.fam-monitor-directory.php Documentation pour fam_monitor_directory.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 * @param string   $dirname    Chemin vers le dossier surveillé
 *
 * @return resource	Retourne une ressource ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fam_monitor_directoryThis'))
{
    function fam_monitor_directoryThis($fam, $dirname)
    {
		$fam = is_resource($fam) ? $fam : NULL;
		$dirname = (string)$dirname;

		return fam_monitor_directory($fam, $dirname);
    }
}

/**
 * fam_monitor_fileThis
 *
 * Surveille un fichier régulier pour les changements.
 *
 * @link http://php.net/manual/fr/function.fam-monitor-file.php Documentation pour fam_monitor_file.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 * @param string   $filename    Chemin vers le fichier surveillé
 *
 * @return resource	Retourne une ressource ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fam_monitor_fileThis'))
{
    function fam_monitor_fileThis($fam, $filename)
    {
		$fam = is_resource($fam) ? $fam : NULL;
		$filename = (string)$filename;

		return fam_monitor_file($fam, $filename);
    }
}

/**
 * fam_next_eventThis
 *
 * Retourne le prochain événement FAM en attente.
 *
 * @link http://php.net/manual/fr/function.fam-next-event.php Documentation pour fam_next_event.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 *
 * @return array	Retourne un tableau contenant un code événement FAM dans l'entrée "code", le chemin vers le fichier ciblé dans l'entrée "filename" et optionnellement un nom d'hôte dans l'entrée "hostname".
 *
 */
if(!function_exists('fam_next_eventThis'))
{
    function fam_next_eventThis($fam)
    {
		$fam = is_resource($fam) ? $fam : NULL;

		return fam_next_event($fam);
    }
}

/**
 * fam_openThis
 *
 * Ouvre une connexion vers le démon FAM.
 *
 * @link http://php.net/manual/fr/function.fam-open.php Documentation pour fam_open.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $appname    chaîne de caractères identifiant l'application pour les journaux de logs.
 *
 * @return resource	Retourne une ressource représentant une connexion à un service FAM en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fam_openThis'))
{
    function fam_openThis($appname = NULL)
    {
		$appname = (string)$appname;

		return fam_open($appname);
    }
}

/**
 * fam_pendingThis
 *
 * Vérifie si des événements FAM sont disponibles.
 *
 * @link http://php.net/manual/fr/function.fam-pending.php Documentation pour fam_pending.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 *
 * @return int	Retourne une valeur différente de zéro si des évènements sont disponibles pour être récupérés avec fam_next_event().
 *
 */
if(!function_exists('fam_pendingThis'))
{
    function fam_pendingThis($fam)
    {
		$fam = is_resource($fam) ? $fam : NULL;

		return fam_pending($fam);
    }
}

/**
 * fam_resume_monitorThis
 *
 * Reprend un monitoring suspendu.
 *
 * @link http://php.net/manual/fr/function.fam-resume-monitor.php Documentation pour fam_resume_monitor.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 * @param resource $fam_monitor    Une ressource retournée par une des fonctions fam_monitor_XXX
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fam_resume_monitorThis'))
{
    function fam_resume_monitorThis($fam, $fam_monitor)
    {
		$fam = is_resource($fam) ? $fam : NULL;
		$fam_monitor = is_resource($fam_monitor) ? $fam_monitor : NULL;

		return fam_resume_monitor($fam, $fam_monitor);
    }
}

/**
 * fam_suspend_monitorThis
 *
 * Suspend temporairement le monitoring.
 *
 * @link http://php.net/manual/fr/function.fam-suspend-monitor.php Documentation pour fam_suspend_monitor.
 *
 * @version PHP 5 <= 5.0.5
 *
 * @param resource $fam    Une ressource représentant une connexion à un service FAM retournée par la fonction fam_open()
 * @param resource $fam_monitor    Une ressource retournée par une des fonctions fam_monitor_XXX
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fam_suspend_monitorThis'))
{
    function fam_suspend_monitorThis($fam, $fam_monitor)
    {
		$fam = is_resource($fam) ? $fam : NULL;
		$fam_monitor = is_resource($fam_monitor) ? $fam_monitor : NULL;

		return fam_suspend_monitor($fam, $fam_monitor);
    }
}

/**
 * fbsql_affected_rowsThis
 *
 * Lit le nombre de lignes affectées par la dernière requête.
 *
 * @link http://php.net/manual/fr/function.fbsql-affected-rows.php Documentation pour fbsql_affected_rows.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return int	Si la dernière requête échoue, fbsql_affected_rows() retourne -1.
 *
 */
if(!function_exists('fbsql_affected_rowsThis'))
{
    function fbsql_affected_rowsThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_affected_rows($link_identifier);
    }
}

/**
 * fbsql_autocommitThis
 *
 * Active ou désactive la validation automatique.
 *
 * @link http://php.net/manual/fr/function.fbsql-autocommit.php Documentation pour fbsql_autocommit.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param bool     $OnOff    Si ce paramètre optionnel est fourni, le statut de l'autovalidation sera changé. Si le paramètre onoff vaut TRUE, FBSQL va se mettre en mode d'autovalidation, et les requêtes seront validées automatiquement si aucune erreur n'est trouvée. Si le paramètre onoff vaut FALSE, FBSQL va se mettre en mode de validation manuelle, et les requêtes seront validées par l'appel de la fonction fbsql_commit() ou annulées par fbsql_rollback().
 *
 * @return bool	Retourne le statut courant de l'autovalidation, sous la forme d'un booléen.
 *
 */
if(!function_exists('fbsql_autocommitThis'))
{
    function fbsql_autocommitThis($link_identifier, $OnOff = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$OnOff = (bool)$OnOff;

		return fbsql_autocommit($link_identifier, $OnOff);
    }
}

/**
 * fbsql_blob_sizeThis
 *
 * Retourne la taille d'un BLOB.
 *
 * @link http://php.net/manual/fr/function.fbsql-blob-size.php Documentation pour fbsql_blob_size.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $blob_handle    Un gestionnaire de BLOB, retourné par la fonction fbsql_create_blob().
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return int	Retourne la taille du BLOB, sous la forme d'un entier ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_blob_sizeThis'))
{
    function fbsql_blob_sizeThis($blob_handle, $link_identifier = NULL)
    {
		$blob_handle = (string)$blob_handle;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_blob_size($blob_handle, $link_identifier);
    }
}

/**
 * fbsql_change_userThis
 *
 * Change le nom d'utilisateur de la session active.
 *
 * @link http://php.net/manual/fr/function.fbsql-change-user.php Documentation pour fbsql_change_user.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $user    Le nom du nouvel utilisateur.
 * @param string   $password    Le mot de passe du nouvel utilisateur.
 * @param string   $database    Si spécifié, ce sera la base de données par défaut après le changement d'utilisateur.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_change_userThis'))
{
    function fbsql_change_userThis($user, $password, $database = NULL, $link_identifier = NULL)
    {
		$user = (string)$user;
		$password = (string)$password;
		$database = (string)$database;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_change_user($user, $password, $database, $link_identifier);
    }
}

/**
 * fbsql_clob_sizeThis
 *
 * Retourne la taille d'un CLOB.
 *
 * @link http://php.net/manual/fr/function.fbsql-clob-size.php Documentation pour fbsql_clob_size.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $clob_handle    Un gestionnaire de CLOB, retourné par la fonction fbsql_create_clob().
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return int	Retourne la taille du CLOB, sous la forme d'un entier ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_clob_sizeThis'))
{
    function fbsql_clob_sizeThis($clob_handle, $link_identifier = NULL)
    {
		$clob_handle = (string)$clob_handle;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_clob_size($clob_handle, $link_identifier);
    }
}

/**
 * fbsql_closeThis
 *
 * Ferme la connexion FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-close.php Documentation pour fbsql_close.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_closeThis'))
{
    function fbsql_closeThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_close($link_identifier);
    }
}

/**
 * fbsql_commitThis
 *
 * Valide une transaction.
 *
 * @link http://php.net/manual/fr/function.fbsql-commit.php Documentation pour fbsql_commit.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_commitThis'))
{
    function fbsql_commitThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_commit($link_identifier);
    }
}

/**
 * fbsql_connectThis
 *
 * Ouvre une connexion à un serveur FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-connect.php Documentation pour fbsql_connect.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $hostname    Le nom du serveur hôte.
 * @param string   $username    Le nom de l'utilisateur pour la connexion.
 * @param string   $password    Le mot de passe pour la connexion.
 *
 * @return resource	Retourne une ressource de connexion positive FrontBase en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_connectThis'))
{
    function fbsql_connectThis($hostname = NULL, $username = NULL, $password = NULL)
    {
		$hostname = empty($hostname) ? (string)ini_get("fbsql.default_host") : (string)$hostname;
		$username = empty($username) ? (string)ini_get("fbsql.default_user") : (string)$username;
		$password = empty($password) ? (string)ini_get("fbsql.default_password") : (string)$password;

		return fbsql_connect($hostname, $username, $password);
    }
}

/**
 * fbsql_create_blobThis
 *
 * Crée un BLOB.
 *
 * @link http://php.net/manual/fr/function.fbsql-create-blob.php Documentation pour fbsql_create_blob.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $blob_data    Les données BLOB.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return string	Retourne un gestionnaire de ressource BLOB qui peut être utilisé avec les commandes insertions ou de mise à jour pour stocker le BLOB dans la base de données.
 *
 */
if(!function_exists('fbsql_create_blobThis'))
{
    function fbsql_create_blobThis($blob_data, $link_identifier = NULL)
    {
		$blob_data = (string)$blob_data;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_create_blob($blob_data, $link_identifier);
    }
}

/**
 * fbsql_create_clobThis
 *
 * Crée un CLOB.
 *
 * @link http://php.net/manual/fr/function.fbsql-create-clob.php Documentation pour fbsql_create_clob.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $clob_data    Les données CLOB.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return string	Retourne un gestionnaire de ressource CLOB qui pourra être utilisé avec les commandes d'insertion ou de mise à jour pour stocker le CLOB dans la base de données.
 *
 */
if(!function_exists('fbsql_create_clobThis'))
{
    function fbsql_create_clobThis($clob_data, $link_identifier = NULL)
    {
		$clob_data = (string)$clob_data;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_create_clob($clob_data, $link_identifier);
    }
}

/**
 * fbsql_create_dbThis
 *
 * Crée une base de données.
 *
 * @link http://php.net/manual/fr/function.fbsql-create-db.php Documentation pour fbsql_create_db.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données, sous la forme d'une chaîne de caractères.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $database_options
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_create_dbThis'))
{
    function fbsql_create_dbThis($database_name, $link_identifier = NULL, $database_options = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$database_options = (string)$database_options;

		return fbsql_create_db($database_name, $link_identifier, $database_options);
    }
}

/**
 * fbsql_data_seekThis
 *
 * Déplace le pointeur interne de résultat FBSQL.
 *
 * @link http://php.net/manual/fr/function.fbsql-data-seek.php Documentation pour fbsql_data_seek.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $row_number    Le numéro de la ligne. Commence à 0.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_data_seekThis'))
{
    function fbsql_data_seekThis($result, $row_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$row_number = (int)$row_number;

		return fbsql_data_seek($result, $row_number);
    }
}

/**
 * fbsql_databaseThis
 *
 * Lit ou définit le nom de la base de données utilisée avec une connexion.
 *
 * @link http://php.net/manual/fr/function.fbsql-database.php Documentation pour fbsql_database.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $database    Le nom de la base de données. Si fourni, la base de données par défaut pour la connexion sera changé en database.
 *
 * @return string	Retourne le nom de la base de données utilisée avec cette connexion.
 *
 */
if(!function_exists('fbsql_databaseThis'))
{
    function fbsql_databaseThis($link_identifier, $database = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$database = (string)$database;

		return fbsql_database($link_identifier, $database);
    }
}

/**
 * fbsql_database_passwordThis
 *
 * Modifie/lit le mot de passe dans une base FBSQL.
 *
 * @link http://php.net/manual/fr/function.fbsql-database-password.php Documentation pour fbsql_database_password.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $database_password    Le mot de passe, sous la forme d'une chaîne de caractères. Si fourni, la fonction définira le mot de passe de base de données pour la connexion courante.
 *
 * @return string	Retourne le mot de passe de base de données associé à la connexion courante.
 *
 */
if(!function_exists('fbsql_database_passwordThis'))
{
    function fbsql_database_passwordThis($link_identifier, $database_password = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$database_password = (string)$database_password;

		return fbsql_database_password($link_identifier, $database_password);
    }
}

/**
 * fbsql_db_queryThis
 *
 * Envoie une requête à la base FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-db-query.php Documentation pour fbsql_db_query.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database    La base de données à sélectionner.
 * @param string   $query    La requête SQL à exécuter.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return resource	Retourne un identifiant de résultat positif FrontBase ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_db_queryThis'))
{
    function fbsql_db_queryThis($database, $query, $link_identifier = NULL)
    {
		$database = (string)$database;
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_db_query($database, $query, $link_identifier);
    }
}

/**
 * fbsql_db_statusThis
 *
 * Lit le statut courant d'une base de données.
 *
 * @link http://php.net/manual/fr/function.fbsql-db-status.php Documentation pour fbsql_db_status.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return int	Retourne un entier correspondant au statut courant. Il peut être une des constantes suivantes :
 *
 */
if(!function_exists('fbsql_db_statusThis'))
{
    function fbsql_db_statusThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_db_status($database_name, $link_identifier);
    }
}

/**
 * fbsql_drop_dbThis
 *
 * Supprime une base de données FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-drop-db.php Documentation pour fbsql_drop_db.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_drop_dbThis'))
{
    function fbsql_drop_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_drop_db($database_name, $link_identifier);
    }
}

/**
 * fbsql_errnoThis
 *
 * Retourne le code d'erreur FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-errno.php Documentation pour fbsql_errno.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return int	Retourne le numéro de l'erreur généré par la dernière fonction fbsql ou 0 (zéro) si aucune erreur survient.
 *
 */
if(!function_exists('fbsql_errnoThis'))
{
    function fbsql_errnoThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_errno($link_identifier);
    }
}

/**
 * fbsql_errorThis
 *
 * Retourne le message d'erreur FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-error.php Documentation pour fbsql_error.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return string	Retourne le texte de l'erreur générée par la dernière fonction fbsql ou '' (une chaîne vide) si aucune erreur n'est survenue.
 *
 */
if(!function_exists('fbsql_errorThis'))
{
    function fbsql_errorThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_error($link_identifier);
    }
}

/**
 * fbsql_fetch_arrayThis
 *
 * Lit toute une ligne de résultat dans un tableau.
 *
 * @link http://php.net/manual/fr/function.fbsql-fetch-array.php Documentation pour fbsql_fetch_array.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $result_type    Une constante et peut prendre les valeurs suivantes : FBSQL_ASSOC, FBSQL_NUM, ou FBSQL_BOTH. Lors de l'utilisation de FBSQL_BOTH, en plus de stocker les indices numériques du tableau de résultats, il stockera les données dans des indices associatifs, en utilisant les noms des champs comme clés.
 *
 * @return array	Retourne un tableau qui correspond à la ligne récupérée, ou FALSE s'il n'y a plus de ligne de disponible.
 *
 */
if(!function_exists('fbsql_fetch_arrayThis'))
{
    function fbsql_fetch_arrayThis($result, $result_type = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$result_type = (int)$result_type;

		return fbsql_fetch_array($result, $result_type);
    }
}

/**
 * fbsql_fetch_assocThis
 *
 * Lit toute une ligne de résultat dans un tableau associatif.
 *
 * @link http://php.net/manual/fr/function.fbsql-fetch-assoc.php Documentation pour fbsql_fetch_assoc.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return array	Retourne un tableau associatif contenant la ligne courante du résultat, ou FALSE s'il n'y a plus de lignes.
 *
 */
if(!function_exists('fbsql_fetch_assocThis'))
{
    function fbsql_fetch_assocThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_fetch_assoc($result);
    }
}

/**
 * fbsql_fetch_fieldThis
 *
 * Lit des informations sur une colonne dans un résultat, et retourne un objet.
 *
 * @link http://php.net/manual/fr/function.fbsql-fetch-field.php Documentation pour fbsql_fetch_field.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $field_offset    L'offset numérique du champ. L'index du champ commence à 0. Si aucun n'est spécifié, le prochain champ qui n'a pas été récupéré par la fonction fbsql_fetch_field() sera retourné.
 *
 * @return object	Retourne un objet contenant les informations sur le champ ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_fetch_fieldThis'))
{
    function fbsql_fetch_fieldThis($result, $field_offset = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return fbsql_fetch_field($result, $field_offset);
    }
}

/**
 * fbsql_fetch_lengthsThis
 *
 * Lit la taille de chaque colonne d'un résultat.
 *
 * @link http://php.net/manual/fr/function.fbsql-fetch-lengths.php Documentation pour fbsql_fetch_lengths.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return array	Retourne un tableau, commençant à l'offset 0, qui correspond aux tailles de chaque champ présent dans la dernière ligne récupérée par la fonction fbsql_fetch_row(), ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_fetch_lengthsThis'))
{
    function fbsql_fetch_lengthsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_fetch_lengths($result);
    }
}

/**
 * fbsql_fetch_objectThis
 *
 * Lit une ligne de résultat sous forme d'objet.
 *
 * @link http://php.net/manual/fr/function.fbsql-fetch-object.php Documentation pour fbsql_fetch_object.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return object	Retourne un objet dont les propriétés correspondent à la ligne récupérée ou FALSE s'il n'y a plus de ligne à lire.
 *
 */
if(!function_exists('fbsql_fetch_objectThis'))
{
    function fbsql_fetch_objectThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_fetch_object($result);
    }
}

/**
 * fbsql_fetch_rowThis
 *
 * Lit une ligne de résultat sous forme de tableau numérique.
 *
 * @link http://php.net/manual/fr/function.fbsql-fetch-row.php Documentation pour fbsql_fetch_row.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return array	Retourne un tableau qui correspond à la ligne récupérée où chaque colonne du résultat y est stocké, en commençant par la position 0 ou FALSE s'il n'y a plus de ligne à lire.
 *
 */
if(!function_exists('fbsql_fetch_rowThis'))
{
    function fbsql_fetch_rowThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_fetch_row($result);
    }
}

/**
 * fbsql_field_flagsThis
 *
 * Lit les options associées à une colonne de résultat.
 *
 * @link http://php.net/manual/fr/function.fbsql-field-flags.php Documentation pour fbsql_field_flags.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un pointeur de résultat, retourné par la fonction fbsql_list_fields().
 * @param int      $field_offset    La position numérique du champ. L'index des champs commence à 0.
 *
 * @return string	Retourne les options du champ field_offset, dans le résultat result. Les options sont retournées sous la forme d'un seul mot par option, séparées par des espaces, de façon à faciliter la manipulation avec explode().
 *
 */
if(!function_exists('fbsql_field_flagsThis'))
{
    function fbsql_field_flagsThis($result, $field_offset = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return fbsql_field_flags($result, $field_offset);
    }
}

/**
 * fbsql_field_lenThis
 *
 * Retourne la taille d'un champ.
 *
 * @link http://php.net/manual/fr/function.fbsql-field-len.php Documentation pour fbsql_field_len.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un pointeur de résultat, retourné par la fonction fbsql_list_fields().
 * @param int      $field_offset    La position numérique du champ. L'index des champs commence à 0.
 *
 * @return int	Retourne la taille du champ spécifié.
 *
 */
if(!function_exists('fbsql_field_lenThis'))
{
    function fbsql_field_lenThis($result, $field_offset = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return fbsql_field_len($result, $field_offset);
    }
}

/**
 * fbsql_field_nameThis
 *
 * Lit le nom d'un champ.
 *
 * @link http://php.net/manual/fr/function.fbsql-field-name.php Documentation pour fbsql_field_name.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un pointeur de résultat, retourné par la fonction fbsql_list_fields().
 * @param int      $field_index    La position numérique du champ. L'index des champs commence à 0.
 *
 * @return string	Retourne le nom sous la forme d'une chaîne de caractères ou FALSE si le champ n'existe pas.
 *
 */
if(!function_exists('fbsql_field_nameThis'))
{
    function fbsql_field_nameThis($result, $field_index = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_index = (int)$field_index;

		return fbsql_field_name($result, $field_index);
    }
}

/**
 * fbsql_field_seekThis
 *
 * Déplace le pointeur de résultat.
 *
 * @link http://php.net/manual/fr/function.fbsql-field-seek.php Documentation pour fbsql_field_seek.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $field_offset    La position numérique du champ. L'index des champs commence à 0.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_field_seekThis'))
{
    function fbsql_field_seekThis($result, $field_offset = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return fbsql_field_seek($result, $field_offset);
    }
}

/**
 * fbsql_field_tableThis
 *
 * Lit le nom de la table d'origine d'un champ.
 *
 * @link http://php.net/manual/fr/function.fbsql-field-table.php Documentation pour fbsql_field_table.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $field_offset    La position numérique du champ. L'index des champs commence à 0.
 *
 * @return string	Retourne le nom de la table, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('fbsql_field_tableThis'))
{
    function fbsql_field_tableThis($result, $field_offset = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return fbsql_field_table($result, $field_offset);
    }
}

/**
 * fbsql_field_typeThis
 *
 * Lit le type d'une colonne.
 *
 * @link http://php.net/manual/fr/function.fbsql-field-type.php Documentation pour fbsql_field_type.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $field_offset    La position numérique du champ. L'index des champs commence à 0.
 *
 * @return string	Retourne le type du champ sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('fbsql_field_typeThis'))
{
    function fbsql_field_typeThis($result, $field_offset = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return fbsql_field_type($result, $field_offset);
    }
}

/**
 * fbsql_free_resultThis
 *
 * Libère le résultat de la mémoire.
 *
 * @link http://php.net/manual/fr/function.fbsql-free-result.php Documentation pour fbsql_free_result.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_free_resultThis'))
{
    function fbsql_free_resultThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_free_result($result);
    }
}

/**
 * fbsql_get_autostart_infoThis
 *
 * .
 *
 * @link http://php.net/manual/fr/function.fbsql-get-autostart-info.php Documentation pour fbsql_get_autostart_info.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 */
if(!function_exists('fbsql_get_autostart_infoThis'))
{
    function fbsql_get_autostart_infoThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_get_autostart_info($link_identifier);
    }
}

/**
 * fbsql_hostnameThis
 *
 * Lit ou définit le nom de l'hôte à utiliser avec une connexion.
 *
 * @link http://php.net/manual/fr/function.fbsql-hostname.php Documentation pour fbsql_hostname.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $host_name    Si fourni, ce sera le nouveau nom de l'hôte à utiliser.
 *
 * @return string	Retourne le nom de l'hôte courant pour la connexion.
 *
 */
if(!function_exists('fbsql_hostnameThis'))
{
    function fbsql_hostnameThis($link_identifier, $host_name = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$host_name = (string)$host_name;

		return fbsql_hostname($link_identifier, $host_name);
    }
}

/**
 * fbsql_insert_idThis
 *
 * Lit le dernier identifiant généré par une requête INSERT.
 *
 * @link http://php.net/manual/fr/function.fbsql-insert-id.php Documentation pour fbsql_insert_id.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return int	Retourne l'identifiant généré depuis la dernière requête INSERT, ou 0 si la dernière requête n'a pas générée une valeur DEFAULT UNIQUE.
 *
 */
if(!function_exists('fbsql_insert_idThis'))
{
    function fbsql_insert_idThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_insert_id($link_identifier);
    }
}

/**
 * fbsql_list_dbsThis
 *
 * Liste les bases de données FBSQL.
 *
 * @link http://php.net/manual/fr/function.fbsql-list-dbs.php Documentation pour fbsql_list_dbs.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return resource	Retourne un pointeur de résultat ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_list_dbsThis'))
{
    function fbsql_list_dbsThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_list_dbs($link_identifier);
    }
}

/**
 * fbsql_list_fieldsThis
 *
 * Liste les champs d'une table FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-list-fields.php Documentation pour fbsql_list_fields.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données.
 * @param string   $table_name    Le nom de la table.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return resource	Retourne un pointeur de résultat qui pourra être utilisé avec les fonctions fbsql_field_xxx ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_list_fieldsThis'))
{
    function fbsql_list_fieldsThis($database_name, $table_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$table_name = (string)$table_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_list_fields($database_name, $table_name, $link_identifier);
    }
}

/**
 * fbsql_list_tablesThis
 *
 * Liste les tables dans une base de données FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-list-tables.php Documentation pour fbsql_list_tables.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database    Le nom de la base de données.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return resource	Retourne un pointeur de résultat qui pourra être utilisé avec la fonction fbsql_tablename() pour lire les noms des tables ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_list_tablesThis'))
{
    function fbsql_list_tablesThis($database, $link_identifier = NULL)
    {
		$database = (string)$database;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_list_tables($database, $link_identifier);
    }
}

/**
 * fbsql_next_resultThis
 *
 * Déplace le pointeur interne vers le résultat suivant.
 *
 * @link http://php.net/manual/fr/function.fbsql-next-result.php Documentation pour fbsql_next_result.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return bool	Retourne TRUE si un jeu de résultats additionnel est disponible, FALSE sinon.
 *
 */
if(!function_exists('fbsql_next_resultThis'))
{
    function fbsql_next_resultThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_next_result($result);
    }
}

/**
 * fbsql_num_fieldsThis
 *
 * Lit le nombre de champs dans un résultat.
 *
 * @link http://php.net/manual/fr/function.fbsql-num-fields.php Documentation pour fbsql_num_fields.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return int	Retourne le nombre de champs, sous la forme d'un entier.
 *
 */
if(!function_exists('fbsql_num_fieldsThis'))
{
    function fbsql_num_fieldsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_num_fields($result);
    }
}

/**
 * fbsql_num_rowsThis
 *
 * Lit le nombre de lignes dans un résultat.
 *
 * @link http://php.net/manual/fr/function.fbsql-num-rows.php Documentation pour fbsql_num_rows.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return int	Retourne le nombre de lignes retourné par la dernière requête SELECT.
 *
 */
if(!function_exists('fbsql_num_rowsThis'))
{
    function fbsql_num_rowsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_num_rows($result);
    }
}

/**
 * fbsql_passwordThis
 *
 * Lit ou définit le mot de passe à utiliser avec une connexion.
 *
 * @link http://php.net/manual/fr/function.fbsql-password.php Documentation pour fbsql_password.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $password    Si fourni, il sera le nouveau mot de passe pour la connexion.
 *
 * @return string	Retourne le mot de passe courant pour la connexion.
 *
 */
if(!function_exists('fbsql_passwordThis'))
{
    function fbsql_passwordThis($link_identifier, $password = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$password = (string)$password;

		return fbsql_password($link_identifier, $password);
    }
}

/**
 * fbsql_pconnectThis
 *
 * Ouvre une connexion persistante sur un serveur FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-pconnect.php Documentation pour fbsql_pconnect.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $hostname    Le nom de l'hôte du serveur.
 * @param string   $username    Le nom d'utilisateur pour la connexion.
 * @param string   $password    Le mot de passe pour la connexion.
 *
 * @return resource	Retourne un identifiant de connexion persistante FrontBase en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_pconnectThis'))
{
    function fbsql_pconnectThis($hostname = NULL, $username = NULL, $password = NULL)
    {
		$hostname = empty($hostname) ? (string)ini_get("fbsql.default_host") : (string)$hostname;
		$username = empty($username) ? (string)ini_get("fbsql.default_user") : (string)$username;
		$password = empty($password) ? (string)ini_get("fbsql.default_password") : (string)$password;

		return fbsql_pconnect($hostname, $username, $password);
    }
}

/**
 * fbsql_queryThis
 *
 * Exécute une requête sur un serveur FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-query.php Documentation pour fbsql_query.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $query    La requête SQL à exécuter.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param int      $batch_size
 *
 * @return resource	fbsql_query() retourne une ressource en cas de succès, ou FALSE, en cas d'échec. Si TRUE est retourné, cela signifie que la requête est correcte et qu'elle peut être exécutée par le serveur. Cela n'indique rien sur le nombre de lignes concernées ou retournées. Il est tout à fait possible qu'une requête réussisse mais qu'aucune ligne ne soit affectée ni retournée.
 *
 */
if(!function_exists('fbsql_queryThis'))
{
    function fbsql_queryThis($query, $link_identifier = NULL, $batch_size = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$batch_size = (int)$batch_size;

		return fbsql_query($query, $link_identifier, $batch_size);
    }
}

/**
 * fbsql_read_blobThis
 *
 * Lit un BLOB dans une base de données.
 *
 * @link http://php.net/manual/fr/function.fbsql-read-blob.php Documentation pour fbsql_read_blob.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $blob_handle    Un gestionnaire BLOB, retourné par la fonction fbsql_create_blob().
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return string	Retourne une chaîne de caractères contenant les données du BLOB spécifié.
 *
 */
if(!function_exists('fbsql_read_blobThis'))
{
    function fbsql_read_blobThis($blob_handle, $link_identifier = NULL)
    {
		$blob_handle = (string)$blob_handle;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_read_blob($blob_handle, $link_identifier);
    }
}

/**
 * fbsql_read_clobThis
 *
 * Lit un CLOB dans une base de données.
 *
 * @link http://php.net/manual/fr/function.fbsql-read-clob.php Documentation pour fbsql_read_clob.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $clob_handle    Un gestionnaire CLOB, retourné par la fonction fbsql_create_clob().
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return string	Retourne une chaîne de caractères contenant les données du CLOB spécifié.
 *
 */
if(!function_exists('fbsql_read_clobThis'))
{
    function fbsql_read_clobThis($clob_handle, $link_identifier = NULL)
    {
		$clob_handle = (string)$clob_handle;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_read_clob($clob_handle, $link_identifier);
    }
}

/**
 * fbsql_resultThis
 *
 * Lit des données dans un résultat.
 *
 * @link http://php.net/manual/fr/function.fbsql-result.php Documentation pour fbsql_result.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $row
 * @param mixed     $field    Peut être la position du champ ou le nom du champ, ou le nom de la table, suivi d'un point, suivi du nom du champ (tablename.fieldname). Si vous n'utilisez pas d'alias ('select foo as bar from...'), utilisez plutôt le nom de la colonne.
 *
 */
if(!function_exists('fbsql_resultThis'))
{
    function fbsql_resultThis($result, $row = NULL, $field = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$field = ($field);
		return fbsql_result($result, $row, $field);
    }
}

/**
 * fbsql_rollbackThis
 *
 * Annule une transaction FBSQL.
 *
 * @link http://php.net/manual/fr/function.fbsql-rollback.php Documentation pour fbsql_rollback.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_rollbackThis'))
{
    function fbsql_rollbackThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_rollback($link_identifier);
    }
}

/**
 * fbsql_rows_fetchedThis
 *
 * Récupère le nombre de lignes affectées par la dernière requête.
 *
 * @link http://php.net/manual/fr/function.fbsql-rows-fetched.php Documentation pour fbsql_rows_fetched.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 *
 * @return int	Retourne le nombre de lignes, sous la forme d'un entier.
 *
 */
if(!function_exists('fbsql_rows_fetchedThis'))
{
    function fbsql_rows_fetchedThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return fbsql_rows_fetched($result);
    }
}

/**
 * fbsql_select_dbThis
 *
 * Sélectionne une base de données FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-select-db.php Documentation pour fbsql_select_db.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données à sélectionner. Si la base de données est protégée avec un mot de passe, l'utilisateur doit appeler la fonction fbsql_database_password() avant de sélectionner la base de données.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_select_dbThis'))
{
    function fbsql_select_dbThis($database_name = NULL, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_select_db($database_name, $link_identifier);
    }
}

/**
 * fbsql_set_charactersetThis
 *
 * Modifie le jeu de caractères pour l'entrée / sortie.
 *
 * @link http://php.net/manual/fr/function.fbsql-set-characterset.php Documentation pour fbsql_set_characterset.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $link_identifier
 * @param int      $characterset
 * @param int      $in_out_both
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('fbsql_set_charactersetThis'))
{
    function fbsql_set_charactersetThis($link_identifier, $characterset, $in_out_both = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$characterset = (int)$characterset;
		$in_out_both = (int)$in_out_both;

		return fbsql_set_characterset($link_identifier, $characterset, $in_out_both);
    }
}

/**
 * fbsql_set_lob_modeThis
 *
 * Modifie le mode de lecture des LOB.
 *
 * @link http://php.net/manual/fr/function.fbsql-set-lob-mode.php Documentation pour fbsql_set_lob_mode.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat retourné par la fonction fbsql_query() ou la fonction fbsql_db_query().
 * @param int      $lob_mode    Peut être un parmi :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_set_lob_modeThis'))
{
    function fbsql_set_lob_modeThis($result, $lob_mode)
    {
		$result = is_resource($result) ? $result : NULL;
		$lob_mode = (int)$lob_mode;

		return fbsql_set_lob_mode($result, $lob_mode);
    }
}

/**
 * fbsql_set_passwordThis
 *
 * Change le mot de passe de l'utilisateur spécifié.
 *
 * @link http://php.net/manual/fr/function.fbsql-set-password.php Documentation pour fbsql_set_password.
 *
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $user    Le nom de l'utilisateur.
 * @param string   $password    Le nouveau mot de passe à définir.
 * @param string   $old_password    L'ancien mot de passe à remplacer.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_set_passwordThis'))
{
    function fbsql_set_passwordThis($link_identifier, $user, $password, $old_password)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$user = (string)$user;
		$password = (string)$password;
		$old_password = (string)$old_password;

		return fbsql_set_password($link_identifier, $user, $password, $old_password);
    }
}

/**
 * fbsql_set_transactionThis
 *
 * Configure le verrouillage et l'isolation de transactions.
 *
 * @link http://php.net/manual/fr/function.fbsql-set-transaction.php Documentation pour fbsql_set_transaction.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param int      $locking    Le type de verrouillage à définir. Il peut être une constante parmi : FBSQL_LOCK_DEFERRED, FBSQL_LOCK_OPTIMISTIC, ou FBSQL_LOCK_PESSIMISTIC.
 * @param int      $isolation    Le type d'isolation à définir. Il peut être une constante parmi : FBSQL_ISO_READ_UNCOMMITTED, FBSQL_ISO_READ_COMMITTED, FBSQL_ISO_REPEATABLE_READ, FBSQL_ISO_SERIALIZABLE, ou FBSQL_ISO_VERSIONED.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('fbsql_set_transactionThis'))
{
    function fbsql_set_transactionThis($link_identifier, $locking, $isolation)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$locking = (int)$locking;
		$isolation = (int)$isolation;

		return fbsql_set_transaction($link_identifier, $locking, $isolation);
    }
}

/**
 * fbsql_start_dbThis
 *
 * Démarre une base de données FBSQL.
 *
 * @link http://php.net/manual/fr/function.fbsql-start-db.php Documentation pour fbsql_start_db.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $database_options
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_start_dbThis'))
{
    function fbsql_start_dbThis($database_name, $link_identifier = NULL, $database_options = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$database_options = (string)$database_options;

		return fbsql_start_db($database_name, $link_identifier, $database_options);
    }
}

/**
 * fbsql_stop_dbThis
 *
 * Stoppe une base de données FBSQL.
 *
 * @link http://php.net/manual/fr/function.fbsql-stop-db.php Documentation pour fbsql_stop_db.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données.
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fbsql_stop_dbThis'))
{
    function fbsql_stop_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return fbsql_stop_db($database_name, $link_identifier);
    }
}

/**
 * fbsql_table_nameThis
 *
 * Récupère le nom de la table d'un champ.
 *
 * @link http://php.net/manual/fr/function.fbsql-table-name.php Documentation pour fbsql_table_name.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Un pointeur de résultats retourné par la fonction fbsql_list_tables().
 * @param int      $index    L'index de la table courante, sous la forme d'un entier.
 *
 * @return string	Retourne le nom de la table, sous le forme d'une chaîne de caractères.
 *
 */
if(!function_exists('fbsql_table_nameThis'))
{
    function fbsql_table_nameThis($result, $index)
    {
		$result = is_resource($result) ? $result : NULL;
		$index = (int)$index;

		return fbsql_table_name($result, $index);
    }
}

/**
 * fbsql_usernameThis
 *
 * Lit ou définit le nom de login à utiliser avec une connexion.
 *
 * @link http://php.net/manual/fr/function.fbsql-username.php Documentation pour fbsql_username.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de lien FrontBase retourné par la fonction fbsql_connect() ou la fonction fbsql_pconnect(). Si ce paramètre est optionnel et qu'il n'est pas spécifié, la fonction tentera de trouver un lien ouvert vers le serveur FrontBase et un tel lien n'est pas trouvé, la fonction tentera d'en créer un, de la même façon que si la fonction fbsql_connect() est appelée sans aucun argument.
 * @param string   $username    Si fourni, il sera le nouveau nom de l'utilisateur à définir.
 *
 * @return string	Retourne le nom de l'utilisateur courant utilisé avec la connexion, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('fbsql_usernameThis'))
{
    function fbsql_usernameThis($link_identifier, $username = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$username = (string)$username;

		return fbsql_username($link_identifier, $username);
    }
}

/**
 * fbsql_warningsThis
 *
 * Active ou désactive les alertes FrontBase.
 *
 * @link http://php.net/manual/fr/function.fbsql-warnings.php Documentation pour fbsql_warnings.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param bool     $OnOff    Si l'on doit activer ou non les alertes.
 *
 * @return bool	Retourne TRUE si les alertes sont actives, FALSE sinon.
 *
 */
if(!function_exists('fbsql_warningsThis'))
{
    function fbsql_warningsThis($OnOff = NULL)
    {
		$OnOff = (bool)$OnOff;

		return fbsql_warnings($OnOff);
    }
}

/**
 * fcloseThis
 *
 * Ferme un fichier.
 *
 * @link http://php.net/manual/fr/function.fclose.php Documentation pour fclose.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et doit avoir été correctement ouvert par la fonction fopen() ou la fonction fsockopen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fcloseThis'))
{
    function fcloseThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return fclose($handle);
    }
}

/**
 * fdf_add_doc_javascriptThis
 *
 * Ajoute du code javascript dans un document FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-add-doc-javascript.php Documentation pour fdf_add_doc_javascript.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $script_name    Le nom du script.
 * @param string   $script_code    Le code du script. Il est fortement recommandé d'utiliser '\r' comme séparateur de lignes dans le code script_code.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_add_doc_javascriptThis'))
{
    function fdf_add_doc_javascriptThis($fdf_document, $script_name, $script_code)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$script_name = (string)$script_name;
		$script_code = (string)$script_code;

		return fdf_add_doc_javascript($fdf_document, $script_name, $script_code);
    }
}

/**
 * fdf_add_templateThis
 *
 * Ajoute un template dans le document FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-add-template.php Documentation pour fdf_add_template.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document
 * @param int      $newpage
 * @param string   $filename
 * @param string   $template
 * @param int      $rename
 *
 */
if(!function_exists('fdf_add_templateThis'))
{
    function fdf_add_templateThis($fdf_document, $newpage, $filename, $template, $rename)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$newpage = (int)$newpage;
		$filename = (string)$filename;
		$template = (string)$template;
		$rename = (int)$rename;

		return fdf_add_template($fdf_document, $newpage, $filename, $template, $rename);
    }
}

/**
 * fdf_closeThis
 *
 * Ferme un document FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-close.php Documentation pour fdf_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('fdf_closeThis'))
{
    function fdf_closeThis($fdf_document)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;

		return fdf_close($fdf_document);
    }
}

/**
 * fdf_createThis
 *
 * Crée un nouveau document FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-create.php Documentation pour fdf_create.
 *
 * @version PHP 4
 * @version PHP 5
 * @return resource	Retourne un gestionnaire de document FDF, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_createThis'))
{
    function fdf_createThis()
    {
		return fdf_create();
    }
}

/**
 * fdf_enum_valuesThis
 *
 * Appelle une fonction utilisateur à chaque valeur FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-enum-values.php Documentation pour fdf_enum_values.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document
 * @param callable     $function
 * @param mixed     $userdata
 *
 */
if(!function_exists('fdf_enum_valuesThis'))
{
    function fdf_enum_valuesThis($fdf_document, $function, $userdata = NULL)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$function = is_callable($function) ? $function : NULL;
		$userdata = ($userdata);
		return fdf_enum_values($fdf_document, $function, $userdata);
    }
}

/**
 * fdf_errnoThis
 *
 * Retourne le code d'erreur de la dernière opération FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-errno.php Documentation pour fdf_errno.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return int	Retourne le code erreur sous la forme d'un entier ou 0 si aucune erreur n'est survenue.
 *
 */
if(!function_exists('fdf_errnoThis'))
{
    function fdf_errnoThis()
    {
		return fdf_errno();
    }
}

/**
 * fdf_errorThis
 *
 * Retourne le message d'erreur FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-error.php Documentation pour fdf_error.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $error_code    Un code erreur obtenu avec la fonction fdf_errno(). S'il n'est pas fourni, cette fonction utilise le code erreur interne défini par la dernière opération.
 *
 * @return string	Retourne le message d'erreur sous la forme d'une chaîne de caractères ou la chaîne no error s'il n'y en a pas.
 *
 */
if(!function_exists('fdf_errorThis'))
{
    function fdf_errorThis($error_code = -1)
    {
		$error_code = (int)$error_code;

		return fdf_error($error_code);
    }
}

/**
 * fdf_get_apThis
 *
 * Lit l'apparence d'un champ.
 *
 * @link http://php.net/manual/fr/function.fdf-get-ap.php Documentation pour fdf_get_ap.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $field
 * @param int      $face    Les valeurs possibles sont FDFNormalAP, FDFRolloverAP et FDFDownAP.
 * @param string   $filename    L'apparence sera stockée dans ce paramètre.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_get_apThis'))
{
    function fdf_get_apThis($fdf_document, $field, $face, $filename)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$field = (string)$field;
		$face = (int)$face;
		$filename = (string)$filename;

		return fdf_get_ap($fdf_document, $field, $face, $filename);
    }
}

/**
 * fdf_get_attachmentThis
 *
 * Extrait un fichier intégré dans un document FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-get-attachment.php Documentation pour fdf_get_attachment.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname
 * @param string   $savepath    Peut être le nom d'un fichier ou bien un dossier dans lequel le fichier téléchargé sera créé sous son nom original. Tout fichier déjà existant avec le même nom sera écrasé.
 *
 * @return array	Le tableau retourné contient les champs suivants :
 *
 */
if(!function_exists('fdf_get_attachmentThis'))
{
    function fdf_get_attachmentThis($fdf_document, $fieldname, $savepath)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$savepath = (string)$savepath;

		return fdf_get_attachment($fdf_document, $fieldname, $savepath);
    }
}

/**
 * fdf_get_encodingThis
 *
 * Lit la valeur de la clé /Encoding.
 *
 * @link http://php.net/manual/fr/function.fdf-get-encoding.php Documentation pour fdf_get_encoding.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 *
 * @return string	Retourne l'encodage, sous la forme d'une chaîne de caractères. Une chaîne vide est retournée si le schéma PDFDocEncoding/Unicode est utilisé.
 *
 */
if(!function_exists('fdf_get_encodingThis'))
{
    function fdf_get_encodingThis($fdf_document)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;

		return fdf_get_encoding($fdf_document);
    }
}

/**
 * fdf_get_fileThis
 *
 * Lit la valeur de la clé /F.
 *
 * @link http://php.net/manual/fr/function.fdf-get-file.php Documentation pour fdf_get_file.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 *
 * @return string	Retourne la valeur de la clé, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('fdf_get_fileThis'))
{
    function fdf_get_fileThis($fdf_document)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;

		return fdf_get_file($fdf_document);
    }
}

/**
 * fdf_get_flagsThis
 *
 * Lit les attributs d'un champ FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-get-flags.php Documentation pour fdf_get_flags.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document
 * @param string   $fieldname
 * @param int      $whichflags
 *
 */
if(!function_exists('fdf_get_flagsThis'))
{
    function fdf_get_flagsThis($fdf_document, $fieldname, $whichflags)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$whichflags = (int)$whichflags;

		return fdf_get_flags($fdf_document, $fieldname, $whichflags);
    }
}

/**
 * fdf_get_optThis
 *
 * Lit une valeur dans un tableau de valeur d'un champ FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-get-opt.php Documentation pour fdf_get_opt.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document
 * @param string   $fieldname
 * @param int      $element
 *
 */
if(!function_exists('fdf_get_optThis'))
{
    function fdf_get_optThis($fdf_document, $fieldname, $element = -1)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$element = (int)$element;

		return fdf_get_opt($fdf_document, $fieldname, $element);
    }
}

/**
 * fdf_get_statusThis
 *
 * Lit la valeur de la clé /STATUS.
 *
 * @link http://php.net/manual/fr/function.fdf-get-status.php Documentation pour fdf_get_status.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 *
 * @return string	Retourne la valeur de la clé, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('fdf_get_statusThis'))
{
    function fdf_get_statusThis($fdf_document)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;

		return fdf_get_status($fdf_document);
    }
}

/**
 * fdf_get_valueThis
 *
 * Retourne la valeur d'un champ FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-get-value.php Documentation pour fdf_get_value.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname    Nom du champ FDF, sous la forme d'une chaîne de caractères.
 * @param int      $which    Les éléments d'un champ tableau peuvent être lus en fournissant ce paramètre optionnel, sous la forme d'un entier dont la plus petite valeur sera 0. Pour les champs qui ne sont pas des tableaux, ce paramètre optionnel sera ignoré.
 *
 * @return mixed	Retourne la valeur du champ.
 *
 */
if(!function_exists('fdf_get_valueThis'))
{
    function fdf_get_valueThis($fdf_document, $fieldname, $which = -1)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$which = (int)$which;

		return fdf_get_value($fdf_document, $fieldname, $which);
    }
}

/**
 * fdf_get_versionThis
 *
 * Lit le numéro de version de l'API FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-get-version.php Documentation pour fdf_get_version.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 *
 * @return string	Retourne la version, sous la forme d'une chaîne de caractères. Pour la version actuelle du FDF toolkit 5.0, le numéro de version est 5.0 et le numéro de version de document est 1.2, 1.3 ou 1.4.
 *
 */
if(!function_exists('fdf_get_versionThis'))
{
    function fdf_get_versionThis($fdf_document = NULL)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;

		return fdf_get_version($fdf_document);
    }
}

/**
 * fdf_headerThis
 *
 * Émet les en-têtes HTTP spécifiques à FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-header.php Documentation pour fdf_header.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('fdf_headerThis'))
{
    function fdf_headerThis()
    {
		return fdf_header();
    }
}

/**
 * fdf_next_field_nameThis
 *
 * Lit le nom du champ FDF suivant.
 *
 * @link http://php.net/manual/fr/function.fdf-next-field-name.php Documentation pour fdf_next_field_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname    Nom du champ FDF, sous la forme d'une chaîne de caractères. S'il n'est pas fournis, le premier champ sera retourné.
 *
 * @return string	Retourne le nom du champ, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('fdf_next_field_nameThis'))
{
    function fdf_next_field_nameThis($fdf_document, $fieldname = NULL)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;

		return fdf_next_field_name($fdf_document, $fieldname);
    }
}

/**
 * fdf_openThis
 *
 * Ouvre un document FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-open.php Documentation pour fdf_open.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier FDF. Ce fichier doit contenir les données telles que retournées par un formulaire PDF ou créées en utilisant les fonctions fdf_create() et fdf_save().
 *
 * @return resource	Retourne un gestionnaire de document FDF, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_openThis'))
{
    function fdf_openThis($filename)
    {
		$filename = (string)$filename;

		return fdf_open($filename);
    }
}

/**
 * fdf_open_stringThis
 *
 * Lit un document FDF à partir d'une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.fdf-open-string.php Documentation pour fdf_open_string.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $fdf_data    Les données, comme retournés depuis un formulaire PDF ou créés en utilisant les fonctions fdf_create() et fdf_save_string().
 *
 * @return resource	Retourne un gestionnaire de document FDF, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_open_stringThis'))
{
    function fdf_open_stringThis($fdf_data)
    {
		$fdf_data = (string)$fdf_data;

		return fdf_open_string($fdf_data);
    }
}

/**
 * fdf_remove_itemThis
 *
 * Configure le cadre FDF de destination pour le formulaire.
 *
 * @link http://php.net/manual/fr/function.fdf-remove-item.php Documentation pour fdf_remove_item.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document
 * @param string   $fieldname
 * @param int      $item
 *
 */
if(!function_exists('fdf_remove_itemThis'))
{
    function fdf_remove_itemThis($fdf_document, $fieldname, $item)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$item = (int)$item;

		return fdf_remove_item($fdf_document, $fieldname, $item);
    }
}

/**
 * fdf_saveThis
 *
 * Sauvegarde un document FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-save.php Documentation pour fdf_save.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $filename    Si fourni, le FDF résultant sera écrit dans ce paramètre. Sinon, cette fonction écrira le FDF dans la sortie standard PHP.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_saveThis'))
{
    function fdf_saveThis($fdf_document, $filename = NULL)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$filename = (string)$filename;

		return fdf_save($fdf_document, $filename);
    }
}

/**
 * fdf_save_stringThis
 *
 * Retourne un document FDF sous forme d'une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.fdf-save-string.php Documentation pour fdf_save_string.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 *
 * @return string	Retourne le document, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_save_stringThis'))
{
    function fdf_save_stringThis($fdf_document)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;

		return fdf_save_string($fdf_document);
    }
}

/**
 * fdf_set_apThis
 *
 * Fixe l'apparence d'un champ FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-set-ap.php Documentation pour fdf_set_ap.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $field_name
 * @param int      $face    Les valeurs possibles sont : FDFNormalAP, FDFRolloverAP et FDFDownAP.
 * @param string   $filename
 * @param int      $page_number
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_apThis'))
{
    function fdf_set_apThis($fdf_document, $field_name, $face, $filename, $page_number)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$field_name = (string)$field_name;
		$face = (int)$face;
		$filename = (string)$filename;
		$page_number = (int)$page_number;

		return fdf_set_ap($fdf_document, $field_name, $face, $filename, $page_number);
    }
}

/**
 * fdf_set_encodingThis
 *
 * Modifie l'encodage des caractères.
 *
 * @link http://php.net/manual/fr/function.fdf-set-encoding.php Documentation pour fdf_set_encoding.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $encoding    Le nom de l'encodage. Les valeurs suivantes sont supportées : "Shift-JIS", "UHC", "GBK" et "BigFive". Une chaîne de caractères vide replace la valeur par défaut de l'encodage au schéma PDFDocEncoding/Unicode.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_encodingThis'))
{
    function fdf_set_encodingThis($fdf_document, $encoding)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$encoding = (string)$encoding;

		return fdf_set_encoding($fdf_document, $encoding);
    }
}

/**
 * fdf_set_fileThis
 *
 * Crée un document PDF pour y afficher des données FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-set-file.php Documentation pour fdf_set_file.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $url    Doit être fourni sous la forme d'une URL absolue.
 * @param string   $target_frame    Utilisez ce paramètre pour spécifier la frame dans laquelle le document sera affiché. Vous pouvez également définir la valeur par défaut de ce paramètre en utilisant la fonction fdf_set_target_frame().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_fileThis'))
{
    function fdf_set_fileThis($fdf_document, $url, $target_frame = NULL)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$url = (string)$url;
		$target_frame = (string)$target_frame;

		return fdf_set_file($fdf_document, $url, $target_frame);
    }
}

/**
 * fdf_set_flagsThis
 *
 * Modifie une option d'un champ.
 *
 * @link http://php.net/manual/fr/function.fdf-set-flags.php Documentation pour fdf_set_flags.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname    Nom du champ FDF, sous la forme d'une chaîne de caractères.
 * @param int      $whichFlags
 * @param int      $newFlags
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_flagsThis'))
{
    function fdf_set_flagsThis($fdf_document, $fieldname, $whichFlags, $newFlags)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$whichFlags = (int)$whichFlags;
		$newFlags = (int)$newFlags;

		return fdf_set_flags($fdf_document, $fieldname, $whichFlags, $newFlags);
    }
}

/**
 * fdf_set_javascript_actionThis
 *
 * Modifie l'action javascript d'un champ.
 *
 * @link http://php.net/manual/fr/function.fdf-set-javascript-action.php Documentation pour fdf_set_javascript_action.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname    Nom du champ FDF, sous la forme d'une chaîne de caractères.
 * @param int      $trigger
 * @param string   $script
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_javascript_actionThis'))
{
    function fdf_set_javascript_actionThis($fdf_document, $fieldname, $trigger, $script)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$trigger = (int)$trigger;
		$script = (string)$script;

		return fdf_set_javascript_action($fdf_document, $fieldname, $trigger, $script);
    }
}

/**
 * fdf_set_on_import_javascriptThis
 *
 * Ajoute du code Javascript à être exécuté lorsque Acrobat ouvre un FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-set-on-import-javascript.php Documentation pour fdf_set_on_import_javascript.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document
 * @param string   $script
 * @param bool     $before_data_import
 *
 */
if(!function_exists('fdf_set_on_import_javascriptThis'))
{
    function fdf_set_on_import_javascriptThis($fdf_document, $script, $before_data_import)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$script = (string)$script;
		$before_data_import = (bool)$before_data_import;

		return fdf_set_on_import_javascript($fdf_document, $script, $before_data_import);
    }
}

/**
 * fdf_set_optThis
 *
 * Modifie une option d'un champ.
 *
 * @link http://php.net/manual/fr/function.fdf-set-opt.php Documentation pour fdf_set_opt.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname    Nom du champ FDF, sous la forme d'une chaîne de caractères.
 * @param int      $element
 * @param string   $str1
 * @param string   $str2
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_optThis'))
{
    function fdf_set_optThis($fdf_document, $fieldname, $element, $str1, $str2)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$element = (int)$element;
		$str1 = (string)$str1;
		$str2 = (string)$str2;

		return fdf_set_opt($fdf_document, $fieldname, $element, $str1, $str2);
    }
}

/**
 * fdf_set_statusThis
 *
 * Fixe la valeur de la clé /STATUS.
 *
 * @link http://php.net/manual/fr/function.fdf-set-status.php Documentation pour fdf_set_status.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $status
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_statusThis'))
{
    function fdf_set_statusThis($fdf_document, $status)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$status = (string)$status;

		return fdf_set_status($fdf_document, $status);
    }
}

/**
 * fdf_set_submit_form_actionThis
 *
 * Modifie l'action d'un formulaire.
 *
 * @link http://php.net/manual/fr/function.fdf-set-submit-form-action.php Documentation pour fdf_set_submit_form_action.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname    Nom du champ FDF, sous la forme d'une chaîne de caractères.
 * @param int      $trigger
 * @param string   $script
 * @param int      $flags
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_submit_form_actionThis'))
{
    function fdf_set_submit_form_actionThis($fdf_document, $fieldname, $trigger, $script, $flags)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$trigger = (int)$trigger;
		$script = (string)$script;
		$flags = (int)$flags;

		return fdf_set_submit_form_action($fdf_document, $fieldname, $trigger, $script, $flags);
    }
}

/**
 * fdf_set_target_frameThis
 *
 * Configure le cadre de destination pour l'affichage du formulaire.
 *
 * @link http://php.net/manual/fr/function.fdf-set-target-frame.php Documentation pour fdf_set_target_frame.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $frame_name    Le nom du cadre, sous la forme d'une chaîne de caractères.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_target_frameThis'))
{
    function fdf_set_target_frameThis($fdf_document, $frame_name)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$frame_name = (string)$frame_name;

		return fdf_set_target_frame($fdf_document, $frame_name);
    }
}

/**
 * fdf_set_valueThis
 *
 * Modifie la valeur d'un champ FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-set-value.php Documentation pour fdf_set_value.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $fieldname    Nom du champ FDF, sous la forme d'une chaîne de caractères.
 * @param mixed     $value    Ce paramètre devra être stocké comme une chaîne de caractères même si c'est un tableau. Dans ce cas, tous les éléments du tableau seront stockés comme un tableau de valeur.
 * @param int      $isName
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_valueThis'))
{
    function fdf_set_valueThis($fdf_document, $fieldname, $value, $isName = NULL)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$fieldname = (string)$fieldname;
		$value = ($value);
		$isName = (int)$isName;

		return fdf_set_value($fdf_document, $fieldname, $value, $isName);
    }
}

/**
 * fdf_set_versionThis
 *
 * Modifie le numéro de version du fichier FDF.
 *
 * @link http://php.net/manual/fr/function.fdf-set-version.php Documentation pour fdf_set_version.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $fdf_document    Le gestionnaire de document FDF, retourné par la fonction fdf_create(), la fonction fdf_open() ou la fonction fdf_open_string().
 * @param string   $version    Le numéro de version. Pour le toolkit FDF courant, ce peut être 1.2, 1.3 ou 1.4.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fdf_set_versionThis'))
{
    function fdf_set_versionThis($fdf_document, $version)
    {
		$fdf_document = is_resource($fdf_document) ? $fdf_document : NULL;
		$version = (string)$version;

		return fdf_set_version($fdf_document, $version);
    }
}

/**
 * feofThis
 *
 * Teste la fin du fichier.
 *
 * @link http://php.net/manual/fr/function.feof.php Documentation pour feof.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et pointer sur un fichier ouvert avec succès par fopen() ou fsockopen() (et pas encore fermé par fclose()).
 *
 * @return bool	Retourne TRUE si le pointeur handle est à la fin du fichier ou si une erreur survient, sinon, retourne FALSE.
 *
 */
if(!function_exists('feofThis'))
{
    function feofThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return feof($handle);
    }
}

/**
 * fflushThis
 *
 * Envoie tout le contenu généré dans un fichier.
 *
 * @link http://php.net/manual/fr/function.fflush.php Documentation pour fflush.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et pointer sur un fichier ouvert avec succès par fopen() ou fsockopen() (et pas encore fermé par fclose()).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fflushThis'))
{
    function fflushThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return fflush($handle);
    }
}

/**
 * fgetcThis
 *
 * Lit un caractère dans un fichier.
 *
 * @link http://php.net/manual/fr/function.fgetc.php Documentation pour fgetc.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et pointer sur un fichier ouvert avec succès par fopen() ou fsockopen() (et pas encore fermé par fclose()).
 *
 * @return string	Retourne une chaîne contenant un seul caractère, lu depuis le fichier pointé par handle. Retourne FALSE à la fin du fichier.
 *
 */
if(!function_exists('fgetcThis'))
{
    function fgetcThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return fgetc($handle);
    }
}

/**
 * fgetcsvThis
 *
 * Obtient une ligne depuis un pointeur de fichier et l'analyse pour des champs CSV.
 *
 * @link http://php.net/manual/fr/function.fgetcsv.php Documentation pour fgetcsv.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur valide sur un fichier ouvert avec fopen(), popen() ou fsockopen().
 * @param int      $length    Doit être plus grand que la plus grande ligne (en terme de caractères) à lire dans le fichier (y compris le caractère de fin de ligne). Ce paramètre est optionnel depuis PHP 5. Omettre ce paramètre (ou le définir à 0 en PHP 5.0.4 et suivant) fait que la longueur maximale de la ligne n'est pas limitée, ce qui est légèrement plus lent.
 * @param string   $delimiter    Spécifie le séparateur (un seul caractère).
 * @param string   $enclosure    Spécifie le caractère d'encadrement de texte (un seul caractère).
 * @param string   $escape    Définit le caractère d'échappement (un seul caractère). Par défaut, c'est un antislash.
 *
 * @return array	Retourne un tableau indexé contenant les champs lus.
 *
 */
if(!function_exists('fgetcsvThis'))
{
    function fgetcsvThis($handle, $length = 0, $delimiter = ',', $enclosure = '"', $escape = '\\')
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$length = (int)$length;
		$delimiter = (string)$delimiter;
		$enclosure = (string)$enclosure;
		$escape = (string)$escape;

		return fgetcsv($handle, $length, $delimiter, $enclosure, $escape);
    }
}

/**
 * fgetsThis
 *
 * Récupère la ligne courante sur laquelle se trouve le pointeur du fichier.
 *
 * @link http://php.net/manual/fr/function.fgets.php Documentation pour fgets.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et pointer sur un fichier ouvert avec succès par fopen() ou fsockopen() (et pas encore fermé par fclose()).
 * @param int      $length    Lit jusqu'à la taille length - 1 octet depuis le pointeur de fichier handle, ou bien la fin du fichier, ou une nouvelle ligne (qui est inclue dans la valeur retournée), ou encore un EOF (celui qui arrive en premier). Si aucune longueur n'est fournie, la fonction lira le flux jusqu'à la fin de la ligne.
 *
 * @return string	Retourne une chaîne de caractères contenant les length premiers caractères, moins 1 octet depuis le pointeur de fichier handle. FALSE est retourné s'il n'y a plus de données à lire.
 *
 */
if(!function_exists('fgetsThis'))
{
    function fgetsThis($handle, $length = NULL)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$length = (int)$length;

		return fgets($handle, $length);
    }
}

/**
 * fgetssThis
 *
 * Renvoie la ligne courante du fichier et élimine les balises HTML.
 *
 * @link http://php.net/manual/fr/function.fgetss.php Documentation pour fgetss.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et pointer sur un fichier ouvert avec succès par fopen() ou fsockopen() (et pas encore fermé par fclose()).
 * @param int      $length    Taille des données à récupérer.
 * @param string   $allowable_tags    Vous pouvez utiliser ce paramètre optionnel pour spécifier les balises qui ne doivent pas être supprimées.
 *
 * @return string	Retourne une chaîne de taille length - 1 octet lu depuis le fichier pointé par handle, dont les balises HTML et PHP ont été échappées.
 *
 */
if(!function_exists('fgetssThis'))
{
    function fgetssThis($handle, $length = NULL, $allowable_tags = NULL)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$length = (int)$length;
		$allowable_tags = (string)$allowable_tags;

		return fgetss($handle, $length, $allowable_tags);
    }
}

/**
 * fileThis
 *
 * Lit le fichier et renvoie le résultat dans un tableau.
 *
 * @link http://php.net/manual/fr/function.file.php Documentation pour file.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 * @param int      $flags    Le paramètre optionnel flags peut être une ou plusieurs des constantes suivantes :
 * @param resource $context
 *
 * @return array	Retourne le fichier dans un tableau. Chaque élément du tableau correspond à une ligne du fichier, et les retours-chariot sont placés en fin de ligne. Si une erreur survient, file() retournera FALSE.
 *
 */
if(!function_exists('fileThis'))
{
    function fileThis($filename, $flags = 0, $context = NULL)
    {
		$filename = (string)$filename;
		$flags = (int)$flags;
		$context = is_resource($context) ? $context : NULL;

		return file($filename, $flags, $context);
    }
}

/**
 * file_existsThis
 *
 * Vérifie si un fichier ou un dossier existe.
 *
 * @link http://php.net/manual/fr/function.file-exists.php Documentation pour file_exists.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier ou le dossier. Sous Windows, utilisez le format de chemin //computername/share/filename ou \\\\computername\share\filename pour vérifier qu'un fichier est disponible sur le partage réseau.
 *
 * @return bool	Retourne TRUE si le fichier ou le dossier spécifié par le paramètre filename existe ; FALSE sinon.
 *
 */
if(!function_exists('file_existsThis'))
{
    function file_existsThis($filename)
    {
		$filename = (string)$filename;

		return file_exists($filename);
    }
}

/**
 * file_get_contentsThis
 *
 * Lit tout un fichier dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.file-get-contents.php Documentation pour file_get_contents.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $filename    Nom du fichier à lire.
 * @param bool     $use_include_path
 * @param resource $context    Une ressource de contexte valide, créée avec la fonction stream_context_create(). Si vous n'avez pas besoin d'utiliser un contexte particulier, vous pouvez ignorer ce paramètre en affectant la valeur NULL.
 * @param int      $offset    La position à partir de laquelle on commence à lire dans le flux original. Le déplacement dans le fichier (offset) n'est pas supporté sur des fichiers distants. Si vous tentez de vous déplacer dans un fichier qui n'est pas un fichier local peut fonctionner sur les petits déplacements, mais le comportement peut ne pas être attendu car le processus utilise le flux du buffer.
 * @param int      $maxlen    La taille maximale des données à lire. Le comportement par défaut est de lire jusqu'à la fin du fichier. Ce paramètre s'applique sur le flux traité par les filtres.
 *
 * @return string	Retourne les données lues ou FALSE si une erreur survient.
 *
 */
if(!function_exists('file_get_contentsThis'))
{
    function file_get_contentsThis($filename, $use_include_path = false, $context = NULL, $offset = -1, $maxlen = NULL)
    {
		$filename = (string)$filename;
		$use_include_path = (bool)$use_include_path;
		$context = is_resource($context) ? $context : NULL;
		$offset = (int)$offset;
		$maxlen = (int)$maxlen;

		return file_get_contents($filename, $use_include_path, $context, $offset, $maxlen);
    }
}

/**
 * file_put_contentsThis
 *
 * Écrit un contenu dans un fichier.
 *
 * @link http://php.net/manual/fr/function.file-put-contents.php Documentation pour file_put_contents.
 *
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier dans lequel on doit écrire les données.
 * @param mixed     $data    Les données à écrire. Peut être soit une chaîne de caractères, un tableau ou une ressource de flux (explication plus bas). Si data est une ressource de type stream, le buffer restant de ce flux sera copié dans le fichier spécifié. Cela revient à utiliser la fonction stream_copy_to_stream(). Vous pouvez également spécifier le paramètre data en tant qu'un tableau à une seule dimension. C'est l'équivalent à file_put_contents($filename, implode('', $array)).
 * @param int      $flags    La valeur du paramètre flags peut être n'importe quelle combinaison des drapeaux suivants, liés par l'opérateur binaire OU (|).
 * @param resource $context    Une ressource de contexte valide créée avec la fonction stream_context_create().
 *
 * @return int	Retourne le nombre d'octets qui ont été écrits au fichier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('file_put_contentsThis'))
{
    function file_put_contentsThis($filename, $data, $flags = 0, $context = NULL)
    {
		$filename = (string)$filename;
		$data = ($data);
		$flags = (int)$flags;
		$context = is_resource($context) ? $context : NULL;

		return file_put_contents($filename, $data, $flags, $context);
    }
}

/**
 * fileatimeThis
 *
 * Renvoie la date à laquelle le fichier a été accédé pour la dernière fois.
 *
 * @link http://php.net/manual/fr/function.fileatime.php Documentation pour fileatime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Renvoie la date à laquelle le fichier a été accédé pour la dernière fois ou FALSE si une erreur survient. La date est retournée sous la forme d'un timestamp Unix.
 *
 */
if(!function_exists('fileatimeThis'))
{
    function fileatimeThis($filename)
    {
		$filename = (string)$filename;

		return fileatime($filename);
    }
}

/**
 * filectimeThis
 *
 * Renvoie la date de dernier accès à un inode.
 *
 * @link http://php.net/manual/fr/function.filectime.php Documentation pour filectime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Renvoie la date à laquelle l'inode a été accédé pour la dernière fois ou FALSE si une erreur survient. L'heure est retournée sous la forme d'un timestamp Unix.
 *
 */
if(!function_exists('filectimeThis'))
{
    function filectimeThis($filename)
    {
		$filename = (string)$filename;

		return filectime($filename);
    }
}

/**
 * filegroupThis
 *
 * Lire le nom du groupe.
 *
 * @link http://php.net/manual/fr/function.filegroup.php Documentation pour filegroup.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Retourne le groupe qui possède le fichier filename, ou FALSE si une erreur survient. L'identifiant de groupe est retourné au format numérique, utilisez posix_getgrgid() pour retrouver le nom du groupe. En cas d'erreur, FALSE est retourné.
 *
 */
if(!function_exists('filegroupThis'))
{
    function filegroupThis($filename)
    {
		$filename = (string)$filename;

		return filegroup($filename);
    }
}

/**
 * fileinodeThis
 *
 * Lit le numéro d'inode du fichier.
 *
 * @link http://php.net/manual/fr/function.fileinode.php Documentation pour fileinode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Retourne le numéro d'inode du fichier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fileinodeThis'))
{
    function fileinodeThis($filename)
    {
		$filename = (string)$filename;

		return fileinode($filename);
    }
}

/**
 * filemtimeThis
 *
 * Lit la date de dernière modification du fichier.
 *
 * @link http://php.net/manual/fr/function.filemtime.php Documentation pour filemtime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Renvoie le timestamp Unix de dernière modification du fichier filename ou FALSE si une erreur survient. Utilisez date() sur ce résultat pour obtenir une date de modification humainement lisible.
 *
 */
if(!function_exists('filemtimeThis'))
{
    function filemtimeThis($filename)
    {
		$filename = (string)$filename;

		return filemtime($filename);
    }
}

/**
 * fileownerThis
 *
 * Lit l'identifiant du propriétaire d'un fichier.
 *
 * @link http://php.net/manual/fr/function.fileowner.php Documentation pour fileowner.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Renvoie l'identifiant du propriétaire du fichier filename, ou FALSE si une erreur survient. L'identifiant du propriétaire est numérique : il faut utiliser posix_getpwuid() pour retrouver le nom d'utilisateur.
 *
 */
if(!function_exists('fileownerThis'))
{
    function fileownerThis($filename)
    {
		$filename = (string)$filename;

		return fileowner($filename);
    }
}

/**
 * filepermsThis
 *
 * Lit les droits d'un fichier.
 *
 * @link http://php.net/manual/fr/function.fileperms.php Documentation pour fileperms.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Retourne les permissions du fichier sous forme numérique. Les bits de poids faible sont les mêmes que ceux des permissions dans chmod(), cependant certaines plateformes incluent dans le retour des informations sur le type de fichier donné dans filename. Les exemples qui suivent montrent comment tester la valeur de retour concernant les permissions et le type de fichier sur des systèmes POSIX comme Linux ou Mac OS X.
 *
 */
if(!function_exists('filepermsThis'))
{
    function filepermsThis($filename)
    {
		$filename = (string)$filename;

		return fileperms($filename);
    }
}

/**
 * fileproThis
 *
 * Lit et vérifie un fichier.
 *
 * @link http://php.net/manual/fr/function.filepro.php Documentation pour filepro.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.1.6
 *
 * @param string   $directory    Le dossier du fichier.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fileproThis'))
{
    function fileproThis($directory)
    {
		$directory = (string)$directory;

		return filepro($directory);
    }
}

/**
 * filepro_fieldcountThis
 *
 * Retourne le nombre de champs dans une base filePro.
 *
 * @link http://php.net/manual/fr/function.filepro-fieldcount.php Documentation pour filepro_fieldcount.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.1.6
 * @return int	Retourne le nombre de champs d'une base de données filePro ouverte, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('filepro_fieldcountThis'))
{
    function filepro_fieldcountThis()
    {
		return filepro_fieldcount();
    }
}

/**
 * filepro_fieldnameThis
 *
 * Retourne le nom d'un champ filePro.
 *
 * @link http://php.net/manual/fr/function.filepro-fieldname.php Documentation pour filepro_fieldname.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.1.6
 *
 * @param int      $field_number    Le numéro du champ.
 *
 * @return string	Retourne le nom du champ sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('filepro_fieldnameThis'))
{
    function filepro_fieldnameThis($field_number)
    {
		$field_number = (int)$field_number;

		return filepro_fieldname($field_number);
    }
}

/**
 * filepro_fieldtypeThis
 *
 * Retourne le type d'un champ filePro.
 *
 * @link http://php.net/manual/fr/function.filepro-fieldtype.php Documentation pour filepro_fieldtype.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.1.6
 *
 * @param int      $field_number    Le numéro du champ.
 *
 * @return string	Retourne le type du champs sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('filepro_fieldtypeThis'))
{
    function filepro_fieldtypeThis($field_number)
    {
		$field_number = (int)$field_number;

		return filepro_fieldtype($field_number);
    }
}

/**
 * filepro_fieldwidthThis
 *
 * Retourne la taille d'un champ filePro.
 *
 * @link http://php.net/manual/fr/function.filepro-fieldwidth.php Documentation pour filepro_fieldwidth.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.1.6
 *
 * @param int      $field_number    Le numéro du champ.
 *
 * @return int	Retourne la taille du champ sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('filepro_fieldwidthThis'))
{
    function filepro_fieldwidthThis($field_number)
    {
		$field_number = (int)$field_number;

		return filepro_fieldwidth($field_number);
    }
}

/**
 * filepro_retrieveThis
 *
 * Retourne la valeur d'un champ filePro.
 *
 * @link http://php.net/manual/fr/function.filepro-retrieve.php Documentation pour filepro_retrieve.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.1.6
 *
 * @param int      $row_number    Le numéro de ligne. Doit être compris entre 0 et le nombre total de lignes moins une (0.. filepro_rowcount() - 1)
 * @param int      $field_number    Le numéro du champ. Doit être compris entre 0 et le nombre total de champs moins un (0.. filepro_fieldcount() - 1)
 *
 * @return string	Retourne les données spécifiées, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('filepro_retrieveThis'))
{
    function filepro_retrieveThis($row_number, $field_number)
    {
		$row_number = (int)$row_number;
		$field_number = (int)$field_number;

		return filepro_retrieve($row_number, $field_number);
    }
}

/**
 * filepro_rowcountThis
 *
 * Retourne le nombre de lignes dans une base filePro.
 *
 * @link http://php.net/manual/fr/function.filepro-rowcount.php Documentation pour filepro_rowcount.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.1.6
 * @return int	Retourne le nombre de lignes d'une base de données filePro ouverte, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('filepro_rowcountThis'))
{
    function filepro_rowcountThis()
    {
		return filepro_rowcount();
    }
}

/**
 * filesizeThis
 *
 * Lit la taille d'un fichier.
 *
 * @link http://php.net/manual/fr/function.filesize.php Documentation pour filesize.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return int	Renvoie la taille du fichier filename, ou FALSE (et génère une erreur de niveau E_WARNING) en cas d'erreur.
 *
 */
if(!function_exists('filesizeThis'))
{
    function filesizeThis($filename)
    {
		$filename = (string)$filename;

		return filesize($filename);
    }
}

/**
 * filetypeThis
 *
 * Retourne le type de fichier.
 *
 * @link http://php.net/manual/fr/function.filetype.php Documentation pour filetype.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return string	Retourne le type du fichier. Les réponses possibles sont : fifo, char, dir, block, link, file socket et unknown.
 *
 */
if(!function_exists('filetypeThis'))
{
    function filetypeThis($filename)
    {
		$filename = (string)$filename;

		return filetype($filename);
    }
}

/**
 * filter_has_varThis
 *
 * Vérifie si une variable d'un type spécifique existe.
 *
 * @link http://php.net/manual/fr/function.filter-has-var.php Documentation pour filter_has_var.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param int      $type    Une constante parmi INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER ou INPUT_ENV.
 * @param string   $variable_name    Nom de la variable à vérifier.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('filter_has_varThis'))
{
    function filter_has_varThis($type, $variable_name)
    {
		$type = (int)$type;
		$variable_name = (string)$variable_name;

		return filter_has_var($type, $variable_name);
    }
}

/**
 * filter_idThis
 *
 * Retourne l'identifiant d'un filtre nommé.
 *
 * @link http://php.net/manual/fr/function.filter-id.php Documentation pour filter_id.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $filtername    Nom du filtre à récupérer.
 *
 * @return int	Identifiant du filtre en cas de succès, ou FALSE si le filtre n'existe pas.
 *
 */
if(!function_exists('filter_idThis'))
{
    function filter_idThis($filtername)
    {
		$filtername = (string)$filtername;

		return filter_id($filtername);
    }
}

/**
 * filter_inputThis
 *
 * Récupère une variable externe et la filtre.
 *
 * @link http://php.net/manual/fr/function.filter-input.php Documentation pour filter_input.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param int      $type    Une constante parmi INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER ou INPUT_ENV.
 * @param string   $variable_name    Nom de la variable à récupérer.
 * @param int      $filter    L'ID du filtre à appliquer. La Types de filtres page du manuel liste tous les filtres disponibles.
 * @param mixed     $options    Tableau associatif d'options ou des drapeaux. Si le filtre accepte les options, les drapeaux peuvent être fournis dans le champ "flags" du tableau.
 *
 * @return mixed	Valeur de la variable demandée en cas de succès, FALSE si le filtre échoue, ou NULL si la variable variable_name n'est pas définie. Si le drapeau FILTER_NULL_ON_FAILURE est utilisé, la fonction retournera FALSE si la variable n'est pas définie et NULL si le filtre échoue.
 *
 */
if(!function_exists('filter_inputThis'))
{
    function filter_inputThis($type, $variable_name, $filter = FILTER_DEFAULT, $options = NULL)
    {
		$type = (int)$type;
		$variable_name = (string)$variable_name;
		$filter = (int)$filter;
		$options = ($options);
		return filter_input($type, $variable_name, $filter, $options);
    }
}

/**
 * filter_input_arrayThis
 *
 * Récupère plusieurs valeurs externes et les filtre.
 *
 * @link http://php.net/manual/fr/function.filter-input-array.php Documentation pour filter_input_array.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param int      $type    Une constante parmi INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER ou INPUT_ENV.
 * @param mixed     $definition    Un tableau définissant les arguments. Une clé valide est une chaîne de caractères contenant le nom de la variable et une valeur valide est soit le type d'un filtre, soit un tableau spécifiant le filtre, les drapeaux et les options. Si la valeur est un tableau, les clés valides sont filter qui spécifie le type du filtre, flags qui spécifie tous les drapeaux à appliquer au filtre, et options qui spécifie toutes les options à appliquer au filtre. Voir l'exemple ci-dessous pour une meilleure compréhension. Ce paramètre peut également être un entier contenant une constante de filtre. Ensuite, toutes les valeurs du tableau d'entrée seront filtrées par ce filtre.
 * @param bool     $add_empty    Ajout des clés manquantes à la valeur NULL dans la valeur retournée.
 *
 * @return mixed	Un tableau contenant les valeurs des variables demandées en cas de succès, ou FALSE si une erreur survient. Un tableau de valeurs peut valoir FALSE si le filtre échoue, ou NULL si la variable n'est pas définie. Ou, si le drapeau FILTER_NULL_ON_FAILURE est utilisé, la fonction retournera FALSE si la variable n'est pas définie et NULL si le filtre échoue.
 *
 */
if(!function_exists('filter_input_arrayThis'))
{
    function filter_input_arrayThis($type, $definition = NULL, $add_empty = true)
    {
		$type = (int)$type;
		$definition = ($definition);
		$add_empty = (bool)$add_empty;

		return filter_input_array($type, $definition, $add_empty);
    }
}

/**
 * filter_listThis
 *
 * Retourne une liste de tous les filtres supportés.
 *
 * @link http://php.net/manual/fr/function.filter-list.php Documentation pour filter_list.
 *
 * @version PHP 5 >= 5.2.0
 * @return array	Retourne un tableau de noms de tous les filtres supportés, un tableau vide s'il n'y a pas de filtre. Les index de ce tableau ne sont pas les identifiants des filtres, ils peuvent être obtenus avec la fonction filter_id() à partir du nom.
 *
 */
if(!function_exists('filter_listThis'))
{
    function filter_listThis()
    {
		return filter_list();
    }
}

/**
 * filter_varThis
 *
 * Filtre une variable avec un filtre spécifique.
 *
 * @link http://php.net/manual/fr/function.filter-var.php Documentation pour filter_var.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param mixed     $variable    Valeur à filtrer.
 * @param int      $filter    L'ID du filtre à appliquer. La page Types de filtres du manuel liste tous les filtres disponibles.
 * @param mixed     $options    Tableau associatif d'options ou des drapeaux. Si le filtre accepte les options, les drapeaux peuvent être fournis dans le champ "flags" du tableau. Pour les fonctions de rappel, le type callable devra être passé. La fonction de rappel doit accepter un seul argument ; la valeur à filtrer et retournera la valeur, une fois le filtre appliqué.
 *
 * @return mixed	Retourne les données filtrées, ou FALSE si le filtre échoue.
 *
 */
if(!function_exists('filter_varThis'))
{
    function filter_varThis($variable, $filter = FILTER_DEFAULT, $options = NULL)
    {
		$variable = ($variable);
		$filter = (int)$filter;
		$options = ($options);
		return filter_var($variable, $filter, $options);
    }
}

/**
 * filter_var_arrayThis
 *
 * Récupère plusieurs variables et les filtre.
 *
 * @link http://php.net/manual/fr/function.filter-var-array.php Documentation pour filter_var_array.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param array    $data    Un tableau avec les clés contenant les données à filtrer.
 * @param mixed     $definition    Un tableau définissant les arguments. Une clé valide est une chaîne de caractères contenant le nom de la variable et une valeur valide est soit le type d'un filtre, soit un tableau spécifiant le filtre, les drapeaux et les options. Si la valeur est un tableau, les clés valides sont filter qui spécifie le type du filtre, flags qui spécifie tous les drapeaux à appliquer au filtre, et options qui spécifie toutes les options à appliquer au filtre. Voir l'exemple ci-dessous pour une meilleure compréhension. Ce paramètre peut également être un entier contenant une constante de filtre. Ensuite, toutes les valeurs du tableau d'entrée seront filtrées par ce filtre.
 * @param bool     $add_empty    Ajout des clés manquantes à la valeur NULL dans la valeur retournée.
 *
 * @return mixed	Un tableau contenant les valeurs des variables demandées en cas de succès, ou FALSE si une erreur survient. Un tableau de valeurs peut valoir FALSE si le filtre échoue, ou NULL si la variable n'est pas définie.
 *
 */
if(!function_exists('filter_var_arrayThis'))
{
    function filter_var_arrayThis($data, $definition = NULL, $add_empty = true)
    {
		$data = (array)$data;
		$definition = ($definition);
		$add_empty = (bool)$add_empty;

		return filter_var_array($data, $definition, $add_empty);
    }
}

/**
 * floatvalThis
 *
 * Convertit une chaîne en nombre à virgule flottante.
 *
 * @link http://php.net/manual/fr/function.floatval.php Documentation pour floatval.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $var    Peut être de n'importe quel type scalaire. floatval() ne doit pas être utilisé sur les objets ; si tel est le cas, une alerte de niveau E_NOTICE sera émise et la fonction retournera 1.
 *
 * @return float	La valeur flottante de la variable donnée. Un tableau vide retourne 0, alors qu'un tableau non-vide retourne 1.
 *
 */
if(!function_exists('floatvalThis'))
{
    function floatvalThis($var)
    {
		$var = ($var);
		return floatval($var);
    }
}

/**
 * flockThis
 *
 * Verrouille le fichier.
 *
 * @link http://php.net/manual/fr/function.flock.php Documentation pour flock.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur de système de fichiers de type resource qui est habituellement créé en utilisant la fonction fopen().
 * @param int      $operation    operation peut prendre une des valeurs suivantes : Il est également possible d'ajouter LOCK_NB comme masque d'une des opérations précédentes si vous ne voulez pas que la fonction flock() bloque durant le verrouillage. (non supporté sous Windows)
 * @param int      &$wouldblock    Ce troisième argument optionnel est défini à TRUE si le verrou doit bloquer le script (condition d'erreur EWOULDBLOCK) (non supporté sous Windows).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('flockThis'))
{
    function flockThis($handle, $operation, &$wouldblock = NULL)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$operation = (int)$operation;
		$wouldblock = (int)$wouldblock;

		return flock($handle, $operation, $wouldblock);
    }
}

/**
 * floorThis
 *
 * Arrondit à l'entier inférieur.
 *
 * @link http://php.net/manual/fr/function.floor.php Documentation pour floor.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $value    La valeur numérique à arrondir
 *
 * @return float	floor() retourne l'entier inférieur du nombre value. La valeur retournée est un nombre à virgule flottante, (float) car ces nombres peuvent être plus grands que les entiers.
 *
 */
if(!function_exists('floorThis'))
{
    function floorThis($value)
    {
		$value = (float)$value;

		return floor($value);
    }
}

/**
 * flushThis
 *
 * Vide les tampons de sortie.
 *
 * @link http://php.net/manual/fr/function.flush.php Documentation pour flush.
 *
 * @version PHP 4
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('flushThis'))
{
    function flushThis()
    {
		return flush();
    }
}

/**
 * fmodThis
 *
 * Retourne le reste de la division.
 *
 * @link http://php.net/manual/fr/function.fmod.php Documentation pour fmod.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param float    $x    Le dividende
 * @param float    $y    Le diviseur
 *
 * @return float	Le reste de la division de x par y.
 *
 */
if(!function_exists('fmodThis'))
{
    function fmodThis($x, $y)
    {
		$x = (float)$x;
		$y = (float)$y;

		return fmod($x, $y);
    }
}

/**
 * fnmatchThis
 *
 * Repère un fichier à partir d'un masque de recherche.
 *
 * @link http://php.net/manual/fr/function.fnmatch.php Documentation pour fnmatch.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $pattern    Le masque Shell.
 * @param string   $string    La chaîne testée. Cette fonction est particulièrement utile pour les noms de fichier, mais peut également être utilisée sur des chaînes régulières. L'utilisateur moyen de Shell peut être familier avec les masques Shell, ou tout au moins, leurs expressions les plus simples, comme '?' et '*'. De cette façon, utiliser fnmatch() au lieu de preg_match() pour des recherches peut être plus pratique pour les non-initiés.
 * @param int      $flags    La valeur de flags peut être une combinaison des drapeaux suivants, joins avec l' opérateur binaire OR (|).
 *
 * @return bool	Retourne TRUE s'il y a des résultats, FALSE sinon.
 *
 */
if(!function_exists('fnmatchThis'))
{
    function fnmatchThis($pattern, $string, $flags = 0)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$flags = (int)$flags;

		return fnmatch($pattern, $string, $flags);
    }
}

/**
 * fopenThis
 *
 * Ouvre un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.fopen.php Documentation pour fopen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Si filename est de la forme "protocole://", filename est supposé être une URL, et PHP va rechercher un gestionnaire de protocole adapté pour lire ce fichier. Si aucun gestionnaire pour ce protocole n'est disponible, PHP va émettre une alerte qui vous permettra de savoir que vous avez des problèmes dans votre script, et il tentera d'exploiter filename comme un fichier classique. Si PHP décide que le fichier filename est un fichier local, il va essayer d'ouvrir un flux avec ce fichier. Le fichier doit être accessible à PHP. Il vous faut donc vous assurer que vous avez les droits d'accès à ce fichier. Si vous activez le safe mode, ou la directive open_basedir, d'autres conditions peuvent aussi s'appliquer. Si PHP a décidé que filename spécifie un protocole enregistré, et que ce protocole est enregistré comme un protocole réseau, PHP s'assurera que la directive allow_url_fopen est activée. Si elle est inactive, PHP va émettre une alerte et l'ouverture va échouer. Sous Windows, assurez-vous de bien protéger les antislash utilisés dans le chemin du fichier, ou bien utilisez des slashs.
 * @param string   $mode    Le paramètre mode spécifie le type d'accès désiré au flux. Il peut prendre les valeurs suivantes :
 * @param bool     $use_include_path    Le troisième paramètre optionnel use_include_path peut être défini à 1 ou à TRUE pour chercher le fichier dans l'include_path.
 * @param resource $context
 *
 * @return resource	Retourne une ressource représentant le pointeur de fichier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fopenThis'))
{
    function fopenThis($filename, $mode, $use_include_path = false, $context = NULL)
    {
		$filename = (string)$filename;
		$mode = (string)$mode;
		$use_include_path = (bool)$use_include_path;
		$context = is_resource($context) ? $context : NULL;

		return fopen($filename, $mode, $use_include_path, $context);
    }
}

/**
 * forward_static_callThis
 *
 * Appelle une méthode statique.
 *
 * @link http://php.net/manual/fr/function.forward-static-call.php Documentation pour forward_static_call.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param callable     $function    La fonction ou la méthode appelée. Ce paramètre peut être un tableau, avec le nom de la classe et de la méthode, ou une chaîne, avec le nom de la fonction.
 * @param mixed     $parameter    Zéro ou plusieurs paramètres à passer à la fonction.
 * @param mixed     $item
 *
 * @return mixed	Retourne le résultat de la fonction, ou bien FALSE en cas d'erreur.
 *
 */
if(!function_exists('forward_static_callThis'))
{
    function forward_static_callThis($function, $parameter = NULL, $parameter1 = NULL)
    {
		$function = is_callable($function) ? $function : NULL;
		$parameter = ($parameter);
		$parameter1 = ($parameter1);
		return forward_static_call($function, $parameter, $parameter1);
    }
}

/**
 * forward_static_call_arrayThis
 *
 * Appelle une méthode statique et passe les arguments en tableau.
 *
 * @link http://php.net/manual/fr/function.forward-static-call-array.php Documentation pour forward_static_call_array.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param callable     $function    La fonction ou la méthode appelée. Ce paramètre peut être un tableau, avec le nom de la classe et de la méthode, ou une chaîne, avec le nom de la fonction.
 * @param array    $parameters    Un paramètre, rassemblant tous les paramètres dans un tableau.
 *
 * @return mixed	Retourne le résultat de la fonction, et FALSE en cas d'erreur.
 *
 */
if(!function_exists('forward_static_call_arrayThis'))
{
    function forward_static_call_arrayThis($function, $parameters)
    {
		$function = is_callable($function) ? $function : NULL;
		$parameters = (array)$parameters;

		return forward_static_call_array($function, $parameters);
    }
}

/**
 * fpassthruThis
 *
 * Affiche le reste du fichier.
 *
 * @link http://php.net/manual/fr/function.fpassthru.php Documentation pour fpassthru.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et pointer sur un fichier ouvert avec succès par fopen() ou fsockopen() (et pas encore fermé par fclose()).
 *
 * @return int	Si une erreur survient, fpassthru() retourne FALSE. Sinon, fpassthru() retourne le nombre de caractères lus dans handle et passés à la sortie standard.
 *
 */
if(!function_exists('fpassthruThis'))
{
    function fpassthruThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return fpassthru($handle);
    }
}

/**
 * fprintfThis
 *
 * Écrit une chaîne formatée dans un flux.
 *
 * @link http://php.net/manual/fr/function.fprintf.php Documentation pour fprintf.
 *
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur de système de fichiers de type resource qui est habituellement créé en utilisant la fonction fopen().
 * @param string   $format    Voir la documentation sur la fonction sprintf() pour une description du paramètre format.
 * @param mixed     $args
 * @param mixed     $item
 *
 * @return int	Retourne la longueur de la chaîne écrite.
 *
 */
if(!function_exists('fprintfThis'))
{
    function fprintfThis($handle, $format, $args = NULL, $args1 = NULL)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$format = (string)$format;
		$args = ($args);
		$args1 = ($args1);
		return fprintf($handle, $format, $args, $args1);
    }
}

/**
 * fputcsvThis
 *
 * Formate une ligne en CSV et l'écrit dans un fichier.
 *
 * @link http://php.net/manual/fr/function.fputcsv.php Documentation pour fputcsv.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $handle    Le pointeur de fichier doit être valide et pointer sur un fichier ouvert avec succès par fopen() ou fsockopen() (et pas encore fermé par fclose()).
 * @param array    $fields    Un tableau de valeurs.
 * @param string   $delimiter    Le paramètre optionnel delimiter spécifie le délimiteur (un seul caractère).
 * @param string   $enclosure    Le paramètre enclosure spécifie le caractère d'encadrement (un seul caractère).
 *
 * @return int	Retourne la taille de la chaîne écrite ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fputcsvThis'))
{
    function fputcsvThis($handle, $fields, $delimiter = ',', $enclosure = '"')
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$fields = (array)$fields;
		$delimiter = (string)$delimiter;
		$enclosure = (string)$enclosure;

		return fputcsv($handle, $fields, $delimiter, $enclosure);
    }
}

/**
 * freadThis
 *
 * Lecture du fichier en mode binaire.
 *
 * @link http://php.net/manual/fr/function.fread.php Documentation pour fread.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur de système de fichiers de type resource qui est habituellement créé en utilisant la fonction fopen().
 * @param int      $length    Taille length d'octets à lire.
 *
 * @return string	Retourne la chaîne lue, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('freadThis'))
{
    function freadThis($handle, $length)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$length = (int)$length;

		return fread($handle, $length);
    }
}

/**
 * fscanfThis
 *
 * Analyse un fichier en fonction d'un format.
 *
 * @link http://php.net/manual/fr/function.fscanf.php Documentation pour fscanf.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur de système de fichiers de type resource qui est habituellement créé en utilisant la fonction fopen().
 * @param string   $format    Le format spécifié, tel que décrit dans la documentation de la fonction sprintf().
 * @param mixed     &$item    Les valeurs optionnelles à assigner.
 *
 * @return mixed	Si seulement 2 paramètres sont passés à la fonction, la valeur analysée sera retourné sous la forme d'un tableau. Si des paramètres optionnels sont passés, la fonction retournera le nombre de valeurs assignées. Les paramètres optionnels doivent être passés par référence.
 *
 */
if(!function_exists('fscanfThis'))
{
    function fscanfThis($handle, $format, &$format1 = NULL)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$format = (string)$format;
		$format1 = ($format1);
		return fscanf($handle, $format, $format1);
    }
}

/**
 * fseekThis
 *
 * Modifie la position du pointeur de fichier.
 *
 * @link http://php.net/manual/fr/function.fseek.php Documentation pour fseek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur de système de fichiers de type resource qui est habituellement créé en utilisant la fonction fopen().
 * @param int      $offset    La position. Pour se déplacer à une position avant la fin du fichier, vous devez passer une valeur négative à offset et définir le paramètre whence à la valeur SEEK_END.
 * @param int      $whence    Les valeurs possibles pour whence sont :
 *
 * @return int	Retourne 0 en cas de succès, et sinon -1.
 *
 */
if(!function_exists('fseekThis'))
{
    function fseekThis($handle, $offset, $whence = SEEK_SET)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$offset = (int)$offset;
		$whence = (int)$whence;

		return fseek($handle, $offset, $whence);
    }
}

/**
 * fsockopenThis
 *
 * Ouvre un socket de connexion Internet ou Unix.
 *
 * @link http://php.net/manual/fr/function.fsockopen.php Documentation pour fsockopen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    Si le support OpenSSL est installé, vous pouvez préfixer hostname avec ssl:// ou tls:// pour utiliser une connexion cliente SSL ou TLS sur TCP/IP pour vous connectez à l'hôte distant.
 * @param int      $port    Le numéro du port.
 * @param int      &$errno    Si fourni, contient le numéro de l'erreur système qui survient lors de l'appel système à connect(). Si la valeur retournée par errno est 0 et que la fonction retourne FALSE, ce peut être une indication laissant penser que l'erreur est survenue avant l'appel à connect(). La plupart du temps, cela est du à un problème d'initialisation du socket.
 * @param string   &$errstr    Le message d'erreur, sous la forme d'une chaîne de caractères.
 * @param float    $timeout    Le délai d'attente maximal, en secondes.
 *
 * @return resource	fsockopen() retourne un pointeur de fichier qui peut être utilisé avec d'autres fonctions fichiers, telles fgets(), fgetss(), fputs(), fclose() et feof(). Si l'appel échoue, la fonction retourne FALSE.
 *
 */
if(!function_exists('fsockopenThis'))
{
    function fsockopenThis($hostname, $port = -1, &$errno = NULL, &$errstr = NULL, $timeout = NULL)
    {
		$hostname = (string)$hostname;
		$port = (int)$port;
		$errno = (int)$errno;
		$errstr = (string)$errstr;
		$timeout = empty($timeout) ? (float)ini_get("default_socket_timeout") : (float)$timeout;

		return fsockopen($hostname, $port, $errno, $errstr, $timeout);
    }
}

/**
 * fstatThis
 *
 * Lit les informations sur un fichier à partir d'un pointeur de fichier.
 *
 * @link http://php.net/manual/fr/function.fstat.php Documentation pour fstat.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur de système de fichiers de type resource qui est habituellement créé en utilisant la fonction fopen().
 *
 * @return array	Retourne un tableau contenant les statistiques pour le fichier ; le format de ce tableau est décrit en détail sur la page de documentation de la fonction stat().
 *
 */
if(!function_exists('fstatThis'))
{
    function fstatThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return fstat($handle);
    }
}

/**
 * ftellThis
 *
 * Renvoie la position courant du pointeur de fichier.
 *
 * @link http://php.net/manual/fr/function.ftell.php Documentation pour ftell.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide, et avoir été correctement ouvert par fopen() ou popen(). ftell() donne des résultats non définis pour les flux "append-only" (ouvert avec le flag "a").
 *
 * @return int	Retourne la position courante du pointeur dans le fichier repéré par le pointeur handle sous la forme d'un entier, i.e., sa position dans le flux du fichier.
 *
 */
if(!function_exists('ftellThis'))
{
    function ftellThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return ftell($handle);
    }
}

/**
 * ftokThis
 *
 * Convertit un chemin et un identifiant de projet en une clé System V IPC.
 *
 * @link http://php.net/manual/fr/function.ftok.php Documentation pour ftok.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pathname    Chemin vers un fichier accessible.
 * @param string   $proj    Identifiant du projet. Doit être un seul caractère.
 *
 * @return int	En cas de succès, la valeur retournée sera la valeur de la clé créée, sinon, -1 sera retourné.
 *
 */
if(!function_exists('ftokThis'))
{
    function ftokThis($pathname, $proj)
    {
		$pathname = (string)$pathname;
		$proj = (string)$proj;

		return ftok($pathname, $proj);
    }
}

/**
 * ftp_allocThis
 *
 * Alloue de l'espace pour un téléchargement de fichier.
 *
 * @link http://php.net/manual/fr/function.ftp-alloc.php Documentation pour ftp_alloc.
 *
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param int      $filesize    Le nombre d'octets à allouer.
 * @param string   &$result    Une représentation textuelle de la réponse du serveur qui sera retournée par référence dans result si une variable est fournie.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_allocThis'))
{
    function ftp_allocThis($ftp_stream, $filesize, &$result = NULL)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$filesize = (int)$filesize;
		$result = (string)$result;

		return ftp_alloc($ftp_stream, $filesize, $result);
    }
}

/**
 * ftp_cdupThis
 *
 * Change de dossier et passe au dossier parent.
 *
 * @link http://php.net/manual/fr/function.ftp-cdup.php Documentation pour ftp_cdup.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de la connexion FTP.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_cdupThis'))
{
    function ftp_cdupThis($ftp_stream)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;

		return ftp_cdup($ftp_stream);
    }
}

/**
 * ftp_chdirThis
 *
 * Modifie le dossier FTP courant.
 *
 * @link http://php.net/manual/fr/function.ftp-chdir.php Documentation pour ftp_chdir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $directory    Le dossier cible.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Si le changement échoue, PHP lancera également une alerte.
 *
 */
if(!function_exists('ftp_chdirThis'))
{
    function ftp_chdirThis($ftp_stream, $directory)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$directory = (string)$directory;

		return ftp_chdir($ftp_stream, $directory);
    }
}

/**
 * ftp_chmodThis
 *
 * Modifie les droits d'un fichier via FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-chmod.php Documentation pour ftp_chmod.
 *
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param int      $mode    La nouvelle permission, donnée en tant que valeur octale.
 * @param string   $filename    Le fichier distant.
 *
 * @return int	Retourne les nouvelles permissions du fichier en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_chmodThis'))
{
    function ftp_chmodThis($ftp_stream, $mode, $filename)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$mode = (int)$mode;
		$filename = (string)$filename;

		return ftp_chmod($ftp_stream, $mode, $filename);
    }
}

/**
 * ftp_closeThis
 *
 * Ferme une connexion FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-close.php Documentation pour ftp_close.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_closeThis'))
{
    function ftp_closeThis($ftp_stream)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;

		return ftp_close($ftp_stream);
    }
}

/**
 * ftp_connectThis
 *
 * Ouvre une connexion FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-connect.php Documentation pour ftp_connect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    L'adresse du serveur FTP. Ce paramètre ne doit jamais avoir de slash final et ne doit pas être préfixé par ftp://.
 * @param int      $port    Ce paramètre spécifie un numéro de port alternatif pour la connexion. S'il est omis ou définie à zéro, alors le port par défaut utilisé sera 21.
 * @param int      $timeout    Ce paramètre spécifie le délai de connexion pour toutes les opérations de sous séquences du réseau. S'il est omis, la valeur par défaut sera 90 secondes. Le délai de connexion peut être modifié et interrogé à n'importe quel moment avec les moments ftp_set_option() et ftp_get_option().
 *
 * @return resource	Retourne un flux FTP en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_connectThis'))
{
    function ftp_connectThis($host, $port = 21, $timeout = 90)
    {
		$host = (string)$host;
		$port = (int)$port;
		$timeout = (int)$timeout;

		return ftp_connect($host, $port, $timeout);
    }
}

/**
 * ftp_deleteThis
 *
 * Efface un fichier sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-delete.php Documentation pour ftp_delete.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $path    Le fichier à effacer.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_deleteThis'))
{
    function ftp_deleteThis($ftp_stream, $path)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$path = (string)$path;

		return ftp_delete($ftp_stream, $path);
    }
}

/**
 * ftp_execThis
 *
 * Exécute une commande sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-exec.php Documentation pour ftp_exec.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $command    La commande à exécuter.
 *
 * @return bool	Retourne TRUE si la commande a été exécutée avec succès (le serveur envoie le code réponse : 200); sinon, retourne FALSE.
 *
 */
if(!function_exists('ftp_execThis'))
{
    function ftp_execThis($ftp_stream, $command)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$command = (string)$command;

		return ftp_exec($ftp_stream, $command);
    }
}

/**
 * ftp_fgetThis
 *
 * Télécharge un fichier via FTP dans un fichier local.
 *
 * @link http://php.net/manual/fr/function.ftp-fget.php Documentation pour ftp_fget.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param resource $handle    Un pointeur de fichier ouvert dans lequel on écrit les données.
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param int      $mode    Le mode de transfert. Doit être soit FTP_ASCII, soit FTP_BINARY.
 * @param int      $resumepos    La position du fichier distant à partir de laquelle le téléchargement commence.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_fgetThis'))
{
    function ftp_fgetThis($ftp_stream, $handle, $remote_file, $mode, $resumepos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$handle = is_resource($handle) ? $handle : NULL;
		$remote_file = (string)$remote_file;
		$mode = (int)$mode;
		$resumepos = (int)$resumepos;

		return ftp_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos);
    }
}

/**
 * ftp_fputThis
 *
 * Charge un fichier sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-fput.php Documentation pour ftp_fput.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param resource $handle    Un pointeur de fichier ouvert sur le fichier local. La lecture s'arrête à la fin du fichier.
 * @param int      $mode    Le mode de transfert. Doit être soit FTP_ASCII, soit FTP_BINARY.
 * @param int      $startpos    La position dans le fichier distant à partir de laquelle le téléchargement commencera.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_fputThis'))
{
    function ftp_fputThis($ftp_stream, $remote_file, $handle, $mode, $startpos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$remote_file = (string)$remote_file;
		$handle = is_resource($handle) ? $handle : NULL;
		$mode = (int)$mode;
		$startpos = (int)$startpos;

		return ftp_fput($ftp_stream, $remote_file, $handle, $mode, $startpos);
    }
}

/**
 * ftp_getThis
 *
 * Télécharge un fichier depuis un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-get.php Documentation pour ftp_get.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $local_file    Le chemin vers le fichier local (sera écrasé si le fichier existe déjà).
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param int      $mode    Le mode de transfert. Doit être soit FTP_ASCII, soit FTP_BINARY.
 * @param int      $resumepos    La position dans le fichier distant à partir duquel on commence le téléchargement.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_getThis'))
{
    function ftp_getThis($ftp_stream, $local_file, $remote_file, $mode, $resumepos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$local_file = (string)$local_file;
		$remote_file = (string)$remote_file;
		$mode = (int)$mode;
		$resumepos = (int)$resumepos;

		return ftp_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos);
    }
}

/**
 * ftp_get_optionThis
 *
 * Lit différentes options pour la connexion FTP courante.
 *
 * @link http://php.net/manual/fr/function.ftp-get-option.php Documentation pour ftp_get_option.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param int      $option    Actuellement, les options suivantes sont supportées :
 *
 * @return mixed	Retourne la valeur en cas de succès, ou FALSE si l'option option n'est pas supportée. Dans le dernier cas, un message d'alerte est également envoyé.
 *
 */
if(!function_exists('ftp_get_optionThis'))
{
    function ftp_get_optionThis($ftp_stream, $option)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$option = (int)$option;

		return ftp_get_option($ftp_stream, $option);
    }
}

/**
 * ftp_loginThis
 *
 * Identification sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-login.php Documentation pour ftp_login.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $username    Le nom de l'utilisateur (USER).
 * @param string   $password    Le mot de passe (PASS).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Si l'identification échoue, PHP lancera une alerte.
 *
 */
if(!function_exists('ftp_loginThis'))
{
    function ftp_loginThis($ftp_stream, $username, $password)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$username = (string)$username;
		$password = (string)$password;

		return ftp_login($ftp_stream, $username, $password);
    }
}

/**
 * ftp_mdtmThis
 *
 * Retourne la date de dernière modification d'un fichier sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-mdtm.php Documentation pour ftp_mdtm.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $remote_file    Le fichier depuis lequel on doit extraire la date de dernière modification.
 *
 * @return int	Retourne la date de dernière modification en tant que timestamp Unix en cas de succès, ou -1 si une erreur survient.
 *
 */
if(!function_exists('ftp_mdtmThis'))
{
    function ftp_mdtmThis($ftp_stream, $remote_file)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$remote_file = (string)$remote_file;

		return ftp_mdtm($ftp_stream, $remote_file);
    }
}

/**
 * ftp_mkdirThis
 *
 * Crée un dossier sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-mkdir.php Documentation pour ftp_mkdir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $directory    Le nom du dossier qui doit être créé.
 *
 * @return string	Retourne le nom du dossier créé en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_mkdirThis'))
{
    function ftp_mkdirThis($ftp_stream, $directory)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$directory = (string)$directory;

		return ftp_mkdir($ftp_stream, $directory);
    }
}

/**
 * ftp_nb_continueThis
 *
 * Reprend le téléchargement d'un fichier (non bloquant).
 *
 * @link http://php.net/manual/fr/function.ftp-nb-continue.php Documentation pour ftp_nb_continue.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 *
 * @return int	Retourne FTP_FAILED ou FTP_FINISHED ou FTP_MOREDATA.
 *
 */
if(!function_exists('ftp_nb_continueThis'))
{
    function ftp_nb_continueThis($ftp_stream)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;

		return ftp_nb_continue($ftp_stream);
    }
}

/**
 * ftp_nb_fgetThis
 *
 * Lit un fichier sur un serveur FTP, et l'écrit dans un fichier (non bloquant).
 *
 * @link http://php.net/manual/fr/function.ftp-nb-fget.php Documentation pour ftp_nb_fget.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param resource $handle    Un pointeur de fichier ouvert dans lequel les données sont écrites.
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param int      $mode    Le mode de transfert. Doit être soir FTP_ASCII ou FTP_BINARY.
 * @param int      $resumepos    La position dans le fichier distant à partir de laquelle le téléchargement doit commencer.
 *
 * @return int	Retourne FTP_FAILED ou FTP_FINISHED ou FTP_MOREDATA.
 *
 */
if(!function_exists('ftp_nb_fgetThis'))
{
    function ftp_nb_fgetThis($ftp_stream, $handle, $remote_file, $mode, $resumepos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$handle = is_resource($handle) ? $handle : NULL;
		$remote_file = (string)$remote_file;
		$mode = (int)$mode;
		$resumepos = (int)$resumepos;

		return ftp_nb_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos);
    }
}

/**
 * ftp_nb_fputThis
 *
 * Écrit un fichier sur un serveur FTP, et le lit depuis un fichier (non bloquant).
 *
 * @link http://php.net/manual/fr/function.ftp-nb-fput.php Documentation pour ftp_nb_fput.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param resource $handle    Un pointeur de fichier vers un fichier local. La lecture s'arrête à la fin du fichier.
 * @param int      $mode    Le mode de transfert. Doit être soit FTP_ASCII, soit FTP_BINARY.
 * @param int      $startpos    La position dans le fichier distant à partir de laquelle le téléchargement commencera.
 *
 * @return int	Retourne FTP_FAILED, FTP_FINISHED ou FTP_MOREDATA.
 *
 */
if(!function_exists('ftp_nb_fputThis'))
{
    function ftp_nb_fputThis($ftp_stream, $remote_file, $handle, $mode, $startpos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$remote_file = (string)$remote_file;
		$handle = is_resource($handle) ? $handle : NULL;
		$mode = (int)$mode;
		$startpos = (int)$startpos;

		return ftp_nb_fput($ftp_stream, $remote_file, $handle, $mode, $startpos);
    }
}

/**
 * ftp_nb_getThis
 *
 * Lit un fichier sur un serveur FTP, et l'écrit dans un fichier (non bloquant).
 *
 * @link http://php.net/manual/fr/function.ftp-nb-get.php Documentation pour ftp_nb_get.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $local_file    Le chemin vers le fichier local (sera écrasé si le fichier existe déjà).
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param int      $mode    Le mode de transfert. Doit être soit FTP_ASCII ou FTP_BINARY.
 * @param int      $resumepos    La position dans le fichier distant à partir de laquelle le téléchargement doit commencer.
 *
 * @return int	Retourne FTP_FAILED ou FTP_FINISHED ou FTP_MOREDATA.
 *
 */
if(!function_exists('ftp_nb_getThis'))
{
    function ftp_nb_getThis($ftp_stream, $local_file, $remote_file, $mode, $resumepos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$local_file = (string)$local_file;
		$remote_file = (string)$remote_file;
		$mode = (int)$mode;
		$resumepos = (int)$resumepos;

		return ftp_nb_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos);
    }
}

/**
 * ftp_nb_putThis
 *
 * Envoie un fichier sur un serveur FTP (non-bloquant).
 *
 * @link http://php.net/manual/fr/function.ftp-nb-put.php Documentation pour ftp_nb_put.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param string   $local_file    Le chemin vers le fichier local.
 * @param int      $mode    Le mode de transfert. Doit être soit FTP_ASCII, soit FTP_BINARY.
 * @param int      $startpos    La position dans le fichier distant à partir de laquelle le téléchargement commencera.
 *
 * @return int	Retourne FTP_FAILED, FTP_FINISHED ou FTP_MOREDATA.
 *
 */
if(!function_exists('ftp_nb_putThis'))
{
    function ftp_nb_putThis($ftp_stream, $remote_file, $local_file, $mode, $startpos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$remote_file = (string)$remote_file;
		$local_file = (string)$local_file;
		$mode = (int)$mode;
		$startpos = (int)$startpos;

		return ftp_nb_put($ftp_stream, $remote_file, $local_file, $mode, $startpos);
    }
}

/**
 * ftp_nlistThis
 *
 * Retourne la liste des fichiers d'un dossier.
 *
 * @link http://php.net/manual/fr/function.ftp-nlist.php Documentation pour ftp_nlist.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $directory    Le dossier à lister. Ce paramètre peut également inclure des arguments, e.g. ftp_nlist($conn_id, "-la /your/dir"); Notez que ce paramètre n'est pas échappé, il peut donc y avoir des comportements non-désirés si le nom des fichiers contient des espaces ou d'autres caractères.
 *
 * @return array	Retourne un tableau de nom de fichiers présent dans le dossier spécifié en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_nlistThis'))
{
    function ftp_nlistThis($ftp_stream, $directory)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$directory = (string)$directory;

		return ftp_nlist($ftp_stream, $directory);
    }
}

/**
 * ftp_pasvThis
 *
 * Active ou désactive le mode passif.
 *
 * @link http://php.net/manual/fr/function.ftp-pasv.php Documentation pour ftp_pasv.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param bool     $pasv    Si TRUE, le mode passif est activé, sinon, il est désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_pasvThis'))
{
    function ftp_pasvThis($ftp_stream, $pasv)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$pasv = (bool)$pasv;

		return ftp_pasv($ftp_stream, $pasv);
    }
}

/**
 * ftp_putThis
 *
 * Charge un fichier sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-put.php Documentation pour ftp_put.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de la connexion FTP.
 * @param string   $remote_file    Le chemin vers le fichier distant.
 * @param string   $local_file    Le chemin vers le fichier local.
 * @param int      $mode    Le mode de transfert. Doit être soit FTP_ASCII, soit FTP_BINARY.
 * @param int      $startpos    La position dans le fichier distant à partir de laquelle le téléchargement commencera.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_putThis'))
{
    function ftp_putThis($ftp_stream, $remote_file, $local_file, $mode, $startpos = 0)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$remote_file = (string)$remote_file;
		$local_file = (string)$local_file;
		$mode = (int)$mode;
		$startpos = (int)$startpos;

		return ftp_put($ftp_stream, $remote_file, $local_file, $mode, $startpos);
    }
}

/**
 * ftp_pwdThis
 *
 * Retourne le nom du dossier courant.
 *
 * @link http://php.net/manual/fr/function.ftp-pwd.php Documentation pour ftp_pwd.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 *
 * @return string	Retourne le nom du dossier courant ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_pwdThis'))
{
    function ftp_pwdThis($ftp_stream)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;

		return ftp_pwd($ftp_stream);
    }
}

/**
 * ftp_rawThis
 *
 * Envoie une commande FTP brute.
 *
 * @link http://php.net/manual/fr/function.ftp-raw.php Documentation pour ftp_raw.
 *
 * @version PHP 5
 *
 * @param resource $ftp_stream    La ressource de connexion FTP.
 * @param string   $command    La commande à exécuter.
 *
 * @return array	Retourne la réponse du serveur en tant que tableau de chaînes. Aucune analyse n'est faite sur la chaîne réponse, ni si ftp_raw() détermine si la commande a réussi.
 *
 */
if(!function_exists('ftp_rawThis'))
{
    function ftp_rawThis($ftp_stream, $command)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$command = (string)$command;

		return ftp_raw($ftp_stream, $command);
    }
}

/**
 * ftp_rawlistThis
 *
 * Fait une liste détaillée des fichiers d'un dossier.
 *
 * @link http://php.net/manual/fr/function.ftp-rawlist.php Documentation pour ftp_rawlist.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $directory    Le chemin vers le dossier. Peut inclure les arguments pour la commande LIST.
 * @param bool     $recursive    Si défini à TRUE, la commande sera LIST -R.
 *
 * @return array	Retourne un tableau où les éléments correspondent à une ligne de texte.
 *
 */
if(!function_exists('ftp_rawlistThis'))
{
    function ftp_rawlistThis($ftp_stream, $directory, $recursive = false)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$directory = (string)$directory;
		$recursive = (bool)$recursive;

		return ftp_rawlist($ftp_stream, $directory, $recursive);
    }
}

/**
 * ftp_renameThis
 *
 * Renomme un fichier sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-rename.php Documentation pour ftp_rename.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $oldname    L'ancien nom du dossier / fichier.
 * @param string   $newname    Le nouveau nom.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_renameThis'))
{
    function ftp_renameThis($ftp_stream, $oldname, $newname)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$oldname = (string)$oldname;
		$newname = (string)$newname;

		return ftp_rename($ftp_stream, $oldname, $newname);
    }
}

/**
 * ftp_rmdirThis
 *
 * Efface un dossier FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-rmdir.php Documentation pour ftp_rmdir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identification du lien de connexion FTP.
 * @param string   $directory    Le dossier à effacer. Ce doit être soit un chemin absolu, soit un chemin relatif vers un dossier vide.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_rmdirThis'))
{
    function ftp_rmdirThis($ftp_stream, $directory)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$directory = (string)$directory;

		return ftp_rmdir($ftp_stream, $directory);
    }
}

/**
 * ftp_set_optionThis
 *
 * Modifie les options de la connexion FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-set-option.php Documentation pour ftp_set_option.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param int      $option    Actuellement, les options suivantes sont supportées :
 * @param mixed     $value    Ce paramètre dépend de l'option option que l'on veut modifier.
 *
 * @return bool	Retourne TRUE si l'option a pû être modifiée, FALSE sinon. Un message d'alerte sera envoyé si option n'est pas supportée ou bien si la valeur value ne correspond pas à la valeur attendue pour l'option option donnée.
 *
 */
if(!function_exists('ftp_set_optionThis'))
{
    function ftp_set_optionThis($ftp_stream, $option, $value)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$option = (int)$option;
		$value = ($value);
		return ftp_set_option($ftp_stream, $option, $value);
    }
}

/**
 * ftp_siteThis
 *
 * Exécute la commande SITE sur un serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-site.php Documentation pour ftp_site.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $command    La commande SITE. Notez que ce paramètre n'est pas échappé, il peut donc y avoir des comportements non-désirés si le nom des fichiers contient des espaces ou d'autres caractères.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_siteThis'))
{
    function ftp_siteThis($ftp_stream, $command)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$command = (string)$command;

		return ftp_site($ftp_stream, $command);
    }
}

/**
 * ftp_sizeThis
 *
 * Retourne la taille d'un fichier.
 *
 * @link http://php.net/manual/fr/function.ftp-size.php Documentation pour ftp_size.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 * @param string   $remote_file    Le fichier distant.
 *
 * @return int	Retourne la taille du fichier en cas de succès, ou -1 si une erreur survient.
 *
 */
if(!function_exists('ftp_sizeThis'))
{
    function ftp_sizeThis($ftp_stream, $remote_file)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;
		$remote_file = (string)$remote_file;

		return ftp_size($ftp_stream, $remote_file);
    }
}

/**
 * ftp_ssl_connectThis
 *
 * Ouvre une connexion FTP sécurisée avec SSL.
 *
 * @link http://php.net/manual/fr/function.ftp-ssl-connect.php Documentation pour ftp_ssl_connect.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $host    L'adresse FTP du serveur. Ce paramètre ne doit pas comporter de slash final et ne doit pas être préfixé par ftp://.
 * @param int      $port    Ce paramètre spécifie un port alternatif de connexion. S'il est omis ou défini à zéro, alors le port par défaut FTP, 21, sera utilisé.
 * @param int      $timeout    Ce paramètre spécifie le délai de connexion pour toutes les opérations sur le réseau. S'il est omis, la valeur par défaut sera de 90 secondes. Ce délai de connexion peut être modifié et consulté à tout moment avec les fonctions ftp_set_option() et ftp_get_option().
 *
 * @return resource	Retourne un flux SSL-FTP en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_ssl_connectThis'))
{
    function ftp_ssl_connectThis($host, $port = 21, $timeout = 90)
    {
		$host = (string)$host;
		$port = (int)$port;
		$timeout = (int)$timeout;

		return ftp_ssl_connect($host, $port, $timeout);
    }
}

/**
 * ftp_systypeThis
 *
 * Retourne un identifiant de type de serveur FTP.
 *
 * @link http://php.net/manual/fr/function.ftp-systype.php Documentation pour ftp_systype.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $ftp_stream    L'identifiant du lien de connexion FTP.
 *
 * @return string	Retourne le type de serveur distant ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftp_systypeThis'))
{
    function ftp_systypeThis($ftp_stream)
    {
		$ftp_stream = is_resource($ftp_stream) ? $ftp_stream : NULL;

		return ftp_systype($ftp_stream);
    }
}

/**
 * ftruncateThis
 *
 * Tronque un fichier.
 *
 * @link http://php.net/manual/fr/function.ftruncate.php Documentation pour ftruncate.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier.
 * @param int      $size    La taille que l'on doit enlever.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ftruncateThis'))
{
    function ftruncateThis($handle, $size)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$size = (int)$size;

		return ftruncate($handle, $size);
    }
}

/**
 * func_get_argThis
 *
 * Retourne un élément de la liste des arguments.
 *
 * @link http://php.net/manual/fr/function.func-get-arg.php Documentation pour func_get_arg.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $arg_num    La position de l'argument. Les arguments de la fonction sont comptés en commençant à partir de 0.
 *
 * @return mixed	Retourne l'argument spécifié, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('func_get_argThis'))
{
    function func_get_argThis($arg_num)
    {
		$arg_num = (int)$arg_num;

		return func_get_arg($arg_num);
    }
}

/**
 * func_get_argsThis
 *
 * Retourne les arguments d'une fonction sous la forme d'un tableau.
 *
 * @link http://php.net/manual/fr/function.func-get-args.php Documentation pour func_get_args.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau dont chaque élément est une copie du membre correspondant de la liste d'arguments de la fonction.
 *
 */
if(!function_exists('func_get_argsThis'))
{
    function func_get_argsThis()
    {
		return func_get_args();
    }
}

/**
 * func_num_argsThis
 *
 * Retourne le nombre d'arguments passés à la fonction.
 *
 * @link http://php.net/manual/fr/function.func-num-args.php Documentation pour func_num_args.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne le nombre d'arguments passés à la fonction utilisateur courante. function.
 *
 */
if(!function_exists('func_num_argsThis'))
{
    function func_num_argsThis()
    {
		return func_num_args();
    }
}

/**
 * function_existsThis
 *
 * Indique si une fonction est définie.
 *
 * @link http://php.net/manual/fr/function.function-exists.php Documentation pour function_exists.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $function_name    Le nom de la fonction, sous la forme d'une chaîne de caractères.
 *
 * @return bool	Retourne TRUE si la fonction function_name existe et est une fonction, FALSE sinon.
 *
 */
if(!function_exists('function_existsThis'))
{
    function function_existsThis($function_name)
    {
		$function_name = (string)$function_name;

		return function_exists($function_name);
    }
}

/**
 * fwriteThis
 *
 * Écrit un fichier en mode binaire.
 *
 * @link http://php.net/manual/fr/function.fwrite.php Documentation pour fwrite.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Un pointeur de système de fichiers de type resource qui est habituellement créé en utilisant la fonction fopen().
 * @param string   $string    La chaîne à écrire.
 * @param int      $length    Si la longueur length est fournie, l'écriture s'arrêtera après length octets, ou à la fin de la chaîne (le premier des deux). Notez que si length est fourni, alors l'option de configuration magic_quotes_runtime sera ignorée, et les slash seront conservés.
 *
 * @return int	fwrite() retourne le nombre d'octets écrits, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('fwriteThis'))
{
    function fwriteThis($handle, $string, $length = NULL)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$string = (string)$string;
		$length = (int)$length;

		return fwrite($handle, $string, $length);
    }
}

/**
 * gc_collect_cyclesThis
 *
 * Force le passage du collecteur de mémoire.
 *
 * @link http://php.net/manual/fr/function.gc-collect-cycles.php Documentation pour gc_collect_cycles.
 *
 * @version PHP 5 >= 5.3.0
 * @return int	Retourne le nombre de cycles collectés.
 *
 */
if(!function_exists('gc_collect_cyclesThis'))
{
    function gc_collect_cyclesThis()
    {
		return gc_collect_cycles();
    }
}

/**
 * gc_disableThis
 *
 * Désactive le collecteur de références circulaires.
 *
 * @link http://php.net/manual/fr/function.gc-disable.php Documentation pour gc_disable.
 *
 * @version PHP 5 >= 5.3.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('gc_disableThis'))
{
    function gc_disableThis()
    {
		return gc_disable();
    }
}

/**
 * gc_enableThis
 *
 * Active le collecteur de références circulaires.
 *
 * @link http://php.net/manual/fr/function.gc-enable.php Documentation pour gc_enable.
 *
 * @version PHP 5 >= 5.3.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('gc_enableThis'))
{
    function gc_enableThis()
    {
		return gc_enable();
    }
}

/**
 * gc_enabledThis
 *
 * Retourne le statut du collecteur de références circulaires.
 *
 * @link http://php.net/manual/fr/function.gc-enabled.php Documentation pour gc_enabled.
 *
 * @version PHP 5 >= 5.3.0
 * @return bool	Retourne TRUE si le collecteur est actif, et FALSE sinon.
 *
 */
if(!function_exists('gc_enabledThis'))
{
    function gc_enabledThis()
    {
		return gc_enabled();
    }
}

/**
 * gd_infoThis
 *
 * Retourne des informations à propos de la bibliothèque GD installée.
 *
 * @link http://php.net/manual/fr/function.gd-info.php Documentation pour gd_info.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return array	Retourne un tableau associatif.
 *
 */
if(!function_exists('gd_infoThis'))
{
    function gd_infoThis()
    {
		return gd_info();
    }
}

/**
 * get_browserThis
 *
 * Indique les capacités du navigateur client.
 *
 * @link http://php.net/manual/fr/function.get-browser.php Documentation pour get_browser.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $user_agent    L'entête user agent à analyser. Par défaut, la valeur de l'en-tête User-Agent est utilisé; cependant, vous pouvez l'altérer (i.e. cherche d'autres informations sur le navigateur) en passant ce paramètre. Vous pouvez annuler ce paramètre en y passant la valeur NULL.
 * @param bool     $return_array    Si définit à TRUE, cette fonction retournera un tableau au lieu d'un objet.
 *
 * @return mixed	Les informations sont retournées sous forme d'un objet, dont les différents membres contiendront des informations, telles que les versions majeures et mineures et des chaînes d'identification ; des booléens pour des caractéristiques telles que frames, JavaScript, et cookies ; et ainsi de suite.
 *
 */
if(!function_exists('get_browserThis'))
{
    function get_browserThis($user_agent = NULL, $return_array = false)
    {
		$user_agent = (string)$user_agent;
		$return_array = (bool)$return_array;

		return get_browser($user_agent, $return_array);
    }
}

/**
 * get_called_classThis
 *
 * Le nom de la classe en "Late Static Binding".
 *
 * @link http://php.net/manual/fr/function.get-called-class.php Documentation pour get_called_class.
 *
 * @version PHP 5 >= 5.3.0
 * @return string	Retourne le nom de la classe. Retourne FALSE si appelée depuis l'extérieur d'une classe.
 *
 */
if(!function_exists('get_called_classThis'))
{
    function get_called_classThis()
    {
		return get_called_class();
    }
}

/**
 * get_cfg_varThis
 *
 * Retourne la valeur d'une option de PHP.
 *
 * @link http://php.net/manual/fr/function.get-cfg-var.php Documentation pour get_cfg_var.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $option    Le nom de l'option de configuration.
 *
 * @return string	Retourne la valeur courante de l'option PHP option ou bien FALSE si une erreur survient.
 *
 */
if(!function_exists('get_cfg_varThis'))
{
    function get_cfg_varThis($option)
    {
		$option = (string)$option;

		return get_cfg_var($option);
    }
}

/**
 * get_classThis
 *
 * Retourne le nom de la classe d'un objet.
 *
 * @link http://php.net/manual/fr/function.get-class.php Documentation pour get_class.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param object   $object    L'objet testé. Ce paramètre peut être omis lorsque la fonction est utilisée dans une classe.
 *
 * @return string	Retourne le nom de la classe dont object est une instance. Retourne FALSE si object n'est pas un objet.
 *
 */
if(!function_exists('get_classThis'))
{
    function get_classThis($object = NULL)
    {
		$object = (object)$object;

		return get_class($object);
    }
}

/**
 * get_class_methodsThis
 *
 * Retourne les noms des méthodes d'une classe.
 *
 * @link http://php.net/manual/fr/function.get-class-methods.php Documentation pour get_class_methods.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $class_name    Le nom de la classe ou une instance d'objet
 *
 * @return array	Retourne un tableau contenant les noms des méthodes de la classe class_name. En cas d'erreur, NULL est retourné.
 *
 */
if(!function_exists('get_class_methodsThis'))
{
    function get_class_methodsThis($class_name)
    {
		$class_name = ($class_name);
		return get_class_methods($class_name);
    }
}

/**
 * get_class_varsThis
 *
 * Retourne les valeurs par défaut des propriétés d'une classe.
 *
 * @link http://php.net/manual/fr/function.get-class-vars.php Documentation pour get_class_vars.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $class_name    Le nom de la classe
 *
 * @return array	Retourne un tableau associatif contenant les noms/valeurs des propriétés visibles dans le scope courant, avec leurs valeurs par défaut. Les éléments du tableau résultant sont sous la forme varname => value. En cas d'erreur, la fonction retournera FALSE.
 *
 */
if(!function_exists('get_class_varsThis'))
{
    function get_class_varsThis($class_name)
    {
		$class_name = (string)$class_name;

		return get_class_vars($class_name);
    }
}

/**
 * get_current_userThis
 *
 * Retourne le nom du possesseur du script courant.
 *
 * @link http://php.net/manual/fr/function.get-current-user.php Documentation pour get_current_user.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le nom de l'utilisateur, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('get_current_userThis'))
{
    function get_current_userThis()
    {
		return get_current_user();
    }
}

/**
 * get_declared_classesThis
 *
 * Liste toutes les classes définies dans PHP.
 *
 * @link http://php.net/manual/fr/function.get-declared-classes.php Documentation pour get_declared_classes.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau contenant la liste des noms des classes déclarées dans le script courant.
 *
 */
if(!function_exists('get_declared_classesThis'))
{
    function get_declared_classesThis()
    {
		return get_declared_classes();
    }
}

/**
 * get_declared_interfacesThis
 *
 * Retourne un tableau avec toutes les interfaces déclarées.
 *
 * @link http://php.net/manual/fr/function.get-declared-interfaces.php Documentation pour get_declared_interfaces.
 *
 * @version PHP 5
 * @return array	Retourne un tableau contenant les noms des interfaces déclarées dans le script courant.
 *
 */
if(!function_exists('get_declared_interfacesThis'))
{
    function get_declared_interfacesThis()
    {
		return get_declared_interfaces();
    }
}

/**
 * get_declared_traitsThis
 *
 * Retourne un tableau contenant tous les traits déclarés.
 *
 * @link http://php.net/manual/fr/function.get-declared-traits.php Documentation pour get_declared_traits.
 *
 * @version PHP 5 >= 5.4.0
 * @return array	Retourne un tableau contenant comme valeurs les noms de tous les traits déclarés. Retourne NULL en cas d'échec.
 *
 */
if(!function_exists('get_declared_traitsThis'))
{
    function get_declared_traitsThis()
    {
		return get_declared_traits();
    }
}

/**
 * get_defined_constantsThis
 *
 * Retourne la liste des constantes et leurs valeurs.
 *
 * @link http://php.net/manual/fr/function.get-defined-constants.php Documentation pour get_defined_constants.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param bool     $categorize    Permet à cette fonction de retourner un tableau multidimensionnel avec les catégories en tant que clés de la première dimension et les constantes ainsi que leurs valeurs dans la seconde dimension.
 *
 */
if(!function_exists('get_defined_constantsThis'))
{
    function get_defined_constantsThis($categorize = false)
    {
		$categorize = (bool)$categorize;

		return get_defined_constants($categorize);
    }
}

/**
 * get_defined_functionsThis
 *
 * Liste toutes les fonctions définies.
 *
 * @link http://php.net/manual/fr/function.get-defined-functions.php Documentation pour get_defined_functions.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 * @return array	Retourne un tableau multidimensionnel, contenant la liste de toutes les fonctions définies, aussi bien les fonctions internes à PHP que celle déjà définie par l'utilisateur. Les noms des fonctions internes sont accessibles via $arr["internal"], et les fonctions utilisateur sont accessibles via $arr["user"].
 *
 */
if(!function_exists('get_defined_functionsThis'))
{
    function get_defined_functionsThis()
    {
		return get_defined_functions();
    }
}

/**
 * get_defined_varsThis
 *
 * Liste toutes les variables définies.
 *
 * @link http://php.net/manual/fr/function.get-defined-vars.php Documentation pour get_defined_vars.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 * @return array	Un tableau multidimensionnel contenant toutes les variables.
 *
 */
if(!function_exists('get_defined_varsThis'))
{
    function get_defined_varsThis()
    {
		return get_defined_vars();
    }
}

/**
 * get_extension_funcsThis
 *
 * Liste les fonctions d'une extension.
 *
 * @link http://php.net/manual/fr/function.get-extension-funcs.php Documentation pour get_extension_funcs.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $module_name    Le nom du module.
 *
 * @return array	Retourne un tableau contenant toutes les fonctions, ou FALSE si module_name n'est pas une extension valide.
 *
 */
if(!function_exists('get_extension_funcsThis'))
{
    function get_extension_funcsThis($module_name)
    {
		$module_name = (string)$module_name;

		return get_extension_funcs($module_name);
    }
}

/**
 * get_headersThis
 *
 * Retourne tous les en-têtes envoyés par le serveur en réponse à une requête HTTP.
 *
 * @link http://php.net/manual/fr/function.get-headers.php Documentation pour get_headers.
 *
 * @version PHP 5
 *
 * @param string   $url    L'URL cible.
 * @param int      $format    Si le paramètre optionnel format est défini à 1, get_headers() analyse la réponse et définit les index du tableau.
 *
 * @return array	Retourne un tableau indexé ou associatif contenant les en-têtes, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('get_headersThis'))
{
    function get_headersThis($url, $format = 0)
    {
		$url = (string)$url;
		$format = (int)$format;

		return get_headers($url, $format);
    }
}

/**
 * get_html_translation_tableThis
 *
 * Retourne la table de traduction des entités utilisée par htmlspecialchars() et htmlentities().
 *
 * @link http://php.net/manual/fr/function.get-html-translation-table.php Documentation pour get_html_translation_table.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $table    La table à retourner. Soit HTML_ENTITIES, soit HTML_SPECIALCHARS.
 * @param int      $flags    Un masque d'un ou plusieurs drapeaux suivants, qui spécifient quel guillemet la table contiendra, tout comme le type de document prévu pour la table. La valeur par défaut est ENT_COMPAT | ENT_HTML41.
 * @param string   $encoding    Encodage à utiliser. Si omis, la valeur par défaut de cet argument sera ISO-8859-1 pour les versions antérieures à la version 5.4.0 de PHP, et UTF-8 pour les versions suivantes à 5.4.0. Les jeux de caractères suivants sont supportés :
 *
 * @return array	Retourne la table de traduction, sous la forme d'un tableau, avec comme clés, les caractères orignaux, et comme valeurs, les entités correspondantes.
 *
 */
if(!function_exists('get_html_translation_tableThis'))
{
    function get_html_translation_tableThis($table = HTML_SPECIALCHARS, $flags = NULL, $encoding = 'UTF-8')
    {
		$table = (int)$table;
		$flags = empty($flags) ? (int)ENT_COMPAT | ENT_HTML41 : (int)$flags;
		$encoding = (string)$encoding;

		return get_html_translation_table($table, $flags, $encoding);
    }
}

/**
 * get_include_pathThis
 *
 * Lit la valeur de la directive de configuration include_path.
 *
 * @link http://php.net/manual/fr/function.get-include-path.php Documentation pour get_include_path.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return string	Retourne le chemin, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('get_include_pathThis'))
{
    function get_include_pathThis()
    {
		return get_include_path();
    }
}

/**
 * get_included_filesThis
 *
 * Retourne un tableau avec les noms des fichiers qui sont inclus dans un script.
 *
 * @link http://php.net/manual/fr/function.get-included-files.php Documentation pour get_included_files.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau contenant les noms de tous les fichiers.
 *
 */
if(!function_exists('get_included_filesThis'))
{
    function get_included_filesThis()
    {
		return get_included_files();
    }
}

/**
 * get_loaded_extensionsThis
 *
 * Retourne la liste de tous les modules compilés et chargés.
 *
 * @link http://php.net/manual/fr/function.get-loaded-extensions.php Documentation pour get_loaded_extensions.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param bool     $zend_extensions    Retourne uniquement les extensions Zend. Par défaut vaut FALSE et ne liste que les extensions PHP classiques comme mysqli par exemple.
 *
 * @return array	Retourne un tableau indexé des noms de tous les modules.
 *
 */
if(!function_exists('get_loaded_extensionsThis'))
{
    function get_loaded_extensionsThis($zend_extensions = false)
    {
		$zend_extensions = (bool)$zend_extensions;

		return get_loaded_extensions($zend_extensions);
    }
}

/**
 * get_magic_quotes_gpcThis
 *
 * Retourne la configuration actuelle de l'option magic_quotes_gpc.
 *
 * @link http://php.net/manual/fr/function.get-magic-quotes-gpc.php Documentation pour get_magic_quotes_gpc.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Retourne 0 si magic_quotes_gpc est désactivée, 1 sinon. Retourne FALSE depuis PHP 5.4.0.
 *
 */
if(!function_exists('get_magic_quotes_gpcThis'))
{
    function get_magic_quotes_gpcThis()
    {
		return get_magic_quotes_gpc();
    }
}

/**
 * get_magic_quotes_runtimeThis
 *
 * Retourne la configuration actuelle de l'option magic_quotes_runtime.
 *
 * @link http://php.net/manual/fr/function.get-magic-quotes-runtime.php Documentation pour get_magic_quotes_runtime.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Retourne 0 si magic_quotes_runtime est désactivée, 1 sinon. Retourne toujours FALSE depuis PHP 5.4.0.
 *
 */
if(!function_exists('get_magic_quotes_runtimeThis'))
{
    function get_magic_quotes_runtimeThis()
    {
		return get_magic_quotes_runtime();
    }
}

/**
 * get_meta_tagsThis
 *
 * Extrait toutes les balises méta d'un fichier HTML.
 *
 * @link http://php.net/manual/fr/function.get-meta-tags.php Documentation pour get_meta_tags.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le chemin vers un fichier HTML, sous la forme d'une chaîne de caractères. Ce peut être un fichier local ou une URL.
 * @param bool     $use_include_path    En donnant la valeur de TRUE au paramètre optionnel use_include_path fera que get_meta_tags() recherchera aussi le fichier dans l'include_path. Ce paramètre est utilisé pour des fichiers locaux, non des URLs.
 *
 * @return array	Retourne un tableau contenant toutes les balises méta analysées.
 *
 */
if(!function_exists('get_meta_tagsThis'))
{
    function get_meta_tagsThis($filename, $use_include_path = false)
    {
		$filename = (string)$filename;
		$use_include_path = (bool)$use_include_path;

		return get_meta_tags($filename, $use_include_path);
    }
}

/**
 * get_object_varsThis
 *
 * Retourne les propriétés d'un objet.
 *
 * @link http://php.net/manual/fr/function.get-object-vars.php Documentation pour get_object_vars.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param object   $object    Une instance d'un objet.
 *
 * @return array	Retourne un tableau associatif contenant les propriétés non-statiques, accessibles depuis le contexte courant, de l'objet object. Si une propriété n'a pas de valeur d'assignée, elle sera retournée avec une valeur NULL.
 *
 */
if(!function_exists('get_object_varsThis'))
{
    function get_object_varsThis($object)
    {
		$object = (object)$object;

		return get_object_vars($object);
    }
}

/**
 * get_parent_classThis
 *
 * Retourne le nom de la classe parente d'un objet.
 *
 * @link http://php.net/manual/fr/function.get-parent-class.php Documentation pour get_parent_class.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $object    L'objet ou le nom de la classe testé
 *
 * @return string	Retourne le nom de la classe parente dont object est une instance ou le nom.
 *
 */
if(!function_exists('get_parent_classThis'))
{
    function get_parent_classThis($object = NULL)
    {
		$object = ($object);
		return get_parent_class($object);
    }
}

/**
 * get_resource_typeThis
 *
 * Retourne le type de ressource.
 *
 * @link http://php.net/manual/fr/function.get-resource-type.php Documentation pour get_resource_type.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $handle    Le gestionnaire de ressources à évaluer.
 *
 * @return string	Si le paramètre handle est une ressource, cette fonction retournera une chaîne de caractères représentant son type. Si le type n'est pas identifié par cette fonction, la valeur de retour sera la chaîne de caractères Unknown.
 *
 */
if(!function_exists('get_resource_typeThis'))
{
    function get_resource_typeThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return get_resource_type($handle);
    }
}

/**
 * getallheadersThis
 *
 * Récupère tous les en-têtes de la requête HTTP.
 *
 * @link http://php.net/manual/fr/function.getallheaders.php Documentation pour getallheaders.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Un tableau associatif avec tous les en-têtes HTTP de la requête courante ou FALSE en cas d'échec.
 *
 */
if(!function_exists('getallheadersThis'))
{
    function getallheadersThis()
    {
		return getallheaders();
    }
}

/**
 * getcwdThis
 *
 * Retourne le dossier de travail courant.
 *
 * @link http://php.net/manual/fr/function.getcwd.php Documentation pour getcwd.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le dossier de travail courant en cas de réussite ou FALSE en cas d'échec.
 *
 */
if(!function_exists('getcwdThis'))
{
    function getcwdThis()
    {
		return getcwd();
    }
}

/**
 * getdateThis
 *
 * Retourne la date/heure.
 *
 * @link http://php.net/manual/fr/function.getdate.php Documentation pour getdate.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $timestamp    Le paramètre optionnel timestamp est un timestamp Unix de type entier qui vaut par défaut l'heure courante locale si le paramètre timestamp n'est pas fourni. En d'autres termes, il vaut par défaut la valeur de la fonction time().
 *
 * @return array	Retourne un tableau associatif contenant les informations de date et d'heure du timestamp timestamp. Les éléments du tableau associatif retourné sont les suivants :
 *
 */
if(!function_exists('getdateThis'))
{
    function getdateThis($timestamp = NULL)
    {
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;

		return getdate($timestamp);
    }
}

/**
 * getenvThis
 *
 * Retourne la valeur d'une variable d'environnement.
 *
 * @link http://php.net/manual/fr/function.getenv.php Documentation pour getenv.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $varname    Le nom de la variable.
 *
 * @return string	Retourne la valeur de la variable d'environnement varname, ou FALSE si la variable d'environnement varname n'existe pas.
 *
 */
if(!function_exists('getenvThis'))
{
    function getenvThis($varname)
    {
		$varname = (string)$varname;

		return getenv($varname);
    }
}

/**
 * gethostbyaddrThis
 *
 * Retourne le nom d'hôte correspondant à une IP.
 *
 * @link http://php.net/manual/fr/function.gethostbyaddr.php Documentation pour gethostbyaddr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $ip_address    L'adresse IP de l'hôte.
 *
 * @return string	Retourne le nom de l'hôte en cas de succès, l'adresse IP non modifiée en cas d'échec ou FALSE si une entrée mal formée est fournie.
 *
 */
if(!function_exists('gethostbyaddrThis'))
{
    function gethostbyaddrThis($ip_address)
    {
		$ip_address = (string)$ip_address;

		return gethostbyaddr($ip_address);
    }
}

/**
 * gethostbynameThis
 *
 * Retourne l'adresse IPv4 correspondant à un hôte.
 *
 * @link http://php.net/manual/fr/function.gethostbyname.php Documentation pour gethostbyname.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    Le nom de l'hôte.
 *
 * @return string	Retourne l'adresse IPv4, ou une chaîne contenant le nom d'hôte inchangé en cas d'échec.
 *
 */
if(!function_exists('gethostbynameThis'))
{
    function gethostbynameThis($hostname)
    {
		$hostname = (string)$hostname;

		return gethostbyname($hostname);
    }
}

/**
 * gethostbynamelThis
 *
 * Retourne la liste d'IPv4 correspondante à un hôte.
 *
 * @link http://php.net/manual/fr/function.gethostbynamel.php Documentation pour gethostbynamel.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    Le nom de l'hôte.
 *
 * @return array	Retourne un tableau d'adresses IPv4, ou FALSE si hostname n'a pu être résolu.
 *
 */
if(!function_exists('gethostbynamelThis'))
{
    function gethostbynamelThis($hostname)
    {
		$hostname = (string)$hostname;

		return gethostbynamel($hostname);
    }
}

/**
 * gethostnameThis
 *
 * Lit le nom de l'hôte.
 *
 * @link http://php.net/manual/fr/function.gethostname.php Documentation pour gethostname.
 *
 * @version PHP >= 5.3.0
 * @return string	Retourne une chaîne avec le nom d'hôte, en cas de succès et sinon FALSE.
 *
 */
if(!function_exists('gethostnameThis'))
{
    function gethostnameThis()
    {
		return gethostname();
    }
}

/**
 * getimagesizeThis
 *
 * Retourne la taille d'une image.
 *
 * @link http://php.net/manual/fr/function.getimagesize.php Documentation pour getimagesize.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Ce paramètre spécifie le fichier dont vous voulez récupérer les informations. Il peut être un fichier local ou (suivant la configuration), un fichier distant en utilisant un des flux supportés.
 * @param array    &$imageinfo    Ce paramètre optionnel permet d'extraire des informations supplémentaires du fichier image. Actuellement, cette option va retourner différents marqueurs JPG APP dans un tableau associatif. Certains programmes utilisent ces marqueur APP pour préciser les informations dans les balises HTML. Un marqueur commun est le marqueur APP13, décrit à » IPTC. Vous pouvez utiliser la fonction iptcparse() pour analyser ce marqueur, et obtenir des informations intelligibles.
 *
 * @return array	Retourne un tableau contenant 7 éléments.
 *
 */
if(!function_exists('getimagesizeThis'))
{
    function getimagesizeThis($filename, &$imageinfo = NULL)
    {
		$filename = (string)$filename;
		$imageinfo = (array)$imageinfo;

		return getimagesize($filename, $imageinfo);
    }
}

/**
 * getimagesizefromstringThis
 *
 * Récupère la taille d'une image depuis une chaîne.
 *
 * @link http://php.net/manual/fr/function.getimagesizefromstring.php Documentation pour getimagesizefromstring.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param string   $imagedata    Les données de l'image, sous la forme d'une chaîne.
 * @param array    &$imageinfo    Voir la fonction getimagesize().
 *
 * @return array	Voir la fonction getimagesize().
 *
 */
if(!function_exists('getimagesizefromstringThis'))
{
    function getimagesizefromstringThis($imagedata, &$imageinfo = NULL)
    {
		$imagedata = (string)$imagedata;
		$imageinfo = (array)$imageinfo;

		return getimagesizefromstring($imagedata, $imageinfo);
    }
}

/**
 * getlastmodThis
 *
 * Retourne la date de dernière modification de la page.
 *
 * @link http://php.net/manual/fr/function.getlastmod.php Documentation pour getlastmod.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne la date de dernière modification de la page. La valeur retournée est un timestamp UNIX, utilisable comme paramètre avec la fonction date(). Retourne FALSE si une erreur survient.
 *
 */
if(!function_exists('getlastmodThis'))
{
    function getlastmodThis()
    {
		return getlastmod();
    }
}

/**
 * getmxrrThis
 *
 * Retourne les enregistrements MX d'un hôte.
 *
 * @link http://php.net/manual/fr/function.getmxrr.php Documentation pour getmxrr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    Le nom d'hôte Internet.
 * @param array    &$mxhosts    La liste des enregistrements MX est placée dans le tableau mxhosts.
 * @param array    &$weight    Si le tableau weight est fourni, il sera rempli par les informations de poids.
 *
 * @return bool	Retourne TRUE si des enregistrements sont trouvés, et FALSE si une erreur est rencontrée, ou si la recherche échoue.
 *
 */
if(!function_exists('getmxrrThis'))
{
    function getmxrrThis($hostname, &$mxhosts, &$weight = NULL)
    {
		$hostname = (string)$hostname;
		$mxhosts = (array)$mxhosts;
		$weight = (array)$weight;

		return getmxrr($hostname, $mxhosts, $weight);
    }
}

/**
 * getmygidThis
 *
 * Retourne le GID du propriétaire du script.
 *
 * @link http://php.net/manual/fr/function.getmygid.php Documentation pour getmygid.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 * @return int	Retourne le GID du propriétaire du script courant, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('getmygidThis'))
{
    function getmygidThis()
    {
		return getmygid();
    }
}

/**
 * getmyinodeThis
 *
 * Retourne l'inode du script.
 *
 * @link http://php.net/manual/fr/function.getmyinode.php Documentation pour getmyinode.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'inode du script courant, sous la forme d'un entier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('getmyinodeThis'))
{
    function getmyinodeThis()
    {
		return getmyinode();
    }
}

/**
 * getmypidThis
 *
 * Retourne le numéro de processus courant de PHP.
 *
 * @link http://php.net/manual/fr/function.getmypid.php Documentation pour getmypid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne le numéro de processus courant de PHP, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('getmypidThis'))
{
    function getmypidThis()
    {
		return getmypid();
    }
}

/**
 * getmyuidThis
 *
 * Retourne l'UID du propriétaire du script actuel.
 *
 * @link http://php.net/manual/fr/function.getmyuid.php Documentation pour getmyuid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'identifiant du propriétaire du script actuel (UID) ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('getmyuidThis'))
{
    function getmyuidThis()
    {
		return getmyuid();
    }
}

/**
 * getoptThis
 *
 * Lit des options passées dans la ligne de commande.
 *
 * @link http://php.net/manual/fr/function.getopt.php Documentation pour getopt.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $options
 * @param array    $longopts
 *
 * @return array	Cette fonction retourne un tableau d'options/arguments, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('getoptThis'))
{
    function getoptThis($options, $longopts = NULL)
    {
		$options = (string)$options;
		$longopts = (array)$longopts;

		return getopt($options, $longopts);
    }
}

/**
 * getprotobynameThis
 *
 * Retourne le numéro de protocole associé à un nom de protocole.
 *
 * @link http://php.net/manual/fr/function.getprotobyname.php Documentation pour getprotobyname.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $name    Le nom du protocole.
 *
 * @return int	Retourne le numéro du protocole, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('getprotobynameThis'))
{
    function getprotobynameThis($name)
    {
		$name = (string)$name;

		return getprotobyname($name);
    }
}

/**
 * getprotobynumberThis
 *
 * Retourne le nom de protocole associé à un numéro de protocole.
 *
 * @link http://php.net/manual/fr/function.getprotobynumber.php Documentation pour getprotobynumber.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $number    Le numéro du protocole.
 *
 * @return string	Retourne le nom du protocole, sous la forme d'une chaîne de caractères ou FALSE si une erreur survient.
 *
 */
if(!function_exists('getprotobynumberThis'))
{
    function getprotobynumberThis($number)
    {
		$number = (int)$number;

		return getprotobynumber($number);
    }
}

/**
 * getrandmaxThis
 *
 * Plus grande valeur aléatoire possible.
 *
 * @link http://php.net/manual/fr/function.getrandmax.php Documentation pour getrandmax.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	La plus grande valeur aléatoire possible retournée par rand().
 *
 */
if(!function_exists('getrandmaxThis'))
{
    function getrandmaxThis()
    {
		return getrandmax();
    }
}

/**
 * getrusageThis
 *
 * Retourne le niveau d'utilisation des ressources.
 *
 * @link http://php.net/manual/fr/function.getrusage.php Documentation pour getrusage.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $who    Si who est égal à 1, getrusage() sera appelé avec le paramètre RUSAGE_CHILDREN.
 *
 * @return array	Retourne un tableau associatif contenant les données retournées depuis l'appel système. Toutes les entrées sont accessibles en utilisant leurs noms de champs documentés.
 *
 */
if(!function_exists('getrusageThis'))
{
    function getrusageThis($who = 0)
    {
		$who = (int)$who;

		return getrusage($who);
    }
}

/**
 * getservbynameThis
 *
 * Retourne le numéro de port associé à un service Internet et un protocole.
 *
 * @link http://php.net/manual/fr/function.getservbyname.php Documentation pour getservbyname.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $service    Le nom du service Internet, sous la forme d'une chaîne de caractères.
 * @param string   $protocol    protocol vaut soit "tcp", soit "udp" (en minuscule).
 *
 * @return int	Retourne le numéro du port, ou FALSE si service ou protocol n'est pas trouvé.
 *
 */
if(!function_exists('getservbynameThis'))
{
    function getservbynameThis($service, $protocol)
    {
		$service = (string)$service;
		$protocol = (string)$protocol;

		return getservbyname($service, $protocol);
    }
}

/**
 * getservbyportThis
 *
 * Retourne le service Internet qui correspond au port et protocole.
 *
 * @link http://php.net/manual/fr/function.getservbyport.php Documentation pour getservbyport.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $port    Le numéro du port.
 * @param string   $protocol    protocol vaut soit "tcp", soit "udp" (en minuscule).
 *
 * @return string	Retourne le nom du service Internet, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('getservbyportThis'))
{
    function getservbyportThis($port, $protocol)
    {
		$port = (int)$port;
		$protocol = (string)$protocol;

		return getservbyport($port, $protocol);
    }
}

/**
 * gettextThis
 *
 * Recherche un message dans le domaine courant.
 *
 * @link http://php.net/manual/fr/function.gettext.php Documentation pour gettext.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $message    Le message à traduire.
 *
 * @return string	Retourne une chaîne traduite, si elle en a trouvé une dans la table de traduction, ou bien le message message, s'il n'a pas été trouvé.
 *
 */
if(!function_exists('gettextThis'))
{
    function gettextThis($message)
    {
		$message = (string)$message;

		return gettext($message);
    }
}

/**
 * gettimeofdayThis
 *
 * Retourne l'heure actuelle.
 *
 * @link http://php.net/manual/fr/function.gettimeofday.php Documentation pour gettimeofday.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param bool     $return_float    Lorsque défini à TRUE, un nombre décimal est retourné à la place d'un tableau.
 *
 * @return mixed	Par défaut, un tableau est retourné. Si le paramètre return_float est défini, alors un nombre décimal sera retourné.
 *
 */
if(!function_exists('gettimeofdayThis'))
{
    function gettimeofdayThis($return_float = false)
    {
		$return_float = (bool)$return_float;

		return gettimeofday($return_float);
    }
}

/**
 * gettypeThis
 *
 * Retourne le type de la variable.
 *
 * @link http://php.net/manual/fr/function.gettype.php Documentation pour gettype.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à analyser.
 *
 * @return string	Les chaînes de caractères que peut retourner la fonction sont les suivantes :
 *
 */
if(!function_exists('gettypeThis'))
{
    function gettypeThis($var)
    {
		$var = ($var);
		return gettype($var);
    }
}

/**
 * globThis
 *
 * Recherche des chemins qui vérifient un masque.
 *
 * @link http://php.net/manual/fr/function.glob.php Documentation pour glob.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $pattern    Le masque. Aucun remplacement de tilde (~) ou de paramètre n'est fait.
 * @param int      $flags    Les drapeaux valides sont :
 *
 * @return array	Retourne un tableau contenant les fichiers et dossiers correspondant au masque, un tableau vide s'il n'y a aucune correspondance, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('globThis'))
{
    function globThis($pattern, $flags = 0)
    {
		$pattern = (string)$pattern;
		$flags = (int)$flags;

		return glob($pattern, $flags);
    }
}

/**
 * gmdateThis
 *
 * Formate une date/heure GMT/CUT.
 *
 * @link http://php.net/manual/fr/function.gmdate.php Documentation pour gmdate.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    Le format de la date en sortie. Voir les options de formatage pour la fonction date().
 * @param int      $timestamp    Le paramètre optionnel timestamp est un timestamp Unix de type entier qui vaut par défaut l'heure courante locale si le paramètre timestamp n'est pas fourni. En d'autres termes, il vaut par défaut la valeur de la fonction time().
 *
 * @return string	Retourne une date formatée. Si une valeur non numérique est utilisée pour le paramètre timestamp, FALSE est retourné et une erreur de niveau E_WARNING sera émise.
 *
 */
if(!function_exists('gmdateThis'))
{
    function gmdateThis($format, $timestamp = NULL)
    {
		$format = (string)$format;
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;

		return gmdate($format, $timestamp);
    }
}

/**
 * gmmktimeThis
 *
 * Retourne le timestamp UNIX d'une date GMT.
 *
 * @link http://php.net/manual/fr/function.gmmktime.php Documentation pour gmmktime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $hour    Le nombre d'heures depuis le début de la journée fixée par les paramètres month, day et year. Les valeurs négatives font référence aux heures avant minuit du jour en question. Les valeurs supérieures à 3 font référence aux heures associées pour le(s) jour(s) suivant(s).
 * @param int      $minute    Le nombre de minutes depuis le début de l'heure hour. Les valeurs négatives font référence aux minutes de l'heure précédente. Les valeurs supérieures à 59 font référence aux minutes associées pour l'(les) heure(s) suivante(s).
 * @param int      $second    Le nombre de secondes depuis le début de la minute minute. Les valeurs négatives font référence aux secondes de la minute précédente. Les valeurs supérieures à 59 font références aux secondes associées à la(les) minute(s) suivante(s).
 * @param int      $month    Le nombre de mois depuis la fin de l'année précédente. Les valeurs comprises entre 1 et 2 font référence aux mois du calendrier normal de l'année en question. Les valeurs inférieures à 1 (y compris les valeurs négatives) font référence aux mois de l'année précédente dans l'ordre inverse, aussi, 0 correspond à décembre, -1 à novembre, etc. Les valeurs supérieures à 2 font référence au mois correspondant dans l'(les) année(s) suivante(s).
 * @param int      $day    Le nombre de jours depuis la fin du mois précédent. Les valeurs comprises entre 1 et 28, 29, 30, 31 (suivant le mois) font référence aux jours normaux dans le mois courant. Les valeurs inférieures à 1 (y compris les valeurs négatives) font référence aux jours du mois précédent, aussi, 0 correspond au dernier jour du mois précédent, -1, le jour d'avant, etc. Les valeurs supérieures au nombre de jours du mois courant font référence aux jours correspondants du(des) mois suivant(s).
 * @param int      $year    L'année
 * @param int      $is_dst    Les paramètres représentent toujours une date GMT donc, le paramètre is_dst n'influence pas le résultat.
 *
 * @return int	Retourne un timestamp Unix, sous la forme d'un entier.
 *
 */
if(!function_exists('gmmktimeThis'))
{
    function gmmktimeThis($hour = NULL, $minute = NULL, $second = NULL, $month = NULL, $day = NULL, $year = NULL, $is_dst = -1)
    {
		$hour = empty($hour) ? (int)gmdate("H") : (int)$hour;
		$minute = empty($minute) ? (int)gmdate("i") : (int)$minute;
		$second = empty($second) ? (int)gmdate("s") : (int)$second;
		$month = empty($month) ? (int)gmdate("n") : (int)$month;
		$day = empty($day) ? (int)gmdate("j") : (int)$day;
		$year = empty($year) ? (int)gmdate("Y") : (int)$year;
		$is_dst = (int)$is_dst;

		return gmmktime($hour, $minute, $second, $month, $day, $year, $is_dst);
    }
}

/**
 * gmp_absThis
 *
 * Valeur absolue GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-abs.php Documentation pour gmp_abs.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Retourne la valeur absolue de a, sous la forme d'un nombre GMP.
 *
 */
if(!function_exists('gmp_absThis'))
{
    function gmp_absThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_abs($a);
    }
}

/**
 * gmp_addThis
 *
 * Addition de 2 nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-add.php Documentation pour gmp_add.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Un nombre à ajouter. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Un nombre à ajouter. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Un nombre GMP représentant la somme des arguments.
 *
 */
if(!function_exists('gmp_addThis'))
{
    function gmp_addThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_add($a, $b);
    }
}

/**
 * gmp_andThis
 *
 * ET logique.
 *
 * @link http://php.net/manual/fr/function.gmp-and.php Documentation pour gmp_and.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Un nombre GMP représentant le ET logique (AND) des 2 arguments.
 *
 */
if(!function_exists('gmp_andThis'))
{
    function gmp_andThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_and($a, $b);
    }
}

/**
 * gmp_clrbitThis
 *
 * Annule un octet.
 *
 * @link http://php.net/manual/fr/function.gmp-clrbit.php Documentation pour gmp_clrbit.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $index    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return void	Une ressource GMP.
 *
 */
if(!function_exists('gmp_clrbitThis'))
{
    function gmp_clrbitThis($a, $index)
    {
		$a = is_resource($a) ? $a : NULL;
		$index = (int)$index;

		return gmp_clrbit($a, $index);
    }
}

/**
 * gmp_cmpThis
 *
 * Compare des nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-cmp.php Documentation pour gmp_cmp.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return int	Retourne une valeur positive si a > b, zéro si a = b et négative si a < b.
 *
 */
if(!function_exists('gmp_cmpThis'))
{
    function gmp_cmpThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_cmp($a, $b);
    }
}

/**
 * gmp_comThis
 *
 * Calcule le complémentaire d'un nombre.
 *
 * @link http://php.net/manual/fr/function.gmp-com.php Documentation pour gmp_com.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Retourne le complémentaire de a, sous la forme d'un nombre GMP.
 *
 */
if(!function_exists('gmp_comThis'))
{
    function gmp_comThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_com($a);
    }
}

/**
 * gmp_div_qThis
 *
 * Divisions de 2 nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-div-q.php Documentation pour gmp_div_q.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à diviser. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Le diviseur. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $round    L'arrondi du résultat est défini par round, qui peut prendre l'une des valeurs suivantes : Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_div_qThis'))
{
    function gmp_div_qThis($a, $b, $round = GMP_ROUND_ZERO)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;
		$round = (int)$round;

		return gmp_div_q($a, $b, $round);
    }
}

/**
 * gmp_div_qrThis
 *
 * Divise deux nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-div-qr.php Documentation pour gmp_div_qr.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $n    Le nombre à diviser. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $d    Le diviseur. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $round    Voir la fonction gmp_div_q() pour une description de l'argument round.
 *
 * @return array	Divise n par d et retourne un tableau, dont le premier élément est [n/d] (le quotient entier de la division) et le second est (n - [n/d] * d) (le reste).
 *
 */
if(!function_exists('gmp_div_qrThis'))
{
    function gmp_div_qrThis($n, $d, $round = GMP_ROUND_ZERO)
    {
		$n = is_resource($n) ? $n : NULL;
		$d = is_resource($d) ? $d : NULL;
		$round = (int)$round;

		return gmp_div_qr($n, $d, $round);
    }
}

/**
 * gmp_div_rThis
 *
 * Reste de la division de deux nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-div-r.php Documentation pour gmp_div_r.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $n    Le nombre à diviser. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $d    Le diviseur. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $round    Voir la fonction gmp_div_q() pour une description du paramètre round.
 *
 * @return resource	Retourne le reste, sous la forme d'un nombre GMP.
 *
 */
if(!function_exists('gmp_div_rThis'))
{
    function gmp_div_rThis($n, $d, $round = GMP_ROUND_ZERO)
    {
		$n = is_resource($n) ? $n : NULL;
		$d = is_resource($d) ? $d : NULL;
		$round = (int)$round;

		return gmp_div_r($n, $d, $round);
    }
}

/**
 * gmp_divexactThis
 *
 * Division exacte de nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-divexact.php Documentation pour gmp_divexact.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $n    Le nombre à diviser. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $d    Le diviseur. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_divexactThis'))
{
    function gmp_divexactThis($n, $d)
    {
		$n = is_resource($n) ? $n : NULL;
		$d = is_resource($d) ? $d : NULL;

		return gmp_divexact($n, $d);
    }
}

/**
 * gmp_factThis
 *
 * Factorielle GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-fact.php Documentation pour gmp_fact.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param mixed     $a    Le nombre factoriel. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_factThis'))
{
    function gmp_factThis($a)
    {
		$a = ($a);
		return gmp_fact($a);
    }
}

/**
 * gmp_gcdThis
 *
 * Calcule le GCD.
 *
 * @link http://php.net/manual/fr/function.gmp-gcd.php Documentation pour gmp_gcd.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Un nombre positif GMP qui se divise avec a et b.
 *
 */
if(!function_exists('gmp_gcdThis'))
{
    function gmp_gcdThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_gcd($a, $b);
    }
}

/**
 * gmp_gcdextThis
 *
 * PGCD étendu.
 *
 * @link http://php.net/manual/fr/function.gmp-gcdext.php Documentation pour gmp_gcdext.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return array	Un tableau de nombres GMP.
 *
 */
if(!function_exists('gmp_gcdextThis'))
{
    function gmp_gcdextThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_gcdext($a, $b);
    }
}

/**
 * gmp_hamdistThis
 *
 * Distance de Hamming.
 *
 * @link http://php.net/manual/fr/function.gmp-hamdist.php Documentation pour gmp_hamdist.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre. Doit être positif.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre. Doit être positif.
 *
 * @return int	Une ressource GMP.
 *
 */
if(!function_exists('gmp_hamdistThis'))
{
    function gmp_hamdistThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_hamdist($a, $b);
    }
}

/**
 * gmp_initThis
 *
 * Crée un nombre GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-init.php Documentation pour gmp_init.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param mixed     $number    Un entier ou une chaîne de caractères. La chaîne peut être une représentation décimale, hexadécimale ou octale.
 * @param int      $base    La base. La base peut varier de 2 à 36. Si la base vaut 0 (valeur par défaut), la base actuelle est déterminée depuis les derniers caractères ; si les deux premiers caractères sont 0x ou 0X, on suppose que c'est de l'hexadécimal, sinon, si le premier caractère est "0", on suppose que c'est de l'octal, sinon, on suppose que c'est de la décimale.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_initThis'))
{
    function gmp_initThis($number, $base = 0)
    {
		$number = ($number);
		$base = (int)$base;

		return gmp_init($number, $base);
    }
}

/**
 * gmp_intvalThis
 *
 * Convertit un nombre GMP en entier.
 *
 * @link http://php.net/manual/fr/function.gmp-intval.php Documentation pour gmp_intval.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $gmpnumber    Un nombre GMP.
 *
 * @return int	Un entier, représentant le nombre gmpnumber.
 *
 */
if(!function_exists('gmp_intvalThis'))
{
    function gmp_intvalThis($gmpnumber)
    {
		$gmpnumber = is_resource($gmpnumber) ? $gmpnumber : NULL;

		return gmp_intval($gmpnumber);
    }
}

/**
 * gmp_invertThis
 *
 * Modulo inversé.
 *
 * @link http://php.net/manual/fr/function.gmp-invert.php Documentation pour gmp_invert.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Un nombre GMP en cas de succès, ou FALSE si l'inverse n'existe pas.
 *
 */
if(!function_exists('gmp_invertThis'))
{
    function gmp_invertThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_invert($a, $b);
    }
}

/**
 * gmp_jacobiThis
 *
 * Symbole de Jacobi.
 *
 * @link http://php.net/manual/fr/function.gmp-jacobi.php Documentation pour gmp_jacobi.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $p    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre. Doit être positif et impair.
 *
 * @return int	Une ressource GMP.
 *
 */
if(!function_exists('gmp_jacobiThis'))
{
    function gmp_jacobiThis($a, $p)
    {
		$a = is_resource($a) ? $a : NULL;
		$p = is_resource($p) ? $p : NULL;

		return gmp_jacobi($a, $p);
    }
}

/**
 * gmp_legendreThis
 *
 * Symbole de Legendre.
 *
 * @link http://php.net/manual/fr/function.gmp-legendre.php Documentation pour gmp_legendre.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $p    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre. Doit être positif et impair.
 *
 * @return int	Une ressource GMP.
 *
 */
if(!function_exists('gmp_legendreThis'))
{
    function gmp_legendreThis($a, $p)
    {
		$a = is_resource($a) ? $a : NULL;
		$p = is_resource($p) ? $p : NULL;

		return gmp_legendre($a, $p);
    }
}

/**
 * gmp_modThis
 *
 * Modulo GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-mod.php Documentation pour gmp_mod.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $n    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $d    Le modulo à évaluer. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_modThis'))
{
    function gmp_modThis($n, $d)
    {
		$n = is_resource($n) ? $n : NULL;
		$d = is_resource($d) ? $d : NULL;

		return gmp_mod($n, $d);
    }
}

/**
 * gmp_mulThis
 *
 * Multiplication de 2 nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-mul.php Documentation pour gmp_mul.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Un nombre qui sera multiplié par b. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Un nombre qui sera multiplié par a. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_mulThis'))
{
    function gmp_mulThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_mul($a, $b);
    }
}

/**
 * gmp_negThis
 *
 * Opposé de nombre GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-neg.php Documentation pour gmp_neg.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Retourne -a, sous la forme d'un nombre GMP.
 *
 */
if(!function_exists('gmp_negThis'))
{
    function gmp_negThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_neg($a);
    }
}

/**
 * gmp_nextprimeThis
 *
 * Trouve le prochain nombre premier.
 *
 * @link http://php.net/manual/fr/function.gmp-nextprime.php Documentation pour gmp_nextprime.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param int      $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Retourne le prochain nombre premier plus grand que a, sous la forme d'un nombre GMP.
 *
 */
if(!function_exists('gmp_nextprimeThis'))
{
    function gmp_nextprimeThis($a)
    {
		$a = (int)$a;

		return gmp_nextprime($a);
    }
}

/**
 * gmp_orThis
 *
 * OU logique.
 *
 * @link http://php.net/manual/fr/function.gmp-or.php Documentation pour gmp_or.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_orThis'))
{
    function gmp_orThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_or($a, $b);
    }
}

/**
 * gmp_perfect_squareThis
 *
 * Carré parfait GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-perfect-square.php Documentation pour gmp_perfect_square.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à vérifier. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return bool	Retourne TRUE si a est un carré parfait, FALSE sinon.
 *
 */
if(!function_exists('gmp_perfect_squareThis'))
{
    function gmp_perfect_squareThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_perfect_square($a);
    }
}

/**
 * gmp_popcountThis
 *
 * Comptage de population.
 *
 * @link http://php.net/manual/fr/function.gmp-popcount.php Documentation pour gmp_popcount.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return int	La population de a, sous la forme d'un entier.
 *
 */
if(!function_exists('gmp_popcountThis'))
{
    function gmp_popcountThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_popcount($a);
    }
}

/**
 * gmp_powThis
 *
 * Puissance.
 *
 * @link http://php.net/manual/fr/function.gmp-pow.php Documentation pour gmp_pow.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $base    La base. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $exp    La puissance.
 *
 * @return resource	Le nouveau nombre, sous la forme d'un nombre GMP. Dans le cas de 0^0, gmp_pow() retourne 1.
 *
 */
if(!function_exists('gmp_powThis'))
{
    function gmp_powThis($base, $exp)
    {
		$base = is_resource($base) ? $base : NULL;
		$exp = (int)$exp;

		return gmp_pow($base, $exp);
    }
}

/**
 * gmp_powmThis
 *
 * Puissance et modulo.
 *
 * @link http://php.net/manual/fr/function.gmp-powm.php Documentation pour gmp_powm.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $base    La base. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $exp    La puissance. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $mod    Le modulo. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Le nouveau nombre, sous la forme d'un nombre GMP.
 *
 */
if(!function_exists('gmp_powmThis'))
{
    function gmp_powmThis($base, $exp, $mod)
    {
		$base = is_resource($base) ? $base : NULL;
		$exp = is_resource($exp) ? $exp : NULL;
		$mod = is_resource($mod) ? $mod : NULL;

		return gmp_powm($base, $exp, $mod);
    }
}

/**
 * gmp_prob_primeThis
 *
 * Nombre GMP probablement premier.
 *
 * @link http://php.net/manual/fr/function.gmp-prob-prime.php Documentation pour gmp_prob_prime.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à vérifier. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $reps    reps peut raisonnablement varier de 5 à 10 (par défaut, c'est 10); une valeur supérieure réduit la probabilité qu'un nombre non premier soit identifié comme "probablement" premier. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return int	Si gmp_prob_prime() retourne 0, a est défini comme non premier. Si gmp_prob_prime() retourne 1, alors a est "probablement" premier. Si gmp_prob_prime() retourne 2, alors a est sûrement premier.
 *
 */
if(!function_exists('gmp_prob_primeThis'))
{
    function gmp_prob_primeThis($a, $reps = 10)
    {
		$a = is_resource($a) ? $a : NULL;
		$reps = (int)$reps;

		return gmp_prob_prime($a, $reps);
    }
}

/**
 * gmp_randomThis
 *
 * Nombre GMP aléatoire.
 *
 * @link http://php.net/manual/fr/function.gmp-random.php Documentation pour gmp_random.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $limiter    Le limiteur. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Un nombre GMP aléatoire.
 *
 */
if(!function_exists('gmp_randomThis'))
{
    function gmp_randomThis($limiter = 20)
    {
		$limiter = (int)$limiter;

		return gmp_random($limiter);
    }
}

/**
 * gmp_scan0This
 *
 * Recherche 0.
 *
 * @link http://php.net/manual/fr/function.gmp-scan0.php Documentation pour gmp_scan0.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à analyser. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $start    Le bit de départ.
 *
 * @return int	Retourne l'index du bit trouvé, sous la forme d'un entier. L'index commence à 0.
 *
 */
if(!function_exists('gmp_scan0This'))
{
    function gmp_scan0This($a, $start)
    {
		$a = is_resource($a) ? $a : NULL;
		$start = (int)$start;

		return gmp_scan0($a, $start);
    }
}

/**
 * gmp_scan1This
 *
 * Recherche 1.
 *
 * @link http://php.net/manual/fr/function.gmp-scan1.php Documentation pour gmp_scan1.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à analyser. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $start    Le bit de départ.
 *
 * @return int	Retourne l'index du bit trouvé, sous la forme d'un entier. Si aucun bit n'est trouvé, -1 sera retourné.
 *
 */
if(!function_exists('gmp_scan1This'))
{
    function gmp_scan1This($a, $start)
    {
		$a = is_resource($a) ? $a : NULL;
		$start = (int)$start;

		return gmp_scan1($a, $start);
    }
}

/**
 * gmp_setbitThis
 *
 * Modifie un bit.
 *
 * @link http://php.net/manual/fr/function.gmp-setbit.php Documentation pour gmp_setbit.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à définir. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $index    L'octet à définir.
 * @param bool     $set_clear    Définit si l'octet est défini à 0 ou 1. Par défaut, l'octet est défini à 1. Les index commencent à 0.
 *
 * @return void	Une ressource GMP.
 *
 */
if(!function_exists('gmp_setbitThis'))
{
    function gmp_setbitThis($a, $index, $set_clear = true)
    {
		$a = is_resource($a) ? $a : NULL;
		$index = (int)$index;
		$set_clear = (bool)$set_clear;

		return gmp_setbit($a, $index, $set_clear);
    }
}

/**
 * gmp_signThis
 *
 * Signe du nombre GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-sign.php Documentation pour gmp_sign.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return int	Retourne le signe de a : 1 si a est positif, -1 s'il est négatif et 0 si a est égal à zéro.
 *
 */
if(!function_exists('gmp_signThis'))
{
    function gmp_signThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_sign($a);
    }
}

/**
 * gmp_sqrtThis
 *
 * Racine carrée GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-sqrt.php Documentation pour gmp_sqrt.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	La partie entière de la racine carrée, sous la forme d'un nombre GMP.
 *
 */
if(!function_exists('gmp_sqrtThis'))
{
    function gmp_sqrtThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_sqrt($a);
    }
}

/**
 * gmp_sqrtremThis
 *
 * Racine carrée avec reste GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-sqrtrem.php Documentation pour gmp_sqrtrem.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à traiter. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return array	Retourne un tableau dont le premier élément est la racine carrée entière de a (voir aussi gmp_sqrt()), et le second est le reste de (i.e., la différence entre a et le carré du premier élément).
 *
 */
if(!function_exists('gmp_sqrtremThis'))
{
    function gmp_sqrtremThis($a)
    {
		$a = is_resource($a) ? $a : NULL;

		return gmp_sqrtrem($a);
    }
}

/**
 * gmp_strvalThis
 *
 * Convertit un nombre GMP en chaîne.
 *
 * @link http://php.net/manual/fr/function.gmp-strval.php Documentation pour gmp_strval.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $gmpnumber    Le nombre GMP qui doit être converti. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $base    La base du nombre retourné. Par défaut, vaut 10. Les valeurs possibles vont de 2 à 62 et de -2 à -36.
 *
 * @return string	Le nombre, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('gmp_strvalThis'))
{
    function gmp_strvalThis($gmpnumber, $base = 10)
    {
		$gmpnumber = is_resource($gmpnumber) ? $gmpnumber : NULL;
		$base = (int)$base;

		return gmp_strval($gmpnumber, $base);
    }
}

/**
 * gmp_subThis
 *
 * Soustraction de 2 nombres GMP.
 *
 * @link http://php.net/manual/fr/function.gmp-sub.php Documentation pour gmp_sub.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Le nombre à soustraire. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Le nombre à soustraire de a. Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_subThis'))
{
    function gmp_subThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_sub($a, $b);
    }
}

/**
 * gmp_testbitThis
 *
 * Teste si un octet est défini.
 *
 * @link http://php.net/manual/fr/function.gmp-testbit.php Documentation pour gmp_testbit.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param int      $index    L'octet à tester
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gmp_testbitThis'))
{
    function gmp_testbitThis($a, $index)
    {
		$a = is_resource($a) ? $a : NULL;
		$index = (int)$index;

		return gmp_testbit($a, $index);
    }
}

/**
 * gmp_xorThis
 *
 * OU exclusif logique.
 *
 * @link http://php.net/manual/fr/function.gmp-xor.php Documentation pour gmp_xor.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $a    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 * @param resource $b    Il peut être soit une ressource GMP, soit une chaîne numérique qu'il est possible de convertir plus tard en un nombre.
 *
 * @return resource	Une ressource GMP.
 *
 */
if(!function_exists('gmp_xorThis'))
{
    function gmp_xorThis($a, $b)
    {
		$a = is_resource($a) ? $a : NULL;
		$b = is_resource($b) ? $b : NULL;

		return gmp_xor($a, $b);
    }
}

/**
 * gmstrftimeThis
 *
 * Formate une date/heure GMT/CUT en fonction de la configuration locale.
 *
 * @link http://php.net/manual/fr/function.gmstrftime.php Documentation pour gmstrftime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    Voir la description de la fonction strftime().
 * @param int      $timestamp    Le paramètre optionnel timestamp est un timestamp Unix de type entier qui vaut par défaut l'heure courante locale si le paramètre timestamp n'est pas fourni. En d'autres termes, il vaut par défaut la valeur de la fonction time().
 *
 * @return string	Retourne une chaîne de caractères formatée suivant le format donné par le paramètre timestamp ou la date courante si aucun paramètre timestamp n'est fourni. Les noms des mois, des jours de la semaine et des autres chaînes dépendant d'une localisation donnée, respectent la localisation courante définie par la fonction setlocale().
 *
 */
if(!function_exists('gmstrftimeThis'))
{
    function gmstrftimeThis($format, $timestamp = NULL)
    {
		$format = (string)$format;
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;

		return gmstrftime($format, $timestamp);
    }
}

/**
 * gzcloseThis
 *
 * Ferme un pointeur sur un fichier gz ouvert.
 *
 * @link http://php.net/manual/fr/function.gzclose.php Documentation pour gzclose.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier compressé. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzcloseThis'))
{
    function gzcloseThis($zp)
    {
		$zp = is_resource($zp) ? $zp : NULL;

		return gzclose($zp);
    }
}

/**
 * gzcompressThis
 *
 * Compresse une chaîne.
 *
 * @link http://php.net/manual/fr/function.gzcompress.php Documentation pour gzcompress.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $data    La donnée à compresser.
 * @param int      $level    Le degré de compression. 0 signifie aucune compression, jusqu'à 9 pour une compression maximale. Si ce paramètre vaut -1, la compression par défaut de la bibliothèque zlib sera utilisée, soit 6.
 * @param int      $encoding    Une constante ZLIB_ENCODING_*.
 *
 * @return string	La chaîne compressée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzcompressThis'))
{
    function gzcompressThis($data, $level = -1, $encoding = ZLIB_ENCODING_DEFLATE)
    {
		$data = (string)$data;
		$level = (int)$level;
		$encoding = (int)$encoding;

		return gzcompress($data, $level, $encoding);
    }
}

/**
 * gzdecodeThis
 *
 * Décode une chaîne de caractères compressée gzip.
 *
 * @link http://php.net/manual/fr/function.gzdecode.php Documentation pour gzdecode.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param string   $data    Les données à décoder, encodées par la fonction gzencode().
 * @param int      $length    La longueur maximale de données à décoder.
 *
 * @return string	La chaîne de caractères décodée, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzdecodeThis'))
{
    function gzdecodeThis($data, $length = NULL)
    {
		$data = (string)$data;
		$length = (int)$length;

		return gzdecode($data, $length);
    }
}

/**
 * gzdeflateThis
 *
 * Compresse une chaîne.
 *
 * @link http://php.net/manual/fr/function.gzdeflate.php Documentation pour gzdeflate.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $data    Les données à compresser.
 * @param int      $level    Le degré de compression. 0 signifie aucune compression jusqu'à 9 pour une compression maximale. Si omis, le degré de compression par défaut sera celui de la bibliothèque zlib.
 * @param int      $encoding    Une constante ZLIB_ENCODING_*.
 *
 * @return string	La chaîne compressée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzdeflateThis'))
{
    function gzdeflateThis($data, $level = -1, $encoding = ZLIB_ENCODING_RAW)
    {
		$data = (string)$data;
		$level = (int)$level;
		$encoding = (int)$encoding;

		return gzdeflate($data, $level, $encoding);
    }
}

/**
 * gzencodeThis
 *
 * Crée une chaîne compressée gzip.
 *
 * @link http://php.net/manual/fr/function.gzencode.php Documentation pour gzencode.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $data    Les données à encoder.
 * @param int      $level    Le degré de compression. 0 signifie aucune compression, jusqu'à 9 pour une compression maximale. Si omis, le degré de compression par défaut sera celui de la bibliothèque zlib.
 * @param int      $encoding_mode    Le mode d'encodage. Peut être FORCE_GZIP (par défaut) ou FORCE_DEFLATE. Avant PHP 5.4.0, l'utilisation de FORCE_DEFLATE conduit en une chaîne standard zlib (incluant les en-têtes zlib) après l'en-tête de fichier gzip mais sans la somme de vérification (checksum) crc32 finale. En PHP 5.4.0 et suivant, FORCE_DEFLATE génère un affichage conforme à la RFC 1950, contenant un en-tête zlib, les données standard, et une somme de vérification Adler.
 *
 * @return string	La chaîne encodée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzencodeThis'))
{
    function gzencodeThis($data, $level = -1, $encoding_mode = FORCE_GZIP)
    {
		$data = (string)$data;
		$level = (int)$level;
		$encoding_mode = (int)$encoding_mode;

		return gzencode($data, $level, $encoding_mode);
    }
}

/**
 * gzeofThis
 *
 * Indique si la fin d'un fichier (EOF) compressé est atteinte.
 *
 * @link http://php.net/manual/fr/function.gzeof.php Documentation pour gzeof.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 *
 * @return int	Retourne TRUE si le pointeur de fichier gz est à la fin du fichier (EOF) ou si une erreur survient ; sinon, retourne FALSE.
 *
 */
if(!function_exists('gzeofThis'))
{
    function gzeofThis($zp)
    {
		$zp = is_resource($zp) ? $zp : NULL;

		return gzeof($zp);
    }
}

/**
 * gzfileThis
 *
 * Lit la totalité d'un fichier compressé.
 *
 * @link http://php.net/manual/fr/function.gzfile.php Documentation pour gzfile.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier.
 * @param int      $use_include_path    Vous pouvez définir ce paramètre optionnel à 1, si vous voulez chercher le fichier également dans l'include_path.
 *
 * @return array	Un tableau contenant le fichier, une ligne par cellule.
 *
 */
if(!function_exists('gzfileThis'))
{
    function gzfileThis($filename, $use_include_path = 0)
    {
		$filename = (string)$filename;
		$use_include_path = (int)$use_include_path;

		return gzfile($filename, $use_include_path);
    }
}

/**
 * gzgetcThis
 *
 * Lit un caractère dans un fichier compressé.
 *
 * @link http://php.net/manual/fr/function.gzgetc.php Documentation pour gzgetc.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 *
 * @return string	Le caractère décompressé ou FALSE si le pointeur est à la fin du fichier, position EOF (contrairement à la fonction gzeof()).
 *
 */
if(!function_exists('gzgetcThis'))
{
    function gzgetcThis($zp)
    {
		$zp = is_resource($zp) ? $zp : NULL;

		return gzgetc($zp);
    }
}

/**
 * gzgetsThis
 *
 * Lit une ligne dans un fichier compressé.
 *
 * @link http://php.net/manual/fr/function.gzgets.php Documentation pour gzgets.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 * @param int      $length    La longueur de données à lire.
 *
 * @return string	La chaîne décompressée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzgetsThis'))
{
    function gzgetsThis($zp, $length)
    {
		$zp = is_resource($zp) ? $zp : NULL;
		$length = (int)$length;

		return gzgets($zp, $length);
    }
}

/**
 * gzgetssThis
 *
 * Lit une ligne dans un fichier compressé, et supprime les balises HTML.
 *
 * @link http://php.net/manual/fr/function.gzgetss.php Documentation pour gzgetss.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 * @param int      $length    La longueur des données à récupérer.
 * @param string   $allowable_tags    Vous pouvez utiliser ce paramètre optionnel pour spécifier les balises à ne pas supprimer.
 *
 * @return string	La chaîne décompressée et nettoyée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzgetssThis'))
{
    function gzgetssThis($zp, $length, $allowable_tags = NULL)
    {
		$zp = is_resource($zp) ? $zp : NULL;
		$length = (int)$length;
		$allowable_tags = (string)$allowable_tags;

		return gzgetss($zp, $length, $allowable_tags);
    }
}

/**
 * gzinflateThis
 *
 * Décompresse une chaîne.
 *
 * @link http://php.net/manual/fr/function.gzinflate.php Documentation pour gzinflate.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $data    Les données compressées avec la fonction gzdeflate().
 * @param int      $length    La longueur maximale de données à décoder.
 *
 * @return string	Les données originales décompressées ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzinflateThis'))
{
    function gzinflateThis($data, $length = 0)
    {
		$data = (string)$data;
		$length = (int)$length;

		return gzinflate($data, $length);
    }
}

/**
 * gzopenThis
 *
 * Ouvre un fichier compressé avec gzip.
 *
 * @link http://php.net/manual/fr/function.gzopen.php Documentation pour gzopen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier.
 * @param string   $mode    Comme dans la fonction fopen() (rb ou wb) mais peut également inclure un degré de compression (wb9) ou une stratégie : f pour les données filtrées comme wb6f, h pour Huffman only compression comme wb1h. (Lisez la description de deflateInit2 dans le fichier zlib.h pour plus d'informations sur la stratégie des paramètres.)
 * @param int      $use_include_path    Vous pouvez définir ce paramètre optionnel à 1, si vous voulez chercher un fichier également dans l'include_path.
 *
 * @return resource	Retourne un pointeur de fichier vers le fichier ouvert, ainsi, la lecture depuis ce pointeur de fichier sera des données décompressées et ce que vous y écrirez, sera compressé.
 *
 */
if(!function_exists('gzopenThis'))
{
    function gzopenThis($filename, $mode, $use_include_path = 0)
    {
		$filename = (string)$filename;
		$mode = (string)$mode;
		$use_include_path = (int)$use_include_path;

		return gzopen($filename, $mode, $use_include_path);
    }
}

/**
 * gzpassthruThis
 *
 * Affiche toutes les données qui restent dans un pointeur gz.
 *
 * @link http://php.net/manual/fr/function.gzpassthru.php Documentation pour gzpassthru.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 *
 * @return int	Le nombre de caractères décompressés lus depuis gz et affiché ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzpassthruThis'))
{
    function gzpassthruThis($zp)
    {
		$zp = is_resource($zp) ? $zp : NULL;

		return gzpassthru($zp);
    }
}

/**
 * gzreadThis
 *
 * Lecture de fichier compressé binaire.
 *
 * @link http://php.net/manual/fr/function.gzread.php Documentation pour gzread.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 * @param int      $length    Le nombre d'octets lus.
 *
 * @return string	Les données qui ont été lues.
 *
 */
if(!function_exists('gzreadThis'))
{
    function gzreadThis($zp, $length)
    {
		$zp = is_resource($zp) ? $zp : NULL;
		$length = (int)$length;

		return gzread($zp, $length);
    }
}

/**
 * gzrewindThis
 *
 * Replace le pointeur au début du fichier.
 *
 * @link http://php.net/manual/fr/function.gzrewind.php Documentation pour gzrewind.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzrewindThis'))
{
    function gzrewindThis($zp)
    {
		$zp = is_resource($zp) ? $zp : NULL;

		return gzrewind($zp);
    }
}

/**
 * gzseekThis
 *
 * Déplace le pointeur de lecture.
 *
 * @link http://php.net/manual/fr/function.gzseek.php Documentation pour gzseek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier gz. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 * @param int      $offset    La position désirée.
 * @param int      $whence    Les valeurs de whence sont : Si whence n'est pas spécifié, il vaut par défaut SEEK_SET.
 *
 * @return int	0 en cas de réussite, -1 sinon. Notez que placer le pointeur au delà de la fin du fichier n'est pas considéré comme une erreur.
 *
 */
if(!function_exists('gzseekThis'))
{
    function gzseekThis($zp, $offset, $whence = SEEK_SET)
    {
		$zp = is_resource($zp) ? $zp : NULL;
		$offset = (int)$offset;
		$whence = (int)$whence;

		return gzseek($zp, $offset, $whence);
    }
}

/**
 * gztellThis
 *
 * Lit la position courante du pointeur de lecture.
 *
 * @link http://php.net/manual/fr/function.gztell.php Documentation pour gztell.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 *
 * @return int	La position du pointeur de fichier ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gztellThis'))
{
    function gztellThis($zp)
    {
		$zp = is_resource($zp) ? $zp : NULL;

		return gztell($zp);
    }
}

/**
 * gzuncompressThis
 *
 * Décompresse une chaîne compressée.
 *
 * @link http://php.net/manual/fr/function.gzuncompress.php Documentation pour gzuncompress.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $data    Les données compressées par gzcompress().
 * @param int      $length    La longueur maximale de données à décoder.
 *
 * @return string	Les données originales décompressées ou FALSE si une erreur survient.
 *
 */
if(!function_exists('gzuncompressThis'))
{
    function gzuncompressThis($data, $length = 0)
    {
		$data = (string)$data;
		$length = (int)$length;

		return gzuncompress($data, $length);
    }
}

/**
 * gzwriteThis
 *
 * Écrit dans un fichier compressé gzip.
 *
 * @link http://php.net/manual/fr/function.gzwrite.php Documentation pour gzwrite.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $zp    Le pointeur de fichier. Il doit être valide et doit pointer vers un fichier ouvert avec succès grâce à la fonction gzopen().
 * @param string   $string    La chaîne à écrire.
 * @param int      $length    Le nombre d'octets décompressés à écrire. Si fournie, l'écriture s'arrêtera après length (décompressé) octets écrits ou si la fin de la chaîne string est atteinte ; celui qui survient le premier.
 *
 * @return int	Retourne le nombre d'octets (décompressés) écrits dans le fichier gz donné.
 *
 */
if(!function_exists('gzwriteThis'))
{
    function gzwriteThis($zp, $string, $length = NULL)
    {
		$zp = is_resource($zp) ? $zp : NULL;
		$string = (string)$string;
		$length = (int)$length;

		return gzwrite($zp, $string, $length);
    }
}

/**
 * hash_copyThis
 *
 * Copie un contexte de hashage.
 *
 * @link http://php.net/manual/fr/function.hash-copy.php Documentation pour hash_copy.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param resource $context    Contexte de hashage, retourné par la fonction hash_init().
 *
 * @return resource	Retourne une copie du contexte de hashage.
 *
 */
if(!function_exists('hash_copyThis'))
{
    function hash_copyThis($context)
    {
		$context = is_resource($context) ? $context : NULL;

		return hash_copy($context);
    }
}

/**
 * hash_pbkdf2This
 *
 * Génère une clé PBKDF2 dérivée du mot de passe fourni.
 *
 * @link http://php.net/manual/fr/function.hash-pbkdf2.php Documentation pour hash_pbkdf2.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $algo    Nom de l'algorithme de hashage sélectionné (i.e. md5, sha256, haval160,4, etc..). Voir la fonction hash_algos() pour une liste des algorithmes supportés.
 * @param string   $password    Le mot de passe à utiliser pour la dérivation.
 * @param string   $salt    Le salt à utiliser pour la dérivation.
 * @param int      $iterations    Le nombre d'itérations internes pour effectuer la dérivation.
 * @param int      $length    La longueur de la clé dérivée à afficher. Si vaut 0, la longueur de l'algorithme choisi sera utilisé.
 * @param bool     $raw_output    Lorsque définit à TRUE, la fonction affichera les données binaires brutes. Si vaut FALSE, l'affichage se fera en minuscule.
 *
 * @return string	Retourne une chaîne contenant la clé dérivée en minuscule, à moins que le paramètre raw_output ne soit positionné à TRUE auquel cas, la représentation binaire brute de la clé dérivée sera retournée.
 *
 */
if(!function_exists('hash_pbkdf2This'))
{
    function hash_pbkdf2This($algo, $password, $salt, $iterations, $length = 0, $raw_output = false)
    {
		$algo = (string)$algo;
		$password = (string)$password;
		$salt = (string)$salt;
		$iterations = (int)$iterations;
		$length = (int)$length;
		$raw_output = (bool)$raw_output;

		return hash_pbkdf2($algo, $password, $salt, $iterations, $length, $raw_output);
    }
}

/**
 * headerThis
 *
 * Envoie un en-tête HTTP.
 *
 * @link http://php.net/manual/fr/function.header.php Documentation pour header.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    L'en-tête. Il y a deux en-têtes spéciaux. Le premier commence par la chaîne "HTTP/" (insensible à la casse), qui est utilisée pour signifier le statut HTTP à envoyer. Par exemple, si vous avez configuré Apache pour utiliser les scripts PHP pour gérer les requêtes vers des fichiers inexistants (en utilisant la directive ErrorDocument), vous voulez-vous assurer que le script génère un code statut correct. Le deuxième type d'appel spécial est "Location:". Non seulement il renvoie un en-tête au client, mais, en plus, il envoie un statut REDIRECT (302) au navigateur tant qu'un code statut 21 ou 3xx n'a pas été envoyé.
 * @param bool     $replace    Le paramètre optionnel replace indique si la fonction header() doit remplacer un en-tête précédemment émis, ou bien ajouter un autre en-tête du même type. Par défaut, un nouvel en-tête va écraser le précédent, mais si vous passez FALSE dans cet argument, vous pouvez forcer les en-têtes multiples pour un même type d'en-tête. Par exemple :
 * @param int      $http_response_code    Force le code réponse HTTP à la valeur spécifiée.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('headerThis'))
{
    function headerThis($string, $replace = true, $http_response_code = NULL)
    {
		$string = (string)$string;
		$replace = (bool)$replace;
		$http_response_code = (int)$http_response_code;

		return header($string, $replace, $http_response_code);
    }
}

/**
 * header_register_callbackThis
 *
 * Enregistre une fonction de rappel pour l'envoi des en-têtes.
 *
 * @link http://php.net/manual/fr/function.header-register-callback.php Documentation pour header_register_callback.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param callable     $callback    La fonction à appeler juste avant que les en-têtes ne soient envoyés. Elle n'accepte aucun paramètre et sa valeur de retour est ignorée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('header_register_callbackThis'))
{
    function header_register_callbackThis($callback)
    {
		$callback = is_callable($callback) ? $callback : NULL;

		return header_register_callback($callback);
    }
}

/**
 * header_removeThis
 *
 * Supprime un en-tête HTTP.
 *
 * @link http://php.net/manual/fr/function.header-remove.php Documentation pour header_remove.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $name    Le nom de l'en-tête à supprimer.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('header_removeThis'))
{
    function header_removeThis($name = NULL)
    {
		$name = (string)$name;

		return header_remove($name);
    }
}

/**
 * headers_listThis
 *
 * Retourne la liste des en-têtes de réponse du script courant.
 *
 * @link http://php.net/manual/fr/function.headers-list.php Documentation pour headers_list.
 *
 * @version PHP 5
 * @return array	Retourne un tableau d'en-têtes indexé numériquement.
 *
 */
if(!function_exists('headers_listThis'))
{
    function headers_listThis()
    {
		return headers_list();
    }
}

/**
 * headers_sentThis
 *
 * Indique si les en-têtes HTTP ont déjà été envoyés.
 *
 * @link http://php.net/manual/fr/function.headers-sent.php Documentation pour headers_sent.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   &$file    Si les paramètres optionnels file et line sont fournis, headers_sent() va placer le nom du fichier source et le numéro de ligne qui ont débuté l'affichage, dans les variables file et line.
 * @param int      &$line    Le numéro de la ligne où la sortie a eu lieu.
 *
 * @return bool	headers_sent() retourne FALSE si aucun en-tête n'a été envoyé, ou TRUE sinon.
 *
 */
if(!function_exists('headers_sentThis'))
{
    function headers_sentThis(&$file = NULL, &$line = NULL)
    {
		$file = (string)$file;
		$line = (int)$line;

		return headers_sent($file, $line);
    }
}

/**
 * hebrevThis
 *
 * Convertit un texte logique hébreux en texte visuel.
 *
 * @link http://php.net/manual/fr/function.hebrev.php Documentation pour hebrev.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hebrew_text    Une chaîne d'entrée en hébreux.
 * @param int      $max_chars_per_line    Le paramètre optionnel max_chars_per_line indique le nombre maximum de caractères par ligne dans le résultat.
 *
 * @return string	Retourne la chaîne visuelle.
 *
 */
if(!function_exists('hebrevThis'))
{
    function hebrevThis($hebrew_text, $max_chars_per_line = 0)
    {
		$hebrew_text = (string)$hebrew_text;
		$max_chars_per_line = (int)$max_chars_per_line;

		return hebrev($hebrew_text, $max_chars_per_line);
    }
}

/**
 * hebrevcThis
 *
 * Convertit un texte logique hébreux en texte visuel, avec retours à la ligne.
 *
 * @link http://php.net/manual/fr/function.hebrevc.php Documentation pour hebrevc.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hebrew_text    Une chaîne d'entrée en hébreux.
 * @param int      $max_chars_per_line    Le paramètre optionnel max_chars_per_line indique le nombre maximum de caractères par lignes dans le résultat.
 *
 * @return string	Retourne la chaîne visuelle.
 *
 */
if(!function_exists('hebrevcThis'))
{
    function hebrevcThis($hebrew_text, $max_chars_per_line = 0)
    {
		$hebrew_text = (string)$hebrew_text;
		$max_chars_per_line = (int)$max_chars_per_line;

		return hebrevc($hebrew_text, $max_chars_per_line);
    }
}

/**
 * hex2binThis
 *
 * Convertit une chaîne binaire encodée en hexadécimal.
 *
 * @link http://php.net/manual/fr/function.hex2bin.php Documentation pour hex2bin.
 *
 * @version PHP >= 5.4.0
 *
 * @param string   $data    Représentation hexadécimale de la donnée.
 *
 * @return string	Retourne la représentation binaire de la donnée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hex2binThis'))
{
    function hex2binThis($data)
    {
		$data = (string)$data;

		return hex2bin($data);
    }
}

/**
 * hexdecThis
 *
 * Convertit de hexadécimal en décimal.
 *
 * @link http://php.net/manual/fr/function.hexdec.php Documentation pour hexdec.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hex_string    La chaîne hexadécimale à convertir
 *
 * @return number	La représentation décimale de hex_string
 *
 */
if(!function_exists('hexdecThis'))
{
    function hexdecThis($hex_string)
    {
		$hex_string = (string)$hex_string;

		return hexdec($hex_string);
    }
}

/**
 * highlight_fileThis
 *
 * Colorisation syntaxique d'un fichier.
 *
 * @link http://php.net/manual/fr/function.highlight-file.php Documentation pour highlight_file.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le chemin vers le fichier PHP à coloriser.
 * @param bool     $return    En passant ce paramètre à TRUE, la fonction retourne le code colorisé au lieu de l'afficher.
 *
 * @return mixed	Si le second paramètre optionnel return vaut TRUE alors highlight_file() retournera le code généré, au lieu de l'afficher. Si le second paramètre ne vaut pas TRUE alors highlight_file() retournera TRUE en cas de succès, et FALSE sinon.
 *
 */
if(!function_exists('highlight_fileThis'))
{
    function highlight_fileThis($filename, $return = false)
    {
		$filename = (string)$filename;
		$return = (bool)$return;

		return highlight_file($filename, $return);
    }
}

/**
 * highlight_stringThis
 *
 * Applique la syntaxe colorisée à du code PHP.
 *
 * @link http://php.net/manual/fr/function.highlight-string.php Documentation pour highlight_string.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    Le code PHP à coloriser. Doit également inclure les balises d'ouverture.
 * @param bool     $return    Définir ce paramètre à TRUE pour faire que cette fonction retourne le code colorisé.
 *
 * @return mixed	Si le second paramètre optionnel return est fourni, et vaut TRUE alors highlight_string() retournera la chaîne colorisée au lieu de l'afficher immédiatement. Si le second paramètre ne vaut pas TRUE alors highlight_string() retournera TRUE en cas de succès, et FALSE sinon.
 *
 */
if(!function_exists('highlight_stringThis'))
{
    function highlight_stringThis($str, $return = false)
    {
		$str = (string)$str;
		$return = (bool)$return;

		return highlight_string($str, $return);
    }
}

/**
 * html_entity_decodeThis
 *
 * Convertit toutes les entités HTML en caractères normaux.
 *
 * @link http://php.net/manual/fr/function.html-entity-decode.php Documentation pour html_entity_decode.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $string    La chaîne d'entrée.
 * @param int      $flags    Un masque d'un ou plusieurs drapeaux suivants, qui spécifient la façon dont doivent être gérés les guillemets et quel type de document doit être utilisé. Par défaut, ce sera ENT_COMPAT | ENT_HTML41.
 * @param string   $encoding    Encodage à utiliser. Si omis, la valeur par défaut de cet argument sera ISO-8859-1 dans les version antérieures à la version 5.4.0 de PHP, et UTF-8 pour les versions à partir de 5.4.0 de PHP. Les jeux de caractères suivants sont supportés :
 *
 * @return string	Retourne la chaîne décodée.
 *
 */
if(!function_exists('html_entity_decodeThis'))
{
    function html_entity_decodeThis($string, $flags = NULL, $encoding = 'UTF-8')
    {
		$string = (string)$string;
		$flags = empty($flags) ? (int)ENT_COMPAT | ENT_HTML41 : (int)$flags;
		$encoding = (string)$encoding;

		return html_entity_decode($string, $flags, $encoding);
    }
}

/**
 * htmlentitiesThis
 *
 * Convertit tous les caractères éligibles en entités HTML.
 *
 * @link http://php.net/manual/fr/function.htmlentities.php Documentation pour htmlentities.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne d'entrée.
 * @param int      $flags    Un masque d'un ou plusieurs drapeaux suivants, qui déterminent la façon dont les guillemets seront gérés, dont les séquences de code invalide seront gérées ainsi que le type du document utilisé. Par défaut, ce sera ENT_COMPAT | ENT_HTML41.
 * @param string   $encoding    Comme htmlspecialchars(), htmlentities() prend un troisième argument optionnel encoding qui définit l'encodage utilisé durant la conversion. Si omis, la valeur par défaut de cet argument est ISO-8859-1 pour les versions antérieures à la version 5.4.0 de PHP, et UTF-8 à partir de la version 5.4.0. Malgré le fait que cet argument soit techniquement optionnel, vous êtes vivement encouragé à spécifier une valeur correcte pour votre code. Les jeux de caractères suivants sont supportés :
 * @param bool     $double_encode    Lorsque double_encode est désactivé, PHP n'encodera pas les entités html existantes. Par défaut, tout est converti.
 *
 * @return string	Retourne la chaîne encodée.
 *
 */
if(!function_exists('htmlentitiesThis'))
{
    function htmlentitiesThis($string, $flags = NULL, $encoding = 'UTF-8', $double_encode = true)
    {
		$string = (string)$string;
		$flags = empty($flags) ? (int)ENT_COMPAT | ENT_HTML41 : (int)$flags;
		$encoding = (string)$encoding;
		$double_encode = (bool)$double_encode;

		return htmlentities($string, $flags, $encoding, $double_encode);
    }
}

/**
 * htmlspecialcharsThis
 *
 * Convertit les caractères spéciaux en entités HTML.
 *
 * @link http://php.net/manual/fr/function.htmlspecialchars.php Documentation pour htmlspecialchars.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne à convertir.
 * @param int      $flags    Un masque d'un ou plusieurs drapeaux suivants, qui déterminent la façon dont les guillemets seront gérés, dont les séquences de code invalide seront gérées ainsi que le type du document utilisé. Par défaut, ce sera ENT_COMPAT | ENT_HTML41.
 * @param string   $encoding    Encodage à utiliser lors de la conversion. Si omis, la valeur par défaut de cet argument sera ISO-8859-1 dans les versions antérieures à PHP 5.4.0, et UTF-8 à partir de la version PHP 5.4.0. Pour cette fonction, les encodages ISO-8859-1, ISO-8859-15, UTF-8, cp866, cp251, cp252, et KOI8-R sont équivalents, à condition que le paramètre string soit valable pour l'encodage, dans le sens où les caractères affectés par la fonction htmlspecialchars() occupent la même position dans tous ces encodages. Les jeux de caractères suivants sont supportés :
 * @param bool     $double_encode    Lorsque le paramètre double_encode est désactivé, PHP n'encodera pas les entités html existants ; par défaut, tout est converti.
 *
 * @return string	La chaîne convertie.
 *
 */
if(!function_exists('htmlspecialcharsThis'))
{
    function htmlspecialcharsThis($string, $flags = NULL, $encoding = 'UTF-8', $double_encode = true)
    {
		$string = (string)$string;
		$flags = empty($flags) ? (int)ENT_COMPAT | ENT_HTML41 : (int)$flags;
		$encoding = (string)$encoding;
		$double_encode = (bool)$double_encode;

		return htmlspecialchars($string, $flags, $encoding, $double_encode);
    }
}

/**
 * htmlspecialchars_decodeThis
 *
 * Convertit les entités HTML spéciales en caractères.
 *
 * @link http://php.net/manual/fr/function.htmlspecialchars-decode.php Documentation pour htmlspecialchars_decode.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $string    La chaîne de caractères à décoder
 * @param int      $flags    Un masque d'un ou plusieurs drapeaux suivants, qui spécifient la façon dont doit être géré les guillemets et quel type de document à utiliser. Par défaut, ce sera ENT_COMPAT | ENT_HTML41.
 *
 * @return string	Retourne la chaîne de caractères décodée.
 *
 */
if(!function_exists('htmlspecialchars_decodeThis'))
{
    function htmlspecialchars_decodeThis($string, $flags = NULL)
    {
		$string = (string)$string;
		$flags = empty($flags) ? (int)ENT_COMPAT | ENT_HTML41 : (int)$flags;

		return htmlspecialchars_decode($string, $flags);
    }
}

/**
 * http_build_queryThis
 *
 * Génère une chaîne de requête en encodage URL.
 *
 * @link http://php.net/manual/fr/function.http-build-query.php Documentation pour http_build_query.
 *
 * @version PHP 5
 *
 * @param mixed     $query_data    Peut être un tableau ou un objet contenant des propriétés. Si query_data est un tableau, alors ce peut être un tableau à une ou plusieurs dimensions. Si query_data est un objet, alors seuls les attributs publics seront utilisés dans le résultat.
 * @param string   $numeric_prefix    Si des indices numériques sont utilisés dans le tableau de base et que numeric_prefix est fourni, il sera utilisé pour préfixer les noms des index pour les éléments du tableau de base seulement. Cela permet de générer des noms de variables valides, si les données sont ensuite décodées par PHP ou une application CGI.
 * @param string   $arg_separator    arg_separator.output est utilisée pour séparer les arguments tant que le paramètre arg_separator n'est pas fourni.
 * @param int      $enc_type    Par défaut, vaut PHP_QUERY_RFC1738. Si enc_type vaut PHP_QUERY_RFC1738, alors l'encodage est effectué conformément à la » RFC 1738 et les espaces du type de média application/x-www-form-urlencoded, qui est impacté par ce choix, seront encodés sous la forme d'un signe plus (+). Si enc_type vaut PHP_QUERY_RFC3986, alors l'encodage est effectué conformément à la » RFC 3986, et les espaces seront encodés en signe pourcent (%20).
 *
 * @return string	Retourne une chaîne de caractères encodée URL.
 *
 */
if(!function_exists('http_build_queryThis'))
{
    function http_build_queryThis($query_data, $numeric_prefix = NULL, $arg_separator = NULL, $enc_type = PHP_QUERY_RFC1738)
    {
		$query_data = ($query_data);
		$numeric_prefix = (string)$numeric_prefix;
		$arg_separator = (string)$arg_separator;
		$enc_type = (int)$enc_type;

		return http_build_query($query_data, $numeric_prefix, $arg_separator, $enc_type);
    }
}

/**
 * http_response_codeThis
 *
 * Récupère ou change le code de la réponse HTTP.
 *
 * @link http://php.net/manual/fr/function.http-response-code.php Documentation pour http_response_code.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param int      $response_code    Le paramètre optionnel response_code change le code de la réponse.
 *
 * @return int	Le code de la réponse courant. Par défaut int(200).
 *
 */
if(!function_exists('http_response_codeThis'))
{
    function http_response_codeThis($response_code = NULL)
    {
		$response_code = (int)$response_code;

		return http_response_code($response_code);
    }
}

/**
 * hw_Array2ObjrecThis
 *
 * Convertit un tableau en un objet.
 *
 * @link http://php.net/manual/fr/function.hw-array2objrec.php Documentation pour hw_Array2Objrec.
 *
 * @version PHP 4
 *
 * @param array    $object_array    Le tableau.
 *
 * @return string	Retourne l'objet.
 *
 */
if(!function_exists('hw_Array2ObjrecThis'))
{
    function hw_Array2ObjrecThis($object_array)
    {
		$object_array = (array)$object_array;

		return hw_Array2Objrec($object_array);
    }
}

/**
 * hw_ChildrenThis
 *
 * Liste les identifiants d'objets fils Hyperwave.
 *
 * @link http://php.net/manual/fr/function.hw-children.php Documentation pour hw_Children.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant d'objet.
 *
 * @return array	Retourne un tableau avec les identifiants des objets fils. Chaque identifiant d'objet est celui d'un des fils du groupe dont l'identifiant est objectID. Ce tableau contient tous les fils, documents et groupes.
 *
 */
if(!function_exists('hw_ChildrenThis'))
{
    function hw_ChildrenThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_Children($connection, $objectID);
    }
}

/**
 * hw_ChildrenObjThis
 *
 * Liste des objets records des objets fils.
 *
 * @link http://php.net/manual/fr/function.hw-childrenobj.php Documentation pour hw_ChildrenObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant d'objet.
 *
 * @return array	Retourne un tableau avec des objets records. Chaque objet records est celui d'un des fils du groupe dont l'id est objectID. Ce tableau contient tous les fils, documents et groupes.
 *
 */
if(!function_exists('hw_ChildrenObjThis'))
{
    function hw_ChildrenObjThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_ChildrenObj($connection, $objectID);
    }
}

/**
 * hw_CloseThis
 *
 * Ferme la connexion Hyperwave.
 *
 * @link http://php.net/manual/fr/function.hw-close.php Documentation pour hw_Close.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_CloseThis'))
{
    function hw_CloseThis($connection)
    {
		$connection = (int)$connection;

		return hw_Close($connection);
    }
}

/**
 * hw_ConnectThis
 *
 * Ouvre une connexion Hyperwave.
 *
 * @link http://php.net/manual/fr/function.hw-connect.php Documentation pour hw_Connect.
 *
 * @version PHP 4
 *
 * @param string   $host    Le nom du serveur hôte.
 * @param int      $port    Le numéro du port du serveur.
 * @param string   $username    Le nom d'utilisateur Hyperwave. S'il est omis, aucune identification avec le serveur ne sera effectuée. Cela correspond à l'utilisation d'un utilisateur anonyme.
 * @param string   $password    Le mot de passe pour l'utilisateur username. Garder à l'esprit que le mot de passe n'est pas crypté.
 *
 * @return int	Retourne un index de connexion en cas de succès, ou FALSE si la connexion n'a pû être effectuée.
 *
 */
if(!function_exists('hw_ConnectThis'))
{
    function hw_ConnectThis($host, $port, $username, $password = NULL)
    {
		$host = (string)$host;
		$port = (int)$port;
		$username = (string)$username;
		$password = (string)$password;

		return hw_Connect($host, $port, $username, $password);
    }
}

/**
 * hw_DeleteobjectThis
 *
 * Efface des objets.
 *
 * @link http://php.net/manual/fr/function.hw-deleteobject.php Documentation pour hw_Deleteobject.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'idenfitiant de connexion.
 * @param int      $object_to_delete    L'identifiant de l'objet.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_DeleteobjectThis'))
{
    function hw_DeleteobjectThis($connection, $object_to_delete)
    {
		$connection = (int)$connection;
		$object_to_delete = (int)$object_to_delete;

		return hw_Deleteobject($connection, $object_to_delete);
    }
}

/**
 * hw_DocByAnchorThis
 *
 * Identifiant d'objet de l'objet dans l'ancrage.
 *
 * @link http://php.net/manual/fr/function.hw-docbyanchor.php Documentation pour hw_DocByAnchor.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $anchorID    L'identifiant de l'ancrage.
 *
 * @return int	Retourne l'identifiant d'objet du document.
 *
 */
if(!function_exists('hw_DocByAnchorThis'))
{
    function hw_DocByAnchorThis($connection, $anchorID)
    {
		$connection = (int)$connection;
		$anchorID = (int)$anchorID;

		return hw_DocByAnchor($connection, $anchorID);
    }
}

/**
 * hw_DocByAnchorObjThis
 *
 * Attributs de l'objet dans l'ancrage.
 *
 * @link http://php.net/manual/fr/function.hw-docbyanchorobj.php Documentation pour hw_DocByAnchorObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $anchorID    L'identifiant de l'ancrage.
 *
 * @return string	Retourne un objet d'enregistrement.
 *
 */
if(!function_exists('hw_DocByAnchorObjThis'))
{
    function hw_DocByAnchorObjThis($connection, $anchorID)
    {
		$connection = (int)$connection;
		$anchorID = (int)$anchorID;

		return hw_DocByAnchorObj($connection, $anchorID);
    }
}

/**
 * hw_Document_AttributesThis
 *
 * Object record de hw_document.
 *
 * @link http://php.net/manual/fr/function.hw-document-attributes.php Documentation pour hw_Document_Attributes.
 *
 * @version PHP 4
 *
 * @param int      $hw_document    L'identifiant du document.
 *
 * @return string	Retourne l'objet record du document.
 *
 */
if(!function_exists('hw_Document_AttributesThis'))
{
    function hw_Document_AttributesThis($hw_document)
    {
		$hw_document = (int)$hw_document;

		return hw_Document_Attributes($hw_document);
    }
}

/**
 * hw_Document_BodyTagThis
 *
 * Balise de corps d'un document.
 *
 * @link http://php.net/manual/fr/function.hw-document-bodytag.php Documentation pour hw_Document_BodyTag.
 *
 * @version PHP 4
 *
 * @param int      $hw_document    L'identifiant du document.
 * @param string   $prefix
 *
 * @return string	Retourne la balise BODY, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('hw_Document_BodyTagThis'))
{
    function hw_Document_BodyTagThis($hw_document, $prefix = NULL)
    {
		$hw_document = (int)$hw_document;
		$prefix = (string)$prefix;

		return hw_Document_BodyTag($hw_document, $prefix);
    }
}

/**
 * hw_Document_ContentThis
 *
 * Récupère le contenu d'un document.
 *
 * @link http://php.net/manual/fr/function.hw-document-content.php Documentation pour hw_Document_Content.
 *
 * @version PHP 4
 *
 * @param int      $hw_document    L'idenfitiant du document.
 *
 * @return string	Retourne la balise BODY du document hw_document. Si le document est un document HTML, la balise BODY doit être affichée avant le document.
 *
 */
if(!function_exists('hw_Document_ContentThis'))
{
    function hw_Document_ContentThis($hw_document)
    {
		$hw_document = (int)$hw_document;

		return hw_Document_Content($hw_document);
    }
}

/**
 * hw_Document_SetContentThis
 *
 * Modifie/remplace le contenu d'un document.
 *
 * @link http://php.net/manual/fr/function.hw-document-setcontent.php Documentation pour hw_Document_SetContent.
 *
 * @version PHP 4
 *
 * @param int      $hw_document    L'identifiant du document.
 * @param string   $content
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_Document_SetContentThis'))
{
    function hw_Document_SetContentThis($hw_document, $content)
    {
		$hw_document = (int)$hw_document;
		$content = (string)$content;

		return hw_Document_SetContent($hw_document, $content);
    }
}

/**
 * hw_Document_SizeThis
 *
 * Taille d'un document.
 *
 * @link http://php.net/manual/fr/function.hw-document-size.php Documentation pour hw_Document_Size.
 *
 * @version PHP 4
 *
 * @param int      $hw_document    L'identifiant du document.
 *
 * @return int	Retourne la taille en octets du document.
 *
 */
if(!function_exists('hw_Document_SizeThis'))
{
    function hw_Document_SizeThis($hw_document)
    {
		$hw_document = (int)$hw_document;

		return hw_Document_Size($hw_document);
    }
}

/**
 * hw_EditTextThis
 *
 * Récupère un document texte.
 *
 * @link http://php.net/manual/fr/function.hw-edittext.php Documentation pour hw_EditText.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $hw_document    L'identifiant du document.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_EditTextThis'))
{
    function hw_EditTextThis($connection, $hw_document)
    {
		$connection = (int)$connection;
		$hw_document = (int)$hw_document;

		return hw_EditText($connection, $hw_document);
    }
}

/**
 * hw_ErrorThis
 *
 * Retourne le code d'erreur.
 *
 * @link http://php.net/manual/fr/function.hw-error.php Documentation pour hw_Error.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 *
 * @return int	Retourne le dernier code erreur, ou 0 s'il n'y a pas d'erreur.
 *
 */
if(!function_exists('hw_ErrorThis'))
{
    function hw_ErrorThis($connection)
    {
		$connection = (int)$connection;

		return hw_Error($connection);
    }
}

/**
 * hw_ErrorMsgThis
 *
 * Retourne un message d'erreur.
 *
 * @link http://php.net/manual/fr/function.hw-errormsg.php Documentation pour hw_ErrorMsg.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 *
 * @return string	Retourne une chaîne contenant le dernier message d'erreur ou 'No Error' (pas d'erreur). Si FALSE est retourné, cela signifie que la fonction a échoué.
 *
 */
if(!function_exists('hw_ErrorMsgThis'))
{
    function hw_ErrorMsgThis($connection)
    {
		$connection = (int)$connection;

		return hw_ErrorMsg($connection);
    }
}

/**
 * hw_Free_DocumentThis
 *
 * Libère la mémoire.
 *
 * @link http://php.net/manual/fr/function.hw-free-document.php Documentation pour hw_Free_Document.
 *
 * @version PHP 4
 *
 * @param int      $hw_document    L'idenfitiant du document.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_Free_DocumentThis'))
{
    function hw_Free_DocumentThis($hw_document)
    {
		$hw_document = (int)$hw_document;

		return hw_Free_Document($hw_document);
    }
}

/**
 * hw_GetAnchorsThis
 *
 * Identifiants des ancrages d'un document.
 *
 * @link http://php.net/manual/fr/function.hw-getanchors.php Documentation pour hw_GetAnchors.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 *
 * @return array	Retourne un tableau d'objet ids.
 *
 */
if(!function_exists('hw_GetAnchorsThis'))
{
    function hw_GetAnchorsThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetAnchors($connection, $objectID);
    }
}

/**
 * hw_GetAnchorsObjThis
 *
 * Attributs des ancrages d'un document.
 *
 * @link http://php.net/manual/fr/function.hw-getanchorsobj.php Documentation pour hw_GetAnchorsObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 *
 * @return array	Retourne un tableau d'objet records.
 *
 */
if(!function_exists('hw_GetAnchorsObjThis'))
{
    function hw_GetAnchorsObjThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetAnchorsObj($connection, $objectID);
    }
}

/**
 * hw_GetAndLockThis
 *
 * Retourne les attributs et verrouille l'objet.
 *
 * @link http://php.net/manual/fr/function.hw-getandlock.php Documentation pour hw_GetAndLock.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 *
 * @return string	Retourne l'objet record pour l'objet dont l'ID est objectID.
 *
 */
if(!function_exists('hw_GetAndLockThis'))
{
    function hw_GetAndLockThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetAndLock($connection, $objectID);
    }
}

/**
 * hw_GetChildCollThis
 *
 * Identifiant d'objets des groupes fils.
 *
 * @link http://php.net/manual/fr/function.hw-getchildcoll.php Documentation pour hw_GetChildColl.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 *
 * @return array	Retourne un tableau d'objet ids.
 *
 */
if(!function_exists('hw_GetChildCollThis'))
{
    function hw_GetChildCollThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetChildColl($connection, $objectID);
    }
}

/**
 * hw_GetChildCollObjThis
 *
 * Objet record d'un groupe d'enfants.
 *
 * @link http://php.net/manual/fr/function.hw-getchildcollobj.php Documentation pour hw_GetChildCollObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant d'objet.
 *
 * @return array	Retourne un tableau d'objet records.
 *
 */
if(!function_exists('hw_GetChildCollObjThis'))
{
    function hw_GetChildCollObjThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetChildCollObj($connection, $objectID);
    }
}

/**
 * hw_GetChildDocCollThis
 *
 * Identifiant des documents fils d'un groupe.
 *
 * @link http://php.net/manual/fr/function.hw-getchilddoccoll.php Documentation pour hw_GetChildDocColl.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 *
 * @return array	Retourne un tableau d'objets ids.
 *
 */
if(!function_exists('hw_GetChildDocCollThis'))
{
    function hw_GetChildDocCollThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetChildDocColl($connection, $objectID);
    }
}

/**
 * hw_GetChildDocCollObjThis
 *
 * Attributs des documents fils d'un groupe.
 *
 * @link http://php.net/manual/fr/function.hw-getchilddoccollobj.php Documentation pour hw_GetChildDocCollObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 *
 * @return array	Retourne un tableau d'objets records.
 *
 */
if(!function_exists('hw_GetChildDocCollObjThis'))
{
    function hw_GetChildDocCollObjThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetChildDocCollObj($connection, $objectID);
    }
}

/**
 * hw_GetObjectThis
 *
 * Lit les attributs d'un objet Hyperwave.
 *
 * @link http://php.net/manual/fr/function.hw-getobject.php Documentation pour hw_GetObject.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param mixed     $objectID    L'idenfitiant de l'objet, ou un tableau d'identifiants.
 * @param string   $query    La requête a la syntaxe suivante :
 *
 * @return mixed	Retourne un objet record pour l'identifiant d'objet donné, si le second paramètre est un entier.
 *
 */
if(!function_exists('hw_GetObjectThis'))
{
    function hw_GetObjectThis($connection, $objectID, $query = NULL)
    {
		$connection = (int)$connection;
		$objectID = ($objectID);
		$query = (string)$query;

		return hw_GetObject($connection, $objectID, $query);
    }
}

/**
 * hw_GetObjectByQueryThis
 *
 * Recherche un objet.
 *
 * @link http://php.net/manual/fr/function.hw-getobjectbyquery.php Documentation pour hw_GetObjectByQuery.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param string   $query    La requête ne fonctionnera qu'avec des attributs indexés.
 * @param int      $max_hits    Le nombre maximum d'objets est limité par max_hits. Si max_hits vaut -1, il n'y a pas de limite.
 *
 * @return array	Retourne un tableau d'objets ids.
 *
 */
if(!function_exists('hw_GetObjectByQueryThis'))
{
    function hw_GetObjectByQueryThis($connection, $query, $max_hits)
    {
		$connection = (int)$connection;
		$query = (string)$query;
		$max_hits = (int)$max_hits;

		return hw_GetObjectByQuery($connection, $query, $max_hits);
    }
}

/**
 * hw_GetObjectByQueryCollThis
 *
 * Recherche un objet dans un groupe.
 *
 * @link http://php.net/manual/fr/function.hw-getobjectbyquerycoll.php Documentation pour hw_GetObjectByQueryColl.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de la collection.
 * @param string   $query    La requête ne fonctionnera qu'avec des attributs indexés.
 * @param int      $max_hits    Le nombre maximum d'objet est limité par objectID. Si objectID vaut -1 il n'y a pas de limite.
 *
 * @return array	Retourne un tableau d'objets ids.
 *
 */
if(!function_exists('hw_GetObjectByQueryCollThis'))
{
    function hw_GetObjectByQueryCollThis($connection, $objectID, $query, $max_hits)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;
		$query = (string)$query;
		$max_hits = (int)$max_hits;

		return hw_GetObjectByQueryColl($connection, $objectID, $query, $max_hits);
    }
}

/**
 * hw_GetObjectByQueryCollObjThis
 *
 * Recherche un objet dans un groupe.
 *
 * @link http://php.net/manual/fr/function.hw-getobjectbyquerycollobj.php Documentation pour hw_GetObjectByQueryCollObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de la collection.
 * @param string   $query    La requête ne fonctionnera qu'avec des attributs indexés.
 * @param int      $max_hits    Le nombre maximum d'objets est limité par objectID. Si objectid vaut -1 il n'y a pas de limite.
 *
 * @return array	Retourne un tableau d'objets records.
 *
 */
if(!function_exists('hw_GetObjectByQueryCollObjThis'))
{
    function hw_GetObjectByQueryCollObjThis($connection, $objectID, $query, $max_hits)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;
		$query = (string)$query;
		$max_hits = (int)$max_hits;

		return hw_GetObjectByQueryCollObj($connection, $objectID, $query, $max_hits);
    }
}

/**
 * hw_GetObjectByQueryObjThis
 *
 * Recherche un objet.
 *
 * @link http://php.net/manual/fr/function.hw-getobjectbyqueryobj.php Documentation pour hw_GetObjectByQueryObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param string   $query    La requête ne fonctionnera qu'avec des attributs indexés.
 * @param int      $max_hits    Le nombre maximum d'objets est limité par max_hits. Si max_hits vaut -1, il n'y a pas de limite.
 *
 * @return array	Retourne un tableau d'objets records.
 *
 */
if(!function_exists('hw_GetObjectByQueryObjThis'))
{
    function hw_GetObjectByQueryObjThis($connection, $query, $max_hits)
    {
		$connection = (int)$connection;
		$query = (string)$query;
		$max_hits = (int)$max_hits;

		return hw_GetObjectByQueryObj($connection, $query, $max_hits);
    }
}

/**
 * hw_GetParentsThis
 *
 * Identifiant d'objet des parents.
 *
 * @link http://php.net/manual/fr/function.hw-getparents.php Documentation pour hw_GetParents.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant d'objet.
 *
 * @return array	Retourne un tableau indexé avec les identifiants des objets parents de objectID.
 *
 */
if(!function_exists('hw_GetParentsThis'))
{
    function hw_GetParentsThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetParents($connection, $objectID);
    }
}

/**
 * hw_GetParentsObjThis
 *
 * Attributs des parents.
 *
 * @link http://php.net/manual/fr/function.hw-getparentsobj.php Documentation pour hw_GetParentsObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant d'objet.
 *
 * @return array	Retourne un tableau indexé, avec les attributs et un tableau associé d'informations statistiques à propos des attributs. Ce tableau associé est le dernier élément du tableau retourné.
 *
 */
if(!function_exists('hw_GetParentsObjThis'))
{
    function hw_GetParentsObjThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetParentsObj($connection, $objectID);
    }
}

/**
 * hw_GetRemoteThis
 *
 * Retourne un document distant.
 *
 * @link http://php.net/manual/fr/function.hw-getremote.php Documentation pour hw_GetRemote.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 *
 * @return int	Retourne le document distant.
 *
 */
if(!function_exists('hw_GetRemoteThis'))
{
    function hw_GetRemoteThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetRemote($connection, $objectID);
    }
}

/**
 * hw_GetSrcByDestObjThis
 *
 * Retourne les ancrages qui pointent sur un objet.
 *
 * @link http://php.net/manual/fr/function.hw-getsrcbydestobj.php Documentation pour hw_GetSrcByDestObj.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet. L'objet peut être soit un document, soit un ancrage, de type destination.
 *
 * @return array	Retourne un tableau d'objets records.
 *
 */
if(!function_exists('hw_GetSrcByDestObjThis'))
{
    function hw_GetSrcByDestObjThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_GetSrcByDestObj($connection, $objectID);
    }
}

/**
 * hw_GetTextThis
 *
 * Récupère un document texte.
 *
 * @link http://php.net/manual/fr/function.hw-gettext.php Documentation pour hw_GetText.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 * @param mixed     $rootID/prefix    L'option rootID/prefix peut être une chaîne ou un entier. Si c'est un entier, il détermine la méthode d'insertion des liens dans le document. Par défaut, il vaut 0 et les liens seront construits en fonction du nom de l'objet cible. Cela sert beaucoup dans les applications web. Si un lien pointe sur un objet avec le nom 'film_internet' le lien HTML sera <A HREF="/film_internet">. La position réelle de la source et de la cible dans la hiérarchie seront ignorés. Vous devrez modificer votre site web pour qu'il réécrive les URL, comme '/mon_script.php3/film_internet'. 'mon_script.php3' devra analyser $PATH_INFO et savoir rechercher le document '/mon_script.php3/film_internet'. Si vous ne voulez pas de ce comportement, vous pouvez affecter à rootID/prefix n'importe quel prefixe. Dans ce cas, ce sera une chaîne. Si rootID/prefix est un entier différent de 0 le lien sera construit avec tous les noms de la hiérarchie, en commençant à l'objet d'identifiant rootID/prefix, et séparé par des slash. Si, par exemple, le document 'film_internet' est situé à 'a-b-c-film_internet' et '-' qui sert de séparateur hiérarchique de niveau sur le serveur Hyperwave et le document source est situé dans 'a-b-d-source' alors, le lien HTML sera : <A HREF="../c/film_internet">. Cela est très pratique si vous voulez télécharger tout le contenu d'un serveur sur un disque, et faire une carte du système sur votre disque.
 *
 * @return int	Retourne le document texte.
 *
 */
if(!function_exists('hw_GetTextThis'))
{
    function hw_GetTextThis($connection, $objectID, $rootID_prefix = NULL)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;
		$rootID_prefix = ($rootID_prefix);
		return hw_GetText($connection, $objectID, $rootID/prefix);
    }
}

/**
 * hw_IdentifyThis
 *
 * Identifie un utilisateur.
 *
 * @link http://php.net/manual/fr/function.hw-identify.php Documentation pour hw_Identify.
 *
 * @version PHP 4
 *
 * @param int      $link    L'identifiant de connexion.
 * @param string   $username    Le nom d'utilisateur.
 * @param string   $password    Le mot de passe.
 *
 */
if(!function_exists('hw_IdentifyThis'))
{
    function hw_IdentifyThis($link, $username, $password)
    {
		$link = (int)$link;
		$username = (string)$username;
		$password = (string)$password;

		return hw_Identify($link, $username, $password);
    }
}

/**
 * hw_InCollectionsThis
 *
 * Vérifie qu'un identifiant d'objet est dans un groupe.
 *
 * @link http://php.net/manual/fr/function.hw-incollections.php Documentation pour hw_InCollections.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param array    $object_id_array    Un tableau d'objets ids.
 * @param array    $collection_id_array    Un tableau de collection d'identifiants.
 * @param int      $return_collections    Lorsque défini à 0, le sous-ensemble d'identifiants qui fait parti d'un groupe (i.e., les documents ou les collections qui sont des enfants d'une ou plusieurs collections d'identifiant de collection ou ces sous-collections, récursivement) est retourné sous la forme d'un tableau. Lorsque défini à 1, le jeu de collections qui a un ou plusieurs objets ayant des sous-jeux comme enfants, est retourné, sous la forme d'un tableau. Cette option permet au client de, e.g., mettre en lumière la partie de la collection qui contient les résultats de la précédente requête, sous une forme graphique.
 *
 * @return array	Retourne un tableau d'objets ids.
 *
 */
if(!function_exists('hw_InCollectionsThis'))
{
    function hw_InCollectionsThis($connection, $object_id_array, $collection_id_array, $return_collections)
    {
		$connection = (int)$connection;
		$object_id_array = (array)$object_id_array;
		$collection_id_array = (array)$collection_id_array;
		$return_collections = (int)$return_collections;

		return hw_InCollections($connection, $object_id_array, $collection_id_array, $return_collections);
    }
}

/**
 * hw_InfoThis
 *
 * Informations à propos d'une connexion.
 *
 * @link http://php.net/manual/fr/function.hw-info.php Documentation pour hw_Info.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 *
 * @return string	Retourne les informations de la connexion courante. La chaîne retournée a le format suivant : <Serverstring>, <Host>, <Port>, <Username>, <Port of Client>, <Byte swapping>
 *
 */
if(!function_exists('hw_InfoThis'))
{
    function hw_InfoThis($connection)
    {
		$connection = (int)$connection;

		return hw_Info($connection);
    }
}

/**
 * hw_InsCollThis
 *
 * Insère une collection.
 *
 * @link http://php.net/manual/fr/function.hw-inscoll.php Documentation pour hw_InsColl.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID
 * @param array    $object_array
 *
 */
if(!function_exists('hw_InsCollThis'))
{
    function hw_InsCollThis($connection, $objectID, $object_array)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;
		$object_array = (array)$object_array;

		return hw_InsColl($connection, $objectID, $object_array);
    }
}

/**
 * hw_InsDocThis
 *
 * Insère un document.
 *
 * @link http://php.net/manual/fr/function.hw-insdoc.php Documentation pour hw_InsDoc.
 *
 * @version PHP 4
 *
 * @param resource $connection    L'identifiant de connexion.
 * @param int      $parentID    L'identifiant du groupe.
 * @param string   $object_record    Les attributs de l'objet.
 * @param string   $text    Si fourni, le texte ascii sera également inséré.
 *
 */
if(!function_exists('hw_InsDocThis'))
{
    function hw_InsDocThis($connection, $parentID, $object_record, $text = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$parentID = (int)$parentID;
		$object_record = (string)$object_record;
		$text = (string)$text;

		return hw_InsDoc($connection, $parentID, $object_record, $text);
    }
}

/**
 * hw_InsertDocumentThis
 *
 * Insère un document dans un groupe.
 *
 * @link http://php.net/manual/fr/function.hw-insertdocument.php Documentation pour hw_InsertDocument.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'idenfitiant de connexion.
 * @param int      $parent_id    L'identifiant de groupe.
 * @param int      $hw_document    L'identifiant du document.
 *
 * @return int	Retourne l'identifiant de l'objet du nouveau document, ou FALSE.
 *
 */
if(!function_exists('hw_InsertDocumentThis'))
{
    function hw_InsertDocumentThis($connection, $parent_id, $hw_document)
    {
		$connection = (int)$connection;
		$parent_id = (int)$parent_id;
		$hw_document = (int)$hw_document;

		return hw_InsertDocument($connection, $parent_id, $hw_document);
    }
}

/**
 * hw_InsertObjectThis
 *
 * Insère un objet record.
 *
 * @link http://php.net/manual/fr/function.hw-insertobject.php Documentation pour hw_InsertObject.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param string   $object_rec    L'objet peut être n'importe quel objet hyperwave valide.
 * @param string   $parameter    Reportez-vous à la documentation HG-CSP pour des informations détaillées sur la valeur de ce paramètre.
 *
 */
if(!function_exists('hw_InsertObjectThis'))
{
    function hw_InsertObjectThis($connection, $object_rec, $parameter)
    {
		$connection = (int)$connection;
		$object_rec = (string)$object_rec;
		$parameter = (string)$parameter;

		return hw_InsertObject($connection, $object_rec, $parameter);
    }
}

/**
 * hw_ModifyobjectThis
 *
 * Modifie les attributs d'object record.
 *
 * @link http://php.net/manual/fr/function.hw-modifyobject.php Documentation pour hw_Modifyobject.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $object_to_change    L'objet à changer.
 * @param array    $remove    Un tableau d'attributs à effacer.
 * @param array    $add    Un tableau d'attributs à ajouter.
 * @param int      $mode    Le dernier paramètre détermine si la modification est récursive ou pas. 1 signifie que la modification est récursive. Si un objet ne peut pas être modifié, il sera ignoré. hw_error() n'indiquera alors pas toujours d'erreur, même si certains objets n'ont pas pu être modifiés.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_ModifyobjectThis'))
{
    function hw_ModifyobjectThis($connection, $object_to_change, $remove, $add, $mode = NULL)
    {
		$connection = (int)$connection;
		$object_to_change = (int)$object_to_change;
		$remove = (array)$remove;
		$add = (array)$add;
		$mode = (int)$mode;

		return hw_Modifyobject($connection, $object_to_change, $remove, $add, $mode);
    }
}

/**
 * hw_New_DocumentThis
 *
 * Crée un nouveau document.
 *
 * @link http://php.net/manual/fr/function.hw-new-document.php Documentation pour hw_New_Document.
 *
 * @version PHP 4
 *
 * @param string   $object_record    L'objet record.
 * @param string   $document_data    Les données du document.
 * @param int      $document_size    La taille du document. Doit correspondre à la taille des données document_data.
 *
 * @return int	Retourne le nouveau document Hyperwave.
 *
 */
if(!function_exists('hw_New_DocumentThis'))
{
    function hw_New_DocumentThis($object_record, $document_data, $document_size)
    {
		$object_record = (string)$object_record;
		$document_data = (string)$document_data;
		$document_size = (int)$document_size;

		return hw_New_Document($object_record, $document_data, $document_size);
    }
}

/**
 * hw_Output_DocumentThis
 *
 * Affiche le document hw_document.
 *
 * @link http://php.net/manual/fr/function.hw-output-document.php Documentation pour hw_Output_Document.
 *
 * @version PHP 4
 *
 * @param int      $hw_document    L'identifiant du document.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_Output_DocumentThis'))
{
    function hw_Output_DocumentThis($hw_document)
    {
		$hw_document = (int)$hw_document;

		return hw_Output_Document($hw_document);
    }
}

/**
 * hw_PipeDocumentThis
 *
 * Récupère un document.
 *
 * @link http://php.net/manual/fr/function.hw-pipedocument.php Documentation pour hw_PipeDocument.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet.
 * @param array    $url_prefixes
 *
 * @return int	Retourne le document Hyperwave.
 *
 */
if(!function_exists('hw_PipeDocumentThis'))
{
    function hw_PipeDocumentThis($connection, $objectID, $url_prefixes = NULL)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;
		$url_prefixes = (array)$url_prefixes;

		return hw_PipeDocument($connection, $objectID, $url_prefixes);
    }
}

/**
 * hw_RootThis
 *
 * Objet id de la racine.
 *
 * @link http://php.net/manual/fr/function.hw-root.php Documentation pour hw_Root.
 *
 * @version PHP 4
 * @return int	Retourne 0.
 *
 */
if(!function_exists('hw_RootThis'))
{
    function hw_RootThis()
    {
		return hw_Root();
    }
}

/**
 * hw_UnlockThis
 *
 * Déverrouille un objet.
 *
 * @link http://php.net/manual/fr/function.hw-unlock.php Documentation pour hw_Unlock.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $objectID    L'identifiant de l'objet document.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('hw_UnlockThis'))
{
    function hw_UnlockThis($connection, $objectID)
    {
		$connection = (int)$connection;
		$objectID = (int)$objectID;

		return hw_Unlock($connection, $objectID);
    }
}

/**
 * hw_WhoThis
 *
 * Liste des utilisateurs actuellement identifiés.
 *
 * @link http://php.net/manual/fr/function.hw-who.php Documentation pour hw_Who.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de la connexion.
 *
 * @return array	Retourne un tableau contenant la liste des utilisateurs actuellement connectés au serveur Hyperwave. Chaque élément du tableau est lui-même un tableau qui contient l'identifiant de l'élément, le nom, le système, la date de connexion (onSinceDate), l'heure de connexion (onSinceTime), la durée de connexion (TotalTime ) et self. 'self' vaut 1 si cette entrée appartient à l'utilisateur qui a appelé la fonction.
 *
 */
if(!function_exists('hw_WhoThis'))
{
    function hw_WhoThis($connection)
    {
		$connection = (int)$connection;

		return hw_Who($connection);
    }
}

/**
 * hw_connection_infoThis
 *
 * Affiche des informations sur la connexion au serveur Hyperwave.
 *
 * @link http://php.net/manual/fr/function.hw-connection-info.php Documentation pour hw_connection_info.
 *
 * @version PHP 4
 *
 * @param int      $link
 *
 */
if(!function_exists('hw_connection_infoThis'))
{
    function hw_connection_infoThis($link)
    {
		$link = (int)$link;

		return hw_connection_info($link);
    }
}

/**
 * hw_cpThis
 *
 * Copie des objets HyperWave.
 *
 * @link http://php.net/manual/fr/function.hw-cp.php Documentation pour hw_cp.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param array    $object_id_array    Un tableau d'objets ids.
 * @param int      $destination_id    L'identifiant de la collection cible.
 *
 * @return int	Retourne le nombre d'objets copiés.
 *
 */
if(!function_exists('hw_cpThis'))
{
    function hw_cpThis($connection, $object_id_array, $destination_id)
    {
		$connection = (int)$connection;
		$object_id_array = (array)$object_id_array;
		$destination_id = (int)$destination_id;

		return hw_cp($connection, $object_id_array, $destination_id);
    }
}

/**
 * hw_dummyThis
 *
 * Fonction sans objet pour Hyperwave.
 *
 * @link http://php.net/manual/fr/function.hw-dummy.php Documentation pour hw_dummy.
 *
 * @version PHP 4
 *
 * @param int      $link
 * @param int      $id
 * @param int      $msgid
 *
 */
if(!function_exists('hw_dummyThis'))
{
    function hw_dummyThis($link, $id, $msgid)
    {
		$link = (int)$link;
		$id = (int)$id;
		$msgid = (int)$msgid;

		return hw_dummy($link, $id, $msgid);
    }
}

/**
 * hw_getrellinkThis
 *
 * Crée le lien depuis la source vers le destinataire, relativement à rootid.
 *
 * @link http://php.net/manual/fr/function.hw-getrellink.php Documentation pour hw_getrellink.
 *
 * @version PHP 4
 *
 * @param int      $link
 * @param int      $rootid
 * @param int      $sourceid
 * @param int      $destid
 *
 */
if(!function_exists('hw_getrellinkThis'))
{
    function hw_getrellinkThis($link, $rootid, $sourceid, $destid)
    {
		$link = (int)$link;
		$rootid = (int)$rootid;
		$sourceid = (int)$sourceid;
		$destid = (int)$destid;

		return hw_getrellink($link, $rootid, $sourceid, $destid);
    }
}

/**
 * hw_getremotechildrenThis
 *
 * Retourne les fils d'un document distant.
 *
 * @link http://php.net/manual/fr/function.hw-getremotechildren.php Documentation pour hw_getremotechildren.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param string   $object_record    L'objet record.
 *
 * @return mixed	Si le nombre de fils est 1, la fonction va retourner le document lui-même, formaté Hyperwave Gateway Interface (HGI). Si le nombre de fils est supérieur à 1, la fonction retournera un tableau d'attributs qui pourra servir à une nouvelle requête avec hw_getremotechildren(). Ces attributs sont virtuels et n'existent pas sur le serveur Hyperwave, et ainsi, n'ont pas d'identifiant d'objet valide. L'ordre exact de ces objets est du ressort de HGI.
 *
 */
if(!function_exists('hw_getremotechildrenThis'))
{
    function hw_getremotechildrenThis($connection, $object_record)
    {
		$connection = (int)$connection;
		$object_record = (string)$object_record;

		return hw_getremotechildren($connection, $object_record);
    }
}

/**
 * hw_getusernameThis
 *
 * Nom de l'utilisateur actuellement identifié.
 *
 * @link http://php.net/manual/fr/function.hw-getusername.php Documentation pour hw_getusername.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 *
 * @return string	Retourne le nom de l'utilisateur, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('hw_getusernameThis'))
{
    function hw_getusernameThis($connection)
    {
		$connection = (int)$connection;

		return hw_getusername($connection);
    }
}

/**
 * hw_insertanchorsThis
 *
 * Insère uniquement des ancres dans du texte.
 *
 * @link http://php.net/manual/fr/function.hw-insertanchors.php Documentation pour hw_insertanchors.
 *
 * @version PHP 4 >= 4.0.4
 *
 * @param int      $hwdoc
 * @param array    $anchorecs
 * @param array    $dest
 * @param array    $urlprefixes
 *
 */
if(!function_exists('hw_insertanchorsThis'))
{
    function hw_insertanchorsThis($hwdoc, $anchorecs, $dest, $urlprefixes = NULL)
    {
		$hwdoc = (int)$hwdoc;
		$anchorecs = (array)$anchorecs;
		$dest = (array)$dest;
		$urlprefixes = (array)$urlprefixes;

		return hw_insertanchors($hwdoc, $anchorecs, $dest, $urlprefixes);
    }
}

/**
 * hw_mapidThis
 *
 * Représente un id global en un id virtuel local.
 *
 * @link http://php.net/manual/fr/function.hw-mapid.php Documentation pour hw_mapid.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param int      $server_id    L'id du serveur est la première partie de l'id global (GOid) de l'objet, qui est en fait une adresse IP.
 * @param int      $object_id    L'identifiant de l'objet.
 *
 * @return int	Retourne l'identifiant de l'objet virtuel.
 *
 */
if(!function_exists('hw_mapidThis'))
{
    function hw_mapidThis($connection, $server_id, $object_id)
    {
		$connection = (int)$connection;
		$server_id = (int)$server_id;
		$object_id = (int)$object_id;

		return hw_mapid($connection, $server_id, $object_id);
    }
}

/**
 * hw_mvThis
 *
 * Déplace un objet.
 *
 * @link http://php.net/manual/fr/function.hw-mv.php Documentation pour hw_mv.
 *
 * @version PHP 4
 *
 * @param int      $connection    L'identifiant de connexion.
 * @param array    $object_id_array    Un tableau d'objets ids.
 * @param int      $source_id    L'identifiant du groupe source.
 * @param int      $destination_id    L'identifiant du groupe de destination. Si destination_id vaut 0, les objets ne seront plus insérés dans le groupe (ni dans le serveur). Dans ce cas, si une instance était la dernière instance d'un objet, l'objet sera effacé. Si vous voulez effacer toutes les instances d'un coup, utilisez hw_deleteobject().
 *
 * @return int	Retourne le nombre d'objets déplacés.
 *
 */
if(!function_exists('hw_mvThis'))
{
    function hw_mvThis($connection, $object_id_array, $source_id, $destination_id)
    {
		$connection = (int)$connection;
		$object_id_array = (array)$object_id_array;
		$source_id = (int)$source_id;
		$destination_id = (int)$destination_id;

		return hw_mv($connection, $object_id_array, $source_id, $destination_id);
    }
}

/**
 * hw_objrec2arrayThis
 *
 * Convertit les attributs d'un objet en tableau.
 *
 * @link http://php.net/manual/fr/function.hw-objrec2array.php Documentation pour hw_objrec2array.
 *
 * @version PHP 4
 *
 * @param string   $object_record    L'objet record.
 * @param array    $format    Un tableau associatif, avec les attributs comme index, le nom, et la valeur étant l'une des suivantes : HW_ATTR_LANG ou HW_ATTR_NONE.
 *
 * @return array	Retourne un tableau. Les clés du tableau seront les noms des attributs. Les attributs multiples comme "Title", dans différentes langues, seront rassemblés dans un autre tableau. Une clé est la partie gauche d'un attribut. Cette partie doit être longue d'au moins deux caractères.
 *
 */
if(!function_exists('hw_objrec2arrayThis'))
{
    function hw_objrec2arrayThis($object_record, $format = NULL)
    {
		$object_record = (string)$object_record;
		$format = (array)$format;

		return hw_objrec2array($object_record, $format);
    }
}

/**
 * hw_pConnectThis
 *
 * Crée une connexion persistante.
 *
 * @link http://php.net/manual/fr/function.hw-pconnect.php Documentation pour hw_pConnect.
 *
 * @version PHP 4
 *
 * @param string   $host    Le nom d'hôte du serveur.
 * @param int      $port    Le numéro du port du serveur.
 * @param string   $username    Le nom d'utilisateur Hyperwave. S'il n'est pas fourni, aucune identification avec le serveur ne sera effectuée. Ce sera une connexion anonyme.
 * @param string   $password    Le mot de passe. Attention, il ne sera pas crypté.
 *
 * @return int	Retourne un index de connexion en cas de succès, ou FALSE si la connexion n'a pû être établie.
 *
 */
if(!function_exists('hw_pConnectThis'))
{
    function hw_pConnectThis($host, $port, $username, $password = NULL)
    {
		$host = (string)$host;
		$port = (int)$port;
		$username = (string)$username;
		$password = (string)$password;

		return hw_pConnect($host, $port, $username, $password);
    }
}

/**
 * hw_setlinkrootThis
 *
 * Configure l'identifiant vers lequel les liens sont calculés.
 *
 * @link http://php.net/manual/fr/function.hw-setlinkroot.php Documentation pour hw_setlinkroot.
 *
 * @version PHP 4
 *
 * @param int      $link
 * @param int      $rootid
 *
 */
if(!function_exists('hw_setlinkrootThis'))
{
    function hw_setlinkrootThis($link, $rootid)
    {
		$link = (int)$link;
		$rootid = (int)$rootid;

		return hw_setlinkroot($link, $rootid);
    }
}

/**
 * hw_statThis
 *
 * Retourne le statut de la chaîne.
 *
 * @link http://php.net/manual/fr/function.hw-stat.php Documentation pour hw_stat.
 *
 * @version PHP 4
 *
 * @param int      $link
 *
 */
if(!function_exists('hw_statThis'))
{
    function hw_statThis($link)
    {
		$link = (int)$link;

		return hw_stat($link);
    }
}

/**
 * hwapi_attribute_newThis
 *
 * Crée une nouvelle instance de la classe hw_api_attribute.
 *
 * @link http://php.net/manual/fr/function.hwapi-attribute-new.php Documentation pour hwapi_attribute_new.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param string   $name    Le nom de l'attribut.
 * @param string   $value    La valeur de l'attribut.
 *
 * @return HW_API_Attribute	Retourne une instance de la classe hw_api_attribute.
 *
 */
if(!function_exists('hwapi_attribute_newThis'))
{
    function hwapi_attribute_newThis($name = NULL, $value = NULL)
    {
		$name = (string)$name;
		$value = (string)$value;

		return hwapi_attribute_new($name, $value);
    }
}

/**
 * hwapi_content_newThis
 *
 * Crée une nouvelle instance de la classe hw_api_content.
 *
 * @link http://php.net/manual/fr/function.hwapi-content-new.php Documentation pour hwapi_content_new.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param string   $content
 * @param string   $mimetype    Le type MIME du contenu.
 *
 */
if(!function_exists('hwapi_content_newThis'))
{
    function hwapi_content_newThis($content, $mimetype)
    {
		$content = (string)$content;
		$mimetype = (string)$mimetype;

		return hwapi_content_new($content, $mimetype);
    }
}

/**
 * hwapi_object_newThis
 *
 * Crée une nouvelle instance de la classe hwapi_object_new.
 *
 * @link http://php.net/manual/fr/function.hwapi-object-new.php Documentation pour hwapi_object_new.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param array    $parameter
 *
 */
if(!function_exists('hwapi_object_newThis'))
{
    function hwapi_object_newThis($parameter)
    {
		$parameter = (array)$parameter;

		return hwapi_object_new($parameter);
    }
}

/**
 * hypotThis
 *
 * Calcul la longueur de l'hypoténuse d'un triangle à angle droit.
 *
 * @link http://php.net/manual/fr/function.hypot.php Documentation pour hypot.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $x    Longueur du premier côté
 * @param float    $y    Longueur du second côté
 *
 * @return float	La longueur calculée de l'hypoténuse
 *
 */
if(!function_exists('hypotThis'))
{
    function hypotThis($x, $y)
    {
		$x = (float)$x;
		$y = (float)$y;

		return hypot($x, $y);
    }
}

/**
 * ibase_add_userThis
 *
 * Ajoute un utilisateur à une base de données de sécurité.
 *
 * @link http://php.net/manual/fr/function.ibase-add-user.php Documentation pour ibase_add_user.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param string   $user_name
 * @param string   $password
 * @param string   $first_name
 * @param string   $middle_name
 * @param string   $last_name
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_add_userThis'))
{
    function ibase_add_userThis($service_handle, $user_name, $password, $first_name = NULL, $middle_name = NULL, $last_name = NULL)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$user_name = (string)$user_name;
		$password = (string)$password;
		$first_name = (string)$first_name;
		$middle_name = (string)$middle_name;
		$last_name = (string)$last_name;

		return ibase_add_user($service_handle, $user_name, $password, $first_name, $middle_name, $last_name);
    }
}

/**
 * ibase_affected_rowsThis
 *
 * Retourne le nombre de lignes affectées par la dernière requête iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-affected-rows.php Documentation pour ibase_affected_rows.
 *
 * @version PHP 5
 *
 * @param resource $link_identifier    Un contexte de transaction. Si link_identifier est une ressource de connexion, la transaction par défaut est utilisée.
 *
 * @return int	Retourne le nombre de lignes, sous la forme d'un entier.
 *
 */
if(!function_exists('ibase_affected_rowsThis'))
{
    function ibase_affected_rowsThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return ibase_affected_rows($link_identifier);
    }
}

/**
 * ibase_backupThis
 *
 * Effectue une sauvegarde de base de données InterBase.
 *
 * @link http://php.net/manual/fr/function.ibase-backup.php Documentation pour ibase_backup.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param string   $source_db
 * @param string   $dest_file
 * @param int      $options
 * @param bool     $verbose
 *
 */
if(!function_exists('ibase_backupThis'))
{
    function ibase_backupThis($service_handle, $source_db, $dest_file, $options = 0, $verbose = false)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$source_db = (string)$source_db;
		$dest_file = (string)$dest_file;
		$options = (int)$options;
		$verbose = (bool)$verbose;

		return ibase_backup($service_handle, $source_db, $dest_file, $options, $verbose);
    }
}

/**
 * ibase_blob_addThis
 *
 * Ajoute des données dans un BLOB iBase fraîchement créé.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-add.php Documentation pour ibase_blob_add.
 *
 * @version PHP 5
 *
 * @param resource $blob_handle    Une ressource blob, ouverte avec la fonction ibase_blob_create().
 * @param string   $data    Les données à ajouter.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('ibase_blob_addThis'))
{
    function ibase_blob_addThis($blob_handle, $data)
    {
		$blob_handle = is_resource($blob_handle) ? $blob_handle : NULL;
		$data = (string)$data;

		return ibase_blob_add($blob_handle, $data);
    }
}

/**
 * ibase_blob_cancelThis
 *
 * Annule la création d'un BLOB iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-cancel.php Documentation pour ibase_blob_cancel.
 *
 * @version PHP 5
 *
 * @param resource $blob_handle    Une ressource blob, ouverte avec la fonction ibase_blob_create().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_blob_cancelThis'))
{
    function ibase_blob_cancelThis($blob_handle)
    {
		$blob_handle = is_resource($blob_handle) ? $blob_handle : NULL;

		return ibase_blob_cancel($blob_handle);
    }
}

/**
 * ibase_blob_closeThis
 *
 * Ferme un BLOB iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-close.php Documentation pour ibase_blob_close.
 *
 * @version PHP 5
 *
 * @param resource $blob_handle    Une ressource blob, ouverte avec la fonction ibase_blob_create() ou la fonction ibase_blob_open().
 *
 * @return mixed	Si le BLOB était lu, ibase_blob_close() retourne TRUE en cas de succès, s'il était en cours de modification, ibase_blob_close() retourne une chaîne de caractères contenant l'identifiant du BLOB qui lui a été assigné par la base de données. En cas d'échec, cette fonction retournera FALSE.
 *
 */
if(!function_exists('ibase_blob_closeThis'))
{
    function ibase_blob_closeThis($blob_handle)
    {
		$blob_handle = is_resource($blob_handle) ? $blob_handle : NULL;

		return ibase_blob_close($blob_handle);
    }
}

/**
 * ibase_blob_createThis
 *
 * Crée un BLOB iBase pour ajouter des données.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-create.php Documentation pour ibase_blob_create.
 *
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 *
 * @return resource	Retourne un identifiant de BLOB à utiliser avec ibase_blob_add() ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_blob_createThis'))
{
    function ibase_blob_createThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return ibase_blob_create($link_identifier);
    }
}

/**
 * ibase_blob_echoThis
 *
 * Affiche le contenu d'un BLOB iBase au navigateur.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-echo.php Documentation pour ibase_blob_echo.
 *
 * @version PHP 5
 *
 * @param string   $blob_id    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_blob_echoThis'))
{
    function ibase_blob_echoThis($blob_id)
    {
		$blob_id = (string)$blob_id;

		return ibase_blob_echo($blob_id);
    }
}

/**
 * ibase_blob_getThis
 *
 * Lit len octets de données dans un BLOB iBase ouvert.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-get.php Documentation pour ibase_blob_get.
 *
 * @version PHP 5
 *
 * @param resource $blob_handle    Une ressource blob, ouverte avec la fonction ibase_blob_open().
 * @param int      $len    La taille des données retournées.
 *
 * @return string	Retourne au plus, len octets du BLOB, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_blob_getThis'))
{
    function ibase_blob_getThis($blob_handle, $len)
    {
		$blob_handle = is_resource($blob_handle) ? $blob_handle : NULL;
		$len = (int)$len;

		return ibase_blob_get($blob_handle, $len);
    }
}

/**
 * ibase_blob_importThis
 *
 * Crée un BLOB iBase, y copie un fichier et le referme.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-import.php Documentation pour ibase_blob_import.
 *
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 * @param resource $file_handle    La ressource de fichier, retournée par la fonction fopen().
 *
 * @return string	Retourne l'identifiant du BLOB en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_blob_importThis'))
{
    function ibase_blob_importThis($link_identifier, $file_handle)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$file_handle = is_resource($file_handle) ? $file_handle : NULL;

		return ibase_blob_import($link_identifier, $file_handle);
    }
}

/**
 * ibase_blob_infoThis
 *
 * Retourne la taille d'un BLOB iBase et d'autres informations utiles.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-info.php Documentation pour ibase_blob_info.
 *
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 * @param string   $blob_id    L'identifiant du BLOB.
 *
 * @return array	Retourne un tableau contenant des informations à propos du BLOB blob_id. Les informations sont la taille du BLOB, le nombre de segments qu'il contient, la taille du segment le plus large, et indiquent s'il s'agit d'un BLOB stream ou segmenté.
 *
 */
if(!function_exists('ibase_blob_infoThis'))
{
    function ibase_blob_infoThis($link_identifier, $blob_id)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$blob_id = (string)$blob_id;

		return ibase_blob_info($link_identifier, $blob_id);
    }
}

/**
 * ibase_blob_openThis
 *
 * Ouvre un BLOB iBase pour récupérer des parties de données.
 *
 * @link http://php.net/manual/fr/function.ibase-blob-open.php Documentation pour ibase_blob_open.
 *
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 * @param string   $blob_id    L'identifiant du BLOB.
 *
 * @return resource	Retourne une ressource BLOB pour une utilisation avec la fonction ibase_blob_get() ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_blob_openThis'))
{
    function ibase_blob_openThis($link_identifier, $blob_id)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$blob_id = (string)$blob_id;

		return ibase_blob_open($link_identifier, $blob_id);
    }
}

/**
 * ibase_closeThis
 *
 * Ferme une connexion à une base de données Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-close.php Documentation pour ibase_close.
 *
 * @version PHP 5
 *
 * @param resource $connection_id    Un identifiant de connexion à InterBase, retourné par la fonction ibase_connect(). S'il est omis, la dernière connexion ouverte sera utilisée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_closeThis'))
{
    function ibase_closeThis($connection_id = NULL)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return ibase_close($connection_id);
    }
}

/**
 * ibase_commitThis
 *
 * Valide une transaction iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-commit.php Documentation pour ibase_commit.
 *
 * @version PHP 5
 *
 * @param resource $link_or_trans_identifier    Appelée sans argument, elle valide la transaction par défaut de la connexion par défaut. Si l'argument link_or_trans_identifier est un identifiant de connexion, sa transaction par défaut est validée. Si l'argument link_or_trans_identifier est un identifiant de transaction, celle-ci sera validée. Le contexte de transaction sera retenu et, donc, les requêtes exécutées dans cette transaction ne seront pas invalidées.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_commitThis'))
{
    function ibase_commitThis($link_or_trans_identifier = NULL)
    {
		$link_or_trans_identifier = is_resource($link_or_trans_identifier) ? $link_or_trans_identifier : NULL;

		return ibase_commit($link_or_trans_identifier);
    }
}

/**
 * ibase_commit_retThis
 *
 * Valide une transaction iBase sans la refermer.
 *
 * @link http://php.net/manual/fr/function.ibase-commit-ret.php Documentation pour ibase_commit_ret.
 *
 * @version PHP 5
 *
 * @param resource $link_or_trans_identifier    Appelée sans argument, elle valide la transaction par défaut de la connexion par défaut. Si l'argument link_or_trans_identifier est un identifiant de connexion, sa transaction par défaut est validée. Si l'argument link_or_trans_identifier est un identifiant de transaction, celle-ci sera validée. Le contexte de transaction sera retenu et, donc, les requêtes exécutées dans cette transaction ne seront pas invalidées.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_commit_retThis'))
{
    function ibase_commit_retThis($link_or_trans_identifier = NULL)
    {
		$link_or_trans_identifier = is_resource($link_or_trans_identifier) ? $link_or_trans_identifier : NULL;

		return ibase_commit_ret($link_or_trans_identifier);
    }
}

/**
 * ibase_connectThis
 *
 * Ouvre une connexion à une base de données.
 *
 * @link http://php.net/manual/fr/function.ibase-connect.php Documentation pour ibase_connect.
 *
 * @version PHP 5
 *
 * @param string   $database    database doit être un chemin valide jusqu'à un fichier de base de données sur le serveur sur lequel il réside. Si le serveur est distant, il faut le préfixer avec un nom d'hôte 'hostname:' (TCP/IP) ou '//hostname/' (NetBEUI) en fonction du protocole de communication utilisé.
 * @param string   $username    Le nom d'utilisateur. Peut être défini avec la directive ibase.default_user du fichier php.ini.
 * @param string   $password    Le mot de passe correspondant à l'utilisateur username. Peut être défini avec la directive ibase.default_password du fichier php.ini.
 * @param string   $charset    charset est le jeu de caractères par défaut pour la base de données.
 * @param int      $buffers    buffers est le nombre de buffer de base à allouer pour le cache serveur. S'il est passé à 0 ou omis, le serveur le choisira de lui-même.
 * @param int      $dialect    dialect sélectionne le dialecte SQL pour les requêtes exécutées avec cette connexion et, par défaut, il utilise le meilleur dialecte disponible.
 * @param string   $role    Ne fonctionne qu'avec InterBase 5 et supérieur.
 * @param int      $sync
 *
 * @return resource	Retourne un identifiant de connexion Firebird/InterBase en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_connectThis'))
{
    function ibase_connectThis($database = NULL, $username = NULL, $password = NULL, $charset = NULL, $buffers = NULL, $dialect = NULL, $role = NULL, $sync = NULL)
    {
		$database = (string)$database;
		$username = (string)$username;
		$password = (string)$password;
		$charset = (string)$charset;
		$buffers = (int)$buffers;
		$dialect = (int)$dialect;
		$role = (string)$role;
		$sync = (int)$sync;

		return ibase_connect($database, $username, $password, $charset, $buffers, $dialect, $role, $sync);
    }
}

/**
 * ibase_db_infoThis
 *
 * Demande des statistiques sur une base de données Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-db-info.php Documentation pour ibase_db_info.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param string   $db
 * @param int      $action
 * @param int      $argument
 *
 */
if(!function_exists('ibase_db_infoThis'))
{
    function ibase_db_infoThis($service_handle, $db, $action, $argument = 0)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$db = (string)$db;
		$action = (int)$action;
		$argument = (int)$argument;

		return ibase_db_info($service_handle, $db, $action, $argument);
    }
}

/**
 * ibase_delete_userThis
 *
 * Efface un utilisateur d'une base de données de sécurité.
 *
 * @link http://php.net/manual/fr/function.ibase-delete-user.php Documentation pour ibase_delete_user.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param string   $user_name
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_delete_userThis'))
{
    function ibase_delete_userThis($service_handle, $user_name)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$user_name = (string)$user_name;

		return ibase_delete_user($service_handle, $user_name);
    }
}

/**
 * ibase_drop_dbThis
 *
 * Supprime une base de données iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-drop-db.php Documentation pour ibase_drop_db.
 *
 * @version PHP 5
 *
 * @param resource $connection    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_drop_dbThis'))
{
    function ibase_drop_dbThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return ibase_drop_db($connection);
    }
}

/**
 * ibase_errcodeThis
 *
 * Retourne le code d'erreur iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-errcode.php Documentation pour ibase_errcode.
 *
 * @version PHP 5
 * @return int	Retourne le code erreur, sous la forme d'un entier, ou FALSE si aucune erreur n'est survenue.
 *
 */
if(!function_exists('ibase_errcodeThis'))
{
    function ibase_errcodeThis()
    {
		return ibase_errcode();
    }
}

/**
 * ibase_errmsgThis
 *
 * Retourne un message d'erreur.
 *
 * @link http://php.net/manual/fr/function.ibase-errmsg.php Documentation pour ibase_errmsg.
 *
 * @version PHP 5
 * @return string	Retourne le message d'erreur, sous la forme d'une chaîne de caractères, ou FALSE si aucune erreur n'est survenue.
 *
 */
if(!function_exists('ibase_errmsgThis'))
{
    function ibase_errmsgThis()
    {
		return ibase_errmsg();
    }
}

/**
 * ibase_executeThis
 *
 * Exécute une requête iBase préparée.
 *
 * @link http://php.net/manual/fr/function.ibase-execute.php Documentation pour ibase_execute.
 *
 * @version PHP 5
 *
 * @param resource $query    Une requête InterBase, préparée avec la fonction ibase_prepare().
 * @param mixed     $bind_arg
 * @param mixed     $item
 *
 * @return resource	Si la requête émet une erreur, la fonction retournera FALSE. Si la requête réussie, et qu'il y a un jeu de résultats (pouvant être vide), la fonction retourne un identifiant de résultats. Si la requête réussie et qu'il n'y a pas de résultat, la fonction retourne TRUE.
 *
 */
if(!function_exists('ibase_executeThis'))
{
    function ibase_executeThis($query, $bind_arg = NULL, $bind_arg1 = NULL)
    {
		$query = is_resource($query) ? $query : NULL;
		$bind_arg = ($bind_arg);
		$bind_arg1 = ($bind_arg1);
		return ibase_execute($query, $bind_arg, $bind_arg1);
    }
}

/**
 * ibase_fetch_assocThis
 *
 * Récupère une ligne du résultat d'une requête dans un tableau associatif.
 *
 * @link http://php.net/manual/fr/function.ibase-fetch-assoc.php Documentation pour ibase_fetch_assoc.
 *
 * @version PHP 5
 *
 * @param resource $result    Le jeu de résultats.
 * @param int      $fetch_flag    fetch_flag est une combinaison des constantes IBASE_TEXT et IBASE_UNIXTIME. Passer IBASE_TEXT fait retourner le contenu du BLOB au lieu de l'ID du BLOB. Passer IBASE_UNIXTIME fait retourner les valeurs date/time sous forme de timestamps UNIX au lieu de chaînes formatées.
 *
 * @return array	Retourne un tableau associatif qui correspond à la ligne récupérée. Les appels suivants renvoient la ligne qui suit dans le jeu de résultats, ou FALSE s'il n'y a plus de lignes.
 *
 */
if(!function_exists('ibase_fetch_assocThis'))
{
    function ibase_fetch_assocThis($result, $fetch_flag = 0)
    {
		$result = is_resource($result) ? $result : NULL;
		$fetch_flag = (int)$fetch_flag;

		return ibase_fetch_assoc($result, $fetch_flag);
    }
}

/**
 * ibase_fetch_objectThis
 *
 * Lit une ligne dans une base Interbase dans un objet.
 *
 * @link http://php.net/manual/fr/function.ibase-fetch-object.php Documentation pour ibase_fetch_object.
 *
 * @version PHP 5
 *
 * @param resource $result_id    Un identifiant de résultat InterBase, obtenu soit par la fonction ibase_query(), soit par la fonction ibase_execute().
 * @param int      $fetch_flag    fetch_flag est une combinaison des constantes IBASE_TEXT et IBASE_UNIXTIME. Passer IBASE_TEXT fait retourner le contenu du BLOB au lieu de l'ID du BLOB. Passer IBASE_UNIXTIME fait retourner les valeurs date/time sous forme de timestamps UNIX au lieu de chaînes formatées.
 *
 * @return object	Retourne un objet contenant les informations de la ligne, ou FALSE s'il n'y a plus de ligne.
 *
 */
if(!function_exists('ibase_fetch_objectThis'))
{
    function ibase_fetch_objectThis($result_id, $fetch_flag = 0)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$fetch_flag = (int)$fetch_flag;

		return ibase_fetch_object($result_id, $fetch_flag);
    }
}

/**
 * ibase_fetch_rowThis
 *
 * Lit une ligne d'une base Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-fetch-row.php Documentation pour ibase_fetch_row.
 *
 * @version PHP 5
 *
 * @param resource $result_identifier    Un identifiant de résultat InterBase.
 * @param int      $fetch_flag    fetch_flag est une combinaison des constantes IBASE_TEXT et IBASE_UNIXTIME. Passer IBASE_TEXT fait retourner le contenu du BLOB au lieu de l'ID du BLOB. Passer IBASE_UNIXTIME fait retourner les valeurs date/time sous forme de timestamps UNIX au lieu de chaînes formatées.
 *
 * @return array	Retourne un tableau correspondant à la ligne récupérée, ou FALSE s'il n'y a plus de ligne. Chaque colonne du résultat est stockée dans une position du tableau, en commençant à 0.
 *
 */
if(!function_exists('ibase_fetch_rowThis'))
{
    function ibase_fetch_rowThis($result_identifier, $fetch_flag = 0)
    {
		$result_identifier = is_resource($result_identifier) ? $result_identifier : NULL;
		$fetch_flag = (int)$fetch_flag;

		return ibase_fetch_row($result_identifier, $fetch_flag);
    }
}

/**
 * ibase_field_infoThis
 *
 * Lit les informations sur un champ iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-field-info.php Documentation pour ibase_field_info.
 *
 * @version PHP 5
 *
 * @param resource $result    Un identifiant de résultat InterBase.
 * @param int      $field_number    Position du champ.
 *
 * @return array	Retourne un tableau contenant les clés suivantes : name, alias, relation, length et type.
 *
 */
if(!function_exists('ibase_field_infoThis'))
{
    function ibase_field_infoThis($result, $field_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_number = (int)$field_number;

		return ibase_field_info($result, $field_number);
    }
}

/**
 * ibase_free_event_handlerThis
 *
 * Libère un gestionnaire d'événements iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-free-event-handler.php Documentation pour ibase_free_event_handler.
 *
 * @version PHP 5
 *
 * @param resource $event    Une ressource d'événement, créée par la fonction ibase_set_event_handler().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_free_event_handlerThis'))
{
    function ibase_free_event_handlerThis($event)
    {
		$event = is_resource($event) ? $event : NULL;

		return ibase_free_event_handler($event);
    }
}

/**
 * ibase_free_queryThis
 *
 * Libère la mémoire réservée par une requête préparée.
 *
 * @link http://php.net/manual/fr/function.ibase-free-query.php Documentation pour ibase_free_query.
 *
 * @version PHP 5
 *
 * @param resource $query    Une requête préparée avec la fonction ibase_prepare().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_free_queryThis'))
{
    function ibase_free_queryThis($query)
    {
		$query = is_resource($query) ? $query : NULL;

		return ibase_free_query($query);
    }
}

/**
 * ibase_free_resultThis
 *
 * Libère un résultat iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-free-result.php Documentation pour ibase_free_result.
 *
 * @version PHP 5
 *
 * @param resource $result_identifier    Un jeu de caractères, créé par la fonction ibase_query() ou par la fonction ibase_execute().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_free_resultThis'))
{
    function ibase_free_resultThis($result_identifier)
    {
		$result_identifier = is_resource($result_identifier) ? $result_identifier : NULL;

		return ibase_free_result($result_identifier);
    }
}

/**
 * ibase_gen_idThis
 *
 * Incrémente le générateur donné et retourne sa nouvelle valeur.
 *
 * @link http://php.net/manual/fr/function.ibase-gen-id.php Documentation pour ibase_gen_id.
 *
 * @version PHP 5
 *
 * @param string   $generator
 * @param int      $increment
 * @param resource $link_identifier
 *
 * @return mixed	Retourne une nouvelle valeur générée sous la forme d'un entier ou d'une chaîne de caractères si la valeur est trop grosse.
 *
 */
if(!function_exists('ibase_gen_idThis'))
{
    function ibase_gen_idThis($generator, $increment = 1, $link_identifier = NULL)
    {
		$generator = (string)$generator;
		$increment = (int)$increment;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return ibase_gen_id($generator, $increment, $link_identifier);
    }
}

/**
 * ibase_maintain_dbThis
 *
 * Exécute une commande de maintenance sur une base de données Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-maintain-db.php Documentation pour ibase_maintain_db.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param string   $db
 * @param int      $action
 * @param int      $argument
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_maintain_dbThis'))
{
    function ibase_maintain_dbThis($service_handle, $db, $action, $argument = 0)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$db = (string)$db;
		$action = (int)$action;
		$argument = (int)$argument;

		return ibase_maintain_db($service_handle, $db, $action, $argument);
    }
}

/**
 * ibase_modify_userThis
 *
 * Modifie un utilisateur dans une base de données de sécurité.
 *
 * @link http://php.net/manual/fr/function.ibase-modify-user.php Documentation pour ibase_modify_user.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param string   $user_name
 * @param string   $password
 * @param string   $first_name
 * @param string   $middle_name
 * @param string   $last_name
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_modify_userThis'))
{
    function ibase_modify_userThis($service_handle, $user_name, $password, $first_name = NULL, $middle_name = NULL, $last_name = NULL)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$user_name = (string)$user_name;
		$password = (string)$password;
		$first_name = (string)$first_name;
		$middle_name = (string)$middle_name;
		$last_name = (string)$last_name;

		return ibase_modify_user($service_handle, $user_name, $password, $first_name, $middle_name, $last_name);
    }
}

/**
 * ibase_name_resultThis
 *
 * Assigne un nom à un jeu de résultats iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-name-result.php Documentation pour ibase_name_result.
 *
 * @version PHP 5
 *
 * @param resource $result    Un jeu de résultats InterBase.
 * @param string   $name    Le nom à assigner.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_name_resultThis'))
{
    function ibase_name_resultThis($result, $name)
    {
		$result = is_resource($result) ? $result : NULL;
		$name = (string)$name;

		return ibase_name_result($result, $name);
    }
}

/**
 * ibase_num_fieldsThis
 *
 * Retourne le nombre de colonnes dans un résultat iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-num-fields.php Documentation pour ibase_num_fields.
 *
 * @version PHP 5
 *
 * @param resource $result_id    Un identifiant de résultat InterBase.
 *
 * @return int	Retourne le nombre de champs, sous la forme d'un entier.
 *
 */
if(!function_exists('ibase_num_fieldsThis'))
{
    function ibase_num_fieldsThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ibase_num_fields($result_id);
    }
}

/**
 * ibase_num_paramsThis
 *
 * Retourne le nombre de paramètres dans une requête préparée iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-num-params.php Documentation pour ibase_num_params.
 *
 * @version PHP 5
 *
 * @param resource $query    La requête préparée.
 *
 * @return int	Retourne le nombre de paramètres, sous la forme d'un entier.
 *
 */
if(!function_exists('ibase_num_paramsThis'))
{
    function ibase_num_paramsThis($query)
    {
		$query = is_resource($query) ? $query : NULL;

		return ibase_num_params($query);
    }
}

/**
 * ibase_param_infoThis
 *
 * Retourne des informations à propos d'un paramètre dans une requête préparée iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-param-info.php Documentation pour ibase_param_info.
 *
 * @version PHP 5
 *
 * @param resource $query    Un gestionnaire de requête préparée InterBase.
 * @param int      $param_number    La position du paramètre.
 *
 * @return array	Retourne un tableau contenant les clés suivantes : name, alias, relation, length et type.
 *
 */
if(!function_exists('ibase_param_infoThis'))
{
    function ibase_param_infoThis($query, $param_number)
    {
		$query = is_resource($query) ? $query : NULL;
		$param_number = (int)$param_number;

		return ibase_param_info($query, $param_number);
    }
}

/**
 * ibase_pconnectThis
 *
 * Ouvre une connexion persistante à une base de données InterBase.
 *
 * @link http://php.net/manual/fr/function.ibase-pconnect.php Documentation pour ibase_pconnect.
 *
 * @version PHP 5
 *
 * @param string   $database    L'argument database doit être un chemin valide vers le fichier de la base de données sur le serveur où il réside. Si le serveur n'est pas local, il doit être préfixé avec soit 'hostname:' (TCP/IP), '//hostname/' (NetBEUI) ou 'hostname@' (IPX/SPX), suivant le protocole utilisé.
 * @param string   $username    Le nom d'utilisateur. Peut être défini avec la directive ibase.default_user du php.ini.
 * @param string   $password    Le mot de passe pour l'utilisateur username. Peut être défini avec la directive ibase.default_password du php.ini.
 * @param string   $charset    charset est le jeu de caractères par défaut pour la base de données.
 * @param int      $buffers    buffers est le nombre de buffers de la base de données à allouer pour le cache côté serveur. Si ce paramètre vaut 0 ou s'il est omis, le serveur choisira lui-même ce nombre.
 * @param int      $dialect    dialect sélectionne le dialecte SQL par défaut pour toutes les requêtes exécutées dans la connexion, et vaudra par défaut, le plus haut supporté par la bibliothèque cliente. Ne fonctionne qu'avec InterBase 6 et supérieur.
 * @param string   $role    Ne fonctionne qu'avec InterBase 5 et supérieur.
 * @param int      $sync
 *
 * @return resource	Retourne un identifiant de connexion InterBase en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_pconnectThis'))
{
    function ibase_pconnectThis($database = NULL, $username = NULL, $password = NULL, $charset = NULL, $buffers = NULL, $dialect = NULL, $role = NULL, $sync = NULL)
    {
		$database = (string)$database;
		$username = (string)$username;
		$password = (string)$password;
		$charset = (string)$charset;
		$buffers = (int)$buffers;
		$dialect = (int)$dialect;
		$role = (string)$role;
		$sync = (int)$sync;

		return ibase_pconnect($database, $username, $password, $charset, $buffers, $dialect, $role, $sync);
    }
}

/**
 * ibase_prepareThis
 *
 * Prépare une requête iBase pour lier les paramètres et l'exécuter ultérieurement.
 *
 * @link http://php.net/manual/fr/function.ibase-prepare.php Documentation pour ibase_prepare.
 *
 * @version PHP 5
 *
 * @param string   $query    Une requête InterBase.
 *
 * @return resource	Retourne un gestionnaire de requête préparée, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_prepareThis'))
{
    function ibase_prepareThis($query)
    {
		$query = (string)$query;

		return ibase_prepare($query);
    }
}

/**
 * ibase_queryThis
 *
 * Exécute une requête sur une base iBase.
 *
 * @link http://php.net/manual/fr/function.ibase-query.php Documentation pour ibase_query.
 *
 * @version PHP 5
 *
 * @param resource $link_identifier    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 * @param string   $query    Une requête InterBase.
 * @param int      $bind_args
 *
 * @return resource	Si la requête émet une erreur, la fonction retournera FALSE. Si la requête est exécutée avec succès, et qu'il y a un jeu de résultats (même vide), la fonction retournera un identifiant de résultat. Si la requête est exécutée avec succès, et qu'il n'y a pas de résultat, la fonction retournera TRUE.
 *
 */
if(!function_exists('ibase_queryThis'))
{
    function ibase_queryThis($link_identifier, $query = NULL, $bind_args = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$query = (string)$query;
		$bind_args = (int)$bind_args;

		return ibase_query($link_identifier, $query, $bind_args);
    }
}

/**
 * ibase_restoreThis
 *
 * Restaure une sauvegarde de base de données Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-restore.php Documentation pour ibase_restore.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param string   $source_file
 * @param string   $dest_db
 * @param int      $options
 * @param bool     $verbose
 *
 */
if(!function_exists('ibase_restoreThis'))
{
    function ibase_restoreThis($service_handle, $source_file, $dest_db, $options = 0, $verbose = false)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$source_file = (string)$source_file;
		$dest_db = (string)$dest_db;
		$options = (int)$options;
		$verbose = (bool)$verbose;

		return ibase_restore($service_handle, $source_file, $dest_db, $options, $verbose);
    }
}

/**
 * ibase_rollbackThis
 *
 * Annule une transaction interBase.
 *
 * @link http://php.net/manual/fr/function.ibase-rollback.php Documentation pour ibase_rollback.
 *
 * @version PHP 5
 *
 * @param resource $link_or_trans_identifier    Lorsque ibase_rollback() est appelée sans argument, elle annule la transaction par défaut du lien par défaut. Si l'argument link_or_trans_identifier est un identifiant de connexion, la transaction par défaut de cette connexion sera annulée. Si l'argument link_or_trans_identifier est un identifiant de transaction, celle-ci sera annulée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_rollbackThis'))
{
    function ibase_rollbackThis($link_or_trans_identifier = NULL)
    {
		$link_or_trans_identifier = is_resource($link_or_trans_identifier) ? $link_or_trans_identifier : NULL;

		return ibase_rollback($link_or_trans_identifier);
    }
}

/**
 * ibase_rollback_retThis
 *
 * Annule une transaction sans la fermer.
 *
 * @link http://php.net/manual/fr/function.ibase-rollback-ret.php Documentation pour ibase_rollback_ret.
 *
 * @version PHP 5
 *
 * @param resource $link_or_trans_identifier    Si ibase_rollback_ret() est appelée sans argument, elle annule la transaction par défaut du lien par défaut. Si l'argument link_or_trans_identifier est un identifiant de connexion, la transaction par défaut de cette connexion sera annulée. Si l'argument link_or_trans_identifier est un identifiant de transaction, celle-ci sera annulée. Le contexte de transaction sera retenu et, donc, les requêtes exécutées dans cette transaction ne seront pas invalidées.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_rollback_retThis'))
{
    function ibase_rollback_retThis($link_or_trans_identifier = NULL)
    {
		$link_or_trans_identifier = is_resource($link_or_trans_identifier) ? $link_or_trans_identifier : NULL;

		return ibase_rollback_ret($link_or_trans_identifier);
    }
}

/**
 * ibase_server_infoThis
 *
 * Demande des informations sur le serveur Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-server-info.php Documentation pour ibase_server_info.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 * @param int      $action
 *
 */
if(!function_exists('ibase_server_infoThis'))
{
    function ibase_server_infoThis($service_handle, $action)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;
		$action = (int)$action;

		return ibase_server_info($service_handle, $action);
    }
}

/**
 * ibase_service_attachThis
 *
 * Connexion au service de gestion Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-service-attach.php Documentation pour ibase_service_attach.
 *
 * @version PHP 5
 *
 * @param string   $host
 * @param string   $dba_username
 * @param string   $dba_password
 *
 */
if(!function_exists('ibase_service_attachThis'))
{
    function ibase_service_attachThis($host, $dba_username, $dba_password)
    {
		$host = (string)$host;
		$dba_username = (string)$dba_username;
		$dba_password = (string)$dba_password;

		return ibase_service_attach($host, $dba_username, $dba_password);
    }
}

/**
 * ibase_service_detachThis
 *
 * Déconnexion du service de gestion Interbase.
 *
 * @link http://php.net/manual/fr/function.ibase-service-detach.php Documentation pour ibase_service_detach.
 *
 * @version PHP 5
 *
 * @param resource $service_handle
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_service_detachThis'))
{
    function ibase_service_detachThis($service_handle)
    {
		$service_handle = is_resource($service_handle) ? $service_handle : NULL;

		return ibase_service_detach($service_handle);
    }
}

/**
 * ibase_set_event_handlerThis
 *
 * Enregistre une fonction de rappel sur un événement interBase.
 *
 * @link http://php.net/manual/fr/function.ibase-set-event-handler.php Documentation pour ibase_set_event_handler.
 *
 * @version PHP 5
 *
 * @param callable     $event_handler    Fonction de rappel appelée avec le nom de l'événement et la ressource de connexion en tant qu'arguments dès qu'un événement spécifié est posté dans la base de données. La fonction de rappel event_handler doit retourner FALSE si le gestionnaire doit être annulé. Toute autre valeur de retour est ignorée. Cette fonction accepte jusqu'à 15 arguments d'événement.
 * @param string   $event_name1    Le nom de l'événement.
 * @param string   $event_name2    15 événements tout au plus sont autorisés.
 * @param string   $item
 *
 * @return resource	La valeur retournée est une ressource d'événement. Elle peut être utilisée pour libérer le gestionnaire d'événements en utilisant ibase_free_event_handler().
 *
 */
if(!function_exists('ibase_set_event_handlerThis'))
{
    function ibase_set_event_handlerThis($event_handler, $event_name1, $event_name2 = NULL, $event_name3 = NULL)
    {
		$event_handler = is_callable($event_handler) ? $event_handler : NULL;
		$event_name1 = (string)$event_name1;
		$event_name2 = (string)$event_name2;
		$event_name3 = (string)$event_name3;

		return ibase_set_event_handler($event_handler, $event_name1, $event_name2, $event_name3);
    }
}

/**
 * ibase_transThis
 *
 * Prépare une transaction interBase.
 *
 * @link http://php.net/manual/fr/function.ibase-trans.php Documentation pour ibase_trans.
 *
 * @version PHP 5
 *
 * @param int      $trans_args    trans_args peut être une combinaison des constantes suivantes : IBASE_READ, IBASE_WRITE, IBASE_COMMITTED, IBASE_CONSISTENCY, IBASE_CONCURRENCY, IBASE_REC_VERSION, IBASE_REC_NO_VERSION, IBASE_WAIT et IBASE_NOWAIT.
 * @param resource $link_identifier    Un identifiant de connexion à InterBase. S'il est omis, la dernière connexion ouverte sera utilisée.
 *
 * @return resource	Retourne une ressource de transaction, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ibase_transThis'))
{
    function ibase_transThis($trans_args = NULL, $link_identifier = NULL)
    {
		$trans_args = (int)$trans_args;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return ibase_trans($trans_args, $link_identifier);
    }
}

/**
 * ibase_wait_eventThis
 *
 * Attend un événement interBase.
 *
 * @link http://php.net/manual/fr/function.ibase-wait-event.php Documentation pour ibase_wait_event.
 *
 * @version PHP 5
 *
 * @param string   $event_name1    Le nom de l'événement.
 * @param string   $event_name2
 * @param string   $item
 *
 * @return string	Retourne le nom de l'événement qui a été posté.
 *
 */
if(!function_exists('ibase_wait_eventThis'))
{
    function ibase_wait_eventThis($event_name1, $event_name2 = NULL, $event_name3 = NULL)
    {
		$event_name1 = (string)$event_name1;
		$event_name2 = (string)$event_name2;
		$event_name3 = (string)$event_name3;

		return ibase_wait_event($event_name1, $event_name2, $event_name3);
    }
}

/**
 * iconvThis
 *
 * Convertit une chaîne dans un jeu de caractères.
 *
 * @link http://php.net/manual/fr/function.iconv.php Documentation pour iconv.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $in_charset    Le jeu de caractères d'entrée.
 * @param string   $out_charset    Le jeu de caractères de sortie. Si vous ajoutez la chaîne //TRANSLIT au paramètre out_charset, la translittération est activée. Cela signifie que lorsqu'un caractère ne peut être représenté dans le jeu de caractères cible, il peut être représenté approximativement à partir d'un ou plusieurs caractères représentant le même caractère. Si vous ajoutez la chaîne //IGNORE, les caractères qui ne peuvent être représentés dans le jeu de caractères cible sont tout simplement ignorés. Sinon, str sera coupé à partir du premier caractère illégal rencontré et une erreur E_NOTICE sera générée.
 * @param string   $str    La chaîne de caractères à convertir.
 *
 * @return string	Retourne la chaîne de caractères convertie ou FALSE si une erreur survient.
 *
 */
if(!function_exists('iconvThis'))
{
    function iconvThis($in_charset, $out_charset, $str)
    {
		$in_charset = (string)$in_charset;
		$out_charset = (string)$out_charset;
		$str = (string)$str;

		return iconv($in_charset, $out_charset, $str);
    }
}

/**
 * iconv_get_encodingThis
 *
 * Lit le jeu de caractères courant.
 *
 * @link http://php.net/manual/fr/function.iconv-get-encoding.php Documentation pour iconv_get_encoding.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $type    Les valeurs possibles pour le paramètre optionnel type sont :
 *
 * @return mixed	Retourne la valeur courante de la variable de configuration en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('iconv_get_encodingThis'))
{
    function iconv_get_encodingThis($type = "all")
    {
		$type = (string)$type;

		return iconv_get_encoding($type);
    }
}

/**
 * iconv_mime_decodeThis
 *
 * Décode un champ d'en-tête MIME.
 *
 * @link http://php.net/manual/fr/function.iconv-mime-decode.php Documentation pour iconv_mime_decode.
 *
 * @version PHP 5
 *
 * @param string   $encoded_header    L'en-tête encodé, sous la forme d'une chaîne de caractères.
 * @param int      $mode    mode détermine une alternative dans le cas où iconv_mime_decode() rencontre un champ d'en-tête MIME mal formé.
 * @param string   $charset    Le paramètre par défaut charset spécifie le jeu de caractères à utiliser pour représenter le résultat. S'il est omis, iconv.internal_encoding sera utilisé.
 *
 * @return string	Retourne un champs MIME en cas de succès, ou FALSE si une erreur survient durant le décodage.
 *
 */
if(!function_exists('iconv_mime_decodeThis'))
{
    function iconv_mime_decodeThis($encoded_header, $mode = 0, $charset = NULL)
    {
		$encoded_header = (string)$encoded_header;
		$mode = (int)$mode;
		$charset = empty($charset) ? (string)ini_get("iconv.internal_encoding") : (string)$charset;

		return iconv_mime_decode($encoded_header, $mode, $charset);
    }
}

/**
 * iconv_mime_decode_headersThis
 *
 * Décode des en-têtes MIME multiples.
 *
 * @link http://php.net/manual/fr/function.iconv-mime-decode-headers.php Documentation pour iconv_mime_decode_headers.
 *
 * @version PHP 5
 *
 * @param string   $encoded_headers    Les en-têtes encodés, sous la forme d'une chaîne de caractères.
 * @param int      $mode    mode détermine le comportement de la fonction, si iconv_mime_decode_headers() rencontre un en-tête MIME malformé.
 * @param string   $charset    Le paramètre optionnel charset spécifie le jeu de caractères utilisé pour représenter le résultat. S'il est omis, le jeu définit dans le fichier php.ini iconv.internal_encoding est utilisé.
 *
 * @return array	Retourne un tableau associatif qui contient les en-têtes MIME spécifiés par le paramètre encoded_headers, ou bien FALSE si une erreur survient durant le décodage.
 *
 */
if(!function_exists('iconv_mime_decode_headersThis'))
{
    function iconv_mime_decode_headersThis($encoded_headers, $mode = 0, $charset = NULL)
    {
		$encoded_headers = (string)$encoded_headers;
		$mode = (int)$mode;
		$charset = empty($charset) ? (string)ini_get("iconv.internal_encoding") : (string)$charset;

		return iconv_mime_decode_headers($encoded_headers, $mode, $charset);
    }
}

/**
 * iconv_mime_encodeThis
 *
 * Construit un en-tête MIME avec les champs field_name et field_value.
 *
 * @link http://php.net/manual/fr/function.iconv-mime-encode.php Documentation pour iconv_mime_encode.
 *
 * @version PHP 5
 *
 * @param string   $field_name    Le nom du champ.
 * @param string   $field_value    La valeur du champs.
 * @param array    $preferences    Vous pouvez contrôler le comportement de la fonction iconv_mime_encode() en spécifiant un tableau associatif contenant la configuration des éléments dans le paramètre preferences. La liste des éléments supportés par iconv_mime_encode() figure ci-dessous. Notez que les noms des éléments sont sensibles à la casse.
 *
 * @return string	Retourne un champs MIME en cas de succès, ou FALSE si une erreur survient durant l'encodage.
 *
 */
if(!function_exists('iconv_mime_encodeThis'))
{
    function iconv_mime_encodeThis($field_name, $field_value, $preferences = NULL)
    {
		$field_name = (string)$field_name;
		$field_value = (string)$field_value;
		$preferences = (array)$preferences;

		return iconv_mime_encode($field_name, $field_value, $preferences);
    }
}

/**
 * iconv_set_encodingThis
 *
 * Modifie le jeu courant de caractères d'encodage.
 *
 * @link http://php.net/manual/fr/function.iconv-set-encoding.php Documentation pour iconv_set_encoding.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $type    Les valeurs possibles de type sont :
 * @param string   $charset    Le jeu de caractères.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('iconv_set_encodingThis'))
{
    function iconv_set_encodingThis($type, $charset)
    {
		$type = (string)$type;
		$charset = (string)$charset;

		return iconv_set_encoding($type, $charset);
    }
}

/**
 * iconv_strlenThis
 *
 * Retourne le nombre de caractères d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.iconv-strlen.php Documentation pour iconv_strlen.
 *
 * @version PHP 5
 *
 * @param string   $str    La chaîne de caractères.
 * @param string   $charset    Si charset n'est pas passé en paramètre, str est supposée être encodée en iconv.internal_encoding.
 *
 * @return int	Retourne le nombre de caractères de la chaîne str, sous la forme d'un entier.
 *
 */
if(!function_exists('iconv_strlenThis'))
{
    function iconv_strlenThis($str, $charset = NULL)
    {
		$str = (string)$str;
		$charset = empty($charset) ? (string)ini_get("iconv.internal_encoding") : (string)$charset;

		return iconv_strlen($str, $charset);
    }
}

/**
 * iconv_strposThis
 *
 * Trouve la position de la première occurrence d'une chaîne dans une autre.
 *
 * @link http://php.net/manual/fr/function.iconv-strpos.php Documentation pour iconv_strpos.
 *
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne de caractères entière.
 * @param string   $needle    La chaîne de caractères à chercher.
 * @param int      $offset    Le paramètre optionnel offset spécifie la position à partir de laquelle la recherche doit commencer.
 * @param string   $charset    Si le paramètre charset est omis, string sera encodé en accord avec iconv.internal_encoding.
 *
 * @return int	Retourne la position numérique de la première occurrence de needle dans haystack.
 *
 */
if(!function_exists('iconv_strposThis'))
{
    function iconv_strposThis($haystack, $needle, $offset = 0, $charset = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;
		$charset = empty($charset) ? (string)ini_get("iconv.internal_encoding") : (string)$charset;

		return iconv_strpos($haystack, $needle, $offset, $charset);
    }
}

/**
 * iconv_strrposThis
 *
 * Trouve la position de la dernière occurrence d'un élément dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.iconv-strrpos.php Documentation pour iconv_strrpos.
 *
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne de caractères entière.
 * @param string   $needle    La chaîne de caractères cherchée.
 * @param string   $charset    Si le paramètre optionnel charset est omis, string est supposé être encodé en iconv.internal_encoding.
 *
 * @return int	Retourne la position numérique de la dernière occurrence de needle dans haystack.
 *
 */
if(!function_exists('iconv_strrposThis'))
{
    function iconv_strrposThis($haystack, $needle, $charset = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$charset = empty($charset) ? (string)ini_get("iconv.internal_encoding") : (string)$charset;

		return iconv_strrpos($haystack, $needle, $charset);
    }
}

/**
 * iconv_substrThis
 *
 * Coupe une partie de chaîne.
 *
 * @link http://php.net/manual/fr/function.iconv-substr.php Documentation pour iconv_substr.
 *
 * @version PHP 5
 *
 * @param string   $str    La chaîne de caractères originale.
 * @param int      $offset    Si offset n'est pas négatif, iconv_substr() retourne le segment de str en commençant au caractère numéro offset, en comptant à partir de zéro. Si offset est négatif, iconv_substr() retourne le segment en commençant à la position offset caractères et en allant vers la fin de la chaîne de caractères str.
 * @param int      $length    Si le paramètre length est donné et positif, la valeur retournée contiendra au plus length caractères de la portion de chaîne qui commence à offset (en fonction de la taille de la chaîne string). Si length est passé et négatif, iconv_substr() coupe la portion externe de str depuis le caractère numéro offset jusqu'au caractère numéro length, compté depuis la fin de la chaîne de caractères. Dans le cas où offset est également négatif, la position de départ est calculée en amont, suivant la règle expliquée plus haut.
 * @param string   $charset    Si charset est omis, string est supposé avoir été encodée en iconv.internal_encoding. Notez que offset et length sont toujours considérés comme représentant une position calculée sur la représentation ASCII des caractères déterminés par charset, contrairement à substr() qui se base toujours sur la position par octet.
 *
 * @return string	Retourne la portion de str spécifié par les paramètres offset et length.
 *
 */
if(!function_exists('iconv_substrThis'))
{
    function iconv_substrThis($str, $offset, $length = NULL, $charset = NULL)
    {
		$str = (string)$str;
		$offset = (int)$offset;
		$length = empty($length) ? (int)iconv_strlen($str, $charset) : (int)$length;
		$charset = empty($charset) ? (string)ini_get("iconv.internal_encoding") : (string)$charset;

		return iconv_substr($str, $offset, $length, $charset);
    }
}

/**
 * idateThis
 *
 * Formate une date/heure locale en tant qu'entier.
 *
 * @link http://php.net/manual/fr/function.idate.php Documentation pour idate.
 *
 * @version PHP 5
 *
 * @param string   $format
 * @param int      $timestamp    Le paramètre optionnel timestamp est un timestamp Unix de type entier qui vaut par défaut l'heure courante locale si le paramètre timestamp n'est pas fourni. En d'autres termes, il vaut par défaut la valeur de la fonction time().
 *
 * @return int	Retourne un entier.
 *
 */
if(!function_exists('idateThis'))
{
    function idateThis($format, $timestamp = NULL)
    {
		$format = (string)$format;
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;

		return idate($format, $timestamp);
    }
}

/**
 * ifx_affected_rowsThis
 *
 * Retourne le nombre de lignes affectées par une requête.
 *
 * @link http://php.net/manual/fr/function.ifx-affected-rows.php Documentation pour ifx_affected_rows.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    Un identifiant de résultat valide retourné par la fonction ifx_query() ou la fonction ifx_prepare().
 *
 * @return int	Retourne le nombre de lignes, sous la forme d'un entier.
 *
 */
if(!function_exists('ifx_affected_rowsThis'))
{
    function ifx_affected_rowsThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_affected_rows($result_id);
    }
}

/**
 * ifx_blobinfile_modeThis
 *
 * Choisit le mode par défaut des objets BLOB pour toutes les requêtes SELECT.
 *
 * @link http://php.net/manual/fr/function.ifx-blobinfile-mode.php Documentation pour ifx_blobinfile_mode.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $mode    Mode "0" chargera les BLOB de type Byte en mémoire ; Mode "1" sauvera les BLOB de type Byte dans un fichier.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_blobinfile_modeThis'))
{
    function ifx_blobinfile_modeThis($mode)
    {
		$mode = (int)$mode;

		return ifx_blobinfile_mode($mode);
    }
}

/**
 * ifx_byteasvarcharThis
 *
 * Choisit le mode par défaut des objets BYTE.
 *
 * @link http://php.net/manual/fr/function.ifx-byteasvarchar.php Documentation pour ifx_byteasvarchar.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $mode    Le mode "0" retournera l'identifiant de BLOB, et le mode "1" retournera le contenu du TEXT sous la forme d'un VARCHAR.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_byteasvarcharThis'))
{
    function ifx_byteasvarcharThis($mode)
    {
		$mode = (int)$mode;

		return ifx_byteasvarchar($mode);
    }
}

/**
 * ifx_closeThis
 *
 * Ferme une connexion à un serveur Informix.
 *
 * @link http://php.net/manual/fr/function.ifx-close.php Documentation pour ifx_close.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $link_identifier    L'identifiant du lien. S'il n'est pas spécifié, le dernier lien ouvert est utilisé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_closeThis'))
{
    function ifx_closeThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return ifx_close($link_identifier);
    }
}

/**
 * ifx_connectThis
 *
 * Ouvre une connexion à un serveur Informix.
 *
 * @link http://php.net/manual/fr/function.ifx-connect.php Documentation pour ifx_connect.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param string   $database    Le nom de la base de données, sous la forme d'une chaîne de caractères.
 * @param string   $userid    Le nom d'utilisateur, sous la forme d'une chaîne de caractères.
 * @param string   $password    Le mot de passe, sous la forme d'une chaîne de caractères.
 *
 * @return resource	Retourne un identifiant de connexion en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_connectThis'))
{
    function ifx_connectThis($database = NULL, $userid = NULL, $password = NULL)
    {
		$database = (string)$database;
		$userid = (string)$userid;
		$password = (string)$password;

		return ifx_connect($database, $userid, $password);
    }
}

/**
 * ifx_copy_blobThis
 *
 * Duplique un BLOB.
 *
 * @link http://php.net/manual/fr/function.ifx-copy-blob.php Documentation pour ifx_copy_blob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    L'identifiant d'un BLOB.
 *
 * @return int	Retourne l'identifiant vers le nouveau BLOB, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_copy_blobThis'))
{
    function ifx_copy_blobThis($bid)
    {
		$bid = (int)$bid;

		return ifx_copy_blob($bid);
    }
}

/**
 * ifx_create_blobThis
 *
 * Crée un objet BLOB.
 *
 * @link http://php.net/manual/fr/function.ifx-create-blob.php Documentation pour ifx_create_blob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $type    1 = TEXT, 0 = BYTE
 * @param int      $mode    0 = L'objet BLOB place le contenu en mémoire, 1 = L'objet BLOB place le contenu dans un fichier.
 * @param string   $param    Si mode = 0: pointeur du contenu, si mode = 1: pointeur vers un fichier.
 *
 * @return int	Retourne l'identifiant vers le nouveau BLOB, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_create_blobThis'))
{
    function ifx_create_blobThis($type, $mode, $param)
    {
		$type = (int)$type;
		$mode = (int)$mode;
		$param = (string)$param;

		return ifx_create_blob($type, $mode, $param);
    }
}

/**
 * ifx_create_charThis
 *
 * Crée un objet char.
 *
 * @link http://php.net/manual/fr/function.ifx-create-char.php Documentation pour ifx_create_char.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param string   $param    Le contenu du char.
 *
 * @return int	Retourne l'identifiant vers le nouvel objet char, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_create_charThis'))
{
    function ifx_create_charThis($param)
    {
		$param = (string)$param;

		return ifx_create_char($param);
    }
}

/**
 * ifx_doThis
 *
 * Exécute une requête SQL préparée.
 *
 * @link http://php.net/manual/fr/function.ifx-do.php Documentation pour ifx_do.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant de résultat valide retourné par la fonction ifx_query() ou la fonction ifx_prepare() (uniquement les requêtes de type SELECT !).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_doThis'))
{
    function ifx_doThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_do($result_id);
    }
}

/**
 * ifx_errorThis
 *
 * Retourne le code d'erreur de la dernière requête Informix.
 *
 * @link http://php.net/manual/fr/function.ifx-error.php Documentation pour ifx_error.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $link_identifier    L'identifiant du lien.
 *
 * @return string	Les codes erreurs Informix (SQLSTATE & SQLCODE) sont formatés ainsi : x [SQLSTATE = aa bbb SQLCODE=cccc].
 *
 */
if(!function_exists('ifx_errorThis'))
{
    function ifx_errorThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return ifx_error($link_identifier);
    }
}

/**
 * ifx_errormsgThis
 *
 * Retourne le message d'erreur de la dernière requête Informix.
 *
 * @link http://php.net/manual/fr/function.ifx-errormsg.php Documentation pour ifx_errormsg.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $errorcode    Si spécifié, la fonction retournera le message correspondant au code erreur spécifié.
 *
 * @return string	Retourne le message d'erreur, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('ifx_errormsgThis'))
{
    function ifx_errormsgThis($errorcode = NULL)
    {
		$errorcode = (int)$errorcode;

		return ifx_errormsg($errorcode);
    }
}

/**
 * ifx_fetch_rowThis
 *
 * Retourne une ligne sous la forme d'un tableau énuméré.
 *
 * @link http://php.net/manual/fr/function.ifx-fetch-row.php Documentation pour ifx_fetch_row.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant valide de résultat, retourné par ifx_query() ou ifx_prepare() (Requêtes SELECT seulement !).
 * @param mixed     $position    position est un paramètre optionnel, pour une opération de lecture d'informations sur un pointeur de type "scroll": NEXT, PREVIOUS, CURRENT, FIRST, LAST ou encore un nombre. Si vous spécifiez un nombre, la ligne d'index absolu sera retournée. Ce paramètre est optionnel, et ne fonctionne qu'avec les pointeurs de type "scroll".
 *
 * @return array	retourne un tableau associatif qui contient la ligne retournée ou FALSE s'il ne reste plus de lignes à lire, ou s'il a eu une erreur.
 *
 */
if(!function_exists('ifx_fetch_rowThis'))
{
    function ifx_fetch_rowThis($result_id, $position = NULL)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$position = ($position);
		return ifx_fetch_row($result_id, $position);
    }
}

/**
 * ifx_fieldpropertiesThis
 *
 * Liste les propriétés des champs SQL.
 *
 * @link http://php.net/manual/fr/function.ifx-fieldproperties.php Documentation pour ifx_fieldproperties.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant de résultats valide retourné par la fonction ifx_query() ou la fonction ifx_prepare() (Requête de type SELECT uniquement !).
 *
 * @return array	Retourne un tableau associatif avec les noms des champs comme clés, et les données de propriétés des champs comme valeurs. ifx_fieldproperties() retourne FALSE en cas d'erreur.
 *
 */
if(!function_exists('ifx_fieldpropertiesThis'))
{
    function ifx_fieldpropertiesThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_fieldproperties($result_id);
    }
}

/**
 * ifx_fieldtypesThis
 *
 * Liste les champs Informix SQL.
 *
 * @link http://php.net/manual/fr/function.ifx-fieldtypes.php Documentation pour ifx_fieldtypes.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant de résultats valide, retourné par la fonction ifx_query() ou la fonction ifx_prepare() (requêtes de type SELECT uniquement !).
 *
 * @return array	Retourne un tableau associatif avec les noms des champs comme clés, et les types SQL comme valeurs. En cas d'erreur, retourne FALSE.
 *
 */
if(!function_exists('ifx_fieldtypesThis'))
{
    function ifx_fieldtypesThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_fieldtypes($result_id);
    }
}

/**
 * ifx_free_blobThis
 *
 * Supprime un objet BLOB.
 *
 * @link http://php.net/manual/fr/function.ifx-free-blob.php Documentation pour ifx_free_blob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    L'identifiant de l'objet BLOB.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_free_blobThis'))
{
    function ifx_free_blobThis($bid)
    {
		$bid = (int)$bid;

		return ifx_free_blob($bid);
    }
}

/**
 * ifx_free_charThis
 *
 * Supprime un objet char.
 *
 * @link http://php.net/manual/fr/function.ifx-free-char.php Documentation pour ifx_free_char.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    L'identifiant de l'objet char.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_free_charThis'))
{
    function ifx_free_charThis($bid)
    {
		$bid = (int)$bid;

		return ifx_free_char($bid);
    }
}

/**
 * ifx_free_resultThis
 *
 * Libère les ressources prises par un résultat.
 *
 * @link http://php.net/manual/fr/function.ifx-free-result.php Documentation pour ifx_free_result.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant de résultats valide, retourné par la fonction ifx_query() ou la fonction ifx_prepare() (requêtes de type SELECT uniquement !).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_free_resultThis'))
{
    function ifx_free_resultThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_free_result($result_id);
    }
}

/**
 * ifx_get_blobThis
 *
 * Retourne le contenu d'un objet BLOB.
 *
 * @link http://php.net/manual/fr/function.ifx-get-blob.php Documentation pour ifx_get_blob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    L'identifiant de l'objet BLOB.
 *
 * @return string	Le contenu du BLOB, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_get_blobThis'))
{
    function ifx_get_blobThis($bid)
    {
		$bid = (int)$bid;

		return ifx_get_blob($bid);
    }
}

/**
 * ifx_get_charThis
 *
 * Retourne le contenu d'un objet char.
 *
 * @link http://php.net/manual/fr/function.ifx-get-char.php Documentation pour ifx_get_char.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    L'identifiant de l'objet char.
 *
 * @return string	Retourne le contenu sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_get_charThis'))
{
    function ifx_get_charThis($bid)
    {
		$bid = (int)$bid;

		return ifx_get_char($bid);
    }
}

/**
 * ifx_getsqlcaThis
 *
 * Retourne le contenu de la variable sqlca.sqlerrd[0..5] après une requête.
 *
 * @link http://php.net/manual/fr/function.ifx-getsqlca.php Documentation pour ifx_getsqlca.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant de résultats valide, retourné par la fonction ifx_query() ou la fonction ifx_prepare() (requêtes de type SELECT uniquement !).
 *
 * @return array	Retourne un tableau associatif, composé des entrées suivantes : sqlerrd0, sqlerrd1, sqlerrd2, sqlerrd3, sqlerrd4 et sqlerrd5.
 *
 */
if(!function_exists('ifx_getsqlcaThis'))
{
    function ifx_getsqlcaThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_getsqlca($result_id);
    }
}

/**
 * ifx_htmltbl_resultThis
 *
 * Lit toutes les lignes d'un tableau, et le met sous la forme d'un tableau HTML.
 *
 * @link http://php.net/manual/fr/function.ifx-htmltbl-result.php Documentation pour ifx_htmltbl_result.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant de résultats, retourné par la fonction ifx_query() ou la fonction ifx_prepare() (requêtes de type SELECT uniquement !).
 * @param string   $html_table_options    Cet argument optionnel est une chaîne de caractères d'options de balise <table>.
 *
 * @return int	Retourne le nombre de lignes récupérées ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_htmltbl_resultThis'))
{
    function ifx_htmltbl_resultThis($result_id, $html_table_options = NULL)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$html_table_options = (string)$html_table_options;

		return ifx_htmltbl_result($result_id, $html_table_options);
    }
}

/**
 * ifx_nullformatThis
 *
 * Modifie le mode par défaut de lecture des valeurs.
 *
 * @link http://php.net/manual/fr/function.ifx-nullformat.php Documentation pour ifx_nullformat.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $mode    Le mode "0" retourne "", et le mode "1" retourne "NULL".
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_nullformatThis'))
{
    function ifx_nullformatThis($mode)
    {
		$mode = (int)$mode;

		return ifx_nullformat($mode);
    }
}

/**
 * ifx_num_fieldsThis
 *
 * Retourne le nombre de colonnes d'une requête.
 *
 * @link http://php.net/manual/fr/function.ifx-num-fields.php Documentation pour ifx_num_fields.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_idest un identifiant de résultats retourné par la fonction ifx_query() ou par la fonction ifx_prepare() (requêtes de type SELECT uniquement !).
 *
 * @return int	Retourne le nombre de colonnes dans la requête result_id ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('ifx_num_fieldsThis'))
{
    function ifx_num_fieldsThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_num_fields($result_id);
    }
}

/**
 * ifx_num_rowsThis
 *
 * Compte le nombre de lignes déjà lues dans un résultat.
 *
 * @link http://php.net/manual/fr/function.ifx-num-rows.php Documentation pour ifx_num_rows.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param resource $result_id    result_id est un identifiant de résultats retourné par la fonction ifx_query() ou la fonction ifx_prepare() (requêtes de type SELECT uniquement !).
 *
 * @return int	Retourne le nombre de lignes récupérées ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_num_rowsThis'))
{
    function ifx_num_rowsThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return ifx_num_rows($result_id);
    }
}

/**
 * ifx_pconnectThis
 *
 * Ouvre une connexion persistante à un serveur Informix.
 *
 * @link http://php.net/manual/fr/function.ifx-pconnect.php Documentation pour ifx_pconnect.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param string   $database    Le nom de la base de données, sous la forme d'une chaîne de caractères.
 * @param string   $userid    Le nom d'utilisateur, sous la forme d'une chaîne de caractères.
 * @param string   $password    Le mot de passe, sous la forme d'une chaîne de caractères.
 *
 * @return resource	Retourne un identifiant valide de connexion persistante à un serveur Informix, ou FALSE, en cas d'erreur.
 *
 */
if(!function_exists('ifx_pconnectThis'))
{
    function ifx_pconnectThis($database = NULL, $userid = NULL, $password = NULL)
    {
		$database = (string)$database;
		$userid = (string)$userid;
		$password = (string)$password;

		return ifx_pconnect($database, $userid, $password);
    }
}

/**
 * ifx_prepareThis
 *
 * Prépare une requête SQL pour l'exécution.
 *
 * @link http://php.net/manual/fr/function.ifx-prepare.php Documentation pour ifx_prepare.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param string   $query    La requête.
 * @param resource $link_identifier    L'identifiant du lien.
 * @param int      $cursor_def    Ce paramètre optionnel permet de choisir le type de pointeur : scroll et/ou hold. Les valeurs peuvent être combinées ensemble (IFX_SCROLL, IFX_HOLD).
 * @param mixed     $blobidarray    Si vous avez une colonne de type BLOB (BYTE ou TEXT) dans une requête de modification, vous pouvez passer un paramètre blobidarray qui contiendra les identifiants des BLOB à modifier, et vous devrez remplacer cette colonne par un point d'interrogation (?) dans la requête.
 *
 * @return resource	Retourne un identifiant de résultats pour une utilisation ultérieure avec la fonction ifx_do(), ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_prepareThis'))
{
    function ifx_prepareThis($query, $link_identifier, $cursor_def, $blobidarray = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$cursor_def = (int)$cursor_def;
		$blobidarray = ($blobidarray);
		return ifx_prepare($query, $link_identifier, $cursor_def, $blobidarray);
    }
}

/**
 * ifx_queryThis
 *
 * Envoie une requête Informix.
 *
 * @link http://php.net/manual/fr/function.ifx-query.php Documentation pour ifx_query.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param string   $query    La requête, sous la forme d'une chaîne de caractères.
 * @param resource $link_identifier    L'identifiant du lien.
 * @param int      $cursor_type    Ce paramètre optionnel vous permet de choisir le type de curseur, scroll et/ou hold. C'est un masque qui peut être soit IFX_SCROLL, soit IFX_HOLD, ou les deux. Si vous ne fournissez pas ce paramètre, le curseur est un curseur normal séquentiel.
 * @param mixed     $blobidarray    Si vous avez une colonne de type BLOB (BYTE ou TEXT) dans une requête de modification, vous pouvez passer un paramètre blobidarray qui contiendra les identifiants des BLOB à modifier, et vous devrez remplacer cette colonne par un point d'interrogation (?) dans la requête.
 *
 * @return resource	Retourne un identifiant de résultats Informix en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_queryThis'))
{
    function ifx_queryThis($query, $link_identifier, $cursor_type = NULL, $blobidarray = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$cursor_type = (int)$cursor_type;
		$blobidarray = ($blobidarray);
		return ifx_query($query, $link_identifier, $cursor_type, $blobidarray);
    }
}

/**
 * ifx_textasvarcharThis
 *
 * Choisit le mode par défaut des objets texte.
 *
 * @link http://php.net/manual/fr/function.ifx-textasvarchar.php Documentation pour ifx_textasvarchar.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $mode    Le mode "0" retournera un identifiant de BLOB et le mode "1" retourne le BLOB sous la forme d'un (gros) VARCHAR.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_textasvarcharThis'))
{
    function ifx_textasvarcharThis($mode)
    {
		$mode = (int)$mode;

		return ifx_textasvarchar($mode);
    }
}

/**
 * ifx_update_blobThis
 *
 * Modifie le contenu d'un objet BLOB.
 *
 * @link http://php.net/manual/fr/function.ifx-update-blob.php Documentation pour ifx_update_blob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant d'objet BLOB.
 * @param string   $content    Les nouvelles données, sous la forme d'une chaîne de caractères.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_update_blobThis'))
{
    function ifx_update_blobThis($bid, $content)
    {
		$bid = (int)$bid;
		$content = (string)$content;

		return ifx_update_blob($bid, $content);
    }
}

/**
 * ifx_update_charThis
 *
 * Modifie le contenu d'un objet char.
 *
 * @link http://php.net/manual/fr/function.ifx-update-char.php Documentation pour ifx_update_char.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant d'objet char.
 * @param string   $content    Les nouvelles données, sous la forme d'une chaîne de caractères.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifx_update_charThis'))
{
    function ifx_update_charThis($bid, $content)
    {
		$bid = (int)$bid;
		$content = (string)$content;

		return ifx_update_char($bid, $content);
    }
}

/**
 * ifxus_close_slobThis
 *
 * Ferme un objet SLOB.
 *
 * @link http://php.net/manual/fr/function.ifxus-close-slob.php Documentation pour ifxus_close_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant vers un slob existant.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_close_slobThis'))
{
    function ifxus_close_slobThis($bid)
    {
		$bid = (int)$bid;

		return ifxus_close_slob($bid);
    }
}

/**
 * ifxus_create_slobThis
 *
 * Crée un objet SLOB et l'ouvre.
 *
 * @link http://php.net/manual/fr/function.ifxus-create-slob.php Documentation pour ifxus_create_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $mode    Une combinaison des constantes suivantes : IFX_LO_RDONLY, IFX_LO_WRONLY, IFX_LO_APPEND IFX_LO_RDWR, IFX_LO_BUFFER, IFX_LO_NOBUFFER.
 *
 * @return int	Retourne l'identifiant du nouvel objet slob, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_create_slobThis'))
{
    function ifxus_create_slobThis($mode)
    {
		$mode = (int)$mode;

		return ifxus_create_slob($mode);
    }
}

/**
 * ifxus_free_slobThis
 *
 * Supprime un objet SLOB.
 *
 * @link http://php.net/manual/fr/function.ifxus-free-slob.php Documentation pour ifxus_free_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant vers un slob existant.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_free_slobThis'))
{
    function ifxus_free_slobThis($bid)
    {
		$bid = (int)$bid;

		return ifxus_free_slob($bid);
    }
}

/**
 * ifxus_open_slobThis
 *
 * Ouvre un objet SLOB.
 *
 * @link http://php.net/manual/fr/function.ifxus-open-slob.php Documentation pour ifxus_open_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant slob existant.
 * @param int      $mode    Une combinaison des constantes suivantes : IFX_LO_RDONLY, IFX_LO_WRONLY, IFX_LO_APPEND IFX_LO_RDWR, IFX_LO_BUFFER, IFX_LO_NOBUFFER.
 *
 * @return int	Retourne l'identifiant du nouvel objet slob, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_open_slobThis'))
{
    function ifxus_open_slobThis($bid, $mode)
    {
		$bid = (int)$bid;
		$mode = (int)$mode;

		return ifxus_open_slob($bid, $mode);
    }
}

/**
 * ifxus_read_slobThis
 *
 * Lit des octets dans un objet SLOB.
 *
 * @link http://php.net/manual/fr/function.ifxus-read-slob.php Documentation pour ifxus_read_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant slob existant.
 * @param int      $nbytes    Le nombre d'octets à lire.
 *
 * @return string	Retourne le contenu du slob sous la forme d'une chaîne de caractères ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_read_slobThis'))
{
    function ifxus_read_slobThis($bid, $nbytes)
    {
		$bid = (int)$bid;
		$nbytes = (int)$nbytes;

		return ifxus_read_slob($bid, $nbytes);
    }
}

/**
 * ifxus_seek_slobThis
 *
 * Fixe le fichier courant ou la position courante.
 *
 * @link http://php.net/manual/fr/function.ifxus-seek-slob.php Documentation pour ifxus_seek_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant slob existant.
 * @param int      $mode    0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END.
 * @param int      $offset    La position.
 *
 * @return int	Retourne le position sous la forme d'un entier ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_seek_slobThis'))
{
    function ifxus_seek_slobThis($bid, $mode, $offset)
    {
		$bid = (int)$bid;
		$mode = (int)$mode;
		$offset = (int)$offset;

		return ifxus_seek_slob($bid, $mode, $offset);
    }
}

/**
 * ifxus_tell_slobThis
 *
 * Retourne le fichier courant ou la position courante.
 *
 * @link http://php.net/manual/fr/function.ifxus-tell-slob.php Documentation pour ifxus_tell_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant slob existant.
 *
 * @return int	Retourne la position sous la forme d'un entier ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_tell_slobThis'))
{
    function ifxus_tell_slobThis($bid)
    {
		$bid = (int)$bid;

		return ifxus_tell_slob($bid);
    }
}

/**
 * ifxus_write_slobThis
 *
 * Écrit une chaîne dans un objet SLOB.
 *
 * @link http://php.net/manual/fr/function.ifxus-write-slob.php Documentation pour ifxus_write_slob.
 *
 * @version PHP 4
 * @version PHP <=5.2.0
 *
 * @param int      $bid    Un identifiant slob existant.
 * @param string   $content    Le contenu à écrire, sous la forme d'une chaîne de caractères.
 *
 * @return int	Retourne les octets écrits, sous la forme d'un entier ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ifxus_write_slobThis'))
{
    function ifxus_write_slobThis($bid, $content)
    {
		$bid = (int)$bid;
		$content = (string)$content;

		return ifxus_write_slob($bid, $content);
    }
}

/**
 * ignore_user_abortThis
 *
 * Active l'interruption de script sur déconnexion du visiteur.
 *
 * @link http://php.net/manual/fr/function.ignore-user-abort.php Documentation pour ignore_user_abort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $value    Si fourni, la fonction va attribuer à la directive ignore_user_abort la valeur de value. Si omis, cette fonction ne fait que retourner la valeur de la configuration courante.
 *
 * @return int	Retourne la configuration précédente, sous la forme d'un entier.
 *
 */
if(!function_exists('ignore_user_abortThis'))
{
    function ignore_user_abortThis($value = NULL)
    {
		$value = (string)$value;

		return ignore_user_abort($value);
    }
}

/**
 * image2wbmpThis
 *
 * Affichage de l'image vers le navigateur ou dans un fichier.
 *
 * @link http://php.net/manual/fr/function.image2wbmp.php Documentation pour image2wbmp.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Chemin vers le fichier de sauvegarde. S'il n'est pas fourni, le flux de l'image sera directement affiché.
 * @param int      $threshold    Valeur du seuil, entre 0 et 255 inclus.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('image2wbmpThis'))
{
    function image2wbmpThis($image, $filename = NULL, $threshold = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;
		$threshold = (int)$threshold;

		return image2wbmp($image, $filename, $threshold);
    }
}

/**
 * image_type_to_extensionThis
 *
 * Retourne l'extension du fichier pour le type d'image.
 *
 * @link http://php.net/manual/fr/function.image-type-to-extension.php Documentation pour image_type_to_extension.
 *
 * @version PHP 5
 *
 * @param int      $imagetype    Une des constantes IMAGETYPE_XXX.
 * @param bool     $include_dot    Si l'on doit ajouter un point à l'extension ou non. Par défaut, vaut TRUE.
 *
 * @return string	Une chaîne de caractères avec l'extension, correspondant au type de l'image fournie.
 *
 */
if(!function_exists('image_type_to_extensionThis'))
{
    function image_type_to_extensionThis($imagetype, $include_dot = TRUE)
    {
		$imagetype = (int)$imagetype;
		$include_dot = (bool)$include_dot;

		return image_type_to_extension($imagetype, $include_dot);
    }
}

/**
 * image_type_to_mime_typeThis
 *
 * Lit le Mime-Type d'un type d'image.
 *
 * @link http://php.net/manual/fr/function.image-type-to-mime-type.php Documentation pour image_type_to_mime_type.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $imagetype    Une des constantes IMAGETYPE_XXX.
 *
 * @return string	Les valeurs retournées sont les suivantes
 *
 */
if(!function_exists('image_type_to_mime_typeThis'))
{
    function image_type_to_mime_typeThis($imagetype)
    {
		$imagetype = (int)$imagetype;

		return image_type_to_mime_type($imagetype);
    }
}

/**
 * imageaffineThis
 *
 * Return an image containing the affine tramsformed src image, using an optional clipping area.
 *
 * @link http://php.net/manual/fr/function.imageaffine.php Documentation pour imageaffine.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param array    $affine    Array with keys 0 to 5.
 * @param array    $clip    Array with keys "x", "y", "width" and "height".
 *
 * @return resource	Return affined image resource on success ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageaffineThis'))
{
    function imageaffineThis($image, $affine, $clip = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$affine = (array)$affine;
		$clip = (array)$clip;

		return imageaffine($image, $affine, $clip);
    }
}

/**
 * imageaffinematrixconcatThis
 *
 * Concat two matrices (as in doing many ops in one go).
 *
 * @link http://php.net/manual/fr/function.imageaffinematrixconcat.php Documentation pour imageaffinematrixconcat.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param array    $m1    Array with keys 0 to 5.
 * @param array    $m2    Array with keys 0 to 5.
 *
 * @return array	Array with keys 0 to 5 and float values ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageaffinematrixconcatThis'))
{
    function imageaffinematrixconcatThis($m1, $m2)
    {
		$m1 = (array)$m1;
		$m2 = (array)$m2;

		return imageaffinematrixconcat($m1, $m2);
    }
}

/**
 * imageaffinematrixgetThis
 *
 * Return an image containing the affine tramsformed src image, using an optional clipping area.
 *
 * @link http://php.net/manual/fr/function.imageaffinematrixget.php Documentation pour imageaffinematrixget.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param int      $type    One of IMG_AFFINE_* constants.
 * @param mixed     $options
 *
 * @return array	Array with keys 0 to 5 and float values ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageaffinematrixgetThis'))
{
    function imageaffinematrixgetThis($type, $options = NULL)
    {
		$type = (int)$type;
		$options = ($options);
		return imageaffinematrixget($type, $options);
    }
}

/**
 * imagealphablendingThis
 *
 * Modifie le mode de blending d'une image.
 *
 * @link http://php.net/manual/fr/function.imagealphablending.php Documentation pour imagealphablending.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param bool     $blendmode    Si l'on doit activer le mode blending ou non. Sur les images à couleurs vraies, la valeur par défaut est TRUE, sinon, la valeur par défaut est FALSE.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagealphablendingThis'))
{
    function imagealphablendingThis($image, $blendmode)
    {
		$image = is_resource($image) ? $image : NULL;
		$blendmode = (bool)$blendmode;

		return imagealphablending($image, $blendmode);
    }
}

/**
 * imageantialiasThis
 *
 * Utiliser ou non les fonctions d'antialias.
 *
 * @link http://php.net/manual/fr/function.imageantialias.php Documentation pour imageantialias.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param bool     $enabled    Si l'on doit activer l'antialias ou non.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageantialiasThis'))
{
    function imageantialiasThis($image, $enabled)
    {
		$image = is_resource($image) ? $image : NULL;
		$enabled = (bool)$enabled;

		return imageantialias($image, $enabled);
    }
}

/**
 * imagearcThis
 *
 * Dessine une ellipse partielle.
 *
 * @link http://php.net/manual/fr/function.imagearc.php Documentation pour imagearc.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $cx    X : coordonnée du centre.
 * @param int      $cy    Y : coordonnée du centre.
 * @param int      $width    La largeur de l'ellipse.
 * @param int      $height    La hauteur de l'ellipse.
 * @param int      $start    L'angle de début de l'ellipse, en degrés.
 * @param int      $end    L'angle de fin de l'ellipse, en degrés. 0° correspond à la position "trois heures" et l'ellipse est dessiné dans le sens des aiguilles d'une montre.
 * @param int      $color    Un identifiant de couleur, créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagearcThis'))
{
    function imagearcThis($image, $cx, $cy, $width, $height, $start, $end, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$cx = (int)$cx;
		$cy = (int)$cy;
		$width = (int)$width;
		$height = (int)$height;
		$start = (int)$start;
		$end = (int)$end;
		$color = (int)$color;

		return imagearc($image, $cx, $cy, $width, $height, $start, $end, $color);
    }
}

/**
 * imagecharThis
 *
 * Dessine un caractère horizontalement.
 *
 * @link http://php.net/manual/fr/function.imagechar.php Documentation pour imagechar.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $font    Peut être 1, 2, 3, 4, 5 pour les polices internes d'encodage Latin2 (où les plus grands nombres correspondent aux polices larges) ou n'importe quels identifiants de police de votre choix, enregistrées avec la fonction imageloadfont().
 * @param int      $x    X : coordonnée de départ.
 * @param int      $y    Y : coordonnée de départ.
 * @param string   $c    Le caractère à dessiner.
 * @param int      $color    Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecharThis'))
{
    function imagecharThis($image, $font, $x, $y, $c, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$font = (int)$font;
		$x = (int)$x;
		$y = (int)$y;
		$c = (string)$c;
		$color = (int)$color;

		return imagechar($image, $font, $x, $y, $c, $color);
    }
}

/**
 * imagecharupThis
 *
 * Dessine un caractère verticalement.
 *
 * @link http://php.net/manual/fr/function.imagecharup.php Documentation pour imagecharup.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $font    Peut être 1, 2, 3, 4, 5 pour les polices internes d'encodage Latin2 (où les plus grands nombres correspondent aux polices larges) ou n'importe quels identifiants de police de votre choix, enregistrées avec la fonction imageloadfont().
 * @param int      $x    X : coordonnée de départ.
 * @param int      $y    Y : coordonnée de départ.
 * @param string   $c    Le caractère à dessiner.
 * @param int      $color    Un identifiant de couleur, créé avec la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecharupThis'))
{
    function imagecharupThis($image, $font, $x, $y, $c, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$font = (int)$font;
		$x = (int)$x;
		$y = (int)$y;
		$c = (string)$c;
		$color = (int)$color;

		return imagecharup($image, $font, $x, $y, $c, $color);
    }
}

/**
 * imagecolorallocateThis
 *
 * Alloue une couleur pour une image.
 *
 * @link http://php.net/manual/fr/function.imagecolorallocate.php Documentation pour imagecolorallocate.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 *
 * @return int	Un identifiant de couleur ou FALSE si l'allocation échoue.
 *
 */
if(!function_exists('imagecolorallocateThis'))
{
    function imagecolorallocateThis($image, $red, $green, $blue)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;

		return imagecolorallocate($image, $red, $green, $blue);
    }
}

/**
 * imagecolorallocatealphaThis
 *
 * Alloue une couleur à une image.
 *
 * @link http://php.net/manual/fr/function.imagecolorallocatealpha.php Documentation pour imagecolorallocatealpha.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 * @param int      $alpha    Une valeur entre 0 et 27. 0 indique une opacité complète tandis que 27 indique une transparence complète.
 *
 * @return int	Un identifiant de couleur ou FALSE si l'allocation échoue.
 *
 */
if(!function_exists('imagecolorallocatealphaThis'))
{
    function imagecolorallocatealphaThis($image, $red, $green, $blue, $alpha)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;
		$alpha = (int)$alpha;

		return imagecolorallocatealpha($image, $red, $green, $blue, $alpha);
    }
}

/**
 * imagecoloratThis
 *
 * Retourne l'index de la couleur d'un pixel donné.
 *
 * @link http://php.net/manual/fr/function.imagecolorat.php Documentation pour imagecolorat.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x    X : coordonnée du point.
 * @param int      $y    Y : coordonnée du point.
 *
 * @return int	Retourne l'index de la couleur.
 *
 */
if(!function_exists('imagecoloratThis'))
{
    function imagecoloratThis($image, $x, $y)
    {
		$image = is_resource($image) ? $image : NULL;
		$x = (int)$x;
		$y = (int)$y;

		return imagecolorat($image, $x, $y);
    }
}

/**
 * imagecolorclosestThis
 *
 * Retourne l'index de la couleur la plus proche d'une couleur donnée.
 *
 * @link http://php.net/manual/fr/function.imagecolorclosest.php Documentation pour imagecolorclosest.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 *
 * @return int	Retourne l'index de la couleur la plus proche, dans la palette de l'image, de celle donnée.
 *
 */
if(!function_exists('imagecolorclosestThis'))
{
    function imagecolorclosestThis($image, $red, $green, $blue)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;

		return imagecolorclosest($image, $red, $green, $blue);
    }
}

/**
 * imagecolorclosestalphaThis
 *
 * Retourne la couleur la plus proche, en tenant compte du canal alpha.
 *
 * @link http://php.net/manual/fr/function.imagecolorclosestalpha.php Documentation pour imagecolorclosestalpha.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 * @param int      $alpha    Une valeur comprise entre 0 et 27. 0 indique une opacité complète tandis que 27 indique une transparence complète.
 *
 * @return int	Retourne l'index de la couleur la plus proche dans la palette.
 *
 */
if(!function_exists('imagecolorclosestalphaThis'))
{
    function imagecolorclosestalphaThis($image, $red, $green, $blue, $alpha)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;
		$alpha = (int)$alpha;

		return imagecolorclosestalpha($image, $red, $green, $blue, $alpha);
    }
}

/**
 * imagecolorclosesthwbThis
 *
 * Lit l'index de la couleur spécifiée avec sa teinte, blanc et noir.
 *
 * @link http://php.net/manual/fr/function.imagecolorclosesthwb.php Documentation pour imagecolorclosesthwb.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 *
 * @return int	Retourne un entier représentant d'index de la couleur.
 *
 */
if(!function_exists('imagecolorclosesthwbThis'))
{
    function imagecolorclosesthwbThis($image, $red, $green, $blue)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;

		return imagecolorclosesthwb($image, $red, $green, $blue);
    }
}

/**
 * imagecolordeallocateThis
 *
 * Supprime une couleur d'une image.
 *
 * @link http://php.net/manual/fr/function.imagecolordeallocate.php Documentation pour imagecolordeallocate.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $color    L'identifiant de la couleur.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecolordeallocateThis'))
{
    function imagecolordeallocateThis($image, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$color = (int)$color;

		return imagecolordeallocate($image, $color);
    }
}

/**
 * imagecolorexactThis
 *
 * Retourne l'index de la couleur donnée.
 *
 * @link http://php.net/manual/fr/function.imagecolorexact.php Documentation pour imagecolorexact.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 *
 * @return int	Retourne l'index de la couleur spécifié dans la palette, ou -1 si la couleur n'existe pas.
 *
 */
if(!function_exists('imagecolorexactThis'))
{
    function imagecolorexactThis($image, $red, $green, $blue)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;

		return imagecolorexact($image, $red, $green, $blue);
    }
}

/**
 * imagecolorexactalphaThis
 *
 * Retourne l'index d'une couleur avec son canal alpha.
 *
 * @link http://php.net/manual/fr/function.imagecolorexactalpha.php Documentation pour imagecolorexactalpha.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 * @param int      $alpha    Une valeur comprise entre 0 et 27. 0 indique une opacité complète tandis que 27 indique une transparence complète.
 *
 * @return int	Retourne l'index de la couleur fournie et son canal alpha dans la palette de l'image, ou -1 si la couleur n'existe pas dans la palette de l'image.
 *
 */
if(!function_exists('imagecolorexactalphaThis'))
{
    function imagecolorexactalphaThis($image, $red, $green, $blue, $alpha)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;
		$alpha = (int)$alpha;

		return imagecolorexactalpha($image, $red, $green, $blue, $alpha);
    }
}

/**
 * imagecolormatchThis
 *
 * Fait correspondre un peu plus les couleurs de la version palette d'une image aux couleurs de sa version truecolor.
 *
 * @link http://php.net/manual/fr/function.imagecolormatch.php Documentation pour imagecolormatch.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $image1    Une ressource d'image truecolor.
 * @param resource $image2    Une ressource de palette d'image pointant sur une image qui a la même taille que image1.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecolormatchThis'))
{
    function imagecolormatchThis($image1, $image2)
    {
		$image1 = is_resource($image1) ? $image1 : NULL;
		$image2 = is_resource($image2) ? $image2 : NULL;

		return imagecolormatch($image1, $image2);
    }
}

/**
 * imagecolorresolveThis
 *
 * Retourne l'index de la couleur donnée, ou la plus proche possible.
 *
 * @link http://php.net/manual/fr/function.imagecolorresolve.php Documentation pour imagecolorresolve.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 *
 * @return int	Retourne un index de couleur.
 *
 */
if(!function_exists('imagecolorresolveThis'))
{
    function imagecolorresolveThis($image, $red, $green, $blue)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;

		return imagecolorresolve($image, $red, $green, $blue);
    }
}

/**
 * imagecolorresolvealphaThis
 *
 * Retourne un index de couleur ou son alternative la plus proche, y compris le canal alpha.
 *
 * @link http://php.net/manual/fr/function.imagecolorresolvealpha.php Documentation pour imagecolorresolvealpha.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 * @param int      $alpha    Une valeur comprise entre 0 et 27. 0 indique une opacité complète tandis que 27 indique une transparence complète.
 *
 * @return int	Retourne un index de couleur.
 *
 */
if(!function_exists('imagecolorresolvealphaThis'))
{
    function imagecolorresolvealphaThis($image, $red, $green, $blue, $alpha)
    {
		$image = is_resource($image) ? $image : NULL;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;
		$alpha = (int)$alpha;

		return imagecolorresolvealpha($image, $red, $green, $blue, $alpha);
    }
}

/**
 * imagecolorsetThis
 *
 * Change la couleur dans une palette à l'index donné.
 *
 * @link http://php.net/manual/fr/function.imagecolorset.php Documentation pour imagecolorset.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $index    Un index de la palette.
 * @param int      $red    Valeur du composant rouge.
 * @param int      $green    Valeur du composant vert.
 * @param int      $blue    Valeur du composant bleu.
 * @param int      $alpha    Valeur du composant alpha.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('imagecolorsetThis'))
{
    function imagecolorsetThis($image, $index, $red, $green, $blue, $alpha = 0)
    {
		$image = is_resource($image) ? $image : NULL;
		$index = (int)$index;
		$red = (int)$red;
		$green = (int)$green;
		$blue = (int)$blue;
		$alpha = (int)$alpha;

		return imagecolorset($image, $index, $red, $green, $blue, $alpha);
    }
}

/**
 * imagecolorsforindexThis
 *
 * Retourne la couleur associée à un index.
 *
 * @link http://php.net/manual/fr/function.imagecolorsforindex.php Documentation pour imagecolorsforindex.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $index    L'index de la couleur.
 *
 * @return array	Retourne un tableau associatif avec les clés "red", "green", "blue" et "alpha" qui contiennent les valeurs pour l'index de la couleur spécifiée.
 *
 */
if(!function_exists('imagecolorsforindexThis'))
{
    function imagecolorsforindexThis($image, $index)
    {
		$image = is_resource($image) ? $image : NULL;
		$index = (int)$index;

		return imagecolorsforindex($image, $index);
    }
}

/**
 * imagecolorstotalThis
 *
 * Calcule le nombre de couleurs d'une palette.
 *
 * @link http://php.net/manual/fr/function.imagecolorstotal.php Documentation pour imagecolorstotal.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource représentant une image, retournée par une des fonctions de création d'images, comme la fonction imagecreatefromgif().
 *
 * @return int	Retourne le nombre de couleurs de la palette pour l'image image ou 0 pour les images truecolor.
 *
 */
if(!function_exists('imagecolorstotalThis'))
{
    function imagecolorstotalThis($image)
    {
		$image = is_resource($image) ? $image : NULL;

		return imagecolorstotal($image);
    }
}

/**
 * imagecolortransparentThis
 *
 * Définit la couleur transparente.
 *
 * @link http://php.net/manual/fr/function.imagecolortransparent.php Documentation pour imagecolortransparent.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $color    Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return int	L'identifiant de la nouvelle couleur transparente (ou l'actuelle, si aucune n'est spécifiée) est retourné. Si le paramètre color n'est pas spécifié, et que l'image n'a pas de couleur transparente, l'identifiant retourné sera -1.
 *
 */
if(!function_exists('imagecolortransparentThis'))
{
    function imagecolortransparentThis($image, $color = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$color = (int)$color;

		return imagecolortransparent($image, $color);
    }
}

/**
 * imageconvolutionThis
 *
 * Applique une matrice de la convolution 3x3, en utilisant le coefficient et l'excentrage.
 *
 * @link http://php.net/manual/fr/function.imageconvolution.php Documentation pour imageconvolution.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param array    $matrix    Une matrice 3x3 : un tableau contenant trois tableaux de trois nombres à virgules flottantes.
 * @param float    $div    Le diviseur du résultat de la convolution, utilisé pour la normalisation.
 * @param float    $offset    La position de la couleur.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageconvolutionThis'))
{
    function imageconvolutionThis($image, $matrix, $div, $offset)
    {
		$image = is_resource($image) ? $image : NULL;
		$matrix = (array)$matrix;
		$div = (float)$div;
		$offset = (float)$offset;

		return imageconvolution($image, $matrix, $div, $offset);
    }
}

/**
 * imagecopyThis
 *
 * Copie une partie d'une image.
 *
 * @link http://php.net/manual/fr/function.imagecopy.php Documentation pour imagecopy.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $dst_im    Lien vers la ressource cible de l'image.
 * @param resource $src_im    Lien vers la ressource source de l'image.
 * @param int      $dst_x    X : coordonnées du point de destination.
 * @param int      $dst_y    Y : coordonnées du point de destination.
 * @param int      $src_x    X : coordonnées du point source.
 * @param int      $src_y    Y : coordonnées du point source.
 * @param int      $src_w    Largeur de la source.
 * @param int      $src_h    Hauteur de la source.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecopyThis'))
{
    function imagecopyThis($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h)
    {
		$dst_im = is_resource($dst_im) ? $dst_im : NULL;
		$src_im = is_resource($src_im) ? $src_im : NULL;
		$dst_x = (int)$dst_x;
		$dst_y = (int)$dst_y;
		$src_x = (int)$src_x;
		$src_y = (int)$src_y;
		$src_w = (int)$src_w;
		$src_h = (int)$src_h;

		return imagecopy($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h);
    }
}

/**
 * imagecopymergeThis
 *
 * Copie et fusionne une partie d'une image.
 *
 * @link http://php.net/manual/fr/function.imagecopymerge.php Documentation pour imagecopymerge.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param resource $dst_im    Lien vers la ressource cible de l'image.
 * @param resource $src_im    Lien vers la ressource source de l'image.
 * @param int      $dst_x    X : coordonnée du point de destination.
 * @param int      $dst_y    Y : coordonnée du point de destination.
 * @param int      $src_x    X : coordonnée du point source.
 * @param int      $src_y    Y : coordonnée du point source.
 * @param int      $src_w    Largeur de la source.
 * @param int      $src_h    Hauteur de la source.
 * @param int      $pct    Les deux images seront fusionnées suivant le paramètre pct, qui peut valoir de 0 à 100. Si pct = 0, aucune action n'est faite, alors que si pct = 100, imagecopymerge() se comporte exactement comme imagecopy() pour les images de palette, sauf pour l'ignorance des composants alpha, tandis qu'il implémente la transparence alpha pour les images en couleur vraies.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecopymergeThis'))
{
    function imagecopymergeThis($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct)
    {
		$dst_im = is_resource($dst_im) ? $dst_im : NULL;
		$src_im = is_resource($src_im) ? $src_im : NULL;
		$dst_x = (int)$dst_x;
		$dst_y = (int)$dst_y;
		$src_x = (int)$src_x;
		$src_y = (int)$src_y;
		$src_w = (int)$src_w;
		$src_h = (int)$src_h;
		$pct = (int)$pct;

		return imagecopymerge($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct);
    }
}

/**
 * imagecopymergegrayThis
 *
 * Copie et fusionne une partie d'une image en niveaux de gris.
 *
 * @link http://php.net/manual/fr/function.imagecopymergegray.php Documentation pour imagecopymergegray.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $dst_im    Lien vers la ressource cible de l'image.
 * @param resource $src_im    Lien vers la ressource source de l'image.
 * @param int      $dst_x    X : coordonnée du point de destination.
 * @param int      $dst_y    Y : coordonnée du point de destination.
 * @param int      $src_x    X : coordonnée du point source.
 * @param int      $src_y    Y : coordonnée du point source.
 * @param int      $src_w    Largeur de la source.
 * @param int      $src_h    Hauteur de la source.
 * @param int      $pct    Le paramètre src_im sera changé en niveaux de gris en accord avec le paramètre pct où 0 correspond à une convertion totale en niveaux de gris et 100 ne modifie rien. Lorsque pct = 100, cette fonction se comporte de la même façon que la fonction imagecopy() pour les palettes, sauf pour l'ignorance des composants alpha, alors qu'elle implémente la transparence alpha pour les images true colour.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecopymergegrayThis'))
{
    function imagecopymergegrayThis($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct)
    {
		$dst_im = is_resource($dst_im) ? $dst_im : NULL;
		$src_im = is_resource($src_im) ? $src_im : NULL;
		$dst_x = (int)$dst_x;
		$dst_y = (int)$dst_y;
		$src_x = (int)$src_x;
		$src_y = (int)$src_y;
		$src_w = (int)$src_w;
		$src_h = (int)$src_h;
		$pct = (int)$pct;

		return imagecopymergegray($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct);
    }
}

/**
 * imagecopyresampledThis
 *
 * Copie, redimensionne, rééchantillonne une image.
 *
 * @link http://php.net/manual/fr/function.imagecopyresampled.php Documentation pour imagecopyresampled.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $dst_image    Lien vers la ressource cible de l'image.
 * @param resource $src_image    Lien vers la ressource source de l'image.
 * @param int      $dst_x    X : coordonnées du point de destination.
 * @param int      $dst_y    Y : coordonnées du point de destination.
 * @param int      $src_x    X : coordonnées du point source.
 * @param int      $src_y    Y : coordonnées du point source.
 * @param int      $dst_w    Largeur de la destination.
 * @param int      $dst_h    Hauteur de la destination.
 * @param int      $src_w    Largeur de la source.
 * @param int      $src_h    Hauteur de la source.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecopyresampledThis'))
{
    function imagecopyresampledThis($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h)
    {
		$dst_image = is_resource($dst_image) ? $dst_image : NULL;
		$src_image = is_resource($src_image) ? $src_image : NULL;
		$dst_x = (int)$dst_x;
		$dst_y = (int)$dst_y;
		$src_x = (int)$src_x;
		$src_y = (int)$src_y;
		$dst_w = (int)$dst_w;
		$dst_h = (int)$dst_h;
		$src_w = (int)$src_w;
		$src_h = (int)$src_h;

		return imagecopyresampled($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);
    }
}

/**
 * imagecopyresizedThis
 *
 * Copie et redimensionne une partie d'une image.
 *
 * @link http://php.net/manual/fr/function.imagecopyresized.php Documentation pour imagecopyresized.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $dst_image    Lien vers la ressource cible de l'image.
 * @param resource $src_image    Lien vers la ressource source de l'image.
 * @param int      $dst_x    X : coordonnée du point de destination.
 * @param int      $dst_y    Y : coordonnée du point de destination.
 * @param int      $src_x    X : coordonnée du point source.
 * @param int      $src_y    Y : coordonnée du point source.
 * @param int      $dst_w    Largeur de la destination.
 * @param int      $dst_h    Hauteur de la destination.
 * @param int      $src_w    Largeur de la source.
 * @param int      $src_h    Hauteur de la source.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecopyresizedThis'))
{
    function imagecopyresizedThis($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h)
    {
		$dst_image = is_resource($dst_image) ? $dst_image : NULL;
		$src_image = is_resource($src_image) ? $src_image : NULL;
		$dst_x = (int)$dst_x;
		$dst_y = (int)$dst_y;
		$src_x = (int)$src_x;
		$src_y = (int)$src_y;
		$dst_w = (int)$dst_w;
		$dst_h = (int)$dst_h;
		$src_w = (int)$src_w;
		$src_h = (int)$src_h;

		return imagecopyresized($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);
    }
}

/**
 * imagecreateThis
 *
 * Crée une nouvelle image à palette.
 *
 * @link http://php.net/manual/fr/function.imagecreate.php Documentation pour imagecreate.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $width    La largeur de l'image.
 * @param int      $height    La hauteur de l'image.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreateThis'))
{
    function imagecreateThis($width, $height)
    {
		$width = (int)$width;
		$height = (int)$height;

		return imagecreate($width, $height);
    }
}

/**
 * imagecreatefromgdThis
 *
 * Crée une nouvelle image à partir d'un fichier GD ou d'une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromgd.php Documentation pour imagecreatefromgd.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers un fichier GD.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromgdThis'))
{
    function imagecreatefromgdThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromgd($filename);
    }
}

/**
 * imagecreatefromgd2This
 *
 * Crée une nouvelle image à partir d'un fichier GD2 ou d'une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromgd2.php Documentation pour imagecreatefromgd2.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image GD2.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromgd2This'))
{
    function imagecreatefromgd2This($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromgd2($filename);
    }
}

/**
 * imagecreatefromgd2partThis
 *
 * Crée une nouvelle image à partir d'une partie de fichier GD2 ou d'une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromgd2part.php Documentation pour imagecreatefromgd2part.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image GD2.
 * @param int      $srcX    Coordonnée en X du point source.
 * @param int      $srcY    Coordonnée en Y du point source.
 * @param int      $width    Largeur de la source.
 * @param int      $height    Hauteur de la source.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromgd2partThis'))
{
    function imagecreatefromgd2partThis($filename, $srcX, $srcY, $width, $height)
    {
		$filename = (string)$filename;
		$srcX = (int)$srcX;
		$srcY = (int)$srcY;
		$width = (int)$width;
		$height = (int)$height;

		return imagecreatefromgd2part($filename, $srcX, $srcY, $width, $height);
    }
}

/**
 * imagecreatefromgifThis
 *
 * Crée une nouvelle image depuis un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromgif.php Documentation pour imagecreatefromgif.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image GIF.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromgifThis'))
{
    function imagecreatefromgifThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromgif($filename);
    }
}

/**
 * imagecreatefromjpegThis
 *
 * Crée une nouvelle image depuis un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromjpeg.php Documentation pour imagecreatefromjpeg.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image JPEG.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromjpegThis'))
{
    function imagecreatefromjpegThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromjpeg($filename);
    }
}

/**
 * imagecreatefrompngThis
 *
 * Crée une nouvelle image depuis un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefrompng.php Documentation pour imagecreatefrompng.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image PNG.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefrompngThis'))
{
    function imagecreatefrompngThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefrompng($filename);
    }
}

/**
 * imagecreatefromstringThis
 *
 * Crée une image à partir d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromstring.php Documentation pour imagecreatefromstring.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $image    Une chaîne contenant les données de l'image.
 *
 * @return resource	Une ressource d'image sera retourné en cas de succès. FALSE est retourné si le type de l'image n'est pas supporté, si les données ne sont pas dans un format reconnu ou si l'image est corrompue et donc ne peut être chargée.
 *
 */
if(!function_exists('imagecreatefromstringThis'))
{
    function imagecreatefromstringThis($image)
    {
		$image = (string)$image;

		return imagecreatefromstring($image);
    }
}

/**
 * imagecreatefromwbmpThis
 *
 * Crée une nouvelle image depuis un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromwbmp.php Documentation pour imagecreatefromwbmp.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image WBMP.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromwbmpThis'))
{
    function imagecreatefromwbmpThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromwbmp($filename);
    }
}

/**
 * imagecreatefromwebpThis
 *
 * Crée une nouvelle image depuis un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromwebp.php Documentation pour imagecreatefromwebp.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $filename    Chemin vers l'image WebP.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromwebpThis'))
{
    function imagecreatefromwebpThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromwebp($filename);
    }
}

/**
 * imagecreatefromxbmThis
 *
 * Crée une nouvelle image depuis un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromxbm.php Documentation pour imagecreatefromxbm.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image XBM.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromxbmThis'))
{
    function imagecreatefromxbmThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromxbm($filename);
    }
}

/**
 * imagecreatefromxpmThis
 *
 * Crée une nouvelle image depuis un fichier ou une URL.
 *
 * @link http://php.net/manual/fr/function.imagecreatefromxpm.php Documentation pour imagecreatefromxpm.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers l'image XPM.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatefromxpmThis'))
{
    function imagecreatefromxpmThis($filename)
    {
		$filename = (string)$filename;

		return imagecreatefromxpm($filename);
    }
}

/**
 * imagecreatetruecolorThis
 *
 * Crée une nouvelle image en couleurs vraies.
 *
 * @link http://php.net/manual/fr/function.imagecreatetruecolor.php Documentation pour imagecreatetruecolor.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param int      $width    Largeur de l'image.
 * @param int      $height    Hauteur de l'image.
 *
 * @return resource	Retourne un identifiant de ressource d'image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecreatetruecolorThis'))
{
    function imagecreatetruecolorThis($width, $height)
    {
		$width = (int)$width;
		$height = (int)$height;

		return imagecreatetruecolor($width, $height);
    }
}

/**
 * imagecropThis
 *
 * Crop an image using the given coordinates and size, x, y, width and height.
 *
 * @link http://php.net/manual/fr/function.imagecrop.php Documentation pour imagecrop.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param array    $rect    Array with keys "x", "y", "width" and "height".
 *
 * @return resource	Return cropped image resource on success ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecropThis'))
{
    function imagecropThis($image, $rect)
    {
		$image = is_resource($image) ? $image : NULL;
		$rect = (array)$rect;

		return imagecrop($image, $rect);
    }
}

/**
 * imagecropautoThis
 *
 * Crop an image automatically using one of the available modes.
 *
 * @link http://php.net/manual/fr/function.imagecropauto.php Documentation pour imagecropauto.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $mode    One of IMG_CROP_* constants.
 * @param float    $threshold    Used in IMG_CROP_THRESHOLD mode.
 * @param int      $color    Used in IMG_CROP_THRESHOLD mode.
 *
 * @return resource	Return cropped image resource on success ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagecropautoThis'))
{
    function imagecropautoThis($image, $mode = -1, $threshold = 0.5, $color = -1)
    {
		$image = is_resource($image) ? $image : NULL;
		$mode = (int)$mode;
		$threshold = (float)$threshold;
		$color = (int)$color;

		return imagecropauto($image, $mode, $threshold, $color);
    }
}

/**
 * imagedashedlineThis
 *
 * Dessine une ligne pointillée.
 *
 * @link http://php.net/manual/fr/function.imagedashedline.php Documentation pour imagedashedline.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x1    Coordonnée en X : En haut, à gauche.
 * @param int      $y1    Coordonnée en Y : En haut, à gauche. 0 est le coin en haut à gauche de l'image.
 * @param int      $x2    Coordonnée en X : En bas, à droite.
 * @param int      $y2    Coordonnée en Y : En bas, à droite.
 * @param int      $color    La couleur de remplissage. Un identifiant de couleur retourné par la fonction imagecolorallocate().
 *
 * @return bool	Retourne toujours TRUE.
 *
 */
if(!function_exists('imagedashedlineThis'))
{
    function imagedashedlineThis($image, $x1, $y1, $x2, $y2, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$x1 = (int)$x1;
		$y1 = (int)$y1;
		$x2 = (int)$x2;
		$y2 = (int)$y2;
		$color = (int)$color;

		return imagedashedline($image, $x1, $y1, $x2, $y2, $color);
    }
}

/**
 * imagedestroyThis
 *
 * Détruit une image.
 *
 * @link http://php.net/manual/fr/function.imagedestroy.php Documentation pour imagedestroy.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagedestroyThis'))
{
    function imagedestroyThis($image)
    {
		$image = is_resource($image) ? $image : NULL;

		return imagedestroy($image);
    }
}

/**
 * imageellipseThis
 *
 * Dessine une ellipse.
 *
 * @link http://php.net/manual/fr/function.imageellipse.php Documentation pour imageellipse.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $cx    X : coordonnée du centre.
 * @param int      $cy    Y : coordonnée du centre.
 * @param int      $width    La largeur de l'ellipse.
 * @param int      $height    La hauteur de l'ellipse.
 * @param int      $color    La couleur de l'ellipse. Un identifiant de couleur créé avec la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageellipseThis'))
{
    function imageellipseThis($image, $cx, $cy, $width, $height, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$cx = (int)$cx;
		$cy = (int)$cy;
		$width = (int)$width;
		$height = (int)$height;
		$color = (int)$color;

		return imageellipse($image, $cx, $cy, $width, $height, $color);
    }
}

/**
 * imagefillThis
 *
 * Remplissage.
 *
 * @link http://php.net/manual/fr/function.imagefill.php Documentation pour imagefill.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x    X : coordonnée du point de départ.
 * @param int      $y    Y : coordonnée du point de départ.
 * @param int      $color    La couleur de remplissage. Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagefillThis'))
{
    function imagefillThis($image, $x, $y, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$x = (int)$x;
		$y = (int)$y;
		$color = (int)$color;

		return imagefill($image, $x, $y, $color);
    }
}

/**
 * imagefilledarcThis
 *
 * Dessine un arc partiel et le remplit.
 *
 * @link http://php.net/manual/fr/function.imagefilledarc.php Documentation pour imagefilledarc.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $cx    X : coordonnée du centre.
 * @param int      $cy    Y : coordonnée du centre.
 * @param int      $width    La largeur de l'arc.
 * @param int      $height    La hauteur de l'arc.
 * @param int      $start    L'angle de début de l'arc, en degrés.
 * @param int      $end    L'angle de fin de l'arc, en degrés. 0° est situé à une position de 3 heures sur un cadran horaire, et l'arc est dessiné dans le sens des aiguilles d'une montre.
 * @param int      $color    Un identifiant de couleur, créé par la fonction imagecolorallocate().
 * @param int      $style    Un champ d'octets, combiné avec l'opérateur OR :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagefilledarcThis'))
{
    function imagefilledarcThis($image, $cx, $cy, $width, $height, $start, $end, $color, $style)
    {
		$image = is_resource($image) ? $image : NULL;
		$cx = (int)$cx;
		$cy = (int)$cy;
		$width = (int)$width;
		$height = (int)$height;
		$start = (int)$start;
		$end = (int)$end;
		$color = (int)$color;
		$style = (int)$style;

		return imagefilledarc($image, $cx, $cy, $width, $height, $start, $end, $color, $style);
    }
}

/**
 * imagefilledellipseThis
 *
 * Dessine une ellipse pleine.
 *
 * @link http://php.net/manual/fr/function.imagefilledellipse.php Documentation pour imagefilledellipse.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $cx    X : coordonnée du centre.
 * @param int      $cy    Y : coordonnée du centre.
 * @param int      $width    La largeur de l'ellipse.
 * @param int      $height    La hauteur de l'ellipse.
 * @param int      $color    La couleur de remplissage. Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagefilledellipseThis'))
{
    function imagefilledellipseThis($image, $cx, $cy, $width, $height, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$cx = (int)$cx;
		$cy = (int)$cy;
		$width = (int)$width;
		$height = (int)$height;
		$color = (int)$color;

		return imagefilledellipse($image, $cx, $cy, $width, $height, $color);
    }
}

/**
 * imagefilledpolygonThis
 *
 * Dessine un polygone rempli.
 *
 * @link http://php.net/manual/fr/function.imagefilledpolygon.php Documentation pour imagefilledpolygon.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param array    $points    Un tableau qui contient les coordonnées x et y du sommet des polygones.
 * @param int      $num_points    Le nombre total de sommets, et doit être d'au moins 3.
 * @param int      $color    Un identifiant de couleur, créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagefilledpolygonThis'))
{
    function imagefilledpolygonThis($image, $points, $num_points, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$points = (array)$points;
		$num_points = (int)$num_points;
		$color = (int)$color;

		return imagefilledpolygon($image, $points, $num_points, $color);
    }
}

/**
 * imagefilledrectangleThis
 *
 * Dessine un rectangle rempli.
 *
 * @link http://php.net/manual/fr/function.imagefilledrectangle.php Documentation pour imagefilledrectangle.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x1    X : coordonné du point 1.
 * @param int      $y1    Y : coordonné du point 1.
 * @param int      $x2    X : coordonné du point 2.
 * @param int      $y2    Y : coordonné du point 2.
 * @param int      $color    La couleur de remplissage. Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagefilledrectangleThis'))
{
    function imagefilledrectangleThis($image, $x1, $y1, $x2, $y2, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$x1 = (int)$x1;
		$y1 = (int)$y1;
		$x2 = (int)$x2;
		$y2 = (int)$y2;
		$color = (int)$color;

		return imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color);
    }
}

/**
 * imagefilltoborderThis
 *
 * Remplit une région avec une couleur spécifique.
 *
 * @link http://php.net/manual/fr/function.imagefilltoborder.php Documentation pour imagefilltoborder.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x    X : coordonné de départ.
 * @param int      $y    Y : coordonné de départ.
 * @param int      $border    La couleur de la bordure. Un identifiant de couleur créé par la fonction imagecolorallocate().
 * @param int      $color    La couleur de remplissage. Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagefilltoborderThis'))
{
    function imagefilltoborderThis($image, $x, $y, $border, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$x = (int)$x;
		$y = (int)$y;
		$border = (int)$border;
		$color = (int)$color;

		return imagefilltoborder($image, $x, $y, $border, $color);
    }
}

/**
 * imagefilterThis
 *
 * Applique un filtre à une image.
 *
 * @link http://php.net/manual/fr/function.imagefilter.php Documentation pour imagefilter.
 *
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $filtertype    Le paramètre filtertype peut prendre l'une des valeurs suivantes :
 * @param int      $arg1
 * @param int      $arg2
 * @param int      $arg3
 * @param int      $arg4
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagefilterThis'))
{
    function imagefilterThis($image, $filtertype, $arg1 = NULL, $arg2 = NULL, $arg3 = NULL, $arg4 = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filtertype = (int)$filtertype;
		$arg1 = (int)$arg1;
		$arg2 = (int)$arg2;
		$arg3 = (int)$arg3;
		$arg4 = (int)$arg4;

		return imagefilter($image, $filtertype, $arg1, $arg2, $arg3, $arg4);
    }
}

/**
 * imageflipThis
 *
 * Retourne une image en utilisant le mode fourni.
 *
 * @link http://php.net/manual/fr/function.imageflip.php Documentation pour imageflip.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $mode    Mode de retournement ; peut-être une des constantes IMG_FLIP_* :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageflipThis'))
{
    function imageflipThis($image, $mode)
    {
		$image = is_resource($image) ? $image : NULL;
		$mode = (int)$mode;

		return imageflip($image, $mode);
    }
}

/**
 * imagefontheightThis
 *
 * Retourne la hauteur de la police.
 *
 * @link http://php.net/manual/fr/function.imagefontheight.php Documentation pour imagefontheight.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $font    Peut être 1, 2, 3, 4, 5 pour les polices internes d'encodage Latin2 (où les plus grands nombres correspondent aux polices larges) ou n'importe quels identifiants de police de votre choix, enregistrées avec la fonction imageloadfont().
 *
 * @return int	Retourne la hauteur de la police, en pixels.
 *
 */
if(!function_exists('imagefontheightThis'))
{
    function imagefontheightThis($font)
    {
		$font = (int)$font;

		return imagefontheight($font);
    }
}

/**
 * imagefontwidthThis
 *
 * Retourne la largeur de la police.
 *
 * @link http://php.net/manual/fr/function.imagefontwidth.php Documentation pour imagefontwidth.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $font    Peut être 1, 2, 3, 4, 5 pour les polices internes d'encodage Latin2 (où les plus grands nombres correspondent aux polices larges) ou n'importe quels identifiants de police de votre choix, enregistrées avec la fonction imageloadfont().
 *
 * @return int	Retourne la largeur de la police.
 *
 */
if(!function_exists('imagefontwidthThis'))
{
    function imagefontwidthThis($font)
    {
		$font = (int)$font;

		return imagefontwidth($font);
    }
}

/**
 * imageftbboxThis
 *
 * Calcule le rectangle d'encadrement pour un texte, en utilisant la police courante et freetype2.
 *
 * @link http://php.net/manual/fr/function.imageftbbox.php Documentation pour imageftbbox.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param float    $size    La taille de la police de caractères. Suivant votre version de GD, elle doit être exprimée en pixel (GD1) ou en point (GD2).
 * @param float    $angle    Angle, en degrés, dans lequel le paramètre text sera mesuré.
 * @param string   $fontfile    Le nom du fichier de la police TrueType (peut être une URL). Suivant la version de GD utilisée par PHP, il sera recherché les fichiers qui ne commencent pas par un '/', en y ajoutant l'extension '.ttf', et suivant le chemin des polices défini par la bibliothèque.
 * @param string   $text    La chaîne à mesurer.
 * @param array    $extrainfo
 *
 * @return array	imageftbbox() retourne un tableau contenant 8 éléments représentant les 4 points du rectangle entourant le texte :
 *
 */
if(!function_exists('imageftbboxThis'))
{
    function imageftbboxThis($size, $angle, $fontfile, $text, $extrainfo = NULL)
    {
		$size = (float)$size;
		$angle = (float)$angle;
		$fontfile = (string)$fontfile;
		$text = (string)$text;
		$extrainfo = (array)$extrainfo;

		return imageftbbox($size, $angle, $fontfile, $text, $extrainfo);
    }
}

/**
 * imagefttextThis
 *
 * Écrit du texte dans une image avec la police courante FreeType 2.
 *
 * @link http://php.net/manual/fr/function.imagefttext.php Documentation pour imagefttext.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param float    $size    La taille de la police à utiliser, en nombre de points.
 * @param float    $angle    L'angle, en degrés ; 0 degré pour une lecture du texte de gauche à droite. Les grandes valeurs représentent une rotation dans le sens des aiguilles d'une montre. Par exemple, une valeur de 90 aura pour effet de lire le texte du bas vers le haut.
 * @param int      $x    Les coordonnées, fournies par x et y définissent le point de départ du premier caractère (et plus précisément, le coin en bas à gauche du caractère). C'est un comportement différent de la fonction imagestring(), où x et y définissent le coin en haut, à gauche du premier caractère. Par exemple, en haut à gauche vaut 0, 0.
 * @param int      $y    L'ordonnée y-ordinate. Ce paramètre configure la position de base de la police, et non pas le bas de cette dernière.
 * @param int      $color    L'index de la couleur désirée pour le texte, voir la fonction imagecolorexact().
 * @param string   $fontfile    Le chemin vers la police TrueType à utiliser. Suivant la version de GD utilisée par PHP, il sera recherché les fichiers qui ne commencent pas par un '/', en y ajoutant l'extension '.ttf', et suivant le chemin des polices défini par la bibliothèque. Lors de l'utilisation d'une version de GD inférieure à 2.0.18, un caractère d'espacement (plutôt qu'un point-virgule) était utilisé comment séparateur dans le chemin pour les différents fichiers de police. Si vous utilisez toujours cette notation, vous obtiendrez le message d'erreur suivant : Warning: Could not find/open font. Pour ces anciennes versions, la seule solution est de déplacer la police dans un dossier qui ne contient pas d'espace. Dans la plupart des cas, lorsque la police se trouve dans le même dossier que le script qui cherche à l'utiliser, la solution suivante permet de s'affranchir de tous les problèmes relatifs à l'inclusion.
 * @param string   $text    Le texte à insérer dans l'image.
 * @param array    $extrainfo
 *
 * @return array	Cette fonction retourne un tableau définissant les 4 points d'une boîte, en commençant par le coin en bas, à gauche, puis, les suivants, dans le sens des aiguilles d'une montre :
 *
 */
if(!function_exists('imagefttextThis'))
{
    function imagefttextThis($image, $size, $angle, $x, $y, $color, $fontfile, $text, $extrainfo = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$size = (float)$size;
		$angle = (float)$angle;
		$x = (int)$x;
		$y = (int)$y;
		$color = (int)$color;
		$fontfile = (string)$fontfile;
		$text = (string)$text;
		$extrainfo = (array)$extrainfo;

		return imagefttext($image, $size, $angle, $x, $y, $color, $fontfile, $text, $extrainfo);
    }
}

/**
 * imagegammacorrectThis
 *
 * Applique une correction gamma à l'image GD.
 *
 * @link http://php.net/manual/fr/function.imagegammacorrect.php Documentation pour imagegammacorrect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param float    $inputgamma    Le facteur gamma d'entrée.
 * @param float    $outputgamma    Le facteur gamma de sortie.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagegammacorrectThis'))
{
    function imagegammacorrectThis($image, $inputgamma, $outputgamma)
    {
		$image = is_resource($image) ? $image : NULL;
		$inputgamma = (float)$inputgamma;
		$outputgamma = (float)$outputgamma;

		return imagegammacorrect($image, $inputgamma, $outputgamma);
    }
}

/**
 * imagegdThis
 *
 * Génère une image au format GD, vers le navigateur ou un fichier.
 *
 * @link http://php.net/manual/fr/function.imagegd.php Documentation pour imagegd.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagegdThis'))
{
    function imagegdThis($image, $filename = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;

		return imagegd($image, $filename);
    }
}

/**
 * imagegd2This
 *
 * Génère une image au format GD2, vers le navigateur ou un fichier.
 *
 * @link http://php.net/manual/fr/function.imagegd2.php Documentation pour imagegd2.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement.
 * @param int      $chunk_size    Taille de la pièce.
 * @param int      $type    Soit IMG_GD2_RAW, soit IMG_GD2_COMPRESSED. Par défaut, vaut IMG_GD2_RAW.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagegd2This'))
{
    function imagegd2This($image, $filename = NULL, $chunk_size = NULL, $type = IMG_GD2_RAW)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;
		$chunk_size = (int)$chunk_size;
		$type = (int)$type;

		return imagegd2($image, $filename, $chunk_size, $type);
    }
}

/**
 * imagegifThis
 *
 * Affichage de l'image vers le navigateur ou dans un fichier.
 *
 * @link http://php.net/manual/fr/function.imagegif.php Documentation pour imagegif.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagegifThis'))
{
    function imagegifThis($image, $filename = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;

		return imagegif($image, $filename);
    }
}

/**
 * imagegrabscreenThis
 *
 * Capture l'écran complet.
 *
 * @link http://php.net/manual/fr/function.imagegrabscreen.php Documentation pour imagegrabscreen.
 *
 * @version PHP 5 >= 5.2.2
 * @return resource	Retourne une ressource image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagegrabscreenThis'))
{
    function imagegrabscreenThis()
    {
		return imagegrabscreen();
    }
}

/**
 * imagegrabwindowThis
 *
 * Capture une fenêtre.
 *
 * @link http://php.net/manual/fr/function.imagegrabwindow.php Documentation pour imagegrabwindow.
 *
 * @version PHP 5 >= 5.2.2
 *
 * @param int      $window_handle    L'identifiant HWND de la fenêtre.
 * @param int      $client_area    Inclure ou non l'espace du client de la fenêtre de l'application.
 *
 * @return resource	Retourne une ressource image en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagegrabwindowThis'))
{
    function imagegrabwindowThis($window_handle, $client_area = 0)
    {
		$window_handle = (int)$window_handle;
		$client_area = (int)$client_area;

		return imagegrabwindow($window_handle, $client_area);
    }
}

/**
 * imageinterlaceThis
 *
 * Active ou désactive l'entrelacement.
 *
 * @link http://php.net/manual/fr/function.imageinterlace.php Documentation pour imageinterlace.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $interlace    Si différent de zéro, l'image sera entrelacée, sinon, l'entrelacement sera désactivé.
 *
 * @return int	Retourne 1 si l'entrelacement est activé pour l'image, 0 sinon.
 *
 */
if(!function_exists('imageinterlaceThis'))
{
    function imageinterlaceThis($image, $interlace = 0)
    {
		$image = is_resource($image) ? $image : NULL;
		$interlace = (int)$interlace;

		return imageinterlace($image, $interlace);
    }
}

/**
 * imageistruecolorThis
 *
 * Détermine si une image est une image truecolor.
 *
 * @link http://php.net/manual/fr/function.imageistruecolor.php Documentation pour imageistruecolor.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 *
 * @return bool	Retourne TRUE si l'image est truecolor, FALSE sinon.
 *
 */
if(!function_exists('imageistruecolorThis'))
{
    function imageistruecolorThis($image)
    {
		$image = is_resource($image) ? $image : NULL;

		return imageistruecolor($image);
    }
}

/**
 * imagejpegThis
 *
 * Affichage de l'image vers le navigateur ou dans un fichier.
 *
 * @link http://php.net/manual/fr/function.imagejpeg.php Documentation pour imagejpeg.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement. Pour éviter de fournir cet argument afin de fournir l'argument quality, utilisez une valeur NULL.
 * @param int      $quality    quality est optionnel, et prend des valeurs entières de 0 (pire qualité, petit fichier) et 100 (meilleure qualité, gros fichier). Par défaut, la valeur est celle de la qualité IJG (75).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagejpegThis'))
{
    function imagejpegThis($image, $filename = NULL, $quality = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;
		$quality = (int)$quality;

		return imagejpeg($image, $filename, $quality);
    }
}

/**
 * imagelayereffectThis
 *
 * Active l'option d'alpha blending, pour utiliser les effets de libgd.
 *
 * @link http://php.net/manual/fr/function.imagelayereffect.php Documentation pour imagelayereffect.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $effect    Une des constantes suivantes :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagelayereffectThis'))
{
    function imagelayereffectThis($image, $effect)
    {
		$image = is_resource($image) ? $image : NULL;
		$effect = (int)$effect;

		return imagelayereffect($image, $effect);
    }
}

/**
 * imagelineThis
 *
 * Dessine une ligne.
 *
 * @link http://php.net/manual/fr/function.imageline.php Documentation pour imageline.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x1    X : coordonnée du premier point.
 * @param int      $y1    Y : coordonnée du premier point.
 * @param int      $x2    X : coordonnée du second point.
 * @param int      $y2    Y : coordonnée du second point.
 * @param int      $color    La couleur de remplissage. Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagelineThis'))
{
    function imagelineThis($image, $x1, $y1, $x2, $y2, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$x1 = (int)$x1;
		$y1 = (int)$y1;
		$x2 = (int)$x2;
		$y2 = (int)$y2;
		$color = (int)$color;

		return imageline($image, $x1, $y1, $x2, $y2, $color);
    }
}

/**
 * imageloadfontThis
 *
 * Charge une nouvelle police.
 *
 * @link http://php.net/manual/fr/function.imageloadfont.php Documentation pour imageloadfont.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $file    Le format des polices dépend actuellement du système d'exploitation. Ce qui signifie qu'il vous faut générer des fichiers de polices pour la machine qui fait tourner PHP.
 *
 * @return int	L'identifiant de la police qui sera toujours supérieur à 5 afin d'éviter les conflits avec les polices internes ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imageloadfontThis'))
{
    function imageloadfontThis($file)
    {
		$file = (string)$file;

		return imageloadfont($file);
    }
}

/**
 * imagepalettecopyThis
 *
 * Copie la palette d'une image à l'autre.
 *
 * @link http://php.net/manual/fr/function.imagepalettecopy.php Documentation pour imagepalettecopy.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param resource $destination    La ressource de l'image de destination.
 * @param resource $source    La ressource de l'image source.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('imagepalettecopyThis'))
{
    function imagepalettecopyThis($destination, $source)
    {
		$destination = is_resource($destination) ? $destination : NULL;
		$source = is_resource($source) ? $source : NULL;

		return imagepalettecopy($destination, $source);
    }
}

/**
 * imagepalettetotruecolorThis
 *
 * Convertit une image basée sur une palette en couleur vraie.
 *
 * @link http://php.net/manual/fr/function.imagepalettetotruecolor.php Documentation pour imagepalettetotruecolor.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $src    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 *
 * @return bool	Retourne TRUE si la convertion a été un succès, ou si l'image source est déjà en couleur vraie, sinon, retourne FALSE.
 *
 */
if(!function_exists('imagepalettetotruecolorThis'))
{
    function imagepalettetotruecolorThis($src)
    {
		$src = is_resource($src) ? $src : NULL;

		return imagepalettetotruecolor($src);
    }
}

/**
 * imagepngThis
 *
 * Envoie une image PNG vers un navigateur ou un fichier.
 *
 * @link http://php.net/manual/fr/function.imagepng.php Documentation pour imagepng.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement.
 * @param int      $quality    Degré de compression : depuis 0 (aucune compression) à 9.
 * @param int      $filters    Permet la réduction de la taille du fichier PNG. C'est un masque qui peut être défini par une combinaison des constantes PNG_FILTER_XXX. PNG_NO_FILTER ou PNG_ALL_FILTERS peuvent également être utilisé pour, respectivement, désactiver ou activer tous les filtres.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagepngThis'))
{
    function imagepngThis($image, $filename = NULL, $quality = NULL, $filters = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;
		$quality = (int)$quality;
		$filters = (int)$filters;

		return imagepng($image, $filename, $quality, $filters);
    }
}

/**
 * imagepolygonThis
 *
 * Dessine un polygone.
 *
 * @link http://php.net/manual/fr/function.imagepolygon.php Documentation pour imagepolygon.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param array    $points    Un tableau contenant les sommets du polygone, e.g. :
 * @param int      $num_points    Le nombre de points (sommets).
 * @param int      $color    Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagepolygonThis'))
{
    function imagepolygonThis($image, $points, $num_points, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$points = (array)$points;
		$num_points = (int)$num_points;
		$color = (int)$color;

		return imagepolygon($image, $points, $num_points, $color);
    }
}

/**
 * imagepsbboxThis
 *
 * Retourne le rectangle entourant un texte et dessiné avec une police PostScript Type1.
 *
 * @link http://php.net/manual/fr/function.imagepsbbox.php Documentation pour imagepsbbox.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $text    Le texte à écrire.
 * @param resource $font    Une ressource de police, retournée par la fonction imagepsloadfont().
 * @param int      $size    size est exprimé en pixels.
 *
 * @return array	Retourne un tableau contenant les éléments suivants :
 *
 */
if(!function_exists('imagepsbboxThis'))
{
    function imagepsbboxThis($text, $font, $size)
    {
		$text = (string)$text;
		$font = is_resource($font) ? $font : NULL;
		$size = (int)$size;

		return imagepsbbox($text, $font, $size);
    }
}

/**
 * imagepsencodefontThis
 *
 * Change le codage vectoriel d'un caractère dans une police.
 *
 * @link http://php.net/manual/fr/function.imagepsencodefont.php Documentation pour imagepsencodefont.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $font_index    Une ressource de police, retournée par la fonction imagepsloadfont().
 * @param string   $encodingfile    Le format exact de ce fichier est décrit dans la documentation T1libs. T1lib est fourni avec deux fichiers prêt à l'emploi : IsoLatin1.enc et IsoLatin2.enc.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagepsencodefontThis'))
{
    function imagepsencodefontThis($font_index, $encodingfile)
    {
		$font_index = is_resource($font_index) ? $font_index : NULL;
		$encodingfile = (string)$encodingfile;

		return imagepsencodefont($font_index, $encodingfile);
    }
}

/**
 * imagepsextendfontThis
 *
 * Étend ou condense une police de caractères.
 *
 * @link http://php.net/manual/fr/function.imagepsextendfont.php Documentation pour imagepsextendfont.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $font_index    Une ressource de police, retournée par la fonction imagepsloadfont().
 * @param float    $extend    Extension de la valeur ; doit être supérieure à 0.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagepsextendfontThis'))
{
    function imagepsextendfontThis($font_index, $extend)
    {
		$font_index = is_resource($font_index) ? $font_index : NULL;
		$extend = (float)$extend;

		return imagepsextendfont($font_index, $extend);
    }
}

/**
 * imagepsfreefontThis
 *
 * Libère la mémoire occupée par une police PostScript Type 1.
 *
 * @link http://php.net/manual/fr/function.imagepsfreefont.php Documentation pour imagepsfreefont.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $font_index    Une ressource de police, retournée par la fonction imagepsloadfont().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagepsfreefontThis'))
{
    function imagepsfreefontThis($font_index)
    {
		$font_index = is_resource($font_index) ? $font_index : NULL;

		return imagepsfreefont($font_index);
    }
}

/**
 * imagepsloadfontThis
 *
 * Charge une police PostScript Type 1 depuis un fichier.
 *
 * @link http://php.net/manual/fr/function.imagepsloadfont.php Documentation pour imagepsloadfont.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier de police Postscript.
 *
 * @return resource	En cas de succès, imagepsloadfont() retourne un index de police, qui pourra être utilisé pour des opérations ultérieures. Sinon, imagepsloadfont() retournera FALSE.
 *
 */
if(!function_exists('imagepsloadfontThis'))
{
    function imagepsloadfontThis($filename)
    {
		$filename = (string)$filename;

		return imagepsloadfont($filename);
    }
}

/**
 * imagepsslantfontThis
 *
 * Incline une police de caractères PostScript.
 *
 * @link http://php.net/manual/fr/function.imagepsslantfont.php Documentation pour imagepsslantfont.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $font_index    Une ressource de police, retournée par la fonction imagepsloadfont().
 * @param float    $slant    Niveau de l'italique.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagepsslantfontThis'))
{
    function imagepsslantfontThis($font_index, $slant)
    {
		$font_index = is_resource($font_index) ? $font_index : NULL;
		$slant = (float)$slant;

		return imagepsslantfont($font_index, $slant);
    }
}

/**
 * imagepstextThis
 *
 * Dessine un texte sur une image avec une police PostScript Type1.
 *
 * @link http://php.net/manual/fr/function.imagepstext.php Documentation pour imagepstext.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $text    Le texte à écrire.
 * @param resource $font_index    Une ressource de police, retournée par la fonction imagepsloadfont().
 * @param int      $size    size est exprimé en pixels.
 * @param int      $foreground    La couleur avec laquelle le texte va être dessiné.
 * @param int      $background    La couleur d'antialiasing. Aucun pixel avec la couleur background n'est dessiné, ce qui fait que l'arrière-plan n'a pas besoin d'être dans une couleur fixe.
 * @param int      $x    X : coordonnée du coin en bas, à gauche du premier caractère.
 * @param int      $y    Y : coordonnée du coin en bas, à gauche du premier caractère.
 * @param int      $space    Permet de changer la taille par défaut du caractère d'espacement. Cette valeur peut être négative. Exprimé en unité d'espaces caractère, ce qui vaut 1/1000ème d'un em-carré (un em : unité de mesure représentée par un carré dont la dimension horizontale est la même que le corps du caractère).
 * @param int      $tightness    Permet de contrôler la quantité d'espace entre deux caractères. Cette valeur peut être négative. Exprimé en unité d'espaces caractère, ce qui vaut 1/1000ème d'un em-carré.
 * @param float    $angle    angle est en degrés.
 * @param int      $antialias_steps    Permet de contrôler le nombre de couleurs du texte antialiasé. Les valeurs autorisées sont 4 et 16. 16 est recommandée pour les polices de moins de 20 pixels, car l'effet est alors visible. Avec les tailles plus grandes, utilisez de préférence 4, qui est moins gourmande en ressources.
 *
 * @return array	Cette fonction retourne un tableau contenant les éléments suivants :
 *
 */
if(!function_exists('imagepstextThis'))
{
    function imagepstextThis($image, $text, $font_index, $size, $foreground, $background, $x, $y, $space = 0, $tightness = 0, $angle = 0, $antialias_steps = 4)
    {
		$image = is_resource($image) ? $image : NULL;
		$text = (string)$text;
		$font_index = is_resource($font_index) ? $font_index : NULL;
		$size = (int)$size;
		$foreground = (int)$foreground;
		$background = (int)$background;
		$x = (int)$x;
		$y = (int)$y;
		$space = (int)$space;
		$tightness = (int)$tightness;
		$angle = (float)$angle;
		$antialias_steps = (int)$antialias_steps;

		return imagepstext($image, $text, $font_index, $size, $foreground, $background, $x, $y, $space, $tightness, $angle, $antialias_steps);
    }
}

/**
 * imagerectangleThis
 *
 * Dessine un rectangle.
 *
 * @link http://php.net/manual/fr/function.imagerectangle.php Documentation pour imagerectangle.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x1    X : coordonnée du coin en haut, à gauche.
 * @param int      $y1    Y : coordonnée du coin en haut, à gauche. 0, 0 est le coin en haut à gauche de l'image.
 * @param int      $x2    X : coordonnée du point en bas, à droite.
 * @param int      $y2    Y : coordonnée du point en bas, à droite.
 * @param int      $color    Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagerectangleThis'))
{
    function imagerectangleThis($image, $x1, $y1, $x2, $y2, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$x1 = (int)$x1;
		$y1 = (int)$y1;
		$x2 = (int)$x2;
		$y2 = (int)$y2;
		$color = (int)$color;

		return imagerectangle($image, $x1, $y1, $x2, $y2, $color);
    }
}

/**
 * imagerotateThis
 *
 * Fait tourner une image d'un angle.
 *
 * @link http://php.net/manual/fr/function.imagerotate.php Documentation pour imagerotate.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param float    $angle    L'angle de rotation, en degrés. L'angle de rotation est interprété comme étant le nombre de degrés à tourner l'image dans le sens inverse des aiguilles d'une montre.
 * @param int      $bgd_color    Spécifie la couleur des zones qui seront découvertes après la rotation.
 * @param int      $ignore_transparent    Si ce paramètre est défini et ne vaut pas zéro, les couleurs transparentes seront ignorées.
 *
 * @return resource	Retourne une ressource d'image correspondant à l'image après rotation, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagerotateThis'))
{
    function imagerotateThis($image, $angle, $bgd_color, $ignore_transparent = 0)
    {
		$image = is_resource($image) ? $image : NULL;
		$angle = (float)$angle;
		$bgd_color = (int)$bgd_color;
		$ignore_transparent = (int)$ignore_transparent;

		return imagerotate($image, $angle, $bgd_color, $ignore_transparent);
    }
}

/**
 * imagesavealphaThis
 *
 * Configure l'enregistrement des informations complètes du canal alpha lors de sauvegardes d'images PNG.
 *
 * @link http://php.net/manual/fr/function.imagesavealpha.php Documentation pour imagesavealpha.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param bool     $saveflag    Si l'on doit ou non sauvegarder le canal Alpha. Par défaut, FALSE.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesavealphaThis'))
{
    function imagesavealphaThis($image, $saveflag)
    {
		$image = is_resource($image) ? $image : NULL;
		$saveflag = (bool)$saveflag;

		return imagesavealpha($image, $saveflag);
    }
}

/**
 * imagescaleThis
 *
 * Scale an image using the given new width and height.
 *
 * @link http://php.net/manual/fr/function.imagescale.php Documentation pour imagescale.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $new_width
 * @param int      $new_height
 * @param int      $mode    One of IMG_NEAREST_NEIGHBOUR, IMG_BILINEAR_FIXED, IMG_BICUBIC, IMG_BICUBIC_FIXED or anything else (will use two pass).
 *
 * @return resource	Return scaled image resource on success ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagescaleThis'))
{
    function imagescaleThis($image, $new_width, $new_height = -1, $mode = IMG_BILINEAR_FIXED)
    {
		$image = is_resource($image) ? $image : NULL;
		$new_width = (int)$new_width;
		$new_height = (int)$new_height;
		$mode = (int)$mode;

		return imagescale($image, $new_width, $new_height, $mode);
    }
}

/**
 * imagesetbrushThis
 *
 * Modifie la brosse pour le dessin des lignes.
 *
 * @link http://php.net/manual/fr/function.imagesetbrush.php Documentation pour imagesetbrush.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param resource $brush    Une ressource d'image.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesetbrushThis'))
{
    function imagesetbrushThis($image, $brush)
    {
		$image = is_resource($image) ? $image : NULL;
		$brush = is_resource($brush) ? $brush : NULL;

		return imagesetbrush($image, $brush);
    }
}

/**
 * imagesetinterpolationThis
 *
 * Set the interpolation method.
 *
 * @link http://php.net/manual/fr/function.imagesetinterpolation.php Documentation pour imagesetinterpolation.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $method    The interpolation method, which can be one of the following:
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesetinterpolationThis'))
{
    function imagesetinterpolationThis($image, $method = IMG_BILINEAR_FIXED)
    {
		$image = is_resource($image) ? $image : NULL;
		$method = (int)$method;

		return imagesetinterpolation($image, $method);
    }
}

/**
 * imagesetpixelThis
 *
 * Dessine un pixel.
 *
 * @link http://php.net/manual/fr/function.imagesetpixel.php Documentation pour imagesetpixel.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $x    X : coordonnée.
 * @param int      $y    Y : coordonnée.
 * @param int      $color    Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesetpixelThis'))
{
    function imagesetpixelThis($image, $x, $y, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$x = (int)$x;
		$y = (int)$y;
		$color = (int)$color;

		return imagesetpixel($image, $x, $y, $color);
    }
}

/**
 * imagesetstyleThis
 *
 * Configure le style pour le dessin des lignes.
 *
 * @link http://php.net/manual/fr/function.imagesetstyle.php Documentation pour imagesetstyle.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param array    $style    Un tableau de couleurs de pixels. Vous pouvez utiliser la constante IMG_COLOR_TRANSPARENT pour ajouter un pixel transparent.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesetstyleThis'))
{
    function imagesetstyleThis($image, $style)
    {
		$image = is_resource($image) ? $image : NULL;
		$style = (array)$style;

		return imagesetstyle($image, $style);
    }
}

/**
 * imagesetthicknessThis
 *
 * Modifie l'épaisseur d'un trait.
 *
 * @link http://php.net/manual/fr/function.imagesetthickness.php Documentation pour imagesetthickness.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $thickness    L'épaisseur, en pixels.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesetthicknessThis'))
{
    function imagesetthicknessThis($image, $thickness)
    {
		$image = is_resource($image) ? $image : NULL;
		$thickness = (int)$thickness;

		return imagesetthickness($image, $thickness);
    }
}

/**
 * imagesettileThis
 *
 * Modifie l'image utilisée pour le carrelage.
 *
 * @link http://php.net/manual/fr/function.imagesettile.php Documentation pour imagesettile.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param resource $tile    La ressource de l'image à utiliser en tant que carrelage.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesettileThis'))
{
    function imagesettileThis($image, $tile)
    {
		$image = is_resource($image) ? $image : NULL;
		$tile = is_resource($tile) ? $tile : NULL;

		return imagesettile($image, $tile);
    }
}

/**
 * imagestringThis
 *
 * Dessine une chaîne horizontale.
 *
 * @link http://php.net/manual/fr/function.imagestring.php Documentation pour imagestring.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $font    Peut être 1, 2, 3, 4, 5 pour les polices internes d'encodage Latin2 (où les plus grands nombres correspondent aux polices larges) ou n'importe quels identifiants de police de votre choix, enregistrées avec la fonction imageloadfont().
 * @param int      $x    X : coordonnée du coin en haut, à gauche.
 * @param int      $y    Y : coordonnée du coin en haut, à gauche.
 * @param string   $string    La chaîne de caractères à écrire.
 * @param int      $color    Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagestringThis'))
{
    function imagestringThis($image, $font, $x, $y, $string, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$font = (int)$font;
		$x = (int)$x;
		$y = (int)$y;
		$string = (string)$string;
		$color = (int)$color;

		return imagestring($image, $font, $x, $y, $string, $color);
    }
}

/**
 * imagestringupThis
 *
 * Dessine une chaîne verticale.
 *
 * @link http://php.net/manual/fr/function.imagestringup.php Documentation pour imagestringup.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param int      $font    Peut être 1, 2, 3, 4, 5 pour les polices internes d'encodage Latin2 (où les plus grands nombres correspondent aux polices larges) ou n'importe quels identifiants de police de votre choix, enregistrées avec la fonction imageloadfont().
 * @param int      $x    Coordonnée X du coin en haut, à gauche.
 * @param int      $y    Coordonnée Y du coin en haut, à gauche.
 * @param string   $string    La chaîne de caractères à écrire.
 * @param int      $color    Un identifiant de couleur créé par la fonction imagecolorallocate().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagestringupThis'))
{
    function imagestringupThis($image, $font, $x, $y, $string, $color)
    {
		$image = is_resource($image) ? $image : NULL;
		$font = (int)$font;
		$x = (int)$x;
		$y = (int)$y;
		$string = (string)$string;
		$color = (int)$color;

		return imagestringup($image, $font, $x, $y, $string, $color);
    }
}

/**
 * imagesxThis
 *
 * Retourne la largeur d'une image.
 *
 * @link http://php.net/manual/fr/function.imagesx.php Documentation pour imagesx.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 *
 * @return int	Retourne la largeur de l'image image ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesxThis'))
{
    function imagesxThis($image)
    {
		$image = is_resource($image) ? $image : NULL;

		return imagesx($image);
    }
}

/**
 * imagesyThis
 *
 * Retourne la hauteur de l'image.
 *
 * @link http://php.net/manual/fr/function.imagesy.php Documentation pour imagesy.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 *
 * @return int	Retourne la hauteur de l'image image ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagesyThis'))
{
    function imagesyThis($image)
    {
		$image = is_resource($image) ? $image : NULL;

		return imagesy($image);
    }
}

/**
 * imagetruecolortopaletteThis
 *
 * Convertit une image en couleurs vraies en image à palette.
 *
 * @link http://php.net/manual/fr/function.imagetruecolortopalette.php Documentation pour imagetruecolortopalette.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param bool     $dither    Indique si l'image doit être granuleuse - si défini à TRUE, alors l'image sera un peu plus granuleuse mais l'approximation des couleurs sera meilleure.
 * @param int      $ncolors    Le nombre maximal de couleurs dans la palette finale.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagetruecolortopaletteThis'))
{
    function imagetruecolortopaletteThis($image, $dither, $ncolors)
    {
		$image = is_resource($image) ? $image : NULL;
		$dither = (bool)$dither;
		$ncolors = (int)$ncolors;

		return imagetruecolortopalette($image, $dither, $ncolors);
    }
}

/**
 * imagettfbboxThis
 *
 * Retourne le rectangle entourant un texte et dessiné avec une police TrueType.
 *
 * @link http://php.net/manual/fr/function.imagettfbbox.php Documentation pour imagettfbbox.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $size    La taille de la police.
 * @param float    $angle    L'angle, en degrés, dans lequel le paramètre text sera mesuré.
 * @param string   $fontfile    Le nom de la police TrueType (peut être une URL). Suivant la version de la bibliothèque GD utilisée par PHP, ce paramètre peut chercher des fichiers qui ne commence pas par un slash ("/") de fin mais plutôt .ttf et cherchera tout le long des chemins de fonts définis.
 * @param string   $text    La chaîne à mesurer.
 *
 * @return array	imagettfbbox() retourne un tableau avec 8 éléments représentant les 4 sommets du rectangle en cas de succès, FALSE si une erreur survient.
 *
 */
if(!function_exists('imagettfbboxThis'))
{
    function imagettfbboxThis($size, $angle, $fontfile, $text)
    {
		$size = (float)$size;
		$angle = (float)$angle;
		$fontfile = (string)$fontfile;
		$text = (string)$text;

		return imagettfbbox($size, $angle, $fontfile, $text);
    }
}

/**
 * imagettftextThis
 *
 * Dessine un texte avec une police TrueType.
 *
 * @link http://php.net/manual/fr/function.imagettftext.php Documentation pour imagettftext.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param float    $size    La taille de la police de caractères. Suivant votre version de GD, elle doit être exprimée en pixel (GD1) ou en point (GD2).
 * @param float    $angle    L'angle, en degrés ; 0 degré correspond à la lecture du texte de gauche à droite. Les valeurs positives représentent une rotation dans le sens contraire des aiguilles d'une montre. Par exemple, une valeur de 90 correspondra à une lecture du texte de bas en haut.
 * @param int      $x    Les coordonnées données par x et y définiront la position du premier caractère (le coin bas-gauche du caractère). Cela est différent de la fonction imagestring(), où x et y définissent le coin haut-gauche du premier caractère. Par exemple, "haut gauche" correspond à 0, 0.
 * @param int      $y    L'ordonnée Y. Cela définit la position de la ligne de base de la police, et non pas le bas des caractères.
 * @param int      $color    L'index de la couleur. Utiliser un index de couleur négatif désactivera l'antialiasing. Voir la fonction imagecolorallocate().
 * @param string   $fontfile    Le chemin vers la police TrueType que vous souhaitez utiliser. Dépendant de la version de la bibliothèque GD utilisée par PHP, lorsque fontfile ne commence pas par un caractère / alors .ttf sera ajouté au nom du fichier et la bibliothèque recherchera ce nom de fichier dans les dossiers de police, définis par la bibliothèque. Lorsque vous utilisez une version de la bibliothèque GD inférieure à 2.0.18, un caractère espace, plutôt qu'un point-virgule, est utilisé pour définir des chemins alternatifs pour les fichiers de police. Si vous utilisez involontairement cette fonctionnalité, vous aurez ce message d'erreur : Warning: Could not find/open font. Pour ces versions affectées, la seule solution est de déplacée la police à un endroit qui ne contient pas d'espaces dans les noms de dossier. Dans le cas fréquent où une police réside dans le même dossier que le script l'utilisant, l'astuce suivante vous épargnera tous les problèmes.
 * @param string   $text    La chaîne de texte, en UTF-8. Peut inclure des références à des caractères numériques, décimales (sous la forme : &#8364; ) pour accéder aux caractères d'une police au delà du premier 27. Les chaînes de caractères encodées en UTF-8 peuvent être passées directement. Les entités nommées, comme &copy;, ne sont pas supportées. Utilisez la fonction html_entity_decode() pour encoder ces entités nommées en chaîne UTF-8. Si un caractère est utilisé dans une chaîne qui n'est pas supportée par la police, un rectangle creux remplacera le caractère.
 *
 * @return array	Retourne un tableau de 8 éléments représentant quatre points marquants les limites du texte. L'ordre des points est : inférieur gauche, inférieur droit, supérieur droit, supérieur gauche. Les points sont relatifs au texte par rapport à l'angle, donc, "supérieur gauche" signifie dans le coin en haut à gauche lorsque vous regardez le texte horizontalement. Retourne FALSE si une erreur survient.
 *
 */
if(!function_exists('imagettftextThis'))
{
    function imagettftextThis($image, $size, $angle, $x, $y, $color, $fontfile, $text)
    {
		$image = is_resource($image) ? $image : NULL;
		$size = (float)$size;
		$angle = (float)$angle;
		$x = (int)$x;
		$y = (int)$y;
		$color = (int)$color;
		$fontfile = (string)$fontfile;
		$text = (string)$text;

		return imagettftext($image, $size, $angle, $x, $y, $color, $fontfile, $text);
    }
}

/**
 * imagetypesThis
 *
 * Retourne les types d'images supportés par la version courante de PHP.
 *
 * @link http://php.net/manual/fr/function.imagetypes.php Documentation pour imagetypes.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 * @return int	Retourne un champ d'octets correspondant aux formats d'images supportés par la version de GD utilisée. Les valeurs suivantes sont possibles : IMG_GIF | IMG_JPG | IMG_PNG | IMG_WBMP | IMG_XPM.
 *
 */
if(!function_exists('imagetypesThis'))
{
    function imagetypesThis()
    {
		return imagetypes();
    }
}

/**
 * imagewbmpThis
 *
 * Affichage de l'image vers le navigateur ou dans un fichier.
 *
 * @link http://php.net/manual/fr/function.imagewbmp.php Documentation pour imagewbmp.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement.
 * @param int      $foreground    Vous pouvez choisir la couleur de fond avec ce paramètre. Utilisez l'identifiant retourné par imagecolorallocate() comme valeur de ce paramètre. La couleur de fond par défaut est noire.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagewbmpThis'))
{
    function imagewbmpThis($image, $filename = NULL, $foreground = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;
		$foreground = (int)$foreground;

		return imagewbmp($image, $filename, $foreground);
    }
}

/**
 * imagewebpThis
 *
 * Affiche une image WebP vers un navigateur ou un fichier.
 *
 * @link http://php.net/manual/fr/function.imagewebp.php Documentation pour imagewebp.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagewebpThis'))
{
    function imagewebpThis($image, $filename)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;

		return imagewebp($image, $filename);
    }
}

/**
 * imagexbmThis
 *
 * Génère une image au format XBM.
 *
 * @link http://php.net/manual/fr/function.imagexbm.php Documentation pour imagexbm.
 *
 * @version PHP 5
 *
 * @param resource $image    Une ressource d'image, retournée par une des fonctions de création d'images, comme imagecreatetruecolor().
 * @param string   $filename    Le chemin d'enregistrement du fichier. S'il n'est pas défini ou vaut NULL, le flux d'image brute sera affiché directement.
 * @param int      $foreground    Vous pouvez définir le premier plan avec ce paramètre en définissant un identifiant obtenu depuis la fonction imagecolorallocate(). Par défaut, la couleur du premier plan est noir.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imagexbmThis'))
{
    function imagexbmThis($image, $filename, $foreground = NULL)
    {
		$image = is_resource($image) ? $image : NULL;
		$filename = (string)$filename;
		$foreground = (int)$foreground;

		return imagexbm($image, $filename, $foreground);
    }
}

/**
 * imap_8bitThis
 *
 * Convertit une chaîne à 8 bits en une chaîne encodée en Quoted-Printable.
 *
 * @link http://php.net/manual/fr/function.imap-8bit.php Documentation pour imap_8bit.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne 8 bits à convertir
 *
 * @return string	Retourne une chaîne encodée en Quoted-Printable.
 *
 */
if(!function_exists('imap_8bitThis'))
{
    function imap_8bitThis($string)
    {
		$string = (string)$string;

		return imap_8bit($string);
    }
}

/**
 * imap_alertsThis
 *
 * Retourne toutes les alertes.
 *
 * @link http://php.net/manual/fr/function.imap-alerts.php Documentation pour imap_alerts.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau contenant tous les messages d'alerte IMAP générés ou FALSE si aucun message d'alerte n'est disponible.
 *
 */
if(!function_exists('imap_alertsThis'))
{
    function imap_alertsThis()
    {
		return imap_alerts();
    }
}

/**
 * imap_appendThis
 *
 * Ajoute un message dans une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-append.php Documentation pour imap_append.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation sur la fonction imap_open() pour plus d'informations
 * @param string   $message    Le message à ajouter, sous la forme d'une chaîne de caractères Lors des échanges avec le serveur Cyrus IMAP, vous devrez utiliser "\r\n" comme terminaison de ligne, à la place de "\n" ou l'opération échouera.
 * @param string   $options    Si fourni, le paramètre options sera également écrit dans la boîte mailbox
 * @param string   $internal_date    Si ce paramètre est défini, il mettra les INTERNALDATE sur le message joint. Le paramètre doit être une chaîne de date qui est conforme aux spécifications du rfc2060 pour une valeur date_time.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_appendThis'))
{
    function imap_appendThis($imap_stream, $mailbox, $message, $options = NULL, $internal_date = NULL)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;
		$message = (string)$message;
		$options = (string)$options;
		$internal_date = (string)$internal_date;

		return imap_append($imap_stream, $mailbox, $message, $options, $internal_date);
    }
}

/**
 * imap_base64This
 *
 * Décode un texte encodé en BASE64.
 *
 * @link http://php.net/manual/fr/function.imap-base64.php Documentation pour imap_base64.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $text    Le texte encodé.
 *
 * @return string	Retourne le texte décodé, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('imap_base64This'))
{
    function imap_base64This($text)
    {
		$text = (string)$text;

		return imap_base64($text);
    }
}

/**
 * imap_binaryThis
 *
 * Convertit une chaîne à 8 bits en une chaîne à base64.
 *
 * @link http://php.net/manual/fr/function.imap-binary.php Documentation pour imap_binary.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne 8 bits
 *
 * @return string	Retourne la chaîne encodée en base64.
 *
 */
if(!function_exists('imap_binaryThis'))
{
    function imap_binaryThis($string)
    {
		$string = (string)$string;

		return imap_binary($string);
    }
}

/**
 * imap_bodyThis
 *
 * Lit le corps d'un message.
 *
 * @link http://php.net/manual/fr/function.imap-body.php Documentation pour imap_body.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param int      $options    Le paramètre options optionnel est un masque qui peut contenir les valeurs suivantes :
 *
 * @return string	Retourne le corps du message spécifié, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('imap_bodyThis'))
{
    function imap_bodyThis($imap_stream, $msg_number, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$options = (int)$options;

		return imap_body($imap_stream, $msg_number, $options);
    }
}

/**
 * imap_bodystructThis
 *
 * Lit la structure d'une section du corps d'un mail.
 *
 * @link http://php.net/manual/fr/function.imap-bodystruct.php Documentation pour imap_bodystruct.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param string   $section    La section du corps à lire
 *
 * @return object	Retourne les informations dans un objet ; pour une description détaillée de la structure de l'objet ainsi que de ses propriétés, reportez-vous à la fonction imap_fetchstructure().
 *
 */
if(!function_exists('imap_bodystructThis'))
{
    function imap_bodystructThis($imap_stream, $msg_number, $section)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$section = (string)$section;

		return imap_bodystruct($imap_stream, $msg_number, $section);
    }
}

/**
 * imap_checkThis
 *
 * Vérifie la boîte aux lettres courante.
 *
 * @link http://php.net/manual/fr/function.imap-check.php Documentation pour imap_check.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 *
 * @return object	Retourne les informations dans un objet contenant les propriétés suivantes :
 *
 */
if(!function_exists('imap_checkThis'))
{
    function imap_checkThis($imap_stream)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;

		return imap_check($imap_stream);
    }
}

/**
 * imap_clearflag_fullThis
 *
 * Supprime un flag (drapeau) sur un message.
 *
 * @link http://php.net/manual/fr/function.imap-clearflag-full.php Documentation pour imap_clearflag_full.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $sequence    Une séquence de numéro de messages. Vous pouvez énumérer les messages désirées avec la syntaxe X,Y, ou récupérer tous les messages contenus dans un intervalle, avec la syntaxe X:Y
 * @param string   $flag    Les flags flag que vous pouvez effacer sont "\\Seen", "\\Answered", "\\Flagged", "\\Deleted" et "\\Draft" (tels que définis dans la » RFC2060)
 * @param int      $options    options est un masque de bits, qui accepte uniquement la valeur suivante :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_clearflag_fullThis'))
{
    function imap_clearflag_fullThis($imap_stream, $sequence, $flag, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$sequence = (string)$sequence;
		$flag = (string)$flag;
		$options = (int)$options;

		return imap_clearflag_full($imap_stream, $sequence, $flag, $options);
    }
}

/**
 * imap_closeThis
 *
 * Termine un flux IMAP.
 *
 * @link http://php.net/manual/fr/function.imap-close.php Documentation pour imap_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $flag    S'il est défini à CL_EXPUNGE, la fonction effectuera une purge automatique de la boîte aux lettres avant de la fermer, supprimant tous les messages marqués pour l'effacement. Vous pouvez effectuer la même chose avec la fonction imap_expunge()
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_closeThis'))
{
    function imap_closeThis($imap_stream, $flag = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$flag = (int)$flag;

		return imap_close($imap_stream, $flag);
    }
}

/**
 * imap_createmailboxThis
 *
 * Crée une nouvelle boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-createmailbox.php Documentation pour imap_createmailbox.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation sur la fonction imap_open() pour plus d'informations. Les noms contenant des caractères internationaux doivent être encodés par la fonction imap_utf7_encode()
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_createmailboxThis'))
{
    function imap_createmailboxThis($imap_stream, $mailbox)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;

		return imap_createmailbox($imap_stream, $mailbox);
    }
}

/**
 * imap_deleteThis
 *
 * Marque le fichier pour l'effacement, dans la boîte aux lettres courante.
 *
 * @link http://php.net/manual/fr/function.imap-delete.php Documentation pour imap_delete.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param int      $options    Vous pouvez le définir à FT_UID qui demande à la fonction de traiter l'argument msg_number comme un UID.
 *
 * @return bool	Retourne TRUE.
 *
 */
if(!function_exists('imap_deleteThis'))
{
    function imap_deleteThis($imap_stream, $msg_number, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$options = (int)$options;

		return imap_delete($imap_stream, $msg_number, $options);
    }
}

/**
 * imap_deletemailboxThis
 *
 * Efface une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-deletemailbox.php Documentation pour imap_deletemailbox.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation sur la fonction imap_open() pour plus de détails
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_deletemailboxThis'))
{
    function imap_deletemailboxThis($imap_stream, $mailbox)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;

		return imap_deletemailbox($imap_stream, $mailbox);
    }
}

/**
 * imap_errorsThis
 *
 * Retourne toutes les erreurs IMAP survenues.
 *
 * @link http://php.net/manual/fr/function.imap-errors.php Documentation pour imap_errors.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Cette fonction retourne un tableau contenant tous les messages d'erreur IMAP générés depuis le dernier appel à la fonction imap_errors() ou depuis le début de la page. Retourne FALSE si aucun message d'erreur n'est disponible.
 *
 */
if(!function_exists('imap_errorsThis'))
{
    function imap_errorsThis()
    {
		return imap_errors();
    }
}

/**
 * imap_expungeThis
 *
 * Efface tous les messages marqués pour l'effacement.
 *
 * @link http://php.net/manual/fr/function.imap-expunge.php Documentation pour imap_expunge.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 *
 * @return bool	Retourne TRUE.
 *
 */
if(!function_exists('imap_expungeThis'))
{
    function imap_expungeThis($imap_stream)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;

		return imap_expunge($imap_stream);
    }
}

/**
 * imap_fetch_overviewThis
 *
 * Lit le sommaire des en-têtes de messages.
 *
 * @link http://php.net/manual/fr/function.imap-fetch-overview.php Documentation pour imap_fetch_overview.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $sequence    Une description de la séquence du message. Vous pouvez énumérer les messages désirés avec la syntaxe X,Y, ou récupérer tous les messages d'un intervalle, avec la syntaxe X:Y
 * @param int      $options    sequence va contenir une séquence d'indice de message ou d'UID, si flags contient FT_UID.
 *
 * @return array	Retourne un tableau d'objets décrivant l'en-tête de chaque message. L'objet ne définira une propriété que si elle existe. Les propriétés possibles sont :
 *
 */
if(!function_exists('imap_fetch_overviewThis'))
{
    function imap_fetch_overviewThis($imap_stream, $sequence, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$sequence = (string)$sequence;
		$options = (int)$options;

		return imap_fetch_overview($imap_stream, $sequence, $options);
    }
}

/**
 * imap_fetchbodyThis
 *
 * Retourne une section extraite du corps d'un message.
 *
 * @link http://php.net/manual/fr/function.imap-fetchbody.php Documentation pour imap_fetchbody.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param string   $section    Le numéro de la section. C'est une chaîne d'entiers, délimités par une virgule qui correspondent aux index dans la liste des sections du message, tel que prévu par la spécification IMAP4.
 * @param int      $options    L'option imap_fetchbody() est un masque qui peut contenir les valeurs suivantes :
 *
 * @return string	Retourne une section particulière du corps des messages spécifiés, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('imap_fetchbodyThis'))
{
    function imap_fetchbodyThis($imap_stream, $msg_number, $section, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$section = (string)$section;
		$options = (int)$options;

		return imap_fetchbody($imap_stream, $msg_number, $section, $options);
    }
}

/**
 * imap_fetchheaderThis
 *
 * Retourne l'en-tête d'un message.
 *
 * @link http://php.net/manual/fr/function.imap-fetchheader.php Documentation pour imap_fetchheader.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param int      $options    Les options possibles sont :
 *
 * @return string	Retourne l'en-tête du message spécifié, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('imap_fetchheaderThis'))
{
    function imap_fetchheaderThis($imap_stream, $msg_number, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$options = (int)$options;

		return imap_fetchheader($imap_stream, $msg_number, $options);
    }
}

/**
 * imap_fetchmimeThis
 *
 * Récupère les en-têtes MIME pour une section particulière du message.
 *
 * @link http://php.net/manual/fr/function.imap-fetchmime.php Documentation pour imap_fetchmime.
 *
 * @version PHP 5 >= 5.3.6
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message.
 * @param string   $section    Le numéro de la section. C'est une chaîne d'entiers délimités par une virgule qui représente l'index de la liste des sections du corps du message, tel que spécifié par l'IMAP4.
 * @param int      $options    Un masque d'une ou plusieurs options suivantes :
 *
 * @return string	Retourne les en-têtes MIME d'une section particulière du corps du message spécifié, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('imap_fetchmimeThis'))
{
    function imap_fetchmimeThis($imap_stream, $msg_number, $section, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$section = (string)$section;
		$options = (int)$options;

		return imap_fetchmime($imap_stream, $msg_number, $section, $options);
    }
}

/**
 * imap_fetchstructureThis
 *
 * Lit la structure d'un message.
 *
 * @link http://php.net/manual/fr/function.imap-fetchstructure.php Documentation pour imap_fetchstructure.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param int      $options    Ce paramètre optionnel n'a qu'une seule option, FT_UID, qui demande à la fonction de traiter l'argument msg_number comme un UID.
 *
 * @return object	Retourne un objet avec des propriétés d'enveloppe, de date interne, de taille, de structure de flags et de corps, ainsi qu'un objet pour chaque attachement. La structure est la suivante :
 *
 */
if(!function_exists('imap_fetchstructureThis'))
{
    function imap_fetchstructureThis($imap_stream, $msg_number, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$options = (int)$options;

		return imap_fetchstructure($imap_stream, $msg_number, $options);
    }
}

/**
 * imap_gcThis
 *
 * Efface le cache IMAP.
 *
 * @link http://php.net/manual/fr/function.imap-gc.php Documentation pour imap_gc.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $caches    Indique le type de cache à purger. Cela peut être la combinaison des constantes suivantes : IMAP_GC_ELT (cache des éléments de message), IMAP_GC_ENV (enveloppe et corps), IMAP_GC_TEXTS (textes).
 *
 * @return bool	Returns TRUE.
 *
 */
if(!function_exists('imap_gcThis'))
{
    function imap_gcThis($imap_stream, $caches)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$caches = (int)$caches;

		return imap_gc($imap_stream, $caches);
    }
}

/**
 * imap_get_quotaThis
 *
 * Lit les quotas des boîtes aux lettres ainsi que des statistiques sur chacune d'elles.
 *
 * @link http://php.net/manual/fr/function.imap-get-quota.php Documentation pour imap_get_quota.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $quota_root    quota_root doit être de la forme : "user.nom", où "nom" est le nom de la boîte aux lettres que vous souhaitez analyser.
 *
 * @return array	Retourne un tableau contenant les valeurs de quota et courante de la boîte aux lettres quota_root. Le quota représente la taille maximale de votre boîte aux lettres. La valeur courante est l'espace actuellement utilisé par votre boîte aux lettres. imap_get_quota() retournera FALSE en cas d'échec.
 *
 */
if(!function_exists('imap_get_quotaThis'))
{
    function imap_get_quotaThis($imap_stream, $quota_root)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$quota_root = (string)$quota_root;

		return imap_get_quota($imap_stream, $quota_root);
    }
}

/**
 * imap_get_quotarootThis
 *
 * Lit les quotas de chaque utilisateur.
 *
 * @link http://php.net/manual/fr/function.imap-get-quotaroot.php Documentation pour imap_get_quotaroot.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $quota_root    quota_root doit être un nom de boîte aux lettres (i.e. INBOX).
 *
 * @return array	Retourne un tableau d'entiers, contenant les quotas de la boîte aux lettres de l'utilisateur. Toutes les valeurs sont représentées par une clé basée sur le nom de la boîte, et par un tableau représentant le niveau d'utilisation et les limites.
 *
 */
if(!function_exists('imap_get_quotarootThis'))
{
    function imap_get_quotarootThis($imap_stream, $quota_root)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$quota_root = (string)$quota_root;

		return imap_get_quotaroot($imap_stream, $quota_root);
    }
}

/**
 * imap_getaclThis
 *
 * Retourne le ACL pour la boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-getacl.php Documentation pour imap_getacl.
 *
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails.
 *
 * @return array	Retourne un tableau associatif sous la forme "dossier" => "acl".
 *
 */
if(!function_exists('imap_getaclThis'))
{
    function imap_getaclThis($imap_stream, $mailbox)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;

		return imap_getacl($imap_stream, $mailbox);
    }
}

/**
 * imap_getmailboxesThis
 *
 * Liste les boîtes aux lettres, et retourne les détails de chacune.
 *
 * @link http://php.net/manual/fr/function.imap-getmailboxes.php Documentation pour imap_getmailboxes.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $ref    ref ne devrait être que le serveur sous la forme décrite dans imap_open()
 * @param string   $pattern    Spécifie la position dans la hiérarchie des boîtes aux lettres, où il faut commencer à chercher. Il y a deux caractères spéciaux que vous pouvez utiliser dans pattern : '*' et '%'. '*' signifie : toutes les boîtes aux lettres. Si vous passez pattern comme '*', vous obtiendrez la liste complète des boîtes aux lettres de la hiérarchie. '%' signifie qu'on ne s'intéresse qu'au niveau courant. '%' passé à pattern ne retournera que les boîtes aux lettres de niveau supérieur; '~/mail/%' sous UW_IMAPD retournera toutes les boîtes aux lettres du dossier ~/mail directory, mais pas leurs enfants.
 *
 * @return array	Retourne un tableau d'objets contenant les informations sur les boîtes aux lettres. Chaque objet possède un attribut de name, qui contient le nom complet de la boîte aux lettres, delimiter qui est le délimiteur hiérarchique et attributes. attributes est un masque de bits, qui contient :
 *
 */
if(!function_exists('imap_getmailboxesThis'))
{
    function imap_getmailboxesThis($imap_stream, $ref, $pattern)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$ref = (string)$ref;
		$pattern = (string)$pattern;

		return imap_getmailboxes($imap_stream, $ref, $pattern);
    }
}

/**
 * imap_getsubscribedThis
 *
 * Liste toutes les boîtes aux lettres souscrites.
 *
 * @link http://php.net/manual/fr/function.imap-getsubscribed.php Documentation pour imap_getsubscribed.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $ref    ref ne devrait être que le serveur sous la forme décrite dans imap_open()
 * @param string   $pattern    Spécifie la position dans la hiérarchie des boîtes aux lettres, où il faut commencer à chercher. Il y a deux caractères spéciaux que vous pouvez utiliser dans pattern : '*' et '%'. '*' signifie : toutes les boîtes aux lettres. Si vous passez pattern comme '*', vous obtiendrez la liste complète des boîtes aux lettres de la hiérarchie. '%' signifie qu'on ne s'intéresse qu'au niveau courant. '%' passé à pattern ne retournera que les boîtes aux lettres de niveau supérieur; '~/mail/%' sous UW_IMAPD retournera toutes les boîtes aux lettres du dossier ~/mail directory, mais pas leurs enfants.
 *
 * @return array	Retourne un tableau d'objets contenant les informations sur les boîtes aux lettres. Chaque objet possède un attribut de name, qui contient le nom complet de la boîte aux lettres, delimiter qui est le délimiteur hiérarchique et attributes. attributes est un masque de bits, qui contient :
 *
 */
if(!function_exists('imap_getsubscribedThis'))
{
    function imap_getsubscribedThis($imap_stream, $ref, $pattern)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$ref = (string)$ref;
		$pattern = (string)$pattern;

		return imap_getsubscribed($imap_stream, $ref, $pattern);
    }
}

/**
 * imap_headerinfoThis
 *
 * Lit l'en-tête du message.
 *
 * @link http://php.net/manual/fr/function.imap-headerinfo.php Documentation pour imap_headerinfo.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param int      $fromlength    Nombre de caractères pour la propriété fetchfrom. Doit être plus grand ou égal à 0.
 * @param int      $subjectlength    Nombre de caractères pour la propriété fetchsubject. Doit être plus grand ou égal à 0.
 * @param string   $defaulthost
 *
 * @return object	Retourne les informations dans un objet contenant les propriétés suivantes :
 *
 */
if(!function_exists('imap_headerinfoThis'))
{
    function imap_headerinfoThis($imap_stream, $msg_number, $fromlength = 0, $subjectlength = 0, $defaulthost = NULL)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$fromlength = (int)$fromlength;
		$subjectlength = (int)$subjectlength;
		$defaulthost = (string)$defaulthost;

		return imap_headerinfo($imap_stream, $msg_number, $fromlength, $subjectlength, $defaulthost);
    }
}

/**
 * imap_headersThis
 *
 * Retourne les en-têtes de tous les messages d'une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-headers.php Documentation pour imap_headers.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 *
 * @return array	Retourne un tableau de chaînes contenant les en-têtes des messages : une chaîne par message.
 *
 */
if(!function_exists('imap_headersThis'))
{
    function imap_headersThis($imap_stream)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;

		return imap_headers($imap_stream);
    }
}

/**
 * imap_last_errorThis
 *
 * Retourne la dernière erreur survenue.
 *
 * @link http://php.net/manual/fr/function.imap-last-error.php Documentation pour imap_last_error.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le texte complet du dernier message d'erreur IMAP survenu sur la page courante. Retourne FALSE si aucun message n'est disponible.
 *
 */
if(!function_exists('imap_last_errorThis'))
{
    function imap_last_errorThis()
    {
		return imap_last_error();
    }
}

/**
 * imap_listThis
 *
 * Lit la liste des boîtes aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-list.php Documentation pour imap_list.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $ref    ref ne devrait être que le serveur sous la forme décrite dans imap_open()
 * @param string   $pattern    Spécifie la position dans la hiérarchie des boîtes aux lettres, où il faut commencer à chercher. Il y a deux caractères spéciaux que vous pouvez utiliser dans pattern : '*' et '%'. '*' signifie : toutes les boîtes aux lettres. Si vous passez pattern comme '*', vous obtiendrez la liste complète des boîtes aux lettres de la hiérarchie. '%' signifie qu'on ne s'intéresse qu'au niveau courant. '%' passé à pattern ne retournera que les boîtes aux lettres de niveau supérieur; '~/mail/%' sous UW_IMAPD retournera toutes les boîtes aux lettres du dossier ~/mail directory, mais pas leurs enfants.
 *
 * @return array	Retourne un tableau contenant les noms des boîtes aux lettres.
 *
 */
if(!function_exists('imap_listThis'))
{
    function imap_listThis($imap_stream, $ref, $pattern)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$ref = (string)$ref;
		$pattern = (string)$pattern;

		return imap_list($imap_stream, $ref, $pattern);
    }
}

/**
 * imap_listscanThis
 *
 * Lit la liste des boîtes aux lettres, et y recherche une chaîne.
 *
 * @link http://php.net/manual/fr/function.imap-listscan.php Documentation pour imap_listscan.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $ref    ref ne devrait être que le serveur sous la forme décrite dans imap_open()
 * @param string   $pattern    Spécifie la position dans la hiérarchie des boîtes aux lettres, où il faut commencer à chercher. Il y a deux caractères spéciaux que vous pouvez utiliser dans pattern : '*' et '%'. '*' signifie : toutes les boîtes aux lettres. Si vous passez pattern comme '*', vous obtiendrez la liste complète des boîtes aux lettres de la hiérarchie. '%' signifie qu'on ne s'intéresse qu'au niveau courant. '%' passé à pattern ne retournera que les boîtes aux lettres de niveau supérieur; '~/mail/%' sous UW_IMAPD retournera toutes les boîtes aux lettres du dossier ~/mail directory, mais pas leurs enfants.
 * @param string   $content    La chaîne cherchée
 *
 * @return array	Retourne un tableau contenant les noms des boîtes aux lettres qui contiennent la chaîne content dans le nom de la boîte aux lettres.
 *
 */
if(!function_exists('imap_listscanThis'))
{
    function imap_listscanThis($imap_stream, $ref, $pattern, $content)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$ref = (string)$ref;
		$pattern = (string)$pattern;
		$content = (string)$content;

		return imap_listscan($imap_stream, $ref, $pattern, $content);
    }
}

/**
 * imap_lsubThis
 *
 * Liste toutes les boîtes aux lettres enregistrées.
 *
 * @link http://php.net/manual/fr/function.imap-lsub.php Documentation pour imap_lsub.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $ref    ref ne devrait être que le serveur sous la forme décrite dans imap_open()
 * @param string   $pattern    Spécifie la position dans la hiérarchie des boîtes aux lettres, où il faut commencer à chercher. Il y a deux caractères spéciaux que vous pouvez utiliser dans pattern : '*' et '%'. '*' signifie : toutes les boîtes aux lettres. Si vous passez pattern comme '*', vous obtiendrez la liste complète des boîtes aux lettres de la hiérarchie. '%' signifie qu'on ne s'intéresse qu'au niveau courant. '%' passé à pattern ne retournera que les boîtes aux lettres de niveau supérieur; '~/mail/%' sous UW_IMAPD retournera toutes les boîtes aux lettres du dossier ~/mail directory, mais pas leurs enfants.
 *
 * @return array	Retourne un tableau contenant toutes les boîtes aux lettres souscrites.
 *
 */
if(!function_exists('imap_lsubThis'))
{
    function imap_lsubThis($imap_stream, $ref, $pattern)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$ref = (string)$ref;
		$pattern = (string)$pattern;

		return imap_lsub($imap_stream, $ref, $pattern);
    }
}

/**
 * imap_mailThis
 *
 * Envoie un message mail.
 *
 * @link http://php.net/manual/fr/function.imap-mail.php Documentation pour imap_mail.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $to    Le destinataire
 * @param string   $subject    Le sujet du mail
 * @param string   $message    Le corps du mail
 * @param string   $additional_headers    Une chaîne de caractères contenant les en-têtes additionnels à envoyer avec le mail
 * @param string   $cc
 * @param string   $bcc    Les destinataires spécifiés dans le bcc recevront le mail mais sont exclus des en-têtes.
 * @param string   $rpath    Utiliser ce paramètre pour spécifier le chemin de retour en cas d'échec de délivrance du mail. C'est utile lorsque vous utilisez PHP comme client mail pour plusieurs utilisateurs.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_mailThis'))
{
    function imap_mailThis($to, $subject, $message, $additional_headers = NULL, $cc = NULL, $bcc = NULL, $rpath = NULL)
    {
		$to = (string)$to;
		$subject = (string)$subject;
		$message = (string)$message;
		$additional_headers = (string)$additional_headers;
		$cc = (string)$cc;
		$bcc = (string)$bcc;
		$rpath = (string)$rpath;

		return imap_mail($to, $subject, $message, $additional_headers, $cc, $bcc, $rpath);
    }
}

/**
 * imap_mail_composeThis
 *
 * Crée un message MIME.
 *
 * @link http://php.net/manual/fr/function.imap-mail-compose.php Documentation pour imap_mail_compose.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $envelope    Un tableau associatif contenant les champs des en-têtes. Les clés valides sont : "remail", "return_path", "date", "from", "reply_to", "in_reply_to", "subject", "to", "cc", "bcc", "message_id" et "custom_headers" (qui contient un tableau associatif d'autres en-têtes).
 * @param array    $body    Un tableau indexé du corps Un corps est un tableau associatif qui peut contenir les clés suivantes : "type", "encoding", "charset", "type.parameters", "subtype", "id", "description", "disposition.type", "disposition", "contents.data", "lines", "bytes" et "md5".
 *
 * @return string	Retourne le message MIME.
 *
 */
if(!function_exists('imap_mail_composeThis'))
{
    function imap_mail_composeThis($envelope, $body)
    {
		$envelope = (array)$envelope;
		$body = (array)$body;

		return imap_mail_compose($envelope, $body);
    }
}

/**
 * imap_mail_copyThis
 *
 * Copie les messages spécifiés dans une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-mail-copy.php Documentation pour imap_mail_copy.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $msglist    msglist est un intervalle, et pas seulement une liste de numéros de message (comme décrit dans la » RFC2060).
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 * @param int      $options    options est un masque, qui peut contenir une ou plusieurs des valeurs suivantes :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_mail_copyThis'))
{
    function imap_mail_copyThis($imap_stream, $msglist, $mailbox, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msglist = (string)$msglist;
		$mailbox = (string)$mailbox;
		$options = (int)$options;

		return imap_mail_copy($imap_stream, $msglist, $mailbox, $options);
    }
}

/**
 * imap_mail_moveThis
 *
 * Déplace des messages dans une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-mail-move.php Documentation pour imap_mail_move.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $msglist    msglist est un intervalle, et pas seulement une liste de messages (comme décrit dans la » RFC2060).
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 * @param int      $options    options est un champ de bits et peut contenir une seule valeur :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_mail_moveThis'))
{
    function imap_mail_moveThis($imap_stream, $msglist, $mailbox, $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msglist = (string)$msglist;
		$mailbox = (string)$mailbox;
		$options = (int)$options;

		return imap_mail_move($imap_stream, $msglist, $mailbox, $options);
    }
}

/**
 * imap_mailboxmsginfoThis
 *
 * Lit les informations à propos de la boîte aux lettres courante.
 *
 * @link http://php.net/manual/fr/function.imap-mailboxmsginfo.php Documentation pour imap_mailboxmsginfo.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 *
 * @return object	Retourne un objet avec les propriétés suivantes :
 *
 */
if(!function_exists('imap_mailboxmsginfoThis'))
{
    function imap_mailboxmsginfoThis($imap_stream)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;

		return imap_mailboxmsginfo($imap_stream);
    }
}

/**
 * imap_mime_header_decodeThis
 *
 * Décode les éléments MIME d'un en-tête.
 *
 * @link http://php.net/manual/fr/function.imap-mime-header-decode.php Documentation pour imap_mime_header_decode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $text    Le texte MIME
 *
 * @return array	Les éléments décodés sont retournés dans un tableau d'objets. Chacun de ces objets a deux propriétés : charset et text.
 *
 */
if(!function_exists('imap_mime_header_decodeThis'))
{
    function imap_mime_header_decodeThis($text)
    {
		$text = (string)$text;

		return imap_mime_header_decode($text);
    }
}

/**
 * imap_msgnoThis
 *
 * Retourne le numéro de séquence du message pour un UID donné.
 *
 * @link http://php.net/manual/fr/function.imap-msgno.php Documentation pour imap_msgno.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $uid    L'UID du message
 *
 * @return int	Retourne le numéro de séquence du message pour l'UID uid.
 *
 */
if(!function_exists('imap_msgnoThis'))
{
    function imap_msgnoThis($imap_stream, $uid)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$uid = (int)$uid;

		return imap_msgno($imap_stream, $uid);
    }
}

/**
 * imap_num_msgThis
 *
 * Retourne le nombre de messages dans la boîte aux lettres courante.
 *
 * @link http://php.net/manual/fr/function.imap-num-msg.php Documentation pour imap_num_msg.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 *
 * @return int	Retourne le nombre de messages dans la boîte aux lettres courante, sous la forme d'un entier.
 *
 */
if(!function_exists('imap_num_msgThis'))
{
    function imap_num_msgThis($imap_stream)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;

		return imap_num_msg($imap_stream);
    }
}

/**
 * imap_num_recentThis
 *
 * Retourne le nombre de messages récents dans la boîte aux lettres courante.
 *
 * @link http://php.net/manual/fr/function.imap-num-recent.php Documentation pour imap_num_recent.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 *
 * @return int	Retourne le nombre de messages récents dans la boîte aux lettres courante, sous la forme d'un entier.
 *
 */
if(!function_exists('imap_num_recentThis'))
{
    function imap_num_recentThis($imap_stream)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;

		return imap_num_recent($imap_stream);
    }
}

/**
 * imap_openThis
 *
 * Ouvre un flux IMAP vers une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-open.php Documentation pour imap_open.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $mailbox    Un nom de boîte aux lettres est constitué d'une adresse de serveur, et d'une adresse de boîte sur ce serveur. Le mot réservé INBOX représente la boîte aux lettres de l'utilisateur courant. Les noms de boîtes aux lettres qui contiennent des caractères spéciaux (en dehors de l'espace ASCII) doivent être encodés avec imap_utf7_encode(). L'adresse du serveur, mise entre accolades '{' et '}', est constituée du nom du serveur ou de son adresse IP, d'une spécification de protocole (commençant par '/') et d'un port optionnel (spécifié avec ':'). Cette partie est obligatoire dans les paramètres de la boîte aux lettres. Tous les noms commençant par { sont des noms distants et sont sous la forme "{" nom_systeme_distant [":" port] [flags] "}" [nom_mailbox] où :
 * @param string   $username    Le nom d'utilisateur
 * @param string   $password    Le mot de passe associé avec l'utilisateur username
 * @param int      $options    options est un masque de bit, qui peut prendre une ou plusieurs des valeurs suivantes :
 * @param int      $n_retries    Le nombre maximal de tentatives de connexion.
 * @param array    $params    Paramètres de connexion ; les clés peuvent être utilisées pour définir un ou plusieurs paramètres de connexion :
 *
 * @return resource	Retourne un flux IMAP en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_openThis'))
{
    function imap_openThis($mailbox, $username, $password, $options = 0, $n_retries = 0, $params = NULL)
    {
		$mailbox = (string)$mailbox;
		$username = (string)$username;
		$password = (string)$password;
		$options = (int)$options;
		$n_retries = (int)$n_retries;
		$params = (array)$params;

		return imap_open($mailbox, $username, $password, $options, $n_retries, $params);
    }
}

/**
 * imap_pingThis
 *
 * Vérifie que le flux IMAP est toujours actif.
 *
 * @link http://php.net/manual/fr/function.imap-ping.php Documentation pour imap_ping.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 *
 * @return bool	Retourne TRUE si le flux est toujours actif, FALSE sinon.
 *
 */
if(!function_exists('imap_pingThis'))
{
    function imap_pingThis($imap_stream)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;

		return imap_ping($imap_stream);
    }
}

/**
 * imap_qprintThis
 *
 * Convertit une chaîne à guillemets en une chaîne à 8 bits.
 *
 * @link http://php.net/manual/fr/function.imap-qprint.php Documentation pour imap_qprint.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    Une chaîne à guillemets
 *
 * @return string	Retourne une chaîne de caractères à 8 bits.
 *
 */
if(!function_exists('imap_qprintThis'))
{
    function imap_qprintThis($string)
    {
		$string = (string)$string;

		return imap_qprint($string);
    }
}

/**
 * imap_renamemailboxThis
 *
 * Renomme une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-renamemailbox.php Documentation pour imap_renamemailbox.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $old_mbox    L'ancien nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 * @param string   $new_mbox    Le nouveau nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_renamemailboxThis'))
{
    function imap_renamemailboxThis($imap_stream, $old_mbox, $new_mbox)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$old_mbox = (string)$old_mbox;
		$new_mbox = (string)$new_mbox;

		return imap_renamemailbox($imap_stream, $old_mbox, $new_mbox);
    }
}

/**
 * imap_reopenThis
 *
 * Réouvre un flux IMAP vers une nouvelle boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-reopen.php Documentation pour imap_reopen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 * @param int      $options    options est un masque de bits, qui peut contenir les valeurs suivantes :
 * @param int      $n_retries    Le nombre maximal de tentatives de connexion
 *
 * @return bool	Retourne TRUE si le flux est réouvert, FALSE sinon.
 *
 */
if(!function_exists('imap_reopenThis'))
{
    function imap_reopenThis($imap_stream, $mailbox, $options = 0, $n_retries = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;
		$options = (int)$options;
		$n_retries = (int)$n_retries;

		return imap_reopen($imap_stream, $mailbox, $options, $n_retries);
    }
}

/**
 * imap_rfc822_parse_adrlistThis
 *
 * Analyse une adresse email.
 *
 * @link http://php.net/manual/fr/function.imap-rfc822-parse-adrlist.php Documentation pour imap_rfc822_parse_adrlist.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $address    Une chaîne de caractères contenant les adresses
 * @param string   $default_host    Le nom de l'hôte par défaut
 *
 * @return array	Retourne un tableau d'objets. Les propriétés des objets sont :
 *
 */
if(!function_exists('imap_rfc822_parse_adrlistThis'))
{
    function imap_rfc822_parse_adrlistThis($address, $default_host)
    {
		$address = (string)$address;
		$default_host = (string)$default_host;

		return imap_rfc822_parse_adrlist($address, $default_host);
    }
}

/**
 * imap_rfc822_parse_headersThis
 *
 * Analyse un en-tête mail.
 *
 * @link http://php.net/manual/fr/function.imap-rfc822-parse-headers.php Documentation pour imap_rfc822_parse_headers.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $headers    Les données à analyser
 * @param string   $defaulthost    Le nom de l'hôte par défaut
 *
 * @return object	Retourne un objet similaire à celui retourné par la fonction imap_header(), excepté pour les drapeaux et les autres propriétés qui proviennent du serveur IMAP.
 *
 */
if(!function_exists('imap_rfc822_parse_headersThis'))
{
    function imap_rfc822_parse_headersThis($headers, $defaulthost = "UNKNOWN")
    {
		$headers = (string)$headers;
		$defaulthost = (string)$defaulthost;

		return imap_rfc822_parse_headers($headers, $defaulthost);
    }
}

/**
 * imap_rfc822_write_addressThis
 *
 * Retourne une adresse email formatée correctement.
 *
 * @link http://php.net/manual/fr/function.imap-rfc822-write-address.php Documentation pour imap_rfc822_write_address.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 * @param string   $host    La partie hôte de l'email
 * @param string   $personal    Le nom du propriétaire du compte
 *
 * @return string	Retourne une adresse email, sous la forme d'une chaîne de caractères, formatée correctement selon la » RFC2822.
 *
 */
if(!function_exists('imap_rfc822_write_addressThis'))
{
    function imap_rfc822_write_addressThis($mailbox, $host, $personal)
    {
		$mailbox = (string)$mailbox;
		$host = (string)$host;
		$personal = (string)$personal;

		return imap_rfc822_write_address($mailbox, $host, $personal);
    }
}

/**
 * imap_savebodyThis
 *
 * Sauvegarde une partie spécifique du corps dans un fichier.
 *
 * @link http://php.net/manual/fr/function.imap-savebody.php Documentation pour imap_savebody.
 *
 * @version PHP 5 >= 5.1.3
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param mixed     $file    Le chemin vers le fichier de sauvegarde, sous la forme d'une chaîne de caractères ou un descripteur de fichier valide retourné par la fonction fopen().
 * @param int      $msg_number    Le numéro du message
 * @param string   $part_number    Le numéro de la section. C'est une chaîne de caractères d'entiers, délimités par une virgule qui correspondent à l'index dans la liste des sections du corps, tel que prévu par la spécification IMAP4.
 * @param int      $options    Un masque qui contient une ou plusieurs des valeurs suivantes :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_savebodyThis'))
{
    function imap_savebodyThis($imap_stream, $file, $msg_number, $part_number = "", $options = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$file = ($file);
		$msg_number = (int)$msg_number;
		$part_number = (string)$part_number;
		$options = (int)$options;

		return imap_savebody($imap_stream, $file, $msg_number, $part_number, $options);
    }
}

/**
 * imap_searchThis
 *
 * Retourne un tableau de messages après recherche.
 *
 * @link http://php.net/manual/fr/function.imap-search.php Documentation pour imap_search.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $criteria    Une chaîne de caractères, délimitée par des espaces, dans laquelle les mots-clés suivants sont acceptés. Tous les arguments à plusieurs mots (e.g. FROM "joey smith") doivent être placés entre guillemets. Les résultats devront correspondre à toutes les entrées criteria.
 * @param int      $options    Les valeurs pour les flags sont SE_UID, qui fait que le tableau réponse contient les UID plutôt que les numéros de séquence.
 * @param string   $charset
 *
 * @return array	Retourne un tableau de numéro de messages ou d'UID.
 *
 */
if(!function_exists('imap_searchThis'))
{
    function imap_searchThis($imap_stream, $criteria, $options = SE_FREE, $charset = NIL)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$criteria = (string)$criteria;
		$options = (int)$options;
		$charset = (string)$charset;

		return imap_search($imap_stream, $criteria, $options, $charset);
    }
}

/**
 * imap_set_quotaThis
 *
 * Modifie le quota d'une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-set-quota.php Documentation pour imap_set_quota.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $quota_root    La boîte aux lettres dont on doit modifier le quota. Elle doit suivre le format standard IMAP pour une boîte aux lettres : user.name.
 * @param int      $quota_limit    La taille maximale (en Ko) pour la boîte quota_root
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_set_quotaThis'))
{
    function imap_set_quotaThis($imap_stream, $quota_root, $quota_limit)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$quota_root = (string)$quota_root;
		$quota_limit = (int)$quota_limit;

		return imap_set_quota($imap_stream, $quota_root, $quota_limit);
    }
}

/**
 * imap_setaclThis
 *
 * Modifie le ACL de la boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-setacl.php Documentation pour imap_setacl.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 * @param string   $id    L'identifiant de l'utilisateur dont on veut définir les droits.
 * @param string   $rights    Les droits à donner à l'utilisateur. Le fait de passer une chaîne vide effacera l'ACL.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_setaclThis'))
{
    function imap_setaclThis($imap_stream, $mailbox, $id, $rights)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;
		$id = (string)$id;
		$rights = (string)$rights;

		return imap_setacl($imap_stream, $mailbox, $id, $rights);
    }
}

/**
 * imap_setflag_fullThis
 *
 * Positionne un drapeau sur un message.
 *
 * @link http://php.net/manual/fr/function.imap-setflag-full.php Documentation pour imap_setflag_full.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $sequence    Une séquence de numéro de messages. Vous pouvez énumérer les messages désirés avec la syntaxe X,Y, ou récupérer tous les messages d'un intervalle avec la syntaxe X:Y
 * @param string   $flag    Les flags que vous pouvez modifier sont \Seen, \Answered, \Flagged, \Deleted, et \Draft (comme défini dans la » RFC2060).
 * @param int      $options    options est un masque de bits, qui accepte uniquement la valeur suivante :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_setflag_fullThis'))
{
    function imap_setflag_fullThis($imap_stream, $sequence, $flag, $options = NIL)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$sequence = (string)$sequence;
		$flag = (string)$flag;
		$options = (int)$options;

		return imap_setflag_full($imap_stream, $sequence, $flag, $options);
    }
}

/**
 * imap_sortThis
 *
 * Trie des messages.
 *
 * @link http://php.net/manual/fr/function.imap-sort.php Documentation pour imap_sort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $criteria    Les critères criteria peuvent être un (et un seul) parmi les suivants :
 * @param int      $reverse    vaut 1 pour signifier : tri inverse
 * @param int      $options    Les flags options dont des masques de bits, d'un ou plusieurs des éléments suivants :
 * @param string   $search_criteria
 * @param string   $charset
 *
 * @return array	Retourne un tableau de numéros de messages triés en fonction des paramètres fournis.
 *
 */
if(!function_exists('imap_sortThis'))
{
    function imap_sortThis($imap_stream, $criteria, $reverse, $options = 0, $search_criteria = NULL, $charset = NIL)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$criteria = (int)$criteria;
		$reverse = (int)$reverse;
		$options = (int)$options;
		$search_criteria = (string)$search_criteria;
		$charset = (string)$charset;

		return imap_sort($imap_stream, $criteria, $reverse, $options, $search_criteria, $charset);
    }
}

/**
 * imap_statusThis
 *
 * Retourne les informations de statut sur une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-status.php Documentation pour imap_status.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 * @param int      $options    Les drapeaux valides sont :
 *
 * @return object	Cette fonction retourne un objet contenant les informations sur le statut. L'objet a les propriétés suivantes : messages, recent, unseen, uidnext, et uidvalidity.
 *
 */
if(!function_exists('imap_statusThis'))
{
    function imap_statusThis($imap_stream, $mailbox, $options)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;
		$options = (int)$options;

		return imap_status($imap_stream, $mailbox, $options);
    }
}

/**
 * imap_subscribeThis
 *
 * Souscrit à une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-subscribe.php Documentation pour imap_subscribe.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_subscribeThis'))
{
    function imap_subscribeThis($imap_stream, $mailbox)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;

		return imap_subscribe($imap_stream, $mailbox);
    }
}

/**
 * imap_threadThis
 *
 * Retourne l'arbre des messages organisés par thread.
 *
 * @link http://php.net/manual/fr/function.imap-thread.php Documentation pour imap_thread.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $options
 *
 * @return array	imap_thread() retourne un tableau associatif contenant un arbre de messages organisés par thread par REFERENCES ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('imap_threadThis'))
{
    function imap_threadThis($imap_stream, $options = SE_FREE)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$options = (int)$options;

		return imap_thread($imap_stream, $options);
    }
}

/**
 * imap_timeoutThis
 *
 * Configure ou retourne le timeout.
 *
 * @link http://php.net/manual/fr/function.imap-timeout.php Documentation pour imap_timeout.
 *
 * @version PHP 4 >= 4.3.3
 * @version PHP 5
 *
 * @param int      $timeout_type    Une valeur parmi les suivantes : IMAP_OPENTIMEOUT, IMAP_READTIMEOUT, IMAP_WRITETIMEOUT, ou IMAP_CLOSETIMEOUT.
 * @param int      $timeout    Le timeout, en secondes.
 *
 * @return mixed	Si le paramètre timeout est défini, cette fonction retourne TRUE en cas de succès et FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_timeoutThis'))
{
    function imap_timeoutThis($timeout_type, $timeout = -1)
    {
		$timeout_type = (int)$timeout_type;
		$timeout = (int)$timeout;

		return imap_timeout($timeout_type, $timeout);
    }
}

/**
 * imap_uidThis
 *
 * Retourne l'UID d'un message.
 *
 * @link http://php.net/manual/fr/function.imap-uid.php Documentation pour imap_uid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message.
 *
 * @return int	L'UID d'un message donné.
 *
 */
if(!function_exists('imap_uidThis'))
{
    function imap_uidThis($imap_stream, $msg_number)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;

		return imap_uid($imap_stream, $msg_number);
    }
}

/**
 * imap_undeleteThis
 *
 * Enlève la marque d'effacement d'un message.
 *
 * @link http://php.net/manual/fr/function.imap-undelete.php Documentation pour imap_undelete.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param int      $msg_number    Le numéro du message
 * @param int      $flags
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_undeleteThis'))
{
    function imap_undeleteThis($imap_stream, $msg_number, $flags = 0)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$msg_number = (int)$msg_number;
		$flags = (int)$flags;

		return imap_undelete($imap_stream, $msg_number, $flags);
    }
}

/**
 * imap_unsubscribeThis
 *
 * Termine la souscription à une boîte aux lettres.
 *
 * @link http://php.net/manual/fr/function.imap-unsubscribe.php Documentation pour imap_unsubscribe.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $imap_stream    Un flux IMAP retourné par la fonction imap_open().
 * @param string   $mailbox    Le nom de la boîte aux lettres, voir la documentation de la fonction imap_open() pour plus de détails.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('imap_unsubscribeThis'))
{
    function imap_unsubscribeThis($imap_stream, $mailbox)
    {
		$imap_stream = is_resource($imap_stream) ? $imap_stream : NULL;
		$mailbox = (string)$mailbox;

		return imap_unsubscribe($imap_stream, $mailbox);
    }
}

/**
 * imap_utf7_decodeThis
 *
 * Décode une chaîne encodée en UTF-7 modifié.
 *
 * @link http://php.net/manual/fr/function.imap-utf7-decode.php Documentation pour imap_utf7_decode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $text    L'encodage UTF-7 modifié est défini dans la » RFC 2060, section 5.1.3 (l'encodage UTF-7 original est lui défini dans » RFC1642).
 *
 * @return string	Retourne une chaîne de caractères encodée ISO-8859-1 et contenant la même séquence de caractères que dans le paramètre text, ou FALSE si text contient une séquence UTF-7 modifiée invalide ou si text contient un caractère qui ne fait pas partie du jeu de caractères ISO-8859-1.
 *
 */
if(!function_exists('imap_utf7_decodeThis'))
{
    function imap_utf7_decodeThis($text)
    {
		$text = (string)$text;

		return imap_utf7_decode($text);
    }
}

/**
 * imap_utf7_encodeThis
 *
 * Convertit une chaîne ISO-8859-1 en texte UTF-7 modifié.
 *
 * @link http://php.net/manual/fr/function.imap-utf7-encode.php Documentation pour imap_utf7_encode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $data    Une chaîne de caractères ISO-8859-1.
 *
 * @return string	Retourne les données data encodées avec l'encodage UTF-7 modifié tel que défini dans la » RFC 2060, section 5.1.3 (l'encodage UTF-7 original est lui défini dans » RFC1642).
 *
 */
if(!function_exists('imap_utf7_encodeThis'))
{
    function imap_utf7_encodeThis($data)
    {
		$data = (string)$data;

		return imap_utf7_encode($data);
    }
}

/**
 * imap_utf8This
 *
 * Convertit du texte au format MIME en UTF-8.
 *
 * @link http://php.net/manual/fr/function.imap-utf8.php Documentation pour imap_utf8.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $mime_encoded_text    Une chaîne de caractères encodé MIME. Les spécifications de MIME et UTF8 sont décrites dans les » RFC2047 et » RFC2044.
 *
 * @return string	Retourne une chaîne de caractères encodée UTF-8.
 *
 */
if(!function_exists('imap_utf8This'))
{
    function imap_utf8This($mime_encoded_text)
    {
		$mime_encoded_text = (string)$mime_encoded_text;

		return imap_utf8($mime_encoded_text);
    }
}

/**
 * implodeThis
 *
 * Rassemble les éléments d'un tableau en une chaîne.
 *
 * @link http://php.net/manual/fr/function.implode.php Documentation pour implode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $glue    Par défaut, une chaîne vide.
 * @param array    $pieces    Le tableau de chaînes à rassembler.
 *
 * @return string	Retourne une chaîne contenant la représentation en chaîne de caractères de tous les éléments du tableau pieces, dans le même ordre, avec la chaîne glue, placée entre deux éléments.
 *
 */
if(!function_exists('implodeThis'))
{
    function implodeThis($glue, $pieces)
    {
		$glue = (string)$glue;
		$pieces = (array)$pieces;

		return implode($glue, $pieces);
    }
}

/**
 * import_request_variablesThis
 *
 * Importe les variables de GET/POST/Cookie dans l'environnement global.
 *
 * @link http://php.net/manual/fr/function.import-request-variables.php Documentation pour import_request_variables.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5 < 5.4.0
 *
 * @param string   $types    En utilisant le paramètre types, vous pouvez spécifier les variables que vous voulez importer. Vous pouvez utiliser 'G', 'P' et 'C' pour désigner respectivement GET, POST et Cookie. Ces caractères ne sont pas sensibles à la casse, et vous pouvez les combiner entre eux. POST inclut les fichiers téléchargés.
 * @param string   $prefix    Le paramètre prefix est utilisé comme un préfixe de nom de variable, qui sera ajouté au début de tous les noms de variables importées. Si vous avez par exemple une variable GET du nom de "userid", et utilisez le préfixe "pref_", la variable ainsi générée s'appellera $pref_userid.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('import_request_variablesThis'))
{
    function import_request_variablesThis($types, $prefix = NULL)
    {
		$types = (string)$types;
		$prefix = (string)$prefix;

		return import_request_variables($types, $prefix);
    }
}

/**
 * in_arrayThis
 *
 * Indique si une valeur appartient à un tableau.
 *
 * @link http://php.net/manual/fr/function.in-array.php Documentation pour in_array.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $needle    La valeur recherchée.
 * @param array    $haystack    Le tableau.
 * @param bool     $strict    Le troisième paramètre strict est optionnel. S'il vaut TRUE alors in_array() vérifiera aussi que le type du paramètre needle correspond au type de la valeur trouvée dans haystack.
 *
 * @return bool	Retourne TRUE si needle est trouvé dans le tableau, FALSE sinon.
 *
 */
if(!function_exists('in_arrayThis'))
{
    function in_arrayThis($needle, $haystack, $strict = FALSE)
    {
		$needle = ($needle);
		$haystack = (array)$haystack;
		$strict = (bool)$strict;

		return in_array($needle, $haystack, $strict);
    }
}

/**
 * inet_ntopThis
 *
 * Convertit un paquet d'adresses internet en une représentation humainement lisible.
 *
 * @link http://php.net/manual/fr/function.inet-ntop.php Documentation pour inet_ntop.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $in_addr    Une adresse 32 bit IPv4, ou 28 bit IPv6.
 *
 * @return string	Retourne une représentation de l'adresse, sous la forme d'une chaîne de caractères ou FALSE si une erreur survient.
 *
 */
if(!function_exists('inet_ntopThis'))
{
    function inet_ntopThis($in_addr)
    {
		$in_addr = (string)$in_addr;

		return inet_ntop($in_addr);
    }
}

/**
 * inet_ptonThis
 *
 * Convertit une adresse IP lisible en sa représentation in_addr.
 *
 * @link http://php.net/manual/fr/function.inet-pton.php Documentation pour inet_pton.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $address    Une adresse IPv4 ou IPv6.
 *
 * @return string	Retourne la représentation in_addr de l'adresse fournie par le paramètre address ou FALSE si le paramètre address fourni a une synthaxe invalide (par exemple, une adresse IPv4 sans point, ou une adresse IPv6 sans virgule).
 *
 */
if(!function_exists('inet_ptonThis'))
{
    function inet_ptonThis($address)
    {
		$address = (string)$address;

		return inet_pton($address);
    }
}

/**
 * ingres_unbuffered_queryThis
 *
 * Envoie une requête sans buffer à Ingres.
 *
 * @link http://php.net/manual/fr/function.ingres-unbuffered-query.php Documentation pour ingres_unbuffered_query.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $link    La ressource de connexion à Ingres
 * @param string   $query    Une requête SQL valide (voyez le SQL reference guide) pour le serveur Ingres. Voyez la documentation du paramètre query la fonction ingres-query() pour une liste de requêtes SQL qui ne peuvent pas être exécutées via la fonction ingres_unbuffered_query(). Les données contenues dans la requête doivent être proprement échappées.
 * @param array    $params    Un tableau de valeurs de paramètre à utiliser avec la requête
 * @param string   $types    Une chaîne contenant une séquence de types pour les paramètres fournis à la requête. Voyez la documentation de la fonction ingres-query() pour obtenir la liste des types.
 *
 * @return mixed	ingres_unbuffered_query() retourne une ressource de résultats lorsqu'il y a des lignes à lire, et sinon, elle retourne FALSE s'il n'y a pas de lignes à lire, comme pour les requêtes INSERT, UPDATE et DELETE. Pour savoir s'il y a eu une erreur, utilisez l'une des fonctions ingres_errno(), ingres_error() ou ingres_errsqlstate().
 *
 */
if(!function_exists('ingres_unbuffered_queryThis'))
{
    function ingres_unbuffered_queryThis($link, $query, $params = NULL, $types = NULL)
    {
		$link = is_resource($link) ? $link : NULL;
		$query = (string)$query;
		$params = (array)$params;
		$types = (string)$types;

		return ingres_unbuffered_query($link, $query, $params, $types);
    }
}

/**
 * ini_getThis
 *
 * Lit la valeur d'une option de configuration.
 *
 * @link http://php.net/manual/fr/function.ini-get.php Documentation pour ini_get.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $varname    Le nom de l'option de configuration.
 *
 * @return string	Retourne la valeur de l'option de configuration varname en cas de succès, ou une chaîne de caractères vide pour les valeurs NULL. Retourne FALSE si l'option de configuration n'existe pas.
 *
 */
if(!function_exists('ini_getThis'))
{
    function ini_getThis($varname)
    {
		$varname = (string)$varname;

		return ini_get($varname);
    }
}

/**
 * ini_get_allThis
 *
 * Lit toutes les valeurs de configuration.
 *
 * @link http://php.net/manual/fr/function.ini-get-all.php Documentation pour ini_get_all.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $extension    Un nom d'extension, optionnel. S'il est défini, la fonction retournera uniquement les options spécifiques à cette extension.
 * @param bool     $details    Récupère les détails, ou uniquement la valeur courante de chaque configuration. Par défaut, vaut TRUE (récupère les détails).
 *
 * @return array	Retourne un tableau associatif dont les clés sont les noms des directives.
 *
 */
if(!function_exists('ini_get_allThis'))
{
    function ini_get_allThis($extension = NULL, $details = true)
    {
		$extension = (string)$extension;
		$details = (bool)$details;

		return ini_get_all($extension, $details);
    }
}

/**
 * ini_restoreThis
 *
 * Restaure la valeur de l'option de configuration.
 *
 * @link http://php.net/manual/fr/function.ini-restore.php Documentation pour ini_restore.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $varname    Le nom de l'option de configuration.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('ini_restoreThis'))
{
    function ini_restoreThis($varname)
    {
		$varname = (string)$varname;

		return ini_restore($varname);
    }
}

/**
 * ini_setThis
 *
 * Modifie la valeur d'une option de configuration.
 *
 * @link http://php.net/manual/fr/function.ini-set.php Documentation pour ini_set.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $varname    Les options disponibles ne peuvent pas toutes être modifiées avec ini_set(). La liste de toutes les options disponibles se trouve dans l'annexe.
 * @param string   $newvalue    La nouvelle valeur pour l'option.
 *
 * @return string	Retourne l'ancienne valeur en cas de succès, FALSE si une erreur survient.
 *
 */
if(!function_exists('ini_setThis'))
{
    function ini_setThis($varname, $newvalue)
    {
		$varname = (string)$varname;
		$newvalue = (string)$newvalue;

		return ini_set($varname, $newvalue);
    }
}

/**
 * interface_existsThis
 *
 * Vérifie si une interface a été définie.
 *
 * @link http://php.net/manual/fr/function.interface-exists.php Documentation pour interface_exists.
 *
 * @version PHP 5 >= 5.0.2
 *
 * @param string   $interface_name    Le nom de l'interface
 * @param bool     $autoload    Si l'on doit appeler __autoload ou non par défaut.
 *
 * @return bool	Retourne TRUE si l'interface fournie par le paramètre interface_name a été définie, FALSE sinon.
 *
 */
if(!function_exists('interface_existsThis'))
{
    function interface_existsThis($interface_name, $autoload = true)
    {
		$interface_name = (string)$interface_name;
		$autoload = (bool)$autoload;

		return interface_exists($interface_name, $autoload);
    }
}

/**
 * intvalThis
 *
 * Retourne la valeur numérique entière équivalente d'une variable.
 *
 * @link http://php.net/manual/fr/function.intval.php Documentation pour intval.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La valeur scalaire à être convertie en entier
 * @param int      $base    La base pour la conversion
 *
 * @return int	Une valeur de type entier de var en cas de succès ou 0 en cas d'échec. Les tableaux vides retournent 0, les tableaux non vides retournent 1.
 *
 */
if(!function_exists('intvalThis'))
{
    function intvalThis($var, $base = 10)
    {
		$var = ($var);
		$base = (int)$base;

		return intval($var, $base);
    }
}

/**
 * ip2longThis
 *
 * Convertit une chaîne contenant une adresse (IPv4) IP numérique en adresse littérale.
 *
 * @link http://php.net/manual/fr/function.ip2long.php Documentation pour ip2long.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $ip_address    Une adresse au format standard.
 *
 * @return int	Retourne une adresse IPv4, ou FALSE si ip_address est invalide.
 *
 */
if(!function_exists('ip2longThis'))
{
    function ip2longThis($ip_address)
    {
		$ip_address = (string)$ip_address;

		return ip2long($ip_address);
    }
}

/**
 * iptcembedThis
 *
 * Intègre des données binaires IPTC dans une image JPEG.
 *
 * @link http://php.net/manual/fr/function.iptcembed.php Documentation pour iptcembed.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $iptcdata    Les données à écrire.
 * @param string   $jpeg_file_name    Chemin vers le fichier JPEG.
 * @param int      $spool    La bobine. Si la bobine est supérieure à 2, alors le fichier JPEG sera retourné sous la forme d'une chaîne de caractères.
 *
 * @return mixed	En cas de succès et si la bobine est supérieure à 2, alors le fichier JPEG sera retourné sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('iptcembedThis'))
{
    function iptcembedThis($iptcdata, $jpeg_file_name, $spool = NULL)
    {
		$iptcdata = (string)$iptcdata;
		$jpeg_file_name = (string)$jpeg_file_name;
		$spool = (int)$spool;

		return iptcembed($iptcdata, $jpeg_file_name, $spool);
    }
}

/**
 * iptcparseThis
 *
 * Analyse un bloc binaire IPTC et recherche les balises simples.
 *
 * @link http://php.net/manual/fr/function.iptcparse.php Documentation pour iptcparse.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $iptcblock    Un bloc binaire IPTC.
 *
 * @return array	Retourne un tableau avec les balises comme index et les valeurs de ces balises IPTC dans les valeurs de tableau correspondantes. En cas d'erreur, ou si aucune balise IPTC n'a été trouvée, cette fonction retourne FALSE.
 *
 */
if(!function_exists('iptcparseThis'))
{
    function iptcparseThis($iptcblock)
    {
		$iptcblock = (string)$iptcblock;

		return iptcparse($iptcblock);
    }
}

/**
 * is_aThis
 *
 * Vérifie si l'objet est une instance d'une classe donnée ou a cette classe parmi ses parents.
 *
 * @link http://php.net/manual/fr/function.is-a.php Documentation pour is_a.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param object   $object    L'objet testé
 * @param string   $class_name    Le nom de la classe
 * @param bool     $allow_string    Si ce paramètre vaut FALSE, le nom de la classe sous forme de chaîne de caractères dans le paramètre object n'est pas autorisé. Ceci permet d'éviter l'appel de l'autoloader si la classe n'existe pas.
 *
 * @return bool	Retourne TRUE si l'objet est une instance de cette classe ou a cette classe comme parent, FALSE sinon.
 *
 */
if(!function_exists('is_aThis'))
{
    function is_aThis($object, $class_name, $allow_string = FALSE)
    {
		$object = (object)$object;
		$class_name = (string)$class_name;
		$allow_string = (bool)$allow_string;

		return is_a($object, $class_name, $allow_string);
    }
}

/**
 * is_arrayThis
 *
 * Détermine si une variable est un tableau.
 *
 * @link http://php.net/manual/fr/function.is-array.php Documentation pour is_array.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est un array, FALSE sinon.
 *
 */
if(!function_exists('is_arrayThis'))
{
    function is_arrayThis($var)
    {
		$var = ($var);
		return is_array($var);
    }
}

/**
 * is_boolThis
 *
 * Détermine si une variable est un booléen.
 *
 * @link http://php.net/manual/fr/function.is-bool.php Documentation pour is_bool.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est un booléen, FALSE sinon.
 *
 */
if(!function_exists('is_boolThis'))
{
    function is_boolThis($var)
    {
		$var = ($var);
		return is_bool($var);
    }
}

/**
 * is_callableThis
 *
 * Détermine si l'argument peut être appelé comme fonction.
 *
 * @link http://php.net/manual/fr/function.is-callable.php Documentation pour is_callable.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param callable     $name    La fonction de rappel à vérifier.
 * @param bool     $syntax_only    Si l'argument syntax_only vaut TRUE, la fonction ne va vérifier que si name peut être une fonction ou une méthode. Il va simplement rejeter les variables qui ne sont pas des chaînes, ou des tableaux qui n'ont pas la bonne structure pour être utilisés comme fonction de rappel. Les tableaux valides sont supposés n'avoir que deux entrées, le premier étant un objet ou une chaîne, et le second une chaîne.
 * @param string   &$callable_name    L'argument callable_name reçoit le nom à utiliser. Dans l'exemple ci-dessous, il vaut "someClass::someMethod". Notez que, bien que someClass::someMethod() puisse être appelée sous forme statique, ce n'est pas le cas.
 *
 * @return bool	Retourne TRUE si name peut être appelé comme une fonction, FALSE sinon.
 *
 */
if(!function_exists('is_callableThis'))
{
    function is_callableThis($name, $syntax_only = false, &$callable_name = NULL)
    {
		$name = is_callable($name) ? $name : NULL;
		$syntax_only = (bool)$syntax_only;
		$callable_name = (string)$callable_name;

		return is_callable($name, $syntax_only, $callable_name);
    }
}

/**
 * is_dirThis
 *
 * Indique si le fichier est un dossier.
 *
 * @link http://php.net/manual/fr/function.is-dir.php Documentation pour is_dir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier. Si filename est un fichier relatif, il sera vérifié relativement au dossier de travail courant. Si filename est un lien symbolique ou un lien conventionnel, le lien sera résolu et vérifié. Si vous avez activé le safe mode, ou open_basedir, plus de restrictions peuvent être appliquées.
 *
 * @return bool	Retourne TRUE si le nom de fichier existe et que c'est un dossier, FALSE sinon.
 *
 */
if(!function_exists('is_dirThis'))
{
    function is_dirThis($filename)
    {
		$filename = (string)$filename;

		return is_dir($filename);
    }
}

/**
 * is_executableThis
 *
 * Indique si le fichier est exécutable.
 *
 * @link http://php.net/manual/fr/function.is-executable.php Documentation pour is_executable.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return bool	Retourne TRUE si le fichier existe et qu'il est exécutable, FALSE sinon.
 *
 */
if(!function_exists('is_executableThis'))
{
    function is_executableThis($filename)
    {
		$filename = (string)$filename;

		return is_executable($filename);
    }
}

/**
 * is_fileThis
 *
 * Indique si le fichier est un véritable fichier.
 *
 * @link http://php.net/manual/fr/function.is-file.php Documentation pour is_file.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return bool	Retourne TRUE si le nom de fichier existe et que c'est un fichier régulier, FALSE sinon.
 *
 */
if(!function_exists('is_fileThis'))
{
    function is_fileThis($filename)
    {
		$filename = (string)$filename;

		return is_file($filename);
    }
}

/**
 * is_finiteThis
 *
 * Indique si un nombre est fini.
 *
 * @link http://php.net/manual/fr/function.is-finite.php Documentation pour is_finite.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param float    $val    La valeur à vérifier
 *
 * @return bool	TRUE si val est une valeur finie, c'est à dire une valeur qui peut être représentée par un nombre à virgule flottante PHP sur cette plate-forme, sinon, FALSE.
 *
 */
if(!function_exists('is_finiteThis'))
{
    function is_finiteThis($val)
    {
		$val = (float)$val;

		return is_finite($val);
    }
}

/**
 * is_floatThis
 *
 * Détermine si une variable est de type nombre décimal.
 *
 * @link http://php.net/manual/fr/function.is-float.php Documentation pour is_float.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est un nombre décimal, FALSE sinon.
 *
 */
if(!function_exists('is_floatThis'))
{
    function is_floatThis($var)
    {
		$var = ($var);
		return is_float($var);
    }
}

/**
 * is_infiniteThis
 *
 * Indique si un nombre est infini.
 *
 * @link http://php.net/manual/fr/function.is-infinite.php Documentation pour is_infinite.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param float    $val    La valeur à vérifier
 *
 * @return bool	TRUE si val est une valeur infinie, sinon, FALSE.
 *
 */
if(!function_exists('is_infiniteThis'))
{
    function is_infiniteThis($val)
    {
		$val = (float)$val;

		return is_infinite($val);
    }
}

/**
 * is_intThis
 *
 * Détermine si une variable est de type nombre entier.
 *
 * @link http://php.net/manual/fr/function.is-int.php Documentation pour is_int.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est un entier, FALSE sinon.
 *
 */
if(!function_exists('is_intThis'))
{
    function is_intThis($var)
    {
		$var = ($var);
		return is_int($var);
    }
}

/**
 * is_linkThis
 *
 * Indique si le fichier est un lien symbolique.
 *
 * @link http://php.net/manual/fr/function.is-link.php Documentation pour is_link.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return bool	Retourne TRUE si le nom de fichier existe et que c'est un lien symbolique, FALSE sinon.
 *
 */
if(!function_exists('is_linkThis'))
{
    function is_linkThis($filename)
    {
		$filename = (string)$filename;

		return is_link($filename);
    }
}

/**
 * is_nanThis
 *
 * Indique si une valeur n'est pas un nombre.
 *
 * @link http://php.net/manual/fr/function.is-nan.php Documentation pour is_nan.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param float    $val    La valeur à vérifier
 *
 * @return bool	Retourne TRUE si val est 'not a number' (pas un nombre), sinon, FALSE.
 *
 */
if(!function_exists('is_nanThis'))
{
    function is_nanThis($val)
    {
		$val = (float)$val;

		return is_nan($val);
    }
}

/**
 * is_nullThis
 *
 * Indique si une variable vaut NULL.
 *
 * @link http://php.net/manual/fr/function.is-null.php Documentation pour is_null.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est NULL, FALSE sinon.
 *
 */
if(!function_exists('is_nullThis'))
{
    function is_nullThis($var)
    {
		$var = ($var);
		return is_null($var);
    }
}

/**
 * is_numericThis
 *
 * Détermine si une variable est un type numérique.
 *
 * @link http://php.net/manual/fr/function.is-numeric.php Documentation pour is_numeric.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est un nombre ou une chaîne numérique, FALSE sinon.
 *
 */
if(!function_exists('is_numericThis'))
{
    function is_numericThis($var)
    {
		$var = ($var);
		return is_numeric($var);
    }
}

/**
 * is_objectThis
 *
 * Détermine si une variable est de type objet.
 *
 * @link http://php.net/manual/fr/function.is-object.php Documentation pour is_object.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est un objet, FALSE sinon.
 *
 */
if(!function_exists('is_objectThis'))
{
    function is_objectThis($var)
    {
		$var = ($var);
		return is_object($var);
    }
}

/**
 * is_readableThis
 *
 * Indique si un fichier existe et est accessible en lecture.
 *
 * @link http://php.net/manual/fr/function.is-readable.php Documentation pour is_readable.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 *
 * @return bool	Retourne TRUE si le fichier ou le dossier spécifié par filename existe et est accessible en lecture, FALSE sinon.
 *
 */
if(!function_exists('is_readableThis'))
{
    function is_readableThis($filename)
    {
		$filename = (string)$filename;

		return is_readable($filename);
    }
}

/**
 * is_resourceThis
 *
 * Détermine si une variable est une ressource.
 *
 * @link http://php.net/manual/fr/function.is-resource.php Documentation pour is_resource.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est une ressource, FALSE autrement.
 *
 */
if(!function_exists('is_resourceThis'))
{
    function is_resourceThis($var)
    {
		$var = ($var);
		return is_resource($var);
    }
}

/**
 * is_scalarThis
 *
 * Indique si une variable est un scalaire.
 *
 * @link http://php.net/manual/fr/function.is-scalar.php Documentation pour is_scalar.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est un scalaire, FALSE autrement.
 *
 */
if(!function_exists('is_scalarThis'))
{
    function is_scalarThis($var)
    {
		$var = ($var);
		return is_scalar($var);
    }
}

/**
 * is_soap_faultThis
 *
 * Vérifie si SOAP retourne une erreur.
 *
 * @link http://php.net/manual/fr/function.is-soap-fault.php Documentation pour is_soap_fault.
 *
 * @version Unknown
 *
 * @param mixed     $object    L'objet à tester.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('is_soap_faultThis'))
{
    function is_soap_faultThis($object)
    {
		$object = ($object);
		return is_soap_fault($object);
    }
}

/**
 * is_stringThis
 *
 * Détermine si une variable est de type chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.is-string.php Documentation pour is_string.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à évaluer.
 *
 * @return bool	Retourne TRUE si var est une chaîne de caractères, FALSE sinon.
 *
 */
if(!function_exists('is_stringThis'))
{
    function is_stringThis($var)
    {
		$var = ($var);
		return is_string($var);
    }
}

/**
 * is_subclass_ofThis
 *
 * Détermine si un objet est une sous-classe d'une classe donnée.
 *
 * @link http://php.net/manual/fr/function.is-subclass-of.php Documentation pour is_subclass_of.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $object    Un nom de classe ou une instance d'un objet
 * @param string   $class_name    Le nom de la classe
 * @param bool     $allow_string    Si ce paramètre est défini à FALSE, un nom de classe sous forme de chaîne de caractères dans le paramètre object n'est pas autorisé. Ceci permet d'éviter d'appeler l'autoloader si la classe n'existe pas.
 *
 * @return bool	Cette fonction retourne TRUE si l'objet object est une instance d'une classe qui est une sous-classe de class_name, FALSE sinon.
 *
 */
if(!function_exists('is_subclass_ofThis'))
{
    function is_subclass_ofThis($object, $class_name, $allow_string = TRUE)
    {
		$object = ($object);
		$class_name = (string)$class_name;
		$allow_string = (bool)$allow_string;

		return is_subclass_of($object, $class_name, $allow_string);
    }
}

/**
 * is_uploaded_fileThis
 *
 * Indique si le fichier a été téléchargé par HTTP POST.
 *
 * @link http://php.net/manual/fr/function.is-uploaded-file.php Documentation pour is_uploaded_file.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param string   $filename    Le nom de fichier à vérifier.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('is_uploaded_fileThis'))
{
    function is_uploaded_fileThis($filename)
    {
		$filename = (string)$filename;

		return is_uploaded_file($filename);
    }
}

/**
 * is_writableThis
 *
 * Indique si un fichier est accessible en écriture.
 *
 * @link http://php.net/manual/fr/function.is-writable.php Documentation pour is_writable.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier à vérifier.
 *
 * @return bool	Retourne TRUE si le fichier filename existe et est accessible en écriture.
 *
 */
if(!function_exists('is_writableThis'))
{
    function is_writableThis($filename)
    {
		$filename = (string)$filename;

		return is_writable($filename);
    }
}

/**
 * issetThis
 *
 * Détermine si une variable est définie et est différente de NULL.
 *
 * @link http://php.net/manual/fr/function.isset.php Documentation pour isset.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à analyser.
 * @param mixed     $item    Une autre variable...
 *
 * @return bool	Retourne TRUE si var existe et a une valeur autre que NULL, FALSE sinon.
 *
 */
if(!function_exists('issetThis'))
{
    function issetThis($var, $var1 = NULL)
    {
		$var = ($var);
		$var1 = ($var1);
		return isset($var, $var1);
    }
}

/**
 * iterator_applyThis
 *
 * Appelle une fonction pour tous les éléments d'un itérateur.
 *
 * @link http://php.net/manual/fr/function.iterator-apply.php Documentation pour iterator_apply.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param Traversable     $iterator    La classe à itérer.
 * @param callable     $function    La fonction à appeler à chaque élément.
 * @param array    $args    Les arguments à passer à la fonction de rappel.
 *
 * @return int	Retourne le nombre d'itération.
 *
 */
if(!function_exists('iterator_applyThis'))
{
    function iterator_applyThis($iterator, $function, $args = NULL)
    {
		$iterator = (is_array($iterator) || $iterator instanceof Traversable) ? $iterator : NULL;
		$function = is_callable($function) ? $function : NULL;
		$args = (array)$args;

		return iterator_apply($iterator, $function, $args);
    }
}

/**
 * iterator_countThis
 *
 * Compte de nombre d'éléments dans un itérateur.
 *
 * @link http://php.net/manual/fr/function.iterator-count.php Documentation pour iterator_count.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param Traversable     $iterator    L'itérateur dont il faut compter les éléments.
 *
 * @return int	Le nombre d'éléments dans l'itérateur iterator.
 *
 */
if(!function_exists('iterator_countThis'))
{
    function iterator_countThis($iterator)
    {
		$iterator = (is_array($iterator) || $iterator instanceof Traversable) ? $iterator : NULL;

		return iterator_count($iterator);
    }
}

/**
 * iterator_to_arrayThis
 *
 * Copie un itérateur dans un tableau.
 *
 * @link http://php.net/manual/fr/function.iterator-to-array.php Documentation pour iterator_to_array.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param Traversable     $iterator    L'itérateur à copier.
 * @param bool     $use_keys    S'il faut utiliser les éléments de l'itérateur comme clé.
 *
 * @return array	Un tableau contenant les éléments de l'itérateur iterator.
 *
 */
if(!function_exists('iterator_to_arrayThis'))
{
    function iterator_to_arrayThis($iterator, $use_keys = true)
    {
		$iterator = (is_array($iterator) || $iterator instanceof Traversable) ? $iterator : NULL;
		$use_keys = (bool)$use_keys;

		return iterator_to_array($iterator, $use_keys);
    }
}

/**
 * java_last_exception_clearThis
 *
 * Efface la dernière exception Java.
 *
 * @link http://php.net/manual/fr/function.java-last-exception-clear.php Documentation pour java_last_exception_clear.
 *
 * @version PHP 4 >= 4.0.2
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('java_last_exception_clearThis'))
{
    function java_last_exception_clearThis()
    {
		return java_last_exception_clear();
    }
}

/**
 * java_last_exception_getThis
 *
 * Lit la dernière exception Java.
 *
 * @link http://php.net/manual/fr/function.java-last-exception-get.php Documentation pour java_last_exception_get.
 *
 * @version PHP 4 >= 4.0.2
 * @return object	Retourne un objet représentant la dernière exception.
 *
 */
if(!function_exists('java_last_exception_getThis'))
{
    function java_last_exception_getThis()
    {
		return java_last_exception_get();
    }
}

/**
 * jdtojewishThis
 *
 * Convertit le nombre de jours du calendrier Julien en date du calendrier juif.
 *
 * @link http://php.net/manual/fr/function.jdtojewish.php Documentation pour jdtojewish.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $juliandaycount    Le nombre de jours Julien, sous la forme d'un entier
 * @param bool     $hebrew
 * @param int      $fl
 *
 * @return string	La date Juive, sous la forme d'une chaîne de caractères "mois/jour/année".
 *
 */
if(!function_exists('jdtojewishThis'))
{
    function jdtojewishThis($juliandaycount, $hebrew = false, $fl = 0)
    {
		$juliandaycount = (int)$juliandaycount;
		$hebrew = (bool)$hebrew;
		$fl = (int)$fl;

		return jdtojewish($juliandaycount, $hebrew, $fl);
    }
}

/**
 * jdtounixThis
 *
 * Convertit un jour Julien en timestamp UNIX.
 *
 * @link http://php.net/manual/fr/function.jdtounix.php Documentation pour jdtounix.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $jday    Le nombre de jours Julien, compris entre 2440588 et 2465342.
 *
 * @return int	Le timestamp unix pour le début du jour Julien donné.
 *
 */
if(!function_exists('jdtounixThis'))
{
    function jdtounixThis($jday)
    {
		$jday = (int)$jday;

		return jdtounix($jday);
    }
}

/**
 * jpeg2wbmpThis
 *
 * Convertit une image JPEG en image WBMP.
 *
 * @link http://php.net/manual/fr/function.jpeg2wbmp.php Documentation pour jpeg2wbmp.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $jpegname    Le chemin vers le fichier JPEG.
 * @param string   $wbmpname    Chemin vers le fichier final WBMP.
 * @param int      $dest_height    Hauteur de l'image de destination.
 * @param int      $dest_width    Largeur de l'image de destination.
 * @param int      $threshold    Valeur du seuil, entre 0 et 8 inclus.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('jpeg2wbmpThis'))
{
    function jpeg2wbmpThis($jpegname, $wbmpname, $dest_height, $dest_width, $threshold)
    {
		$jpegname = (string)$jpegname;
		$wbmpname = (string)$wbmpname;
		$dest_height = (int)$dest_height;
		$dest_width = (int)$dest_width;
		$threshold = (int)$threshold;

		return jpeg2wbmp($jpegname, $wbmpname, $dest_height, $dest_width, $threshold);
    }
}

/**
 * json_last_errorThis
 *
 * Retourne la dernière erreur JSON.
 *
 * @link http://php.net/manual/fr/function.json-last-error.php Documentation pour json_last_error.
 *
 * @version PHP 5 >= 5.3.0
 * @return int	Retourne une des constantes suivantes :
 *
 */
if(!function_exists('json_last_errorThis'))
{
    function json_last_errorThis()
    {
		return json_last_error();
    }
}

/**
 * json_last_error_msgThis
 *
 * Retourne le message de la dernière erreur survenue lors de l'appel à la fonction json_encode() ou json_decode().
 *
 * @link http://php.net/manual/fr/function.json-last-error-msg.php Documentation pour json_last_error_msg.
 *
 * @version PHP 5 >= 5.5.0
 * @return string	Retourne le message d'erreur en cas de succès, ou NULL si appelée avec de mauvais paramètres.
 *
 */
if(!function_exists('json_last_error_msgThis'))
{
    function json_last_error_msgThis()
    {
		return json_last_error_msg();
    }
}

/**
 * keyThis
 *
 * Retourne une clé d'un tableau associatif.
 *
 * @link http://php.net/manual/fr/function.key.php Documentation pour key.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau.
 *
 * @return mixed	La fonction key() retourne simplement la clé de l'élément du tableau qui est actuellement pointée par le pointeur interne. Cette fonction ne modifie en aucun cas la position de ce pointeur. Si le pointeur interne pointe un élément se situant après la fin de la liste des éléments, ou bien si le tableau est vide, la fonction key() retournera NULL.
 *
 */
if(!function_exists('keyThis'))
{
    function keyThis(&$array)
    {
		$array = (array)$array;

		return key($array);
    }
}

/**
 * krsortThis
 *
 * Trie un tableau en sens inverse et suivant les clés.
 *
 * @link http://php.net/manual/fr/function.krsort.php Documentation pour krsort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param int      $sort_flags    Vous pouvez modifier le comportement de cette fonction en utilisant le paramètre optionnel sort_flags. Pour plus de détails, voyez le manuel pour la fonction sort().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('krsortThis'))
{
    function krsortThis(&$array, $sort_flags = SORT_REGULAR)
    {
		$array = (array)$array;
		$sort_flags = (int)$sort_flags;

		return krsort($array, $sort_flags);
    }
}

/**
 * ksortThis
 *
 * Trie un tableau suivant les clés.
 *
 * @link http://php.net/manual/fr/function.ksort.php Documentation pour ksort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param int      $sort_flags    Vous pouvez modifier le comportement de cette fonction en utilisant le paramètre optionnel sort_flags. Pour plus de détails, voyez le manuel pour la fonction sort().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ksortThis'))
{
    function ksortThis(&$array, $sort_flags = SORT_REGULAR)
    {
		$array = (array)$array;
		$sort_flags = (int)$sort_flags;

		return ksort($array, $sort_flags);
    }
}

/**
 * lcfirstThis
 *
 * Met le premier caractère en minuscule.
 *
 * @link http://php.net/manual/fr/function.lcfirst.php Documentation pour lcfirst.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne résultante.
 *
 */
if(!function_exists('lcfirstThis'))
{
    function lcfirstThis($str)
    {
		$str = (string)$str;

		return lcfirst($str);
    }
}

/**
 * lcg_valueThis
 *
 * Générateur de congruence combinée linéaire.
 *
 * @link http://php.net/manual/fr/function.lcg-value.php Documentation pour lcg_value.
 *
 * @version PHP 4
 * @version PHP 5
 * @return float	Une valeur pseudoaléatoire, dans l'intervalle de 0 à 1.
 *
 */
if(!function_exists('lcg_valueThis'))
{
    function lcg_valueThis()
    {
		return lcg_value();
    }
}

/**
 * lchgrpThis
 *
 * Change l'appartenance du groupe d'un lien symbolique.
 *
 * @link http://php.net/manual/fr/function.lchgrp.php Documentation pour lchgrp.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param string   $filename    chemin vers le lien symbolique.
 * @param mixed     $group    Le groupe, spécifié par son nom ou son numéro.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('lchgrpThis'))
{
    function lchgrpThis($filename, $group)
    {
		$filename = (string)$filename;
		$group = ($group);
		return lchgrp($filename, $group);
    }
}

/**
 * lchownThis
 *
 * Change le propriétaire d'un lien symbolique.
 *
 * @link http://php.net/manual/fr/function.lchown.php Documentation pour lchown.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param string   $filename    Chemin vers le fichier.
 * @param mixed     $user    L'utilisateur, par son nom ou son numéro.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('lchownThis'))
{
    function lchownThis($filename, $user)
    {
		$filename = (string)$filename;
		$user = ($user);
		return lchown($filename, $user);
    }
}

/**
 * levenshteinThis
 *
 * Calcule la distance Levenshtein entre deux chaînes.
 *
 * @link http://php.net/manual/fr/function.levenshtein.php Documentation pour levenshtein.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $str1    Une des chaînes à évaluer.
 * @param string   $str2    Une des chaînes à évaluer.
 *
 * @return int	Retourne la distance Levenshtein entre deux chaînes de caractères. Elle retournera -1 si l'un des deux arguments contient plus de 255 caractères.
 *
 */
if(!function_exists('levenshteinThis'))
{
    function levenshteinThis($str1, $str2)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;

		return levenshtein($str1, $str2);
    }
}

/**
 * libxml_clear_errorsThis
 *
 * Vide le buffer d'erreur libxml.
 *
 * @link http://php.net/manual/fr/function.libxml-clear-errors.php Documentation pour libxml_clear_errors.
 *
 * @version PHP 5 >= 5.1.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('libxml_clear_errorsThis'))
{
    function libxml_clear_errorsThis()
    {
		return libxml_clear_errors();
    }
}

/**
 * libxml_disable_entity_loaderThis
 *
 * Désactive le chargement des entités externes.
 *
 * @link http://php.net/manual/fr/function.libxml-disable-entity-loader.php Documentation pour libxml_disable_entity_loader.
 *
 * @version PHP 5 >= 5.2.11
 *
 * @param bool     $disable    Désactive (TRUE) ou active (FALSE) le chargement des entités externes par les extensions libxml (telles que DOM, XMLWriter et XMLReader).
 *
 * @return bool	Retourne la configuration précédente.
 *
 */
if(!function_exists('libxml_disable_entity_loaderThis'))
{
    function libxml_disable_entity_loaderThis($disable = true)
    {
		$disable = (bool)$disable;

		return libxml_disable_entity_loader($disable);
    }
}

/**
 * libxml_get_errorsThis
 *
 * Lit le tableau d'erreurs.
 *
 * @link http://php.net/manual/fr/function.libxml-get-errors.php Documentation pour libxml_get_errors.
 *
 * @version PHP 5 >= 5.1.0
 * @return array	libxml_get_errors() retourne un tableau avec les objets LibXMLError qui représentent les erreurs, ou bien un tableau vide s'il n'y a pas d'erreurs.
 *
 */
if(!function_exists('libxml_get_errorsThis'))
{
    function libxml_get_errorsThis()
    {
		return libxml_get_errors();
    }
}

/**
 * libxml_get_last_errorThis
 *
 * Lit la dernière erreur libxml.
 *
 * @link http://php.net/manual/fr/function.libxml-get-last-error.php Documentation pour libxml_get_last_error.
 *
 * @version PHP 5 >= 5.1.0
 * @return LibXMLError	libxml_get_last_error() retourne un objet LibXMLError s'il y a une erreur, et FALSE sinon.
 *
 */
if(!function_exists('libxml_get_last_errorThis'))
{
    function libxml_get_last_errorThis()
    {
		return libxml_get_last_error();
    }
}

/**
 * libxml_set_external_entity_loaderThis
 *
 * Change le chargeur d'entités externes par défaut.
 *
 * @link http://php.net/manual/fr/function.libxml-set-external-entity-loader.php Documentation pour libxml_set_external_entity_loader.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param callable     $resolver_function    Une callable qui accepte trois arguments. Deux chaines, l'id public et l'id système, et un contexte (un tableau avec quatre clés) comme troisième argument. Cette callback doit retourner une ressource, une chaine servant à ouvrir une ressource ou NULL.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('libxml_set_external_entity_loaderThis'))
{
    function libxml_set_external_entity_loaderThis($resolver_function)
    {
		$resolver_function = is_callable($resolver_function) ? $resolver_function : NULL;

		return libxml_set_external_entity_loader($resolver_function);
    }
}

/**
 * libxml_set_streams_contextThis
 *
 * Configure le contexte de flux pour la prochaine opération libxml.
 *
 * @link http://php.net/manual/fr/function.libxml-set-streams-context.php Documentation pour libxml_set_streams_context.
 *
 * @version PHP 5
 *
 * @param resource $streams_context    La ressource de contexte de flux, créé avec la fonction stream_context_create().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('libxml_set_streams_contextThis'))
{
    function libxml_set_streams_contextThis($streams_context)
    {
		$streams_context = is_resource($streams_context) ? $streams_context : NULL;

		return libxml_set_streams_context($streams_context);
    }
}

/**
 * libxml_use_internal_errorsThis
 *
 * Désactive le rapport d'erreur libxml et les stocke pour lecture ultérieure.
 *
 * @link http://php.net/manual/fr/function.libxml-use-internal-errors.php Documentation pour libxml_use_internal_errors.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param bool     $use_errors    Active (TRUE) le gestionnaire d'erreurs utilisateur ou le désactive (FALSE). La désactivation effacera aussi toutes les erreurs libxml existantes.
 *
 * @return bool	libxml_use_internal_errors() retourne la valeur précédemment configurée pour use_errors.
 *
 */
if(!function_exists('libxml_use_internal_errorsThis'))
{
    function libxml_use_internal_errorsThis($use_errors = false)
    {
		$use_errors = (bool)$use_errors;

		return libxml_use_internal_errors($use_errors);
    }
}

/**
 * linkThis
 *
 * Crée un lien.
 *
 * @link http://php.net/manual/fr/function.link.php Documentation pour link.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $target    La cible du lien.
 * @param string   $link    Le nom du lien.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('linkThis'))
{
    function linkThis($target, $link)
    {
		$target = (string)$target;
		$link = (string)$link;

		return link($target, $link);
    }
}

/**
 * linkinfoThis
 *
 * Renvoie les informations d'un lien.
 *
 * @link http://php.net/manual/fr/function.linkinfo.php Documentation pour linkinfo.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Chemin vers le lien.
 *
 * @return int	linkinfo() retourne le champ st_dev de la structure stat Unix C, retourné par l'appel système lstat. Si une erreur survient, la fonction retournera 0 ou FALSE.
 *
 */
if(!function_exists('linkinfoThis'))
{
    function linkinfoThis($path)
    {
		$path = (string)$path;

		return linkinfo($path);
    }
}

/**
 * listThis
 *
 * Assigne des variables comme si elles étaient un tableau.
 *
 * @link http://php.net/manual/fr/function.list.php Documentation pour list.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $varname    Une variable.
 * @param mixed     $item
 *
 * @return array	Retourne le tableau assigné.
 *
 */
if(!function_exists('listThis'))
{
    function listThis($varname, $varname1 = NULL)
    {
		$varname = ($varname);
		$varname1 = ($varname1);
		return list($varname, $varname1);
    }
}

/**
 * localeconvThis
 *
 * Lit la configuration locale.
 *
 * @link http://php.net/manual/fr/function.localeconv.php Documentation pour localeconv.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 * @return array	localeconv() retourne les formats en fonction de la configuration effectuée avec setlocale(). Le tableau associatif qui est retourné contient les index suivants :
 *
 */
if(!function_exists('localeconvThis'))
{
    function localeconvThis()
    {
		return localeconv();
    }
}

/**
 * localtimeThis
 *
 * Récupère l'heure locale.
 *
 * @link http://php.net/manual/fr/function.localtime.php Documentation pour localtime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $timestamp    Le paramètre optionnel timestamp est un timestamp Unix de type entier qui vaut par défaut l'heure courante locale si le paramètre timestamp n'est pas fourni. En d'autres termes, il vaut par défaut la valeur de la fonction time().
 * @param bool     $is_associative    si défini à FALSE ou ignoré, force localtime() à retourner un tableau à index numérique. S'il est mis à TRUE, localtime() retourne un tableau associatif, avec tous les éléments de la structure C, accessible avec les clés. Les noms des différentes clés du tableau associatif sont les suivants :
 *
 */
if(!function_exists('localtimeThis'))
{
    function localtimeThis($timestamp = NULL, $is_associative = false)
    {
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;
		$is_associative = (bool)$is_associative;

		return localtime($timestamp, $is_associative);
    }
}

/**
 * logThis
 *
 * Logarithme naturel (népérien).
 *
 * @link http://php.net/manual/fr/function.log.php Documentation pour log.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    La valeur pour laquelle on calcule le logarithme
 * @param float    $base    La base logarithmique optionnelle à utiliser (par défaut, 'e' et donc, le logarithme naturel).
 *
 * @return float	Le logarithme de arg en base base, si fourni, ou le logarithme naturel.
 *
 */
if(!function_exists('logThis'))
{
    function logThis($arg, $base = M_E)
    {
		$arg = (float)$arg;
		$base = (float)$base;

		return log($arg, $base);
    }
}

/**
 * log10This
 *
 * Logarithme en base 10.
 *
 * @link http://php.net/manual/fr/function.log10.php Documentation pour log10.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	Le logarithme en base 10 de arg.
 *
 */
if(!function_exists('log10This'))
{
    function log10This($arg)
    {
		$arg = (float)$arg;

		return log10($arg);
    }
}

/**
 * log1pThis
 *
 * Calcule précisément log(1 + nombre).
 *
 * @link http://php.net/manual/fr/function.log1p.php Documentation pour log1p.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $number    L'argument à traiter
 *
 * @return float	log(1 + number)
 *
 */
if(!function_exists('log1pThis'))
{
    function log1pThis($number)
    {
		$number = (float)$number;

		return log1p($number);
    }
}

/**
 * long2ipThis
 *
 * Convertit une adresse IP (IPv4) en adresse IP numérique.
 *
 * @link http://php.net/manual/fr/function.long2ip.php Documentation pour long2ip.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $proper_address    Une représentation d'une adresse.
 *
 * @return string	Retourne l'adresse IP Internet, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('long2ipThis'))
{
    function long2ipThis($proper_address)
    {
		$proper_address = (string)$proper_address;

		return long2ip($proper_address);
    }
}

/**
 * lstatThis
 *
 * Retourne les informations sur un fichier ou un lien symbolique.
 *
 * @link http://php.net/manual/fr/function.lstat.php Documentation pour lstat.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers un fichier ou un lien symbolique.
 *
 * @return array	Voyez la page de manuel de stat() pour plus d'informations sur la structure du tableau retourné par lstat(). Cette fonction est identique à la fonction stat() hormis le fait que si filename est un lien symbolique, les informations seront alors basées sur le lien symbolique.
 *
 */
if(!function_exists('lstatThis'))
{
    function lstatThis($filename)
    {
		$filename = (string)$filename;

		return lstat($filename);
    }
}

/**
 * ltrimThis
 *
 * Supprime les espaces (ou d'autres caractères) de début de chaîne.
 *
 * @link http://php.net/manual/fr/function.ltrim.php Documentation pour ltrim.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param string   $charlist    Il est aussi possible de spécifier les caractères à supprimer en utilisant le paramètre charlist. Listez simplement les caractères que vous voulez supprimer dans ce paramètre. Avec .., vous pourrez spécifier des intervalles de caractères.
 *
 * @return string	Cette fonction retourne la chaîne str, après avoir supprimé les caractères invisibles de début de chaîne. Si le second paramètre charlist a été omis, ltrim() supprimera les caractères suivants :
 *
 */
if(!function_exists('ltrimThis'))
{
    function ltrimThis($str, $charlist = NULL)
    {
		$str = (string)$str;
		$charlist = (string)$charlist;

		return ltrim($str, $charlist);
    }
}

/**
 * mailThis
 *
 * Envoi de mail.
 *
 * @link http://php.net/manual/fr/function.mail.php Documentation pour mail.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $to    Le ou les destinataires du mail. Le formatage de cette chaîne doit correspondre avec la » RFC 2822. Voici quelques exemples :
 * @param string   $subject    Sujet du mail à envoyer.
 * @param string   $message    Message à envoyer. Chaque ligne doit être séparée par un caractère CRLF (\r\n). Les lignes ne doivent pas comporter plus de 70 caractères.
 * @param string   $additional_headers    Chaîne à insérer à la fin des en-têtes du mail. Ce paramètre est typiquement utilisé pour ajouter des en-têtes supplémentaires (From, Cc et Bcc). Les en-têtes supplémentaires doivent être séparés par un caractère CRLF (\r\n).
 * @param string   $additional_parameters    Le paramètre additional_parameters peut être utilisé pour passer des drapeaux additionnels comme options à la ligne de commande configurée pour être utilisée pour envoyer les mails en utilisant le paramètre de configuration sendmail_path. Par exemple, ceci peut être utilisé pour définir l'adresse d'expéditeur de l'enveloppe lors de l'utilisation de sendmail avec l'option -f. L'utilisateur sous lequel tourne le serveur web doit être ajouté en tant qu'utilisateur de confiance dans la configuration de sendmail afin que l'en-tête X-Warning ne soit pas ajouté au message lorsque l'expéditeur de l'enveloppe (-f) est défini en utilisant cette méthode. Pour les utilisateurs de sendmail, ce fichier est /etc/mail/trusted-users.
 *
 * @return bool	Retourne TRUE si le mail a été accepté pour livraison, FALSE sinon.
 *
 */
if(!function_exists('mailThis'))
{
    function mailThis($to, $subject, $message, $additional_headers = NULL, $additional_parameters = NULL)
    {
		$to = (string)$to;
		$subject = (string)$subject;
		$message = (string)$message;
		$additional_headers = (string)$additional_headers;
		$additional_parameters = (string)$additional_parameters;

		return mail($to, $subject, $message, $additional_headers, $additional_parameters);
    }
}

/**
 * maxThis
 *
 * La plus grande valeur.
 *
 * @link http://php.net/manual/fr/function.max.php Documentation pour max.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $values    Un tableau contenant les valeurs.
 *
 * @return mixed	max() retourne la plus grande des valeurs. Si plusieurs valeurs sont évaluées comme ayant la même taille, la première de la liste sera retournée.
 *
 */
if(!function_exists('maxThis'))
{
    function maxThis($values)
    {
		$values = (array)$values;

		return max($values);
    }
}

/**
 * mb_check_encodingThis
 *
 * Vérifie si une chaîne est valide pour un encodage spécifique.
 *
 * @link http://php.net/manual/fr/function.mb-check-encoding.php Documentation pour mb_check_encoding.
 *
 * @version PHP 4 >= 4.4.3
 * @version PHP 5 >= 5.1.3
 *
 * @param string   $var    Le flux d'octets à vérifier. Si elle est omise, cette fonction vérifie toutes les entrées depuis le début de la requête.
 * @param string   $encoding    Encodage attendu.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_check_encodingThis'))
{
    function mb_check_encodingThis($var = NULL, $encoding = NULL)
    {
		$var = (string)$var;
		$encoding = empty($encoding) ? (string)mb_internal_encoding() : (string)$encoding;

		return mb_check_encoding($var, $encoding);
    }
}

/**
 * mb_convert_caseThis
 *
 * Modifie la casse d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-convert-case.php Documentation pour mb_convert_case.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $str    La chaîne à convertir.
 * @param int      $mode    Le mode de conversion. Peut être un parmi : MB_CASE_UPPER, MB_CASE_LOWER, ou MB_CASE_TITLE.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	La chaîne dont la casse a été changée, suivant le mode fourni.
 *
 */
if(!function_exists('mb_convert_caseThis'))
{
    function mb_convert_caseThis($str, $mode, $encoding = NULL)
    {
		$str = (string)$str;
		$mode = (int)$mode;
		$encoding = empty($encoding) ? (string)mb_internal_encoding() : (string)$encoding;

		return mb_convert_case($str, $mode, $encoding);
    }
}

/**
 * mb_convert_encodingThis
 *
 * Conversion d'encodage.
 *
 * @link http://php.net/manual/fr/function.mb-convert-encoding.php Documentation pour mb_convert_encoding.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à encoder.
 * @param string   $to_encoding    Le type d'encodage utilisé pour la conversion de la chaîne str.
 * @param mixed     $from_encoding    Spécifié par le nom de code des caractères, avant la conversion. Il est soit un tableau, ou une liste séparée par une virgule. Si from_encoding n'est pas spécifié, l'encodage interne sera utilisé. Voir les encodages supportés.
 *
 * @return string	La chaîne encodée.
 *
 */
if(!function_exists('mb_convert_encodingThis'))
{
    function mb_convert_encodingThis($str, $to_encoding, $from_encoding = NULL)
    {
		$str = (string)$str;
		$to_encoding = (string)$to_encoding;
		$from_encoding = ($from_encoding);
		return mb_convert_encoding($str, $to_encoding, $from_encoding);
    }
}

/**
 * mb_convert_kanaThis
 *
 * Convertit un "kana" en un autre ("zen-kaku", "han-kaku" et plus).
 *
 * @link http://php.net/manual/fr/function.mb-convert-kana.php Documentation pour mb_convert_kana.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à convertir.
 * @param string   $option    L'option de conversion. Spécifiez les conversions en combinant les valeurs suivantes.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	La chaîne convertie.
 *
 */
if(!function_exists('mb_convert_kanaThis'))
{
    function mb_convert_kanaThis($str, $option = "KV", $encoding = NULL)
    {
		$str = (string)$str;
		$option = (string)$option;
		$encoding = (string)$encoding;

		return mb_convert_kana($str, $option, $encoding);
    }
}

/**
 * mb_convert_variablesThis
 *
 * Convertit l'encodage de variables.
 *
 * @link http://php.net/manual/fr/function.mb-convert-variables.php Documentation pour mb_convert_variables.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $to_encoding    L'encodage dans lequel la chaîne doit être convertie.
 * @param mixed     $from_encoding    from-encoding est une liste d'encodages possibles pour les variables vars, fourni sous forme d'un tableau ou d'une liste d'encodages, séparés par des virgules. Si from_encoding est omis, les encodages fournis dans mb_detect_order() sont utilisés.
 * @param mixed     &$vars    vars est une référence sur une variable à convertir. Les chaînes, tableaux et objets sont aussi supportés. mb_convert_variables() prend tous ces paramètres avec le même encodage.
 * @param mixed     &$item    Variables additionnelles.
 *
 * @return string	L'encodage avant conversion en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_convert_variablesThis'))
{
    function mb_convert_variablesThis($to_encoding, $from_encoding, &$vars, &$vars1 = NULL)
    {
		$to_encoding = (string)$to_encoding;
		$from_encoding = ($from_encoding);
		$vars = ($vars);
		$vars1 = ($vars1);
		return mb_convert_variables($to_encoding, $from_encoding, $vars, $vars1);
    }
}

/**
 * mb_decode_mimeheaderThis
 *
 * Décode un en-tête MIME.
 *
 * @link http://php.net/manual/fr/function.mb-decode-mimeheader.php Documentation pour mb_decode_mimeheader.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à décoder.
 *
 * @return string	La chaîne décodée, avec un encodage interne.
 *
 */
if(!function_exists('mb_decode_mimeheaderThis'))
{
    function mb_decode_mimeheaderThis($str)
    {
		$str = (string)$str;

		return mb_decode_mimeheader($str);
    }
}

/**
 * mb_decode_numericentityThis
 *
 * Décode les entités HTML en caractères.
 *
 * @link http://php.net/manual/fr/function.mb-decode-numericentity.php Documentation pour mb_decode_numericentity.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à décoder.
 * @param array    $convmap    convmapest un tableau qui spécifie les codes à convertir.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	La chaîne convertie.
 *
 */
if(!function_exists('mb_decode_numericentityThis'))
{
    function mb_decode_numericentityThis($str, $convmap, $encoding = NULL)
    {
		$str = (string)$str;
		$convmap = (array)$convmap;
		$encoding = empty($encoding) ? (string)mb_internal_encoding() : (string)$encoding;

		return mb_decode_numericentity($str, $convmap, $encoding);
    }
}

/**
 * mb_detect_encodingThis
 *
 * Détecte un encodage.
 *
 * @link http://php.net/manual/fr/function.mb-detect-encoding.php Documentation pour mb_detect_encoding.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à analyser.
 * @param mixed     $encoding_list    encoding_list est une liste d'encodages, sous forme de tableau, ou bien de chaîne, les valeurs étant séparées par des virgules. Si encoding_list est omis, l'ordre spécifié par mb_detect_order() est utilisé.
 * @param bool     $strict    strict spécifie si l'on doit utiliser une détection de l'encodage strict ou non. Par défaut, vaut FALSE.
 *
 * @return string	L'encodage détecté ou FALSE si l'encodage ne peut être détecté pour la chaîne de caractères donnée.
 *
 */
if(!function_exists('mb_detect_encodingThis'))
{
    function mb_detect_encodingThis($str, $encoding_list = NULL, $strict = false)
    {
		$str = (string)$str;
		$encoding_list = empty($encoding_list) ? (mb_detect_order()) : ($encoding_list);
		$strict = (bool)$strict;

		return mb_detect_encoding($str, $encoding_list, $strict);
    }
}

/**
 * mb_detect_orderThis
 *
 * Lit/modifie l'ordre de détection des encodages.
 *
 * @link http://php.net/manual/fr/function.mb-detect-order.php Documentation pour mb_detect_order.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param mixed     $encoding_list    encoding_list est un tableau, ou une liste d'encodages séparés par une virgule. Voir les encodages supportés. Si encoding_list est omis, mb_detect_order() retourne l'ordre de détection courant des encodages dans un tableau. Ce paramétrage affecte les fonctions mb_detect_encoding() et mb_send_mail(). Actuellement, mbstring supporte les filtres de détections ci-dessous. Si une séquence d'octets est invalide pour l'un des filtres suivants, la détection échouera. Pour ISO-8859-*, mbstring détecte toujours ISO-8859-*. Pour UTF-16, UTF-32, UCS2 et UCS4 la détection échouera toujours.
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_detect_orderThis'))
{
    function mb_detect_orderThis($encoding_list = NULL)
    {
		$encoding_list = ($encoding_list);
		return mb_detect_order($encoding_list);
    }
}

/**
 * mb_encode_mimeheaderThis
 *
 * Encode une chaîne pour un en-tête MIM.
 *
 * @link http://php.net/manual/fr/function.mb-encode-mimeheader.php Documentation pour mb_encode_mimeheader.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à encoder.
 * @param string   $charset    charset est le nom de l'encodage utilisé par la chaîne str. La valeur par défaut est déterminée par les paramètres courants du NLS (mbstring.language). mb_internal_encoding() doit être le même encodage.
 * @param string   $transfer_encoding    transfer_encoding est l'encodage de transfert. Il peut être "B" (Base64) ou "Q" (Quoted-Printable). Par défaut, c'est "B".
 * @param string   $linefeed    linefeed spécifie les fins de lignes (EOF : end-of-line) utilisées par mb_encode_mimeheader() pour formater la chaîne (une » RFC définie la longueur d'une chaîne à partir de laquelle on doit ajouter une fin de ligne. La longueur courante est 74 caractères). La valeur par défaut est "\r\n" (CRLF).
 * @param int      $indent    Indentation de la première ligne (nombre de caractères dans l'en-tête avant la chaîne str).
 *
 * @return string	Une version convertie de la chaîne en ASCII.
 *
 */
if(!function_exists('mb_encode_mimeheaderThis'))
{
    function mb_encode_mimeheaderThis($str, $charset = NULL, $transfer_encoding = NULL, $linefeed = "\r\n", $indent = 0)
    {
		$str = (string)$str;
		$charset = (string)$charset;
		$transfer_encoding = (string)$transfer_encoding;
		$linefeed = (string)$linefeed;
		$indent = (int)$indent;

		return mb_encode_mimeheader($str, $charset, $transfer_encoding, $linefeed, $indent);
    }
}

/**
 * mb_encode_numericentityThis
 *
 * Encode des entités HTML.
 *
 * @link http://php.net/manual/fr/function.mb-encode-numericentity.php Documentation pour mb_encode_numericentity.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à encoder.
 * @param array    $convmap    convmap est un tableau qui spécifie les codes à convertir.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 * @param bool     $is_hex
 *
 * @return string	La chaîne convertie.
 *
 */
if(!function_exists('mb_encode_numericentityThis'))
{
    function mb_encode_numericentityThis($str, $convmap, $encoding = NULL, $is_hex = NULL)
    {
		$str = (string)$str;
		$convmap = (array)$convmap;
		$encoding = empty($encoding) ? (string)mb_internal_encoding() : (string)$encoding;
		$is_hex = (bool)$is_hex;

		return mb_encode_numericentity($str, $convmap, $encoding, $is_hex);
    }
}

/**
 * mb_encoding_aliasesThis
 *
 * Récupère les aliases d'un type d'encodage connu.
 *
 * @link http://php.net/manual/fr/function.mb-encoding-aliases.php Documentation pour mb_encoding_aliases.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $encoding    Le type d'encodage à vérifier, pour les aliases.
 *
 * @return array	Retourne un tableau indexé numériquement contenant les aliases de l'encodage en cas de succès, ou FALSE si une erreur survient
 *
 */
if(!function_exists('mb_encoding_aliasesThis'))
{
    function mb_encoding_aliasesThis($encoding)
    {
		$encoding = (string)$encoding;

		return mb_encoding_aliases($encoding);
    }
}

/**
 * mb_eregThis
 *
 * Recherche par expression rationnelle avec support des caractères multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-ereg.php Documentation pour mb_ereg.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    Le masque de recherche.
 * @param string   $string    La chaîne sur laquelle porte la recherche.
 * @param array    $regs    Contient une sous-chaîne de la chaîne string.
 *
 * @return int	Exécute l'expression rationnelle pattern avec le support des caractères multi-octets sur la chaîne string. mb_ereg() retourne 1 si des segments de chaîne qui vérifient le masque ont été trouvés. Le troisième paramètre est optionnel. S'il est fourni, mb_ereg() retournera la taille du segment de chaîne identifié, regs contient les sous-chaînes. Si rien n'est trouvé, la fonction retourne FALSE.
 *
 */
if(!function_exists('mb_eregThis'))
{
    function mb_eregThis($pattern, $string, $regs = NULL)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$regs = (array)$regs;

		return mb_ereg($pattern, $string, $regs);
    }
}

/**
 * mb_ereg_matchThis
 *
 * Expression rationnelle POSIX pour les chaînes multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-match.php Documentation pour mb_ereg_match.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    L'expression rationnelle.
 * @param string   $string    La chaîne à évaluer.
 * @param string   $option
 *
 * @return bool	string retourne TRUE si string vérifie l'expression rationnelle pattern, FALSE sinon.
 *
 */
if(!function_exists('mb_ereg_matchThis'))
{
    function mb_ereg_matchThis($pattern, $string, $option = "msr")
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$option = (string)$option;

		return mb_ereg_match($pattern, $string, $option);
    }
}

/**
 * mb_ereg_replaceThis
 *
 * Remplace des segments de chaîne à l'aide des expressions rationnelles.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-replace.php Documentation pour mb_ereg_replace.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    L'expression rationnelle. Les caractères multioctets peuvent être utilisés dans pattern.
 * @param string   $replacement    Le texte de remplacement.
 * @param string   $string    La chaîne à analyser.
 * @param string   $option
 *
 * @return string	La chaîne résultante en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_ereg_replaceThis'))
{
    function mb_ereg_replaceThis($pattern, $replacement, $string, $option = "msr")
    {
		$pattern = (string)$pattern;
		$replacement = (string)$replacement;
		$string = (string)$string;
		$option = (string)$option;

		return mb_ereg_replace($pattern, $replacement, $string, $option);
    }
}

/**
 * mb_ereg_replace_callbackThis
 *
 * Rechercher et remplacer par expression régulière avec support multi octets utilisant une fonction de callback.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-replace-callback.php Documentation pour mb_ereg_replace_callback.
 *
 * @version PHP 5 >= 5.4.1
 *
 * @param string   $pattern    L'expression régulière. Les caractères multi octets peuvent être utilisé dans le pattern.
 * @param callable     $callback    Un callback qui sera appelé et lui sera passé un tableau d'éléments correspondants dans la chaine de caractère subject. Le callback doit retourné la chaîne remplacée. Vous aurez souvent besoin de la fonction callback pour mb_ereg_replace_callback() juste une fois. Dans ce cas vous pouvez utiliser les fonctions anonymes (depuis PHP 5.3.0) ou create_function() pour déclarer une fonction anonyme comme callback dans l'appel de mb_ereg_replace_callback(). En faisait cela de cette manière vous avez toutes les informations nécessaires à l'appel de la fonction en un seul endroit, ce qui permet d'éviter d'encombrer l'espace de nom des fonctions avec un callback de fonction qui n'est pas utilisé ailleur.
 * @param string   $string    La string qui doit être vérifiée.
 * @param string   $option    Matching condition can be set by option parameter. If i is specified for this parameter, the case will be ignored. If x is specified, white space will be ignored. If m is specified, match will be executed in multiline mode and line break will be included in '.'. If p is specified, match will be executed in POSIX mode, line break will be considered as normal character. Note that e cannot be used for mb_ereg_replace_callback().
 *
 * @return string	The resultant string en cas de succès, ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('mb_ereg_replace_callbackThis'))
{
    function mb_ereg_replace_callbackThis($pattern, $callback, $string, $option = "msr")
    {
		$pattern = (string)$pattern;
		$callback = is_callable($callback) ? $callback : NULL;
		$string = (string)$string;
		$option = (string)$option;

		return mb_ereg_replace_callback($pattern, $callback, $string, $option);
    }
}

/**
 * mb_ereg_searchThis
 *
 * Recherche par expression rationnelle multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-search.php Documentation pour mb_ereg_search.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    Le masque de recherche.
 * @param string   $option    L'option de recherche.
 *
 * @return bool	mb_ereg_search() retourne TRUE si la chaîne multi-octets correspond au masque d'expression rationnelle, ou bien FALSE sinon. La chaîne à étudier a été configurée avec la fonction mb_ereg_search_init(). Si le masque pattern n'est pas spécifié, le précédent sera utilisé.
 *
 */
if(!function_exists('mb_ereg_searchThis'))
{
    function mb_ereg_searchThis($pattern = NULL, $option = "ms")
    {
		$pattern = (string)$pattern;
		$option = (string)$option;

		return mb_ereg_search($pattern, $option);
    }
}

/**
 * mb_ereg_search_getposThis
 *
 * Retourne la position du début du prochain segment repéré par une expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-search-getpos.php Documentation pour mb_ereg_search_getpos.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 * @return int	mb_ereg_search_getpos() retourne la position du prochain segment de code qui correspond au masque utilisé dans mb_ereg_search(), mb_ereg_search_pos() et mb_ereg_search_regs(). La position est le nombre de caractères depuis le début de la chaîne.
 *
 */
if(!function_exists('mb_ereg_search_getposThis'))
{
    function mb_ereg_search_getposThis()
    {
		return mb_ereg_search_getpos();
    }
}

/**
 * mb_ereg_search_getregsThis
 *
 * Lit le dernier segment de chaîne multi-octets qui correspond au masque.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-search-getregs.php Documentation pour mb_ereg_search_getregs.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 * @return array	un tableau incluant toutes les sous-chaînes qui ont été trouvées par mb_ereg_search(), mb_ereg_search_pos() et mb_ereg_search_regs(). S'il y a une solution qui a été trouvée, le premier élément sera la sous-chaîne trouvée, le second représentera la première parenthèse capturante, le troisième représentera la deuxième parenthèse capturante, etc. Cette fonction retourne FALSE en cas d'erreur.
 *
 */
if(!function_exists('mb_ereg_search_getregsThis'))
{
    function mb_ereg_search_getregsThis()
    {
		return mb_ereg_search_getregs();
    }
}

/**
 * mb_ereg_search_initThis
 *
 * Configure les chaînes et les expressions rationnelles pour le support des caractères multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-search-init.php Documentation pour mb_ereg_search_init.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $string    La chaîne à chercher.
 * @param string   $pattern    Le masque de recherche.
 * @param string   $option    L'option de recherche.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_ereg_search_initThis'))
{
    function mb_ereg_search_initThis($string, $pattern = NULL, $option = "msr")
    {
		$string = (string)$string;
		$pattern = (string)$pattern;
		$option = (string)$option;

		return mb_ereg_search_init($string, $pattern, $option);
    }
}

/**
 * mb_ereg_search_posThis
 *
 * Retourne la position et la longueur du segment de chaîne qui vérifie le masque de l'expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-search-pos.php Documentation pour mb_ereg_search_pos.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    Le masque de recherche.
 * @param string   $option    Les options de recherche.
 *
 * @return array	Un tableau contenant deux éléments. Le premier élément est la position, en octets, où la correspondance commence relativement au début de la chaîne recherchée, et le second élément est la longueur, en octets, de la correspondance.
 *
 */
if(!function_exists('mb_ereg_search_posThis'))
{
    function mb_ereg_search_posThis($pattern = NULL, $option = "ms")
    {
		$pattern = (string)$pattern;
		$option = (string)$option;

		return mb_ereg_search_pos($pattern, $option);
    }
}

/**
 * mb_ereg_search_regsThis
 *
 * Retourne le segment de chaîne trouvé par une expression rationnelle multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-search-regs.php Documentation pour mb_ereg_search_regs.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    Le masque de recherche.
 * @param string   $option    Les options de recherche.
 *
 * @return array	mb_ereg_search_regs() exécute l'expression rationnelle pattern, et, si un segment de chaîne correspond, elle le retourne dans un tableau, dont le premier élément est le segment de chaîne trouvé, le deuxième le contenu de la première parenthèse capturante, le troisième le contenu de la seconde parenthèse capturante, etc. La fonction retourne FALSE en cas d'erreur.
 *
 */
if(!function_exists('mb_ereg_search_regsThis'))
{
    function mb_ereg_search_regsThis($pattern = NULL, $option = "ms")
    {
		$pattern = (string)$pattern;
		$option = (string)$option;

		return mb_ereg_search_regs($pattern, $option);
    }
}

/**
 * mb_ereg_search_setposThis
 *
 * Choisit le point de départ de la recherche par expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.mb-ereg-search-setpos.php Documentation pour mb_ereg_search_setpos.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param int      $position    La position à définir.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_ereg_search_setposThis'))
{
    function mb_ereg_search_setposThis($position)
    {
		$position = (int)$position;

		return mb_ereg_search_setpos($position);
    }
}

/**
 * mb_eregiThis
 *
 * Expression rationnelle insensible à la casse avec le support des caractères multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-eregi.php Documentation pour mb_eregi.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    L'expression rationnelle.
 * @param string   $string    La chaîne à chercher.
 * @param array    $regs    Contient une sous-chaîne à chercher.
 *
 * @return int	Exécute l'expression rationnelle pattern avec le support des caractères multi-octets sur la chaîne string. mb_eregi() ignore la casse dans ses recherches. mb_ereg() retourne 1 si des segments de chaîne qui vérifient le masque ont été trouvé. Le troisième paramètre est optionnel. S'il est fournit, mb_ereg() retournera la taille du segment de chaîne identifié, regs contient les sous-chaînes. Si rien n'est trouvé, la fonction retourne FALSE.
 *
 */
if(!function_exists('mb_eregiThis'))
{
    function mb_eregiThis($pattern, $string, $regs = NULL)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$regs = (array)$regs;

		return mb_eregi($pattern, $string, $regs);
    }
}

/**
 * mb_eregi_replaceThis
 *
 * Expression rationnelle avec support des caractères multi-octets, sans tenir compte de la casse.
 *
 * @link http://php.net/manual/fr/function.mb-eregi-replace.php Documentation pour mb_eregi_replace.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    L'expression rationnelle. Les caractères multioctets peuvent être utilisés. La casse sera ignorée.
 * @param string   $replace    Le texte de substitution.
 * @param string   $string    La chaîne recherchée.
 * @param string   $option
 *
 * @return string	La chaîne résultante, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_eregi_replaceThis'))
{
    function mb_eregi_replaceThis($pattern, $replace, $string, $option = "msri")
    {
		$pattern = (string)$pattern;
		$replace = (string)$replace;
		$string = (string)$string;
		$option = (string)$option;

		return mb_eregi_replace($pattern, $replace, $string, $option);
    }
}

/**
 * mb_get_infoThis
 *
 * Lit la configuration interne de l'extension mbstring.
 *
 * @link http://php.net/manual/fr/function.mb-get-info.php Documentation pour mb_get_info.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $type    Si type n'est pas demandé explicitement, ou s'il vaut "all", un tableau contenant les éléments "internal_encoding", "http_output", "http_input" et "func_overload", "mail_charset", "mail_header_encoding", "mail_body_encoding" sera retourné. Si type est spécifié, et s'il vaut "http_output", "http_input", "internal_encoding" ou "func_overload", la paramètre demandé sera retourné.
 *
 * @return mixed	Un tableau d'informations si type n'est pas spécifié, sinon, un type spécifique.
 *
 */
if(!function_exists('mb_get_infoThis'))
{
    function mb_get_infoThis($type = "all")
    {
		$type = (string)$type;

		return mb_get_info($type);
    }
}

/**
 * mb_http_inputThis
 *
 * Détecte le type d'encodage d'un caractère HTTP.
 *
 * @link http://php.net/manual/fr/function.mb-http-input.php Documentation pour mb_http_input.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $type    Le paramètre type spécifie le type d'entrée HTTP. Il peut prendre l'une des valeurs suivantes : "G" pour GET, "P" pour POST, "C" pour COOKIE, "S" pour chaîne de caractères, "L" pour la liste, "l" pour la liste complète (retournera un tableau). Si type est omis, il prend la valeur du dernier type utilisé.
 *
 * @return mixed	Le nom de l'encodage des caractères. Si mb_http_input() ne traite pas l'entrée HTTP spécifiée, elle retournera FALSE.
 *
 */
if(!function_exists('mb_http_inputThis'))
{
    function mb_http_inputThis($type = "")
    {
		$type = (string)$type;

		return mb_http_input($type);
    }
}

/**
 * mb_http_outputThis
 *
 * Lit/modifie l'encodage d'affichage.
 *
 * @link http://php.net/manual/fr/function.mb-http-output.php Documentation pour mb_http_output.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $encoding    Si encoding est fourni, mb_http_output() utilisera dorénavant l'encodage encoding pour les affichages HTTP : les caractères qui seront envoyés aux clients web seront convertis dans le jeu de caractères encoding. Si encoding est omis, mb_http_output() retourne l'encodage d'affichage courant.
 *
 * @return mixed	Si le paramètre encoding est omis, mb_http_output() retourne l'encodage courant HTTP. Sinon, Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_http_outputThis'))
{
    function mb_http_outputThis($encoding = NULL)
    {
		$encoding = (string)$encoding;

		return mb_http_output($encoding);
    }
}

/**
 * mb_internal_encodingThis
 *
 * Lit/modifie l'encodage interne.
 *
 * @link http://php.net/manual/fr/function.mb-internal-encoding.php Documentation pour mb_internal_encoding.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $encoding    encoding sert lors des conversions des chaînes en provenance et en direction du web, ainsi que lors de la création de chaînes avec le module mbstring. Vous devez garder à l'esprit que l'encodage interne est totalement différent de celui pour les regex multi-octets.
 *
 * @return mixed	Si encoding est fourni, Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Dans ce cas, l'encodage des caractères pour les regex multi-octets n'est pas changé. Si encoding est omis, mb_internal_encoding() retourne le nom de l'encodage courant.
 *
 */
if(!function_exists('mb_internal_encodingThis'))
{
    function mb_internal_encodingThis($encoding = NULL)
    {
		$encoding = empty($encoding) ? (string)mb_internal_encoding() : (string)$encoding;

		return mb_internal_encoding($encoding);
    }
}

/**
 * mb_languageThis
 *
 * Lit/modifie le langage courant.
 *
 * @link http://php.net/manual/fr/function.mb-language.php Documentation pour mb_language.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $language    Sert à encoder les messages électroniques. Les langages valides sont : "Japanese" (japonais), "ja" (japonais), "English" (anglais), "en" (anglais) et "uni" (UTF-8). mb_send_mail() utilise cette option pour encoder les emails. Le langage et sa configuration valent ISO-2022-JP/Base64 pour le japonais, UTF-8/Base64 pour l'UTF-8 et ISO-8859-1/quoted printable pour l'anglais.
 *
 * @return mixed	Si language est fourni et est valide, mb_language() retourne TRUE. Sinon, elle retourne FALSE. Lorsque le paramètre language est omis, mb_language() retourne le nom du langage courant, sous forme de chaîne. Si aucun langage n'a été configuré, mb_language() retourne FALSE.
 *
 */
if(!function_exists('mb_languageThis'))
{
    function mb_languageThis($language = NULL)
    {
		$language = (string)$language;

		return mb_language($language);
    }
}

/**
 * mb_list_encodingsThis
 *
 * Retourne un tableau contenant tous les encodages supportés.
 *
 * @link http://php.net/manual/fr/function.mb-list-encodings.php Documentation pour mb_list_encodings.
 *
 * @version PHP 5
 * @return array	Retourne un tableau indexé numériquement.
 *
 */
if(!function_exists('mb_list_encodingsThis'))
{
    function mb_list_encodingsThis()
    {
		return mb_list_encodings();
    }
}

/**
 * mb_output_handlerThis
 *
 * Fonction de traitement des affichages.
 *
 * @link http://php.net/manual/fr/function.mb-output-handler.php Documentation pour mb_output_handler.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $contents    Le contenu du buffer de sortie.
 * @param int      $status    Le statut du buffer de sortie.
 *
 * @return string	La chaîne convertie.
 *
 */
if(!function_exists('mb_output_handlerThis'))
{
    function mb_output_handlerThis($contents, $status)
    {
		$contents = (string)$contents;
		$status = (int)$status;

		return mb_output_handler($contents, $status);
    }
}

/**
 * mb_parse_strThis
 *
 * Analyse les données HTTP GET/POST/COOKIE et assigne les variables globales.
 *
 * @link http://php.net/manual/fr/function.mb-parse-str.php Documentation pour mb_parse_str.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $encoded_string    Les données encodées URL.
 * @param array    &$result    Un tableau contenant les valeurs décodées, et les noms des jeux de caractères.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_parse_strThis'))
{
    function mb_parse_strThis($encoded_string, &$result = NULL)
    {
		$encoded_string = (string)$encoded_string;
		$result = (array)$result;

		return mb_parse_str($encoded_string, $result);
    }
}

/**
 * mb_preferred_mime_nameThis
 *
 * Détecte l'encodage MIME.
 *
 * @link http://php.net/manual/fr/function.mb-preferred-mime-name.php Documentation pour mb_preferred_mime_name.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $encoding    L'encodage à vérifier.
 *
 * @return string	Le nom de l'encodage MIME pour l'encodage encoding.
 *
 */
if(!function_exists('mb_preferred_mime_nameThis'))
{
    function mb_preferred_mime_nameThis($encoding)
    {
		$encoding = (string)$encoding;

		return mb_preferred_mime_name($encoding);
    }
}

/**
 * mb_regex_encodingThis
 *
 * Définit/Récupère l'encodage des caractères pour les expressions rationnelles multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-regex-encoding.php Documentation pour mb_regex_encoding.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return mixed	Si encoding est défini, alors Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.. Dans ce cas, l'encodage de caractères interne n'est pas modifié. Si l'argument encoding est omis, alors le nom de l'encodage de caractères courant pour les expressions rationnelles multi-octets sera retourné.
 *
 */
if(!function_exists('mb_regex_encodingThis'))
{
    function mb_regex_encodingThis($encoding = NULL)
    {
		$encoding = (string)$encoding;

		return mb_regex_encoding($encoding);
    }
}

/**
 * mb_regex_set_optionsThis
 *
 * Lit et modifie les options des fonctions d'expression rationnelle à support de caractères multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-regex-set-options.php Documentation pour mb_regex_set_options.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $options    Les options à définir, sous la forme d'une chaîne dont chaque caractère est une option. Pour définir un mode, vous devez placer le caractère représentant ce mode en dernier, le reste des caractères sera les options. Vous ne pouvez définir qu'un seul mode, alors que vous pouvez définir plusieurs options.
 *
 * @return string	Retourne la configuration précédente. Si options est omise, la fonction retourne la chaîne qui décrit les options courantes.
 *
 */
if(!function_exists('mb_regex_set_optionsThis'))
{
    function mb_regex_set_optionsThis($options = NULL)
    {
		$options = (string)$options;

		return mb_regex_set_options($options);
    }
}

/**
 * mb_send_mailThis
 *
 * Envoie un mail encodé.
 *
 * @link http://php.net/manual/fr/function.mb-send-mail.php Documentation pour mb_send_mail.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $to    to est l'adresse de destination du mail. Les adresses multiples peuvent être spécifiées en les séparant par des virgules. Ce paramètre n'est pas encodé automatiquement.
 * @param string   $subject    Le sujet du mail.
 * @param string   $message    Le message du mail.
 * @param string   $additional_headers    La chaîne additional_headers est insérée à la fin de l'en-tête mail. Elle sert à ajouter d'autres en-têtes email. N'oubliez pas de les séparer par des nouvelles lignes ("\n").
 * @param string   $additional_parameter    additional_parameter est une ligne de paramètres MTA. Il est pratique lorsque vous voulez définir un Return-Path correct lorsque vous utilisez sendmail.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mb_send_mailThis'))
{
    function mb_send_mailThis($to, $subject, $message, $additional_headers = NULL, $additional_parameter = NULL)
    {
		$to = (string)$to;
		$subject = (string)$subject;
		$message = (string)$message;
		$additional_headers = (string)$additional_headers;
		$additional_parameter = (string)$additional_parameter;

		return mb_send_mail($to, $subject, $message, $additional_headers, $additional_parameter);
    }
}

/**
 * mb_splitThis
 *
 * Scinde une chaîne en tableau avec une expression rationnelle multi-octets.
 *
 * @link http://php.net/manual/fr/function.mb-split.php Documentation pour mb_split.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $pattern    Le masque de l'expression rationnelle.
 * @param string   $string    La chaîne à scinder.
 * @param int      $limit
 *
 * @return array	Le résultat, sous la forme d'un tableau.
 *
 */
if(!function_exists('mb_splitThis'))
{
    function mb_splitThis($pattern, $string, $limit = -1)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$limit = (int)$limit;

		return mb_split($pattern, $string, $limit);
    }
}

/**
 * mb_strcutThis
 *
 * Coupe une partie de chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-strcut.php Documentation pour mb_strcut.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à couper.
 * @param int      $start    Position de départ dans les octets.
 * @param int      $length    Longueur dans les octets.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	mb_strcut() retourne la portion de la chaîne str qui commence au caractère start et a la longueur de length caractères.
 *
 */
if(!function_exists('mb_strcutThis'))
{
    function mb_strcutThis($str, $start, $length = NULL, $encoding = NULL)
    {
		$str = (string)$str;
		$start = (int)$start;
		$length = (int)$length;
		$encoding = (string)$encoding;

		return mb_strcut($str, $start, $length, $encoding);
    }
}

/**
 * mb_strimwidthThis
 *
 * Tronque une chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-strimwidth.php Documentation pour mb_strimwidth.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à tronquer.
 * @param int      $start    start est l'offset de départ, en nombre de caractères depuis le début de la chaîne (cela commence à 0).
 * @param int      $width    La taille à tronquer.
 * @param string   $trimmarker    trimmarker est la chaîne ajoutée à la fin de la chaîne tronquée.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	La chaîne tronquée. Si trimmarker est défini, trimmarker sera ajouté à la valeur retournée.
 *
 */
if(!function_exists('mb_strimwidthThis'))
{
    function mb_strimwidthThis($str, $start, $width, $trimmarker = NULL, $encoding = NULL)
    {
		$str = (string)$str;
		$start = (int)$start;
		$width = (int)$width;
		$trimmarker = (string)$trimmarker;
		$encoding = (string)$encoding;

		return mb_strimwidth($str, $start, $width, $trimmarker, $encoding);
    }
}

/**
 * mb_striposThis
 *
 * Trouve la première occurrence d'une chaîne dans une autre, sans tenir compte de la casse.
 *
 * @link http://php.net/manual/fr/function.mb-stripos.php Documentation pour mb_stripos.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $haystack    La chaîne depuis laquelle on récupère la position de la première occurrence de needle
 * @param string   $needle    La chaîne à chercher dans haystack
 * @param int      $offset    La position dans haystack où l'on doit commencer à chercher
 * @param string   $encoding    Nom de l'encodage à utiliser. Si ce paramètre est omis, l'encodage interne est utilisé.
 *
 * @return int	Retourne la position numérique de la première occurrence de needle dans la chaîne haystack ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('mb_striposThis'))
{
    function mb_striposThis($haystack, $needle, $offset = NULL, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;
		$encoding = (string)$encoding;

		return mb_stripos($haystack, $needle, $offset, $encoding);
    }
}

/**
 * mb_stristrThis
 *
 * Trouve la première occurrence d'une chaîne dans une autre, sans tenir compte de la casse.
 *
 * @link http://php.net/manual/fr/function.mb-stristr.php Documentation pour mb_stristr.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $haystack    La chaîne depuis laquelle on récupère la première occurrence de needle
 * @param string   $needle    La chaîne à chercher dans haystack
 * @param bool     $before_needle    Détermine quelle portion de haystack cette fonction retourne. Si défini à TRUE, la fonction retournera toute la chaîne haystack depuis le début jusqu'à la première occurrence de needle (needle exclus). Si défini à FALSE, la fonction retournera toute la chaîne haystack depuis la première occurrence de needle jusqu'à la fin (needle inclus).
 * @param string   $encoding    Nom de l'encodage à utiliser. Si ce paramètre est omis, l'encodage interne est utilisé.
 *
 * @return string	Retourne la portion de haystack, ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('mb_stristrThis'))
{
    function mb_stristrThis($haystack, $needle, $before_needle = false, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$before_needle = (bool)$before_needle;
		$encoding = (string)$encoding;

		return mb_stristr($haystack, $needle, $before_needle, $encoding);
    }
}

/**
 * mb_strlenThis
 *
 * Retourne la taille d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-strlen.php Documentation pour mb_strlen.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à analyser.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return int	Retourne le nombre de caractères dans la chaîne str, avec l'encodage encoding. Un caractère multi-octets est alors compté pour 1.
 *
 */
if(!function_exists('mb_strlenThis'))
{
    function mb_strlenThis($str, $encoding = NULL)
    {
		$str = (string)$str;
		$encoding = (string)$encoding;

		return mb_strlen($str, $encoding);
    }
}

/**
 * mb_strposThis
 *
 * Repère la première occurrence d'un caractère dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-strpos.php Documentation pour mb_strpos.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne à analyser.
 * @param string   $needle    La chaîne de caractères à trouver dans le paramètre haystack. A contrario de la fonction strpos(), les valeurs numériques ne sont pas appliquées comme valeur ordinale d'un caractère.
 * @param int      $offset    La position de début de recherche. S'il est omis, zéro sera utilisé (début de la chaîne).
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return int	Retourne la position numérique de la première occurrence du caractère needle dans la chaîne haystack. Si needle est introuvable, mb_strpos() retourne FALSE.
 *
 */
if(!function_exists('mb_strposThis'))
{
    function mb_strposThis($haystack, $needle, $offset = 0, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;
		$encoding = (string)$encoding;

		return mb_strpos($haystack, $needle, $offset, $encoding);
    }
}

/**
 * mb_strrchrThis
 *
 * Trouve la dernière occurrence d'un caractère d'une chaîne dans une autre.
 *
 * @link http://php.net/manual/fr/function.mb-strrchr.php Documentation pour mb_strrchr.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $haystack    La chaîne depuis laquelle on doit récupérer la dernière occurrence de needle
 * @param string   $needle    La chaîne à trouver dans haystack
 * @param bool     $part    Détermine quelle portion de haystack cette fonction retourne. Si défini à TRUE, la fonction retourne toute la chaîne haystack depuis le début jusqu'à la dernière occurrence de needle. Si défini à FALSE, la fonction retourne toute la chaîne haystack depuis la dernière occurrence de needle jusqu'à la fin.
 * @param string   $encoding    Nom de l'encodage à utiliser.Si ce paramètre est omis, l'encodage interne sera utilisé.
 *
 * @return string	Retourne la portion de haystack. ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('mb_strrchrThis'))
{
    function mb_strrchrThis($haystack, $needle, $part = false, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$part = (bool)$part;
		$encoding = (string)$encoding;

		return mb_strrchr($haystack, $needle, $part, $encoding);
    }
}

/**
 * mb_strrichrThis
 *
 * Trouve la dernière occurrence d'un caractère d'une chaîne dans une autre, insensible à la casse.
 *
 * @link http://php.net/manual/fr/function.mb-strrichr.php Documentation pour mb_strrichr.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $haystack    La chaîne depuis laquelle on doit chercher la dernière occurrence de needle
 * @param string   $needle    La chaîne à chercher dans haystack
 * @param bool     $part    Détermine quelle portion de haystack cette fonction retourne. Si défini à TRUE, la fonction retourne toute la chaîne haystack depuis le début jusqu'à la dernière occurrence de needle. Si défini à FALSE, la fonction retourne toute la chaîne haystack depuis la dernière occurrence de needle jusqu'à la fin.
 * @param string   $encoding    Nom de l'encodage à utiliser. Si ce paramètre est omis, l'encodage interne sera utilisé.
 *
 * @return string	Retourne la portion de haystack. ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('mb_strrichrThis'))
{
    function mb_strrichrThis($haystack, $needle, $part = false, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$part = (bool)$part;
		$encoding = (string)$encoding;

		return mb_strrichr($haystack, $needle, $part, $encoding);
    }
}

/**
 * mb_strriposThis
 *
 * Trouve la position de la dernière occurrence d'une chaîne dans une autre, en ne tenant pas compte de la casse.
 *
 * @link http://php.net/manual/fr/function.mb-strripos.php Documentation pour mb_strripos.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $haystack    La chaîne depuis laquelle on récupère la position de la dernière occurrence de needle
 * @param string   $needle    La chaîne à chercher dans haystack
 * @param int      $offset    La position dans haystack à partir de laquelle on doit commencer à chercher
 * @param string   $encoding    Nom de l'encodage à utiliser. Si ce paramètre est omis, l'encodage interne est utilisé.
 *
 * @return int	Retourne la position numérique de la dernière occurrence de needle dans la chaîne haystack, ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('mb_strriposThis'))
{
    function mb_strriposThis($haystack, $needle, $offset = 0, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;
		$encoding = (string)$encoding;

		return mb_strripos($haystack, $needle, $offset, $encoding);
    }
}

/**
 * mb_strrposThis
 *
 * Repère la dernière occurrence d'un caractère dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-strrpos.php Documentation pour mb_strrpos.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne à analyser.
 * @param string   $needle    La chaîne à chercher dans la chaîne haystack.
 * @param int      $offset
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return int	Retourne la position numérique de la dernière occurrence du caractère needle dans la chaîne haystack. Si needle est introuvable, mb_strrpos() retourne FALSE.
 *
 */
if(!function_exists('mb_strrposThis'))
{
    function mb_strrposThis($haystack, $needle, $offset = 0, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;
		$encoding = (string)$encoding;

		return mb_strrpos($haystack, $needle, $offset, $encoding);
    }
}

/**
 * mb_strstrThis
 *
 * Trouve la première occurrence d'une chaîne dans une autre.
 *
 * @link http://php.net/manual/fr/function.mb-strstr.php Documentation pour mb_strstr.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $haystack    La chaîne dans laquelle on doit chercher la première occurrence de needle
 * @param string   $needle    La chaîne à chercher dans haystack
 * @param bool     $before_needle    Détermine quelle portion de haystack cette fonction retourne. Si défini à TRUE, la fonction retournera toute la chaîne haystack depuis le début jusqu'à la première occurrence de needle (needle exclus). Si défini à FALSE, la fonction retournera toute la chaîne haystack depuis la première occurrence de needle jusqu'à la fin (needle inclus).
 * @param string   $encoding    Nom de l'encodage à utiliser. Si ce paramètre est omis, l'encodage interne est utilisé.
 *
 * @return string	Retourne la portion de haystack, ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('mb_strstrThis'))
{
    function mb_strstrThis($haystack, $needle, $before_needle = false, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$before_needle = (bool)$before_needle;
		$encoding = (string)$encoding;

		return mb_strstr($haystack, $needle, $before_needle, $encoding);
    }
}

/**
 * mb_strtolowerThis
 *
 * Met tous les caractères en minuscules.
 *
 * @link http://php.net/manual/fr/function.mb-strtolower.php Documentation pour mb_strtolower.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $str    La chaîne à mettre en minuscule.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	Retourne la chaîne str dont tous les caractères alphabétiques ont été mis en minuscule.
 *
 */
if(!function_exists('mb_strtolowerThis'))
{
    function mb_strtolowerThis($str, $encoding = NULL)
    {
		$str = (string)$str;
		$encoding = empty($encoding) ? (string)mb_internal_encoding() : (string)$encoding;

		return mb_strtolower($str, $encoding);
    }
}

/**
 * mb_strtoupperThis
 *
 * Met tous les caractères en majuscules.
 *
 * @link http://php.net/manual/fr/function.mb-strtoupper.php Documentation pour mb_strtoupper.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $str    La chaîne à mettre en majuscule.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	Retourne la chaîne str dont tous les caractères ont été mis en majuscule.
 *
 */
if(!function_exists('mb_strtoupperThis'))
{
    function mb_strtoupperThis($str, $encoding = NULL)
    {
		$str = (string)$str;
		$encoding = empty($encoding) ? (string)mb_internal_encoding() : (string)$encoding;

		return mb_strtoupper($str, $encoding);
    }
}

/**
 * mb_strwidthThis
 *
 * Retourne la taille d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-strwidth.php Documentation pour mb_strwidth.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à analyser.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return int	La taille de la chaîne.
 *
 */
if(!function_exists('mb_strwidthThis'))
{
    function mb_strwidthThis($str, $encoding = NULL)
    {
		$str = (string)$str;
		$encoding = (string)$encoding;

		return mb_strwidth($str, $encoding);
    }
}

/**
 * mb_substitute_characterThis
 *
 * Lit/modifie les caractères de substitution.
 *
 * @link http://php.net/manual/fr/function.mb-substitute-character.php Documentation pour mb_substitute_character.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param mixed     $substrchar    Spécifie une valeur Unicode sous la forme d'un entier, ou bien une chaîne sous ces formes :
 *
 * @return mixed	Si substchar est fourni, mb_substitute_character() retourne TRUE en cas de succès, et FALSE en cas d'erreur. Si substchar est omis, mb_substitute_character() retourne une valeur Unicode, ou bien "none"/"long".
 *
 */
if(!function_exists('mb_substitute_characterThis'))
{
    function mb_substitute_characterThis($substrchar = NULL)
    {
		$substrchar = ($substrchar);
		return mb_substitute_character($substrchar);
    }
}

/**
 * mb_substrThis
 *
 * Lit une sous-chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-substr.php Documentation pour mb_substr.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $str    La chaîne à extraire depuis la sous-chaîne.
 * @param int      $start    Position du premier caractère à utiliser depuis str.
 * @param int      $length    Nombre maximal de caractères à utiliser depuis str.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return string	mb_substr() retourne la portion de la chaîne str qui commence au caractère start et a la longueur de length caractères.
 *
 */
if(!function_exists('mb_substrThis'))
{
    function mb_substrThis($str, $start, $length = NULL, $encoding = NULL)
    {
		$str = (string)$str;
		$start = (int)$start;
		$length = (int)$length;
		$encoding = (string)$encoding;

		return mb_substr($str, $start, $length, $encoding);
    }
}

/**
 * mb_substr_countThis
 *
 * Compte le nombre d'occurrences d'une sous-chaîne.
 *
 * @link http://php.net/manual/fr/function.mb-substr-count.php Documentation pour mb_substr_count.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne à analyser.
 * @param string   $needle    La chaîne à chercher.
 * @param string   $encoding    Le paramètre encoding est l'encodage des caractères. S'il est omis, l'encodage de caractres interne sera utilisé.
 *
 * @return int	Retourne le nombre de fois où la chaîne needle apparaît dans la chaîne haystack.
 *
 */
if(!function_exists('mb_substr_countThis'))
{
    function mb_substr_countThis($haystack, $needle, $encoding = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$encoding = (string)$encoding;

		return mb_substr_count($haystack, $needle, $encoding);
    }
}

/**
 * mcrypt_cbcThis
 *
 * Chiffre/déchiffre des données en mode CBC.
 *
 * @link http://php.net/manual/fr/function.mcrypt-cbc.php Documentation pour mcrypt_cbc.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $cipher
 * @param string   $key
 * @param string   $data
 * @param int      $mode
 * @param string   $iv
 *
 */
if(!function_exists('mcrypt_cbcThis'))
{
    function mcrypt_cbcThis($cipher, $key, $data, $mode, $iv = NULL)
    {
		$cipher = (int)$cipher;
		$key = (string)$key;
		$data = (string)$data;
		$mode = (int)$mode;
		$iv = (string)$iv;

		return mcrypt_cbc($cipher, $key, $data, $mode, $iv);
    }
}

/**
 * mcrypt_cfbThis
 *
 * Chiffre/déchiffre des données en mode CFB.
 *
 * @link http://php.net/manual/fr/function.mcrypt-cfb.php Documentation pour mcrypt_cfb.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $cipher
 * @param string   $key
 * @param string   $data
 * @param int      $mode
 * @param string   $iv
 *
 */
if(!function_exists('mcrypt_cfbThis'))
{
    function mcrypt_cfbThis($cipher, $key, $data, $mode, $iv)
    {
		$cipher = (int)$cipher;
		$key = (string)$key;
		$data = (string)$data;
		$mode = (int)$mode;
		$iv = (string)$iv;

		return mcrypt_cfb($cipher, $key, $data, $mode, $iv);
    }
}

/**
 * mcrypt_create_ivThis
 *
 * Crée un vecteur d'initialisation (IV) à partir d'une source aléatoire.
 *
 * @link http://php.net/manual/fr/function.mcrypt-create-iv.php Documentation pour mcrypt_create_iv.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $size    La taille du vecteur.
 * @param int      $source    La source d'un IV. La source peut être MCRYPT_RAND (le générateur de nombre aléatoire du système), MCRYPT_DEV_RANDOM (lit les données depuis /dev/random) et MCRYPT_DEV_URANDOM (lit les données depuis /dev/urandom). Avant la version 5.3.0, MCRYPT_RAND était la seule constante supportée par Windows.
 *
 * @return string	Retourne le vecteur d'initialisation, ou bien FALSE en cas d'erreur.
 *
 */
if(!function_exists('mcrypt_create_ivThis'))
{
    function mcrypt_create_ivThis($size, $source = MCRYPT_DEV_RANDOM)
    {
		$size = (int)$size;
		$source = (int)$source;

		return mcrypt_create_iv($size, $source);
    }
}

/**
 * mcrypt_decryptThis
 *
 * Déchiffre un texte avec les paramètres donnés.
 *
 * @link http://php.net/manual/fr/function.mcrypt-decrypt.php Documentation pour mcrypt_decrypt.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $cipher    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 * @param string   $key    La clé utilisée lors du chiffrement des données. Si elle est plus petite que la taille requise, elle sera complétée par des '\0'.
 * @param string   $data    Les données qui seront déchiffrées avec utilisant les paramètres cipher et mode. Si la taille des données ne correspond pas à n * la taille du bloc, les données seront complétées par des '\0'.
 * @param string   $mode    Une constantes parmi les constantes MCRYPT_MODE_modename, ou une des chaînes suivantes : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream".
 * @param string   $iv    Utilisé pour l'initialisation des modes CBC, CFB, OFB, ainsi que dans quelques algorithmes du mode STREAM. Si vous ne fournissez pas un IV, alors que cela est nécessaire pour l'algorithme, la fonction émettra une alerte et utilisera un IV dont tous les octets vaudront "\0".
 *
 * @return string	Retourne les données déchiffrées sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('mcrypt_decryptThis'))
{
    function mcrypt_decryptThis($cipher, $key, $data, $mode, $iv = NULL)
    {
		$cipher = (string)$cipher;
		$key = (string)$key;
		$data = (string)$data;
		$mode = (string)$mode;
		$iv = (string)$iv;

		return mcrypt_decrypt($cipher, $key, $data, $mode, $iv);
    }
}

/**
 * mcrypt_enc_get_algorithms_nameThis
 *
 * Retourne le nom de l'algorithme de chiffrement.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-get-algorithms-name.php Documentation pour mcrypt_enc_get_algorithms_name.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La resource de chiffrement.
 *
 * @return string	Retourne le nom de l'algorithme courant, sous forme de chaîne de caractères
 *
 */
if(!function_exists('mcrypt_enc_get_algorithms_nameThis'))
{
    function mcrypt_enc_get_algorithms_nameThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_get_algorithms_name($td);
    }
}

/**
 * mcrypt_enc_get_block_sizeThis
 *
 * Retourne la taille du bloc d'un algorithme.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-get-block-size.php Documentation pour mcrypt_enc_get_block_size.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    Le pointeur de fichiers.
 *
 * @return int	Retourne la taille du bloc de l'algorithme, en octets.
 *
 */
if(!function_exists('mcrypt_enc_get_block_sizeThis'))
{
    function mcrypt_enc_get_block_sizeThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_get_block_size($td);
    }
}

/**
 * mcrypt_enc_get_iv_sizeThis
 *
 * Retourne la taille du VI d'un algorithme.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-get-iv-size.php Documentation pour mcrypt_enc_get_iv_size.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    Le pointeur de fichiers.
 *
 * @return int	Retourne la taille du IV, ou 0 si l'IV est ignoré par l'algorithme.
 *
 */
if(!function_exists('mcrypt_enc_get_iv_sizeThis'))
{
    function mcrypt_enc_get_iv_sizeThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_get_iv_size($td);
    }
}

/**
 * mcrypt_enc_get_key_sizeThis
 *
 * Retourne la taille maximale de la clé pour un mode.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-get-key-size.php Documentation pour mcrypt_enc_get_key_size.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    Le pointeur de fichier.
 *
 * @return int	Retourne la taille maximale de la clé pour le mode donné.
 *
 */
if(!function_exists('mcrypt_enc_get_key_sizeThis'))
{
    function mcrypt_enc_get_key_sizeThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_get_key_size($td);
    }
}

/**
 * mcrypt_enc_get_modes_nameThis
 *
 * Retourne le nom du mode.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-get-modes-name.php Documentation pour mcrypt_enc_get_modes_name.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return string	Retourne le nom, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('mcrypt_enc_get_modes_nameThis'))
{
    function mcrypt_enc_get_modes_nameThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_get_modes_name($td);
    }
}

/**
 * mcrypt_enc_get_supported_key_sizesThis
 *
 * Retourne un tableau contenant les tailles de clés acceptées par un algorithme.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-get-supported-key-sizes.php Documentation pour mcrypt_enc_get_supported_key_sizes.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return array	Retourne un tableau contenant les tailles des clés supportées par l'algorithme désigné par td. S'il retourne un tableau vide, c'est que toutes les clés entre 1 et mcrypt_enc_get_key_size() sont acceptées par l'algorithme.
 *
 */
if(!function_exists('mcrypt_enc_get_supported_key_sizesThis'))
{
    function mcrypt_enc_get_supported_key_sizesThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_get_supported_key_sizes($td);
    }
}

/**
 * mcrypt_enc_is_block_algorithmThis
 *
 * Teste le chiffrement par blocs d'un algorithme.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-is-block-algorithm.php Documentation pour mcrypt_enc_is_block_algorithm.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return bool	Retourne TRUE si l'algorithme utilisé est un algorithme par blocs, et FALSE si c'est un algorithme par flux.
 *
 */
if(!function_exists('mcrypt_enc_is_block_algorithmThis'))
{
    function mcrypt_enc_is_block_algorithmThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_is_block_algorithm($td);
    }
}

/**
 * mcrypt_enc_is_block_algorithm_modeThis
 *
 * Teste le chiffrement par blocs d'un mode.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-is-block-algorithm-mode.php Documentation pour mcrypt_enc_is_block_algorithm_mode.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return bool	Retourne TRUE si ce mode utilise des algorithmes par blocs, et FALSE sinon.
 *
 */
if(!function_exists('mcrypt_enc_is_block_algorithm_modeThis'))
{
    function mcrypt_enc_is_block_algorithm_modeThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_is_block_algorithm_mode($td);
    }
}

/**
 * mcrypt_enc_is_block_modeThis
 *
 * Teste si le mode retourne les données par blocs.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-is-block-mode.php Documentation pour mcrypt_enc_is_block_mode.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return bool	Retourne TRUE si le mode retourne des blocs d'octets, ou bien FALSE s'il ne retourne que des octets.
 *
 */
if(!function_exists('mcrypt_enc_is_block_modeThis'))
{
    function mcrypt_enc_is_block_modeThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_is_block_mode($td);
    }
}

/**
 * mcrypt_enc_self_testThis
 *
 * Teste un module ouvert.
 *
 * @link http://php.net/manual/fr/function.mcrypt-enc-self-test.php Documentation pour mcrypt_enc_self_test.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return int	Si le test est concluant, elle retourne FALSE, sinon TRUE.
 *
 */
if(!function_exists('mcrypt_enc_self_testThis'))
{
    function mcrypt_enc_self_testThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_enc_self_test($td);
    }
}

/**
 * mcrypt_encryptThis
 *
 * Chiffre un texte.
 *
 * @link http://php.net/manual/fr/function.mcrypt-encrypt.php Documentation pour mcrypt_encrypt.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $cipher    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 * @param string   $key    La clé avec laquelle les données seront chiffrées. Si elle est plus petite que sa taille demandée, elle sera complétée avec des '\0'. Il est mieux de ne pas utiliser des clés ASCII. Il est recommandé d'utiliser les fonctions mhash pour créer des clés à partir d'une chaîne.
 * @param string   $data    Les données qui seront chiffrées, avec le cipher et le mode indiqué. Si la taille des données n'est pas un multiple de la taille de bloc, les données seront complétées par des caractères '\0', autant que nécessaire. Le texte chiffré retourné peut être plus long que la taille des données passées en argument via data.
 * @param string   $mode    Une constantes parmi les constantes MCRYPT_MODE_modename, ou une des chaînes suivantes : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream".
 * @param string   $iv    Utilisé pour l'initialisation des modes CBC, CFB, OFB, ainsi que dans quelques algorithmes du mode STREAM. Si vous ne fournissez pas un IV, alors que cela est nécessaire pour l'algorithme, la fonction émettra une alerte et utilisera un IV dont tous les octets vaudront "\0".
 *
 * @return string	Retourne les données chiffrées, sous forme de chaîne de caractères.
 *
 */
if(!function_exists('mcrypt_encryptThis'))
{
    function mcrypt_encryptThis($cipher, $key, $data, $mode, $iv = NULL)
    {
		$cipher = (string)$cipher;
		$key = (string)$key;
		$data = (string)$data;
		$mode = (string)$mode;
		$iv = (string)$iv;

		return mcrypt_encrypt($cipher, $key, $data, $mode, $iv);
    }
}

/**
 * mcrypt_genericThis
 *
 * Chiffre les données.
 *
 * @link http://php.net/manual/fr/function.mcrypt-generic.php Documentation pour mcrypt_generic.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement. Le gestionnaire de chiffrement td doit être initialisé avec la fonction mcrypt_generic_init(), avec une clé et un VI, avant d'appeler cette fonction. Lorsque le chiffrement est réalisé, vous devez libérer les buffers en appelant la fonction mcrypt_generic_deinit(). Voyez mcrypt_module_open() pour un exemple.
 * @param string   $data    Les données à chiffrer.
 *
 * @return string	Retourne les données chiffrées.
 *
 */
if(!function_exists('mcrypt_genericThis'))
{
    function mcrypt_genericThis($td, $data)
    {
		$td = is_resource($td) ? $td : NULL;
		$data = (string)$data;

		return mcrypt_generic($td, $data);
    }
}

/**
 * mcrypt_generic_deinitThis
 *
 * Prépare le module pour le déchargement.
 *
 * @link http://php.net/manual/fr/function.mcrypt-generic-deinit.php Documentation pour mcrypt_generic_deinit.
 *
 * @version PHP 4 >= 4.0.7
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mcrypt_generic_deinitThis'))
{
    function mcrypt_generic_deinitThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_generic_deinit($td);
    }
}

/**
 * mcrypt_generic_endThis
 *
 * Termine un chiffrement.
 *
 * @link http://php.net/manual/fr/function.mcrypt-generic-end.php Documentation pour mcrypt_generic_end.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5 <= 5.1.6
 *
 * @param resource $td
 *
 */
if(!function_exists('mcrypt_generic_endThis'))
{
    function mcrypt_generic_endThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_generic_end($td);
    }
}

/**
 * mcrypt_generic_initThis
 *
 * Initialise tous les buffers nécessaires.
 *
 * @link http://php.net/manual/fr/function.mcrypt-generic-init.php Documentation pour mcrypt_generic_init.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 * @param string   $key    La taille maximale de la clé doit être celle retournée par mcrypt_enc_get_key_size() et toutes les valeurs inférieures seront aussi valides.
 * @param string   $iv    Le vecteur d'initialisation (VI) doit avoir la taille d'un bloc, mais vous devez lire sa taille en appelant mcrypt_enc_get_iv_size(). IV est ignoré en mode ECB. IV DOIT exister en modes "CFB", "CBC", "STREAM", "nOFB" et "OFB". Il doit être aléatoire et unique (mais pas secret). Le même VI doit être utilisé pour le chiffrement et le déchiffrement. Si vous ne voulez pas l'utiliser, remplissez-le de zéros, mais ce n'est pas recommandé.
 *
 * @return int	Retourne une valeur négative en cas d'erreur : -3 si la taille de la clé est incorrecte, -4 quand il y a eu un problème d'allocation de mémoire et toute autre valeur en cas d'erreur inconnue. Si une erreur survient, une alerte est affichée. FALSE est retourné si des paramètres incorrects sont passés à la fonction.
 *
 */
if(!function_exists('mcrypt_generic_initThis'))
{
    function mcrypt_generic_initThis($td, $key, $iv)
    {
		$td = is_resource($td) ? $td : NULL;
		$key = (string)$key;
		$iv = (string)$iv;

		return mcrypt_generic_init($td, $key, $iv);
    }
}

/**
 * mcrypt_get_block_sizeThis
 *
 * Retourne la taille de blocs d'un chiffrement.
 *
 * @link http://php.net/manual/fr/function.mcrypt-get-block-size.php Documentation pour mcrypt_get_block_size.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $cipher    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 *
 * @return int	Lit la taille de bloc, sous forme d'un entier.
 *
 */
if(!function_exists('mcrypt_get_block_sizeThis'))
{
    function mcrypt_get_block_sizeThis($cipher)
    {
		$cipher = (int)$cipher;

		return mcrypt_get_block_size($cipher);
    }
}

/**
 * mcrypt_get_cipher_nameThis
 *
 * Lit le nom du chiffrement utilisé.
 *
 * @link http://php.net/manual/fr/function.mcrypt-get-cipher-name.php Documentation pour mcrypt_get_cipher_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $cipher    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 *
 * @return string	Cette fonction retourne le nom du cipher ou FALSE si le cipher n'existe pas.
 *
 */
if(!function_exists('mcrypt_get_cipher_nameThis'))
{
    function mcrypt_get_cipher_nameThis($cipher)
    {
		$cipher = (int)$cipher;

		return mcrypt_get_cipher_name($cipher);
    }
}

/**
 * mcrypt_get_iv_sizeThis
 *
 * Retourne la taille du VI utilisé par un couple chiffrement/mode.
 *
 * @link http://php.net/manual/fr/function.mcrypt-get-iv-size.php Documentation pour mcrypt_get_iv_size.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $cipher    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 * @param string   $mode    Une constantes parmi les constantes MCRYPT_MODE_modename, ou une des chaînes suivantes : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream". IV est ignoré en mode ECB sachant que ce mode ne le demande pas. Vous devez avoir le même IV (point de départ) lors du chiffrement et du déchiffrement, sinon, votre chiffrage échouera.
 *
 * @return int	Retourne la taille du vecteur d'initialisation (IV), en octets. En cas d'erreur, la fonction retourne FALSE. Si le vecteur d'initialisation est inutile, 0 est retourné.
 *
 */
if(!function_exists('mcrypt_get_iv_sizeThis'))
{
    function mcrypt_get_iv_sizeThis($cipher, $mode)
    {
		$cipher = (string)$cipher;
		$mode = (string)$mode;

		return mcrypt_get_iv_size($cipher, $mode);
    }
}

/**
 * mcrypt_get_key_sizeThis
 *
 * Retourne la taille de la clé de chiffrement.
 *
 * @link http://php.net/manual/fr/function.mcrypt-get-key-size.php Documentation pour mcrypt_get_key_size.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $cipher    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 *
 * @return int	Retourne la taille maximale supportée pour une clé de l'algorithme, en octets ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mcrypt_get_key_sizeThis'))
{
    function mcrypt_get_key_sizeThis($cipher)
    {
		$cipher = (int)$cipher;

		return mcrypt_get_key_size($cipher);
    }
}

/**
 * mcrypt_list_algorithmsThis
 *
 * Liste tous les algorithmes de chiffrement supportés.
 *
 * @link http://php.net/manual/fr/function.mcrypt-list-algorithms.php Documentation pour mcrypt_list_algorithms.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $lib_dir    Spécifie le dossier où les algoritjmes sont situés. Si omis, la valeur de la directive mcrypt.algorithms_dir du fichier php.ini est utilisée.
 *
 * @return array	Retourne un tableau avec les algorithmes supportés.
 *
 */
if(!function_exists('mcrypt_list_algorithmsThis'))
{
    function mcrypt_list_algorithmsThis($lib_dir = NULL)
    {
		$lib_dir = empty($lib_dir) ? (string)ini_get("mcrypt.algorithms_dir") : (string)$lib_dir;

		return mcrypt_list_algorithms($lib_dir);
    }
}

/**
 * mcrypt_list_modesThis
 *
 * Liste tous les modes de chiffrement supportés.
 *
 * @link http://php.net/manual/fr/function.mcrypt-list-modes.php Documentation pour mcrypt_list_modes.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $lib_dir    Spécifie le dossier où tous les modes sont situés. Si omis, la valeur de la directive mcrypt.modes_dir dans le php.ini est utilisée.
 *
 * @return array	Retourne un tableau avec tous les modes supportés.
 *
 */
if(!function_exists('mcrypt_list_modesThis'))
{
    function mcrypt_list_modesThis($lib_dir = NULL)
    {
		$lib_dir = empty($lib_dir) ? (string)ini_get("mcrypt.modes_dir") : (string)$lib_dir;

		return mcrypt_list_modes($lib_dir);
    }
}

/**
 * mcrypt_module_closeThis
 *
 * Décharge le module de chiffrement.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-close.php Documentation pour mcrypt_module_close.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    La ressource de chiffrement.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mcrypt_module_closeThis'))
{
    function mcrypt_module_closeThis($td)
    {
		$td = is_resource($td) ? $td : NULL;

		return mcrypt_module_close($td);
    }
}

/**
 * mcrypt_module_get_algo_block_sizeThis
 *
 * Retourne la taille de blocs d'un algorithme.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-get-algo-block-size.php Documentation pour mcrypt_module_get_algo_block_size.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $algorithm    Le nom de l'algorithme.
 * @param string   $lib_dir    Le paramètre optionnel lib_dir contient le chemin jusqu'au module de l'algorithme sur le système.
 *
 * @return int	Retourne la taille de blocs d'un algorithme, en octets.
 *
 */
if(!function_exists('mcrypt_module_get_algo_block_sizeThis'))
{
    function mcrypt_module_get_algo_block_sizeThis($algorithm, $lib_dir = NULL)
    {
		$algorithm = (string)$algorithm;
		$lib_dir = (string)$lib_dir;

		return mcrypt_module_get_algo_block_size($algorithm, $lib_dir);
    }
}

/**
 * mcrypt_module_get_algo_key_sizeThis
 *
 * Retourne la taille maximale de clé.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-get-algo-key-size.php Documentation pour mcrypt_module_get_algo_key_size.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $algorithm    Le nom de l'algorithme.
 * @param string   $lib_dir    Le paramètre optionnel lib_dir contient le chemin jusqu'au module de l'algorithme sur le système.
 *
 * @return int	Retourne la taille maximale de la clé supportée par l'algorithme algorithm.
 *
 */
if(!function_exists('mcrypt_module_get_algo_key_sizeThis'))
{
    function mcrypt_module_get_algo_key_sizeThis($algorithm, $lib_dir = NULL)
    {
		$algorithm = (string)$algorithm;
		$lib_dir = (string)$lib_dir;

		return mcrypt_module_get_algo_key_size($algorithm, $lib_dir);
    }
}

/**
 * mcrypt_module_get_supported_key_sizesThis
 *
 * Retourne un tableau contenant les tailles de clés supportées par l'algorithme ouvert.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-get-supported-key-sizes.php Documentation pour mcrypt_module_get_supported_key_sizes.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $algorithm    L'algorithme à utiliser.
 * @param string   $lib_dir    Le paramètre optionnel lib_dir peut contenir le chemin du dossier d'installation du module, sur le système.
 *
 * @return array	Retourne un tableau contenant les tailles de clés supportées par l'algorithme de chiffrement algorithm. S'il retourne un tableau vide, alors toutes les clés entre 1 et mcrypt_module_get_algo_key_size() sont supportées par l'algorithme.
 *
 */
if(!function_exists('mcrypt_module_get_supported_key_sizesThis'))
{
    function mcrypt_module_get_supported_key_sizesThis($algorithm, $lib_dir = NULL)
    {
		$algorithm = (string)$algorithm;
		$lib_dir = (string)$lib_dir;

		return mcrypt_module_get_supported_key_sizes($algorithm, $lib_dir);
    }
}

/**
 * mcrypt_module_is_block_algorithmThis
 *
 * Indique si un algorithme fonctionne par blocs.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-is-block-algorithm.php Documentation pour mcrypt_module_is_block_algorithm.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $algorithm    L'algorithme à vérifier.
 * @param string   $lib_dir    Le paramètre optionnel lib_dir peut contenir le chemin où se trouve les modules des algorithmes sur le disque système.
 *
 * @return bool	Retourne TRUE si l'algorithme spécifié est un algorithme par blocs ou FALSE si c'est un algorithme par flux.
 *
 */
if(!function_exists('mcrypt_module_is_block_algorithmThis'))
{
    function mcrypt_module_is_block_algorithmThis($algorithm, $lib_dir = NULL)
    {
		$algorithm = (string)$algorithm;
		$lib_dir = (string)$lib_dir;

		return mcrypt_module_is_block_algorithm($algorithm, $lib_dir);
    }
}

/**
 * mcrypt_module_is_block_algorithm_modeThis
 *
 * Indique si un mode fonctionne par blocs.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-is-block-algorithm-mode.php Documentation pour mcrypt_module_is_block_algorithm_mode.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $mode    Le mode à vérifier.
 * @param string   $lib_dir    Le paramètre optionnel lib_dir peut contenir le dossier où les modules d'algorithme se trouvent sur le système.
 *
 * @return bool	Cette fonction retourne TRUE si le mode doit être utilisé avec un algorithme par bloc, sinon, elle retourne FALSE (i.e. FALSE pour un flux, et TRUE pour cbc, cfb, ofb).
 *
 */
if(!function_exists('mcrypt_module_is_block_algorithm_modeThis'))
{
    function mcrypt_module_is_block_algorithm_modeThis($mode, $lib_dir = NULL)
    {
		$mode = (string)$mode;
		$lib_dir = (string)$lib_dir;

		return mcrypt_module_is_block_algorithm_mode($mode, $lib_dir);
    }
}

/**
 * mcrypt_module_is_block_modeThis
 *
 * Indique si un mode travaille par blocs.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-is-block-mode.php Documentation pour mcrypt_module_is_block_mode.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $mode    Une constantes parmi les constantes MCRYPT_MODE_modename, ou une des chaînes suivantes : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream".
 * @param string   $lib_dir    Le paramètre optionnel lib_dir contient le chemin jusqu'au module de l'algorithme sur le système.
 *
 * @return bool	Cette fonction retourne TRUE si ce mode fournit des blocs d'octets ou FALSE s'il ne sort que des octets. (i.e. TRUE pour "cbc" et "ecb", et FALSE pour "cfb" et "stream").
 *
 */
if(!function_exists('mcrypt_module_is_block_modeThis'))
{
    function mcrypt_module_is_block_modeThis($mode, $lib_dir = NULL)
    {
		$mode = (string)$mode;
		$lib_dir = (string)$lib_dir;

		return mcrypt_module_is_block_mode($mode, $lib_dir);
    }
}

/**
 * mcrypt_module_openThis
 *
 * Ouvre le module de l'algorithme et du mode à utiliser.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-open.php Documentation pour mcrypt_module_open.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $algorithm    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 * @param string   $algorithm_directory    Le paramètre algorithm_directory est utilisé pour localiser le module de cryptage. Lorsque vous spécifiez un nom de dossier, il sera utilisé. Si vous spécifiez une chaîne vide (""), la valeur définie dans la directive mcrypt.algorithms_dir du fichier php.ini sera utilisée. Lorsqu'elle n'est pas définie, le dossier par défaut utilisé sera celui dans lequel se trouve la bibliothèque libmcrypt (habituellement, /usr/local/lib/libmcrypt).
 * @param string   $mode    Une constantes parmi les constantes MCRYPT_MODE_modename, ou une des chaînes suivantes : "ecb", "cbc", "cfb", "ofb", "nofb" ou "stream".
 * @param string   $mode_directory    Le paramètre mode_directory est utilisé pour localiser le module de cryptage. Si un nom de dossier est spécifié, il sera utilisé. Lorsque vous spécifiez une chaîne vide (""), la valeur de la directive mcrypt.modes_dir du fichier php.ini sera utilisée. Si elle n'est pas définie, le dossier par défaut utilisé sera celui dans lequel se trouve la bibliothèque libmcrypt (habituellement /usr/local/lib/libmcrypt).
 *
 * @return resource	Normalement, cette fonction retourne un descripteur de cryptage, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mcrypt_module_openThis'))
{
    function mcrypt_module_openThis($algorithm, $algorithm_directory, $mode, $mode_directory)
    {
		$algorithm = (string)$algorithm;
		$algorithm_directory = (string)$algorithm_directory;
		$mode = (string)$mode;
		$mode_directory = (string)$mode_directory;

		return mcrypt_module_open($algorithm, $algorithm_directory, $mode, $mode_directory);
    }
}

/**
 * mcrypt_module_self_testThis
 *
 * Teste un mode.
 *
 * @link http://php.net/manual/fr/function.mcrypt-module-self-test.php Documentation pour mcrypt_module_self_test.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $algorithm    Une constante parmi les constantes MCRYPT_ciphername, ou le nom de l'algorithme, sous la forme d'une chaîne de caractères.
 * @param string   $lib_dir    Le paramètre optionnel lib_dir contient le chemin jusqu'au module de l'algorithme sur le système.
 *
 * @return bool	Retourne TRUE si le test fonctionne, et FALSE sinon.
 *
 */
if(!function_exists('mcrypt_module_self_testThis'))
{
    function mcrypt_module_self_testThis($algorithm, $lib_dir = NULL)
    {
		$algorithm = (string)$algorithm;
		$lib_dir = (string)$lib_dir;

		return mcrypt_module_self_test($algorithm, $lib_dir);
    }
}

/**
 * mcrypt_ofbThis
 *
 * Chiffre/déchiffre des données en mode OFB.
 *
 * @link http://php.net/manual/fr/function.mcrypt-ofb.php Documentation pour mcrypt_ofb.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $cipher
 * @param string   $key
 * @param string   $data
 * @param int      $mode
 * @param string   $iv
 *
 */
if(!function_exists('mcrypt_ofbThis'))
{
    function mcrypt_ofbThis($cipher, $key, $data, $mode, $iv)
    {
		$cipher = (int)$cipher;
		$key = (string)$key;
		$data = (string)$data;
		$mode = (int)$mode;
		$iv = (string)$iv;

		return mcrypt_ofb($cipher, $key, $data, $mode, $iv);
    }
}

/**
 * md5This
 *
 * Calcule le md5 d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.md5.php Documentation pour md5.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne.
 * @param bool     $raw_output    Si le paramètre optionnel raw_output est défini à TRUE, alors le md5 est retourné au format binaire brut avec une longueur de 16.
 *
 * @return string	Retourne le md5 de la chaîne, sous la forme d'un nombre hexadécimal de 32 caractères.
 *
 */
if(!function_exists('md5This'))
{
    function md5This($str, $raw_output = false)
    {
		$str = (string)$str;
		$raw_output = (bool)$raw_output;

		return md5($str, $raw_output);
    }
}

/**
 * md5_fileThis
 *
 * Calcule le md5 d'un fichier.
 *
 * @link http://php.net/manual/fr/function.md5-file.php Documentation pour md5_file.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier
 * @param bool     $raw_output    Lorsque TRUE, retourne le prétraitement en format binaire brut avec une grandeur de 16.
 *
 * @return string	Retourne une chaîne de caractères en cas de succès, FALSE autrement.
 *
 */
if(!function_exists('md5_fileThis'))
{
    function md5_fileThis($filename, $raw_output = false)
    {
		$filename = (string)$filename;
		$raw_output = (bool)$raw_output;

		return md5_file($filename, $raw_output);
    }
}

/**
 * mdecrypt_genericThis
 *
 * Déchiffre les données.
 *
 * @link http://php.net/manual/fr/function.mdecrypt-generic.php Documentation pour mdecrypt_generic.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $td    Un descripteur de chiffrement, retourné par la fonction mcrypt_module_open()
 * @param string   $data    Les données chiffrées.
 *
 */
if(!function_exists('mdecrypt_genericThis'))
{
    function mdecrypt_genericThis($td, $data)
    {
		$td = is_resource($td) ? $td : NULL;
		$data = (string)$data;

		return mdecrypt_generic($td, $data);
    }
}

/**
 * memory_get_peak_usageThis
 *
 * Retourne la quantité de mémoire maximale allouée par PHP.
 *
 * @link http://php.net/manual/fr/function.memory-get-peak-usage.php Documentation pour memory_get_peak_usage.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param bool     $real_usage    Définir à TRUE pour récupérer la taille réelle de la mémoire allouée par le système. Si ce paramètre n'est pas défini ou vaut FALSE, seule la mémoire utilisée par emalloc() sera retournée.
 *
 * @return int	Retourne la quantité de mémoire, en octets.
 *
 */
if(!function_exists('memory_get_peak_usageThis'))
{
    function memory_get_peak_usageThis($real_usage = false)
    {
		$real_usage = (bool)$real_usage;

		return memory_get_peak_usage($real_usage);
    }
}

/**
 * memory_get_usageThis
 *
 * Indique la quantité de mémoire utilisée par PHP.
 *
 * @link http://php.net/manual/fr/function.memory-get-usage.php Documentation pour memory_get_usage.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 *
 * @param bool     $real_usage    Définir à TRUE pour récupérer la taille réelle de la mémoire allouée par le système. Si ce paramètre n'est pas défini ou vaut FALSE, seule la mémoire utilisée par emalloc() sera retournée.
 *
 * @return int	Retourne la quantité de mémoire, en octets.
 *
 */
if(!function_exists('memory_get_usageThis'))
{
    function memory_get_usageThis($real_usage = false)
    {
		$real_usage = (bool)$real_usage;

		return memory_get_usage($real_usage);
    }
}

/**
 * metaphoneThis
 *
 * Calcule la clé metaphone.
 *
 * @link http://php.net/manual/fr/function.metaphone.php Documentation pour metaphone.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param int      $phonemes    Ce paramètre restreint la clé métaphone retournée à une longueur de phonemes caractères. La valeur par défaut est 0, ce qui signifie qu'aucune limitation ne sera appliquée.
 *
 * @return string	Retourne la clé metaphone, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('metaphoneThis'))
{
    function metaphoneThis($str, $phonemes = 0)
    {
		$str = (string)$str;
		$phonemes = (int)$phonemes;

		return metaphone($str, $phonemes);
    }
}

/**
 * method_existsThis
 *
 * Vérifie si la méthode existe pour une classe.
 *
 * @link http://php.net/manual/fr/function.method-exists.php Documentation pour method_exists.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $object    Une instance d'un objet ou le nom d'une classe
 * @param string   $method_name    Le nom de la méthode
 *
 * @return bool	Retourne TRUE si la méthode fournie par le paramètre method_name a été définie pour l'objet object, FALSE sinon.
 *
 */
if(!function_exists('method_existsThis'))
{
    function method_existsThis($object, $method_name)
    {
		$object = ($object);
		$method_name = (string)$method_name;

		return method_exists($object, $method_name);
    }
}

/**
 * mhashThis
 *
 * Calcule un hash.
 *
 * @link http://php.net/manual/fr/function.mhash.php Documentation pour mhash.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $hash    L'identifiant du hash. Une parmi les constantes MHASH_hashname.
 * @param string   $data    L'entrée utilisateur, sous la forme d'une chaîne de caractères.
 * @param string   $key    Spécifié, la fonction retournera le HMAC résultant. HMAC est un hash indexé utilisé pour l'identification de message, ou bien un simple rapport de message, suivant la clé spécifiée. Certains algorithmes supportés dans mhash ne sont pas compatibles avec le mode HMAC.
 *
 * @return string	Retourne le hash résultant (appelé aussi "digest") ou HMAC, sous la forme d'une chaîne de caractères ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mhashThis'))
{
    function mhashThis($hash, $data, $key = NULL)
    {
		$hash = (int)$hash;
		$data = (string)$data;
		$key = (string)$key;

		return mhash($hash, $data, $key);
    }
}

/**
 * mhash_countThis
 *
 * Récupère l'identifiant maximal de hash.
 *
 * @link http://php.net/manual/fr/function.mhash-count.php Documentation pour mhash_count.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'identifiant de hash maximal. Les hashs sont numérotés de 0 jusqu'à cet identifiant.
 *
 */
if(!function_exists('mhash_countThis'))
{
    function mhash_countThis()
    {
		return mhash_count();
    }
}

/**
 * mhash_get_block_sizeThis
 *
 * Retourne la taille de bloc du hash.
 *
 * @link http://php.net/manual/fr/function.mhash-get-block-size.php Documentation pour mhash_get_block_size.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $hash    L'identifiant du hash. Une des constantes MHASH_hashname.
 *
 * @return int	Retourne la taille, en octets, ou FALSE si le hash n'existe pas.
 *
 */
if(!function_exists('mhash_get_block_sizeThis'))
{
    function mhash_get_block_sizeThis($hash)
    {
		$hash = (int)$hash;

		return mhash_get_block_size($hash);
    }
}

/**
 * mhash_get_hash_nameThis
 *
 * Retourne le nom du hash.
 *
 * @link http://php.net/manual/fr/function.mhash-get-hash-name.php Documentation pour mhash_get_hash_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $hash    L'identifiant du hash. Une des constantes MHASH_hashname.
 *
 * @return string	Retourne le nom du hash ou FALSE si le hash n'existe pas.
 *
 */
if(!function_exists('mhash_get_hash_nameThis'))
{
    function mhash_get_hash_nameThis($hash)
    {
		$hash = (int)$hash;

		return mhash_get_hash_name($hash);
    }
}

/**
 * mhash_keygen_s2kThis
 *
 * Génère une clé.
 *
 * @link http://php.net/manual/fr/function.mhash-keygen-s2k.php Documentation pour mhash_keygen_s2k.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $hash    L'identifiant du hash utilisé pour créer la clé. Une parmi les constantes MHASH_hashname.
 * @param string   $password    Mot de passe fourni par l'utilisateur.
 * @param string   $salt    Doit être différent et suffisamment aléatoire pour chaque clé que vous générez, afin de créer des clés différentes. Du fait que le paramètre salt doit être connu lorsque vous vérifiez les clés, c'est une bonne idée de l'ajouter à la clé. Le paramètre salt doit avoir une longueur de 8 octets, et sera complété de zéro si vous en fournissez un d'une taille inférieure.
 * @param int      $bytes    La longueur de la clé, en octets.
 *
 * @return string	Retourne la clé générée, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mhash_keygen_s2kThis'))
{
    function mhash_keygen_s2kThis($hash, $password, $salt, $bytes)
    {
		$hash = (int)$hash;
		$password = (string)$password;
		$salt = (string)$salt;
		$bytes = (int)$bytes;

		return mhash_keygen_s2k($hash, $password, $salt, $bytes);
    }
}

/**
 * microtimeThis
 *
 * Retourne le timestamp UNIX actuel avec les microsecondes.
 *
 * @link http://php.net/manual/fr/function.microtime.php Documentation pour microtime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param bool     $get_as_float    Si utilisé et défini à TRUE, microtime() retournera un nombre à virgule flottante au lieu d'une chaîne de caractères, tel que décrit dans la section des valeurs retournées ci-dessous.
 *
 * @return mixed	Par défaut, microtime() retourne une chaîne de caractères au format "msec sec", où sec est le temps courant mesuré en nombre de secondes depuis l'époque Unix (1 Janvier 1970, 00:00:00 GMT), et msec est le nombre de microsecondes qui se sont écoulées depuis sec exprimé en secondes.
 *
 */
if(!function_exists('microtimeThis'))
{
    function microtimeThis($get_as_float = false)
    {
		$get_as_float = (bool)$get_as_float;

		return microtime($get_as_float);
    }
}

/**
 * minThis
 *
 * La plus petite valeur.
 *
 * @link http://php.net/manual/fr/function.min.php Documentation pour min.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    $values    Un tableau contenant les valeurs.
 *
 * @return mixed	Retourne la plus petite valeur numérique parmi les valeurs passées en paramètres.
 *
 */
if(!function_exists('minThis'))
{
    function minThis($values)
    {
		$values = (array)$values;

		return min($values);
    }
}

/**
 * mkdirThis
 *
 * Crée un dossier.
 *
 * @link http://php.net/manual/fr/function.mkdir.php Documentation pour mkdir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pathname    Le chemin du dossier.
 * @param int      $mode    Le mode par défaut est le mode 0777, ce qui correspond au maximum de droits possible. Pour plus d'informations sur les modes, lisez en détail la documentation de la fonction chmod(). Notez que vous aurez à préciser le mode en base octale, ce qui signifie que vous aurez probablement un 0 comme premier chiffre. Le mode sera aussi modifié par le umask courant, que vous pouvez modifier avec la fonction umask().
 * @param bool     $recursive    Permet la création de répertoires imbriqués spécifiés dans le pathname.
 * @param resource $context
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mkdirThis'))
{
    function mkdirThis($pathname, $mode = 777, $recursive = false, $context = NULL)
    {
		$pathname = (string)$pathname;
		$mode = (int)$mode;
		$recursive = (bool)$recursive;
		$context = is_resource($context) ? $context : NULL;

		return mkdir($pathname, $mode, $recursive, $context);
    }
}

/**
 * mktimeThis
 *
 * Retourne le timestamp UNIX d'une date.
 *
 * @link http://php.net/manual/fr/function.mktime.php Documentation pour mktime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $hour    Le nombre d'heures depuis le début de la journée fixée par les paramètres month, day et year. Les valeurs négatives font références aux heures avant minuit du jour en question. Les valeurs supérieures à 3 font références aux heures associées pour le(s) jour(s) suivant(s).
 * @param int      $minute    Le nombre de minutes depuis le début de l'heure hour. Les valeurs négatives font références aux minutes de l'heure précédente. Les valeurs supérieures à 59 font références aux minutes associées pour l'(les) heure(s) suivante(s).
 * @param int      $second    Le nombre de secondes depuis le début de la minute minute. Les valeurs négatives font références aux secondes de la minute précédente. Les valeurs supérieures à 59 font références aux secondes associées à la(les) minute(s) suivante(s).
 * @param int      $month    Le nombre de mois depuis la fin de l'année précédente. Les valeurs comprises entre 1 et 2 font références aux mois du calendrier normal de l'année en question. Les valeurs inférieures à 1 (y compris les valeurs négatives) font références aux mois de l'année précédente dans l'ordre inverse, aussi, 0 correspond à décembre, -1 à novembre, etc. Les valeurs supérieures à 2 font références au mois correspondant dans l'(les) année(s) suivante(s).
 * @param int      $day    Le nombre de jours depuis la fin du mois précédent. Les valeurs comprises entre 1 et 28, 29, 30, 31 (suivant le mois) font références aux jours normaux dans le mois courant. Les valeurs inférieures à 1 (y compris les valeurs négatives) font références aux jours du mois précédent, aussi, 0 correspond au dernier jour du mois précédent, -1, le jour d'avant, etc. Les valeurs supérieures au nombre de jours du mois courant font références aux jours correspondants du(des) mois suivant(s).
 * @param int      $year    L'année, peut être sur deux ou quatre chiffres, avec des valeurs allant de 0 à 69, correspondant au valeur 2000 à 2069 et 70 à 100, correspondant au valeur 1970 à 2000. Sur les systèmes où time_t un entier signé sur 32bits, ce qui est le plus courant de nos jours, la période valide pour year est quelque part près de 191 et 2038. Cependant, avant PHP 5.1.0, cette intervalle était limitée de 1970 à 2038 sur quelques systèmes (i.e. Windows).
 * @param int      $is_dst    Ce paramètre peut être mis à 1 si l'heure d'hiver est appliquée (DST), 0 si elle ne l'est pas, et -1 (par défaut) si on ne sait pas. Si l'on ne sait pas, PHP tente de le traiter lui-même. Ceci peut occasionner des résultats inattendus (mais néanmoins correct). Quelques temps sont invalides si DST est activé sur les systèmes où PHP fonctionne ou is_dist est défini à 1. Si DST est activé e.g. 2:00, tous les temps entre 2:00 et 3:00 sont invalides et la fonction mktime() retourne une valeur indéfinie (généralement une valeur négative). Quelques systèmes (e.g. Solaris 8) activent DST à minuit, donc, le temps 0:30 du jour lorsque DST est activé est évalué à 3:30 du jour précédent.
 *
 * @return int	mktime() retourne un timestamp Unix des arguments donnés. Si les arguments ne sont pas valides, la fonction retournera FALSE (avant PHP 5.1, elle retournait -1).
 *
 */
if(!function_exists('mktimeThis'))
{
    function mktimeThis($hour = NULL, $minute = NULL, $second = NULL, $month = NULL, $day = NULL, $year = NULL, $is_dst = -1)
    {
		$hour = empty($hour) ? (int)date("H") : (int)$hour;
		$minute = empty($minute) ? (int)date("i") : (int)$minute;
		$second = empty($second) ? (int)date("s") : (int)$second;
		$month = empty($month) ? (int)date("n") : (int)$month;
		$day = empty($day) ? (int)date("j") : (int)$day;
		$year = empty($year) ? (int)date("Y") : (int)$year;
		$is_dst = (int)$is_dst;

		return mktime($hour, $minute, $second, $month, $day, $year, $is_dst);
    }
}

/**
 * money_formatThis
 *
 * Met un nombre au format monétaire.
 *
 * @link http://php.net/manual/fr/function.money-format.php Documentation pour money_format.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $format    Le paramètre de format est constitué de la séquence suivante : Une ou plusieurs des configurations suivantes sont utilisables :
 * @param float    $number    Le caractère = suivi par un octet unique f qui sera utilisé comme caractère de remplissage. Le caractère de remplissage par défaut est espace.
 *
 * @return string	Retourne la chaîne formatée. Les caractères avant et après la chaîne formatée seront retournés, inchangés. Une valeur non-numérique pour number retourne NULL et émet une alerte E_WARNING.
 *
 */
if(!function_exists('money_formatThis'))
{
    function money_formatThis($format, $number)
    {
		$format = (string)$format;
		$number = (float)$number;

		return money_format($format, $number);
    }
}

/**
 * move_uploaded_fileThis
 *
 * Déplace un fichier téléchargé.
 *
 * @link http://php.net/manual/fr/function.move-uploaded-file.php Documentation pour move_uploaded_file.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier téléchargé.
 * @param string   $destination    La destination du fichier déplacé.
 *
 * @return bool	Retourne TRUE en cas de succès.
 *
 */
if(!function_exists('move_uploaded_fileThis'))
{
    function move_uploaded_fileThis($filename, $destination)
    {
		$filename = (string)$filename;
		$destination = (string)$destination;

		return move_uploaded_file($filename, $destination);
    }
}

/**
 * msession_connectThis
 *
 * Ouvre la connexion au serveur msession.
 *
 * @link http://php.net/manual/fr/function.msession-connect.php Documentation pour msession_connect.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $host
 * @param string   $port
 *
 */
if(!function_exists('msession_connectThis'))
{
    function msession_connectThis($host, $port)
    {
		$host = (string)$host;
		$port = (string)$port;

		return msession_connect($host, $port);
    }
}

/**
 * msession_countThis
 *
 * Compte le nombre de sessions.
 *
 * @link http://php.net/manual/fr/function.msession-count.php Documentation pour msession_count.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 */
if(!function_exists('msession_countThis'))
{
    function msession_countThis()
    {
		return msession_count();
    }
}

/**
 * msession_createThis
 *
 * Crée une session.
 *
 * @link http://php.net/manual/fr/function.msession-create.php Documentation pour msession_create.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param string   $classname
 * @param string   $data
 *
 */
if(!function_exists('msession_createThis'))
{
    function msession_createThis($session, $classname = NULL, $data = NULL)
    {
		$session = (string)$session;
		$classname = (string)$classname;
		$data = (string)$data;

		return msession_create($session, $classname, $data);
    }
}

/**
 * msession_destroyThis
 *
 * Détruit une session.
 *
 * @link http://php.net/manual/fr/function.msession-destroy.php Documentation pour msession_destroy.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $name
 *
 */
if(!function_exists('msession_destroyThis'))
{
    function msession_destroyThis($name)
    {
		$name = (string)$name;

		return msession_destroy($name);
    }
}

/**
 * msession_disconnectThis
 *
 * Ferme la connexion au serveur msession.
 *
 * @link http://php.net/manual/fr/function.msession-disconnect.php Documentation pour msession_disconnect.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 */
if(!function_exists('msession_disconnectThis'))
{
    function msession_disconnectThis()
    {
		return msession_disconnect();
    }
}

/**
 * msession_findThis
 *
 * Trouve toutes les sessions avec un nom et une valeur.
 *
 * @link http://php.net/manual/fr/function.msession-find.php Documentation pour msession_find.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $name
 * @param string   $value
 *
 */
if(!function_exists('msession_findThis'))
{
    function msession_findThis($name, $value)
    {
		$name = (string)$name;
		$value = (string)$value;

		return msession_find($name, $value);
    }
}

/**
 * msession_getThis
 *
 * Lit une valeur dans une session.
 *
 * @link http://php.net/manual/fr/function.msession-get.php Documentation pour msession_get.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param string   $name
 * @param string   $value
 *
 */
if(!function_exists('msession_getThis'))
{
    function msession_getThis($session, $name, $value)
    {
		$session = (string)$session;
		$name = (string)$name;
		$value = (string)$value;

		return msession_get($session, $name, $value);
    }
}

/**
 * msession_get_arrayThis
 *
 * Lit un tableau de variables msession.
 *
 * @link http://php.net/manual/fr/function.msession-get-array.php Documentation pour msession_get_array.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 *
 */
if(!function_exists('msession_get_arrayThis'))
{
    function msession_get_arrayThis($session)
    {
		$session = (string)$session;

		return msession_get_array($session);
    }
}

/**
 * msession_get_dataThis
 *
 * Lit les données de la session.
 *
 * @link http://php.net/manual/fr/function.msession-get-data.php Documentation pour msession_get_data.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 *
 */
if(!function_exists('msession_get_dataThis'))
{
    function msession_get_dataThis($session)
    {
		$session = (string)$session;

		return msession_get_data($session);
    }
}

/**
 * msession_incThis
 *
 * Incrémente une valeur dans une session.
 *
 * @link http://php.net/manual/fr/function.msession-inc.php Documentation pour msession_inc.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param string   $name
 *
 */
if(!function_exists('msession_incThis'))
{
    function msession_incThis($session, $name)
    {
		$session = (string)$session;
		$name = (string)$name;

		return msession_inc($session, $name);
    }
}

/**
 * msession_listThis
 *
 * Liste toutes les sessions.
 *
 * @link http://php.net/manual/fr/function.msession-list.php Documentation pour msession_list.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 */
if(!function_exists('msession_listThis'))
{
    function msession_listThis()
    {
		return msession_list();
    }
}

/**
 * msession_listvarThis
 *
 * Liste les sessions contenant une variable.
 *
 * @link http://php.net/manual/fr/function.msession-listvar.php Documentation pour msession_listvar.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $name    Le nom à chercher.
 *
 * @return array	Retourne un tableau associatif des valeurs que prend la variable de session name dans les différentes sessions en cours.
 *
 */
if(!function_exists('msession_listvarThis'))
{
    function msession_listvarThis($name)
    {
		$name = (string)$name;

		return msession_listvar($name);
    }
}

/**
 * msession_lockThis
 *
 * Verrouille une session.
 *
 * @link http://php.net/manual/fr/function.msession-lock.php Documentation pour msession_lock.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $name
 *
 */
if(!function_exists('msession_lockThis'))
{
    function msession_lockThis($name)
    {
		$name = (string)$name;

		return msession_lock($name);
    }
}

/**
 * msession_pluginThis
 *
 * Appel une fonction d'échappement dans les plugins de personnalité msession.
 *
 * @link http://php.net/manual/fr/function.msession-plugin.php Documentation pour msession_plugin.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param string   $val
 * @param string   $param
 *
 */
if(!function_exists('msession_pluginThis'))
{
    function msession_pluginThis($session, $val, $param = NULL)
    {
		$session = (string)$session;
		$val = (string)$val;
		$param = (string)$param;

		return msession_plugin($session, $val, $param);
    }
}

/**
 * msession_randstrThis
 *
 * Lit une chaîne aléatoire.
 *
 * @link http://php.net/manual/fr/function.msession-randstr.php Documentation pour msession_randstr.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param int      $param
 *
 */
if(!function_exists('msession_randstrThis'))
{
    function msession_randstrThis($param)
    {
		$param = (int)$param;

		return msession_randstr($param);
    }
}

/**
 * msession_setThis
 *
 * Modifie une valeur dans la session.
 *
 * @link http://php.net/manual/fr/function.msession-set.php Documentation pour msession_set.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param string   $name
 * @param string   $value
 *
 */
if(!function_exists('msession_setThis'))
{
    function msession_setThis($session, $name, $value)
    {
		$session = (string)$session;
		$name = (string)$name;
		$value = (string)$value;

		return msession_set($session, $name, $value);
    }
}

/**
 * msession_set_arrayThis
 *
 * Définit les variables msession depuis un tableau.
 *
 * @link http://php.net/manual/fr/function.msession-set-array.php Documentation pour msession_set_array.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param array    $tuples
 *
 */
if(!function_exists('msession_set_arrayThis'))
{
    function msession_set_arrayThis($session, $tuples)
    {
		$session = (string)$session;
		$tuples = (array)$tuples;

		return msession_set_array($session, $tuples);
    }
}

/**
 * msession_set_dataThis
 *
 * Définit les données de session.
 *
 * @link http://php.net/manual/fr/function.msession-set-data.php Documentation pour msession_set_data.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param string   $value
 *
 */
if(!function_exists('msession_set_dataThis'))
{
    function msession_set_dataThis($session, $value)
    {
		$session = (string)$session;
		$value = (string)$value;

		return msession_set_data($session, $value);
    }
}

/**
 * msession_timeoutThis
 *
 * Lit et/ou modifie la durée de vie d'une session.
 *
 * @link http://php.net/manual/fr/function.msession-timeout.php Documentation pour msession_timeout.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param int      $param
 *
 */
if(!function_exists('msession_timeoutThis'))
{
    function msession_timeoutThis($session, $param = NULL)
    {
		$session = (string)$session;
		$param = (int)$param;

		return msession_timeout($session, $param);
    }
}

/**
 * msession_uniqThis
 *
 * Récupère un identifiant unique.
 *
 * @link http://php.net/manual/fr/function.msession-uniq.php Documentation pour msession_uniq.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param int      $param
 * @param string   $classname
 * @param string   $data
 *
 */
if(!function_exists('msession_uniqThis'))
{
    function msession_uniqThis($param, $classname = NULL, $data = NULL)
    {
		$param = (int)$param;
		$classname = (string)$classname;
		$data = (string)$data;

		return msession_uniq($param, $classname, $data);
    }
}

/**
 * msession_unlockThis
 *
 * Déverrouille une session.
 *
 * @link http://php.net/manual/fr/function.msession-unlock.php Documentation pour msession_unlock.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5 <= 5.1.2
 *
 * @param string   $session
 * @param int      $key
 *
 */
if(!function_exists('msession_unlockThis'))
{
    function msession_unlockThis($session, $key)
    {
		$session = (string)$session;
		$key = (int)$key;

		return msession_unlock($session, $key);
    }
}

/**
 * msg_get_queueThis
 *
 * Crée ou s'attache à une file de messages.
 *
 * @link http://php.net/manual/fr/function.msg-get-queue.php Documentation pour msg_get_queue.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $key    Identifiant numérique du message dans la file
 * @param int      $perms    Permission dans la file. Par défaut, vaut 0666. Si la file de messages existe déjà, le paramètre perms sera ignoré.
 *
 * @return resource	Retourne une ressource qui peut être utilisée pour accéder à la file de messages System V.
 *
 */
if(!function_exists('msg_get_queueThis'))
{
    function msg_get_queueThis($key, $perms = 666)
    {
		$key = (int)$key;
		$perms = (int)$perms;

		return msg_get_queue($key, $perms);
    }
}

/**
 * msg_queue_existsThis
 *
 * Vérifie si une file de messages existe.
 *
 * @link http://php.net/manual/fr/function.msg-queue-exists.php Documentation pour msg_queue_exists.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param int      $key    La clé de la file.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msg_queue_existsThis'))
{
    function msg_queue_existsThis($key)
    {
		$key = (int)$key;

		return msg_queue_exists($key);
    }
}

/**
 * msg_receiveThis
 *
 * Reçoit un message depuis une file de messages.
 *
 * @link http://php.net/manual/fr/function.msg-receive.php Documentation pour msg_receive.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $queue
 * @param int      $desiredmsgtype    Si desiredmsgtype vaut 0, le premier message de la file est retourné. Si desiredmsgtype vaut plus que 0, alors le premier message de ce type sera retourné. Si desiredmsgtype vaut moins que 0, le premier message de la file ayant un type inférieur ou égal à la valeur absolue de desiredmsgtype sera retourné. Si aucun message ne correspond aux critères, votre script attendra la venue d'un tel message dans la file. Vous pouvez éviter ce blocage en précisant l'option MSG_IPC_NOWAIT dans le paramètre flags.
 * @param int      &$msgtype    Le type de message qui a été reçu sera stocké dans ce paramètre.
 * @param int      $maxsize    La taille maximale de message est fixée par maxsize ; si le message de la file est plus grand que cette taille, la fonction échouera (à moins que vous n'utilisiez une option flags, décrite ci-dessous).
 * @param mixed     &$message    Le message reçu sera stocké dans le paramètre message, à moins qu'il n'y ait eu des erreurs de réception du message.
 * @param bool     $unserialize    Quand c'est le cas, le message est traité comme s'il avait été linéarisé avec le même mécanisme que le module de session. Le message sera alors délinéarisé, puis retourné au script. Cela vous permettra de recevoir facilement des tableaux ou des objets complexes dans votre script, émis par d'autres scripts PHP, ou, si vous utilisez WDDX, depuis n'importe quelle source compatible WDDX. Si unserialize vaut FALSE, le message sera retourné intact, et sans modifier les valeurs binaires.
 * @param int      $flags    Le paramètre flags permet de passer des options pour configurer les appels msgrcv. Par défaut, il vaut 0, mais vous pouvez spécifier une ou plusieurs options en les combinant avec l'opérateur OR).
 * @param int      &$errorcode    Si la fonction échoue, le paramètre optionnel errorcode sera défini à la valeur de la variable système errno.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msg_receiveThis'))
{
    function msg_receiveThis($queue, $desiredmsgtype, &$msgtype, $maxsize, &$message, $unserialize = true, $flags = 0, &$errorcode = NULL)
    {
		$queue = is_resource($queue) ? $queue : NULL;
		$desiredmsgtype = (int)$desiredmsgtype;
		$msgtype = (int)$msgtype;
		$maxsize = (int)$maxsize;
		$message = ($message);
		$unserialize = (bool)$unserialize;
		$flags = (int)$flags;
		$errorcode = (int)$errorcode;

		return msg_receive($queue, $desiredmsgtype, $msgtype, $maxsize, $message, $unserialize, $flags, $errorcode);
    }
}

/**
 * msg_remove_queueThis
 *
 * Détruit une file de messages.
 *
 * @link http://php.net/manual/fr/function.msg-remove-queue.php Documentation pour msg_remove_queue.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $queue    Une ressource, représentant la file des messages
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msg_remove_queueThis'))
{
    function msg_remove_queueThis($queue)
    {
		$queue = is_resource($queue) ? $queue : NULL;

		return msg_remove_queue($queue);
    }
}

/**
 * msg_sendThis
 *
 * Envoie un message dans une file.
 *
 * @link http://php.net/manual/fr/function.msg-send.php Documentation pour msg_send.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $queue
 * @param int      $msgtype
 * @param mixed     $message
 * @param bool     $serialize    Le paramètre optionnel serialize contrôle la méthode d'envoi du message message. serialize vaut par défaut TRUE ce qui signifie que le message message sera linéarisé en utilisant le même mécanisme que celui qui est utilisé par les sessions, avant d'être envoyé à la file de message. Cela permet d'envoyer des tableaux et des objets complexes à d'autres scripts PHP, ou bien, si vous utilisez l'extension WDDX, d'échanger des messages avec des clients compatibles WDDX.
 * @param bool     $blocking    Si le message est trop grand pour être stocké par la file, votre script attendra jusqu'à ce qu'un autre processus lise dans la file un message, et libère assez de place pour votre message. C'est le mode bloquant : vous pouvez éviter ce mode en utilisant le paramètre blocking avec la valeur FALSE : dans ce cas, msg_send() retournera immédiatement FALSE si le message est trop gros pour la file. Il assignera alors au paramètre errorcode la valeur de MSG_EAGAIN, indiquant que vous devriez essayer d'envoyer à nouveau votre message, un peu plus tard.
 * @param int      &$errorcode
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msg_sendThis'))
{
    function msg_sendThis($queue, $msgtype, $message, $serialize = true, $blocking = true, &$errorcode = NULL)
    {
		$queue = is_resource($queue) ? $queue : NULL;
		$msgtype = (int)$msgtype;
		$message = ($message);
		$serialize = (bool)$serialize;
		$blocking = (bool)$blocking;
		$errorcode = (int)$errorcode;

		return msg_send($queue, $msgtype, $message, $serialize, $blocking, $errorcode);
    }
}

/**
 * msg_set_queueThis
 *
 * Modifie des informations dans la file de messages.
 *
 * @link http://php.net/manual/fr/function.msg-set-queue.php Documentation pour msg_set_queue.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $queue    Une ressource, représentant la file des messages
 * @param array    $data    Vous devez spécifier les valeurs désirées en définissant la valeur des clés que vous voulez récupérer dans le tableau data.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msg_set_queueThis'))
{
    function msg_set_queueThis($queue, $data)
    {
		$queue = is_resource($queue) ? $queue : NULL;
		$data = (array)$data;

		return msg_set_queue($queue, $data);
    }
}

/**
 * msg_stat_queueThis
 *
 * Retourne des informations sur la file de messages.
 *
 * @link http://php.net/manual/fr/function.msg-stat-queue.php Documentation pour msg_stat_queue.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $queue    Une ressource, représentant la file des messages
 *
 * @return array	La valeur retournée par la fonction est un tableau dont les index et valeurs sont les suivants :
 *
 */
if(!function_exists('msg_stat_queueThis'))
{
    function msg_stat_queueThis($queue)
    {
		$queue = is_resource($queue) ? $queue : NULL;

		return msg_stat_queue($queue);
    }
}

/**
 * msql_affected_rowsThis
 *
 * Retourne le nombre de lignes affectées.
 *
 * @link http://php.net/manual/fr/function.msql-affected-rows.php Documentation pour msql_affected_rows.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 *
 * @return int	Retourne le nombre de lignes affectées ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_affected_rowsThis'))
{
    function msql_affected_rowsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return msql_affected_rows($result);
    }
}

/**
 * msql_closeThis
 *
 * Ferme une connexion mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-close.php Documentation pour msql_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_closeThis'))
{
    function msql_closeThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_close($link_identifier);
    }
}

/**
 * msql_connectThis
 *
 * Ouvre une connexion mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-connect.php Documentation pour msql_connect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    Le nom d'hôte peut aussi inclure un numéro de port, e.g. hostname,port. Si ce paramètre n'est pas spécifié, la connexion est établie sous la forme d'un socket de domaine Unix, qui est bien plus efficace qu'un socket TCP vers localhost.
 *
 * @return resource	Retourne un identifiant de connexion positif mSQL en cas de succès, FALSE sinon.
 *
 */
if(!function_exists('msql_connectThis'))
{
    function msql_connectThis($hostname = NULL)
    {
		$hostname = (string)$hostname;

		return msql_connect($hostname);
    }
}

/**
 * msql_create_dbThis
 *
 * Crée une base de données mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-create-db.php Documentation pour msql_create_db.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données mSQL.
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_create_dbThis'))
{
    function msql_create_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_create_db($database_name, $link_identifier);
    }
}

/**
 * msql_data_seekThis
 *
 * Déplace le pointeur interne mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-data-seek.php Documentation pour msql_data_seek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $row_number    Le numéro de ligne désiré.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_data_seekThis'))
{
    function msql_data_seekThis($result, $row_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$row_number = (int)$row_number;

		return msql_data_seek($result, $row_number);
    }
}

/**
 * msql_db_queryThis
 *
 * Soumet une requête mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-db-query.php Documentation pour msql_db_query.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database    Le nom de la base de données mSQL.
 * @param string   $query    La requête SQL.
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return resource	Retourne un identifiant de requête mSQL positif au résultat de la requête ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_db_queryThis'))
{
    function msql_db_queryThis($database, $query, $link_identifier = NULL)
    {
		$database = (string)$database;
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_db_query($database, $query, $link_identifier);
    }
}

/**
 * msql_drop_dbThis
 *
 * Efface une base de données mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-drop-db.php Documentation pour msql_drop_db.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données.
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_drop_dbThis'))
{
    function msql_drop_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_drop_db($database_name, $link_identifier);
    }
}

/**
 * msql_errorThis
 *
 * Retourne le message d'erreur mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-error.php Documentation pour msql_error.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Le dernier message d'erreur ou une chaîne vide s'il n'y en a aucune.
 *
 */
if(!function_exists('msql_errorThis'))
{
    function msql_errorThis()
    {
		return msql_error();
    }
}

/**
 * msql_fetch_arrayThis
 *
 * Lit une ligne sous la forme d'un tableau.
 *
 * @link http://php.net/manual/fr/function.msql-fetch-array.php Documentation pour msql_fetch_array.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $result_type    Une constante qui peut prendre les valeurs suivantes : MSQL_ASSOC, MSQL_NUM, et MSQL_BOTH où MSQL_BOTH est la valeur par défaut.
 *
 * @return array	Retourne un tableau qui correspond à la ligne récupérée, ou FALSE s'il n'y a plus de lignes.
 *
 */
if(!function_exists('msql_fetch_arrayThis'))
{
    function msql_fetch_arrayThis($result, $result_type = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$result_type = (int)$result_type;

		return msql_fetch_array($result, $result_type);
    }
}

/**
 * msql_fetch_fieldThis
 *
 * Lit la valeur d'un champ mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-fetch-field.php Documentation pour msql_fetch_field.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $field_offset    La position du champ. Si non spécifié, le prochain champ qui n'a pas encore été récupéré par la fonction msql_fetch_field() sera récupéré.
 *
 * @return object	Retourne un objet contenant les informations du champs. Les propriétés de l'objet sont :
 *
 */
if(!function_exists('msql_fetch_fieldThis'))
{
    function msql_fetch_fieldThis($result, $field_offset = 0)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return msql_fetch_field($result, $field_offset);
    }
}

/**
 * msql_fetch_objectThis
 *
 * Lit une ligne sous la forme d'un objet.
 *
 * @link http://php.net/manual/fr/function.msql-fetch-object.php Documentation pour msql_fetch_object.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 *
 * @return object	Retourne un objet dont les propriétés correspondent à la ligne récupérée, ou FALSE si'il n'y a plus de lignes.
 *
 */
if(!function_exists('msql_fetch_objectThis'))
{
    function msql_fetch_objectThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return msql_fetch_object($result);
    }
}

/**
 * msql_fetch_rowThis
 *
 * Retourne une ligne sous la forme d'un tableau.
 *
 * @link http://php.net/manual/fr/function.msql-fetch-row.php Documentation pour msql_fetch_row.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 *
 * @return array	Retourne un tableau qui correspond à la ligne lue, ou FALSE s'il n'y a plus de lignes de disponible.
 *
 */
if(!function_exists('msql_fetch_rowThis'))
{
    function msql_fetch_rowThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return msql_fetch_row($result);
    }
}

/**
 * msql_field_flagsThis
 *
 * Lit les options de champ msql.
 *
 * @link http://php.net/manual/fr/function.msql-field-flags.php Documentation pour msql_field_flags.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $field_offset    La position numérique du champ. La position field_offset commence à 1.
 *
 * @return string	Retourne une chaîne contenant les options du champ correspondant à la clé spécifiée. Cela peut être : primary key not null, not null, primary key, unique not null ou unique.
 *
 */
if(!function_exists('msql_field_flagsThis'))
{
    function msql_field_flagsThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return msql_field_flags($result, $field_offset);
    }
}

/**
 * msql_field_lenThis
 *
 * Lit la taille du champ mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-field-len.php Documentation pour msql_field_len.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $field_offset    La position numérique du champ. La position field_offset commence à 1.
 *
 * @return int	Retourne la taille du champ spécifié ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('msql_field_lenThis'))
{
    function msql_field_lenThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return msql_field_len($result, $field_offset);
    }
}

/**
 * msql_field_nameThis
 *
 * Lit le nom du champ msql.
 *
 * @link http://php.net/manual/fr/function.msql-field-name.php Documentation pour msql_field_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $field_offset    La position numérique du champ. La position field_offset commence à 1.
 *
 * @return string	Le nom du champ ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_field_nameThis'))
{
    function msql_field_nameThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return msql_field_name($result, $field_offset);
    }
}

/**
 * msql_field_seekThis
 *
 * Fixe l'offset d'un champ mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-field-seek.php Documentation pour msql_field_seek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $field_offset    La position numérique du champ. La position field_offset commence à 1.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_field_seekThis'))
{
    function msql_field_seekThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return msql_field_seek($result, $field_offset);
    }
}

/**
 * msql_field_tableThis
 *
 * Lit le nom de la table du champ msql.
 *
 * @link http://php.net/manual/fr/function.msql-field-table.php Documentation pour msql_field_table.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $field_offset    La position numérique du champ. La position field_offset commence à 1.
 *
 * @return int	Le nom de la table en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_field_tableThis'))
{
    function msql_field_tableThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return msql_field_table($result, $field_offset);
    }
}

/**
 * msql_field_typeThis
 *
 * Lit le type de champ mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-field-type.php Documentation pour msql_field_type.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $field_offset    La position numérique du champ. La position field_offset commence à 1.
 *
 * @return string	Le type du champ. Une valeur parmi int, char, real, ident, null ou unknown. Cette fonction retourne FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_field_typeThis'))
{
    function msql_field_typeThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return msql_field_type($result, $field_offset);
    }
}

/**
 * msql_free_resultThis
 *
 * Libère le résultat de la mémoire.
 *
 * @link http://php.net/manual/fr/function.msql-free-result.php Documentation pour msql_free_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_free_resultThis'))
{
    function msql_free_resultThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return msql_free_result($result);
    }
}

/**
 * msql_list_dbsThis
 *
 * Liste les bases de données mSQL sur un serveur.
 *
 * @link http://php.net/manual/fr/function.msql-list-dbs.php Documentation pour msql_list_dbs.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return resource	Retourne un jeu de résultats qui peut être lu par n'importe quelle fonction capable de parcourir un tel résultat, comme msql_fetch_array(). Si une erreur survient, cette fonction retournera FALSE.
 *
 */
if(!function_exists('msql_list_dbsThis'))
{
    function msql_list_dbsThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_list_dbs($link_identifier);
    }
}

/**
 * msql_list_fieldsThis
 *
 * Liste les champs d'une table.
 *
 * @link http://php.net/manual/fr/function.msql-list-fields.php Documentation pour msql_list_fields.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database    Le nom de la base de données.
 * @param string   $tablename    Le nom de la table.
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return resource	Retourne un jeu de résultats pouvant être parcouru par n'importe quelle fonction capable, comme msql_fetch_array(). Si une erreur survient, cette fonction retournera FALSE.
 *
 */
if(!function_exists('msql_list_fieldsThis'))
{
    function msql_list_fieldsThis($database, $tablename, $link_identifier = NULL)
    {
		$database = (string)$database;
		$tablename = (string)$tablename;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_list_fields($database, $tablename, $link_identifier);
    }
}

/**
 * msql_list_tablesThis
 *
 * Liste les tables mSQL sur une base de données.
 *
 * @link http://php.net/manual/fr/function.msql-list-tables.php Documentation pour msql_list_tables.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database    Le nom de la base de données.
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return resource	Retourne un jeu de résultats pouvant être parcouru par n'importe quelle fonction capable, comme msql_fetch_array(). Si une erreur survient, cette fonction retournera FALSE.
 *
 */
if(!function_exists('msql_list_tablesThis'))
{
    function msql_list_tablesThis($database, $link_identifier = NULL)
    {
		$database = (string)$database;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_list_tables($database, $link_identifier);
    }
}

/**
 * msql_num_fieldsThis
 *
 * Retourne le nombre de champs dans un résultat.
 *
 * @link http://php.net/manual/fr/function.msql-num-fields.php Documentation pour msql_num_fields.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 *
 * @return int	Retourne le nombre de champs dans le jeu de résultats.
 *
 */
if(!function_exists('msql_num_fieldsThis'))
{
    function msql_num_fieldsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return msql_num_fields($result);
    }
}

/**
 * msql_num_rowsThis
 *
 * Retourne le nombre de lignes dans un résultat.
 *
 * @link http://php.net/manual/fr/function.msql-num-rows.php Documentation pour msql_num_rows.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $query_identifier    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 *
 * @return int	Retourne le nombre de lignes dans le jeu de résultats.
 *
 */
if(!function_exists('msql_num_rowsThis'))
{
    function msql_num_rowsThis($query_identifier)
    {
		$query_identifier = is_resource($query_identifier) ? $query_identifier : NULL;

		return msql_num_rows($query_identifier);
    }
}

/**
 * msql_pconnectThis
 *
 * Ouvre une connexion persistante à un serveur mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-pconnect.php Documentation pour msql_pconnect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    Le nom de l'hôte peut également inclure un numéro de port. e.g. hostname,port. Si non spécifié, la connexion est établie sous la forme d'un socket Unix, ce qui est plus efficace d'une connexion via un socket TCP.
 *
 * @return resource	Retourne un identifiant de connexion mSQL en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_pconnectThis'))
{
    function msql_pconnectThis($hostname = NULL)
    {
		$hostname = (string)$hostname;

		return msql_pconnect($hostname);
    }
}

/**
 * msql_queryThis
 *
 * Envoie une requête mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-query.php Documentation pour msql_query.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $query    La requête SQL.
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return resource	Retourne un identifiant positif de connexion mSQL en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_queryThis'))
{
    function msql_queryThis($query, $link_identifier = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_query($query, $link_identifier);
    }
}

/**
 * msql_resultThis
 *
 * Retourne les données de résultat.
 *
 * @link http://php.net/manual/fr/function.msql-result.php Documentation pour msql_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction msql_query().
 * @param int      $row    L'offset de la ligne.
 * @param mixed     $field    Peut être l'offset du champ, ou le nom du champ, le nom de la table, suivi du nom du champ (tablename.fieldname.). Si le nom de la colonne est un alias ("select foo as bar from ..."), utilisez cet alias au lieu du nom de la colonne.
 *
 * @return string	Retourne le contenu de la cellule se trouvant à la ligne et à la position spécifiées dans le jeu de résultats mSQL.
 *
 */
if(!function_exists('msql_resultThis'))
{
    function msql_resultThis($result, $row, $field = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$field = ($field);
		return msql_result($result, $row, $field);
    }
}

/**
 * msql_select_dbThis
 *
 * Sélectionne une base de données mSQL.
 *
 * @link http://php.net/manual/fr/function.msql-select-db.php Documentation pour msql_select_db.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données.
 * @param resource $link_identifier    La connexion mSQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction msql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction msql_connect() avait été appelée, et l'utilise.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('msql_select_dbThis'))
{
    function msql_select_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return msql_select_db($database_name, $link_identifier);
    }
}

/**
 * mt_getrandmaxThis
 *
 * La plus grande valeur aléatoire possible.
 *
 * @link http://php.net/manual/fr/function.mt-getrandmax.php Documentation pour mt_getrandmax.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne la plus grande valeur aléatoire possible retournée par la fonction mt_rand()
 *
 */
if(!function_exists('mt_getrandmaxThis'))
{
    function mt_getrandmaxThis()
    {
		return mt_getrandmax();
    }
}

/**
 * mt_randThis
 *
 * Génère une meilleure valeur aléatoire.
 *
 * @link http://php.net/manual/fr/function.mt-rand.php Documentation pour mt_rand.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Un entier aléatoire compris entre min (ou 0) et max (ou mt_getrandmax(), inclusif), ou FALSE si le paramètre max est inférieur à min.
 *
 */
if(!function_exists('mt_randThis'))
{
    function mt_randThis()
    {
		return mt_rand();
    }
}

/**
 * mt_srandThis
 *
 * Initialise une meilleure valeur aléatoire.
 *
 * @link http://php.net/manual/fr/function.mt-srand.php Documentation pour mt_srand.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $seed    Une valeur d'initialisation aléatoire
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('mt_srandThis'))
{
    function mt_srandThis($seed = NULL)
    {
		$seed = (int)$seed;

		return mt_srand($seed);
    }
}

/**
 * mysql_affected_rowsThis
 *
 * Retourne le nombre de lignes affectées lors de la dernière opération MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-affected-rows.php Documentation pour mysql_affected_rows.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return int	Retourne le nombre de lignes affectées en cas de succès et -1 si la dernière requête a échoué.
 *
 */
if(!function_exists('mysql_affected_rowsThis'))
{
    function mysql_affected_rowsThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_affected_rows($link_identifier);
    }
}

/**
 * mysql_client_encodingThis
 *
 * Retourne le nom du jeu de caractères utilisé par le client MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-client-encoding.php Documentation pour mysql_client_encoding.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return string	Retourne le nom du jeu de caractères par défaut pour la connexion courante.
 *
 */
if(!function_exists('mysql_client_encodingThis'))
{
    function mysql_client_encodingThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_client_encoding($link_identifier);
    }
}

/**
 * mysql_closeThis
 *
 * Ferme la connexion MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-close.php Documentation pour mysql_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. Si l'identifiant du lien n'est pas spécifié, le dernier lien ouvert avec la fonction mysql_connect() sera utilisée. Si aucune connexion n'est trouvée ou n'est établie, une alerte de niveau E_WARNING sera générée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_closeThis'))
{
    function mysql_closeThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_close($link_identifier);
    }
}

/**
 * mysql_connectThis
 *
 * Ouvre une connexion à un serveur MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-connect.php Documentation pour mysql_connect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $server    Le serveur MySQL. Il peut aussi inclure le numéro de port. C'est-à-dire "hostname:port" ou le chemin vers le socket local, c'est-à-dire ":/path/to/socket" pour localhost. Si la directive PHP mysql.default_host n'est pas définie (défaut), alors la valeur par défaut est "localhost:3306". En safe mode SQL, ce paramètre est ignoré et la valeur "localhost:3306" est toujours utilisée.
 * @param string   $username    Le nom d'utilisateur. La valeur par défaut est définie par l'option mysql.default_user. En safe mode SQL, ce paramètre est ignoré et le nom de l'utilisateur propriétaire du processus serveur est utilisé.
 * @param string   $password    Le mot de passe. La valeur par défaut est définie par l'option mysql.default_password. En safe mode SQL, ce paramètre est ignoré et un mot de passe vide est utilisé.
 * @param bool     $new_link    Si un deuxième appel est fait à mysql_connect() avec les mêmes arguments, aucune nouvelle connexion ne sera établie, mais plutôt, l'identifiant de la connexion de la connexion déjà ouverte sera retourné. Le paramètre new_link modifie ce comportement et permet à mysql_connect() de toujours ouvrir une nouvelle connexion, même si mysql_connect() a été appelée avant avec les mêmes paramètres. En safe mode SQL, ce paramètre est ignoré.
 * @param int      $client_flags    Le paramètre client_flags peut être une combinaison des constantes suivantes : 28 (active le gestionnaire LOAD DATA LOCAL), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE ou MYSQL_CLIENT_INTERACTIVE. Lisez la section à propos de Constantes client MySQL pour plus d'informations. En safe mode SQL, ce paramètre est ignoré.
 *
 * @return resource	Retourne l'identifiant de connexion MySQL en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_connectThis'))
{
    function mysql_connectThis($server = NULL, $username = NULL, $password = NULL, $new_link = false, $client_flags = 0)
    {
		$server = empty($server) ? (string)ini_get("mysql.default_host") : (string)$server;
		$username = empty($username) ? (string)ini_get("mysql.default_user") : (string)$username;
		$password = empty($password) ? (string)ini_get("mysql.default_password") : (string)$password;
		$new_link = (bool)$new_link;
		$client_flags = (int)$client_flags;

		return mysql_connect($server, $username, $password, $new_link, $client_flags);
    }
}

/**
 * mysql_create_dbThis
 *
 * Crée une base de données MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-create-db.php Documentation pour mysql_create_db.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données à être créée.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_create_dbThis'))
{
    function mysql_create_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_create_db($database_name, $link_identifier);
    }
}

/**
 * mysql_data_seekThis
 *
 * Déplace le pointeur interne de résultat MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-data-seek.php Documentation pour mysql_data_seek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $row_number    La position de la ligne désirée pour le nouveau pointeur de résultats.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_data_seekThis'))
{
    function mysql_data_seekThis($result, $row_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$row_number = (int)$row_number;

		return mysql_data_seek($result, $row_number);
    }
}

/**
 * mysql_db_nameThis
 *
 * Récupère le nom de base de données à l'appel de mysql_list_dbs().
 *
 * @link http://php.net/manual/fr/function.mysql-db-name.php Documentation pour mysql_db_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    Le pointeur de résultat d'un appel de mysql_list_dbs().
 * @param int      $row    L'index à l'intérieur du jeu de résultats.
 * @param mixed     $field    Le nom du champ.
 *
 * @return string	Retourne le nom de base de données en cas de succès et FALSE en cas d'échec. Si FALSE est retourné, utilisez mysql_error() pour déterminer la nature de l'erreur.
 *
 */
if(!function_exists('mysql_db_nameThis'))
{
    function mysql_db_nameThis($result, $row, $field = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$field = ($field);
		return mysql_db_name($result, $row, $field);
    }
}

/**
 * mysql_db_queryThis
 *
 * Sélectionne une base de données et y exécute une requête.
 *
 * @link http://php.net/manual/fr/function.mysql-db-query.php Documentation pour mysql_db_query.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database    Le nom de la base de données qui sera sélectionnée.
 * @param string   $query    La requête MySQL. Les données contenues dans la requête doivent être proprement échappées.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return resource	Retourne une ressource de résultat positive MySQL à partir de la requête ou FALSE en cas d'erreur. Cette fonction retourne aussi TRUE/FALSE pour les requêtes INSERT/UPDATE/DELETE pour indiquer une réussite ou un échec.
 *
 */
if(!function_exists('mysql_db_queryThis'))
{
    function mysql_db_queryThis($database, $query, $link_identifier = NULL)
    {
		$database = (string)$database;
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_db_query($database, $query, $link_identifier);
    }
}

/**
 * mysql_drop_dbThis
 *
 * Efface une base de données MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-drop-db.php Documentation pour mysql_drop_db.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données à effacer.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_drop_dbThis'))
{
    function mysql_drop_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_drop_db($database_name, $link_identifier);
    }
}

/**
 * mysql_errnoThis
 *
 * Retourne le numéro d'erreur de la dernière commande MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-errno.php Documentation pour mysql_errno.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return int	Retourne le numéro de l'erreur depuis la dernière fonction MySQL, ou 0 (zéro) si aucune erreur ne survient.
 *
 */
if(!function_exists('mysql_errnoThis'))
{
    function mysql_errnoThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_errno($link_identifier);
    }
}

/**
 * mysql_errorThis
 *
 * Retourne le texte associé avec l'erreur générée lors de la dernière requête.
 *
 * @link http://php.net/manual/fr/function.mysql-error.php Documentation pour mysql_error.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return string	Retourne le texte de l'erreur de la dernière fonction MySQL, ou '' (chaîne vide) si aucune erreur survient.
 *
 */
if(!function_exists('mysql_errorThis'))
{
    function mysql_errorThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_error($link_identifier);
    }
}

/**
 * mysql_escape_stringThis
 *
 * Protège les caractères spéciaux SQL.
 *
 * @link http://php.net/manual/fr/function.mysql-escape-string.php Documentation pour mysql_escape_string.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param string   $unescaped_string    La chaîne qui doit être protégée.
 *
 * @return string	Retourne la chaîne protégée.
 *
 */
if(!function_exists('mysql_escape_stringThis'))
{
    function mysql_escape_stringThis($unescaped_string)
    {
		$unescaped_string = (string)$unescaped_string;

		return mysql_escape_string($unescaped_string);
    }
}

/**
 * mysql_fetch_arrayThis
 *
 * Retourne une ligne de résultat MySQL sous la forme d'un tableau associatif, d'un tableau indexé, ou les deux.
 *
 * @link http://php.net/manual/fr/function.mysql-fetch-array.php Documentation pour mysql_fetch_array.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $result_type    Le type de tableau à récupérer. C'est une constante qui peut prendre les valeurs suivantes : MYSQL_ASSOC, MYSQL_NUM, et MYSQL_BOTH.
 *
 * @return array	Retourne un tableau de chaînes qui correspond à la ligne récupérée ou FALSE s'il n'y a plus de lignes. Le type de tableau retourné dépend de la définition du paramètre result_type. En utilisant MYSQL_BOTH (défaut), vous récupérerez un tableau contenant des indices associatifs et numériques. En utilisant MYSQL_ASSOC, vous ne récupérerez que les indices associatifs (comme le fonctionnement de la fonction mysql_fetch_assoc()), en utilisant MYSQL_NUM, vous ne récupérerez que les indices numériques (comme le fonctionnement de la fonction mysql_fetch_row()).
 *
 */
if(!function_exists('mysql_fetch_arrayThis'))
{
    function mysql_fetch_arrayThis($result, $result_type = MYSQL_BOTH)
    {
		$result = is_resource($result) ? $result : NULL;
		$result_type = (int)$result_type;

		return mysql_fetch_array($result, $result_type);
    }
}

/**
 * mysql_fetch_assocThis
 *
 * Lit une ligne de résultat MySQL dans un tableau associatif.
 *
 * @link http://php.net/manual/fr/function.mysql-fetch-assoc.php Documentation pour mysql_fetch_assoc.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 *
 * @return array	Retourne un tableau associatif de chaînes qui contient la ligne lue dans le résultat result, ou bien FALSE s'il ne reste plus de lignes à lire.
 *
 */
if(!function_exists('mysql_fetch_assocThis'))
{
    function mysql_fetch_assocThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return mysql_fetch_assoc($result);
    }
}

/**
 * mysql_fetch_fieldThis
 *
 * Retourne les données enregistrées dans une colonne MySQL sous forme d'objet.
 *
 * @link http://php.net/manual/fr/function.mysql-fetch-field.php Documentation pour mysql_fetch_field.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $field_offset    La position numérique du champ. Si la position du champ n'est pas spécifiée, le champ suivant qui n'a pas encore été récupéré par cette fonction est alors récupéré. field_offset commence à 0.
 *
 * @return object	Retourne un objet contenant les informations sur les champs. Les propriétés de l'objet sont les suivantes :
 *
 */
if(!function_exists('mysql_fetch_fieldThis'))
{
    function mysql_fetch_fieldThis($result, $field_offset = 0)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return mysql_fetch_field($result, $field_offset);
    }
}

/**
 * mysql_fetch_lengthsThis
 *
 * Retourne la taille de chaque colonne d'une ligne de résultat MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-fetch-lengths.php Documentation pour mysql_fetch_lengths.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 *
 * @return array	Un array de taille, en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_fetch_lengthsThis'))
{
    function mysql_fetch_lengthsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return mysql_fetch_lengths($result);
    }
}

/**
 * mysql_fetch_objectThis
 *
 * Retourne une ligne de résultat MySQL sous la forme d'un objet.
 *
 * @link http://php.net/manual/fr/function.mysql-fetch-object.php Documentation pour mysql_fetch_object.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param string   $class_name    Le nom de la classe à instancier, définit les propriétés et retourne. SI ce paramètre n'est pas spécifié, un objet stdClass sera retourné.
 * @param array    $params    Un tableau de paramètres à passer au constructeur pour les objets class_name.
 *
 * @return object	Retourne un objet avec les propriétés qui correspondent à la ligne récupérée, ou FALSE s'il n'y a plus de lignes.
 *
 */
if(!function_exists('mysql_fetch_objectThis'))
{
    function mysql_fetch_objectThis($result, $class_name = NULL, $params = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$class_name = (string)$class_name;
		$params = (array)$params;

		return mysql_fetch_object($result, $class_name, $params);
    }
}

/**
 * mysql_fetch_rowThis
 *
 * Retourne une ligne de résultat MySQL sous la forme d'un tableau.
 *
 * @link http://php.net/manual/fr/function.mysql-fetch-row.php Documentation pour mysql_fetch_row.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 *
 * @return array	Retourne un tableau numérique de chaînes qui correspond à la ligne récupérée, ou FALSE s'il n'y a plus de lignes.
 *
 */
if(!function_exists('mysql_fetch_rowThis'))
{
    function mysql_fetch_rowThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return mysql_fetch_row($result);
    }
}

/**
 * mysql_field_flagsThis
 *
 * Retourne des détails sur une colonne MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-field-flags.php Documentation pour mysql_field_flags.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $field_offset    La position numérique du champ. field_offset commence à 0. Si field_offset n'existe pas, une alerte E_WARNING sera également générée.
 *
 * @return string	Retourne les sémaphores sous la forme d'une chaîne associés avec le résultat ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_field_flagsThis'))
{
    function mysql_field_flagsThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return mysql_field_flags($result, $field_offset);
    }
}

/**
 * mysql_field_lenThis
 *
 * Retourne la taille d'un champ de résultat MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-field-len.php Documentation pour mysql_field_len.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $field_offset    La position numérique du champ. field_offset commence à 0. Si field_offset n'existe pas, une alerte E_WARNING sera également générée.
 *
 * @return int	La taille de l'index du champ spécifié en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_field_lenThis'))
{
    function mysql_field_lenThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return mysql_field_len($result, $field_offset);
    }
}

/**
 * mysql_field_nameThis
 *
 * Retourne le nom d'une colonne dans un résultat MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-field-name.php Documentation pour mysql_field_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $field_offset    La position numérique du champ. field_offset commence à 0. Si field_offset n'existe pas, une alerte E_WARNING sera également générée.
 *
 * @return string	Le nom du champ de l'index spécifié en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_field_nameThis'))
{
    function mysql_field_nameThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return mysql_field_name($result, $field_offset);
    }
}

/**
 * mysql_field_seekThis
 *
 * Déplace le pointeur de résultat vers une position donnée.
 *
 * @link http://php.net/manual/fr/function.mysql-field-seek.php Documentation pour mysql_field_seek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $field_offset    La position numérique du champ. field_offset commence à 0. Si field_offset n'existe pas, une alerte E_WARNING sera également générée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_field_seekThis'))
{
    function mysql_field_seekThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return mysql_field_seek($result, $field_offset);
    }
}

/**
 * mysql_field_tableThis
 *
 * Retourne le nom de la table MySQL où se trouve une colonne.
 *
 * @link http://php.net/manual/fr/function.mysql-field-table.php Documentation pour mysql_field_table.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $field_offset    La position numérique du champ. field_offset commence à 0. Si field_offset n'existe pas, une alerte E_WARNING sera également générée.
 *
 * @return string	Le nom de la table en cas de succès.
 *
 */
if(!function_exists('mysql_field_tableThis'))
{
    function mysql_field_tableThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return mysql_field_table($result, $field_offset);
    }
}

/**
 * mysql_field_typeThis
 *
 * Retourne le type d'une colonne MySQL spécifique.
 *
 * @link http://php.net/manual/fr/function.mysql-field-type.php Documentation pour mysql_field_type.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $field_offset    La position numérique du champ. field_offset commence à 0. Si field_offset n'existe pas, une alerte E_WARNING sera également générée.
 *
 * @return string	Le type du champ retourné peut être : "int", "real", "string", "blob" ou d'autres, comme détaillé » dans la documentation MySQL.
 *
 */
if(!function_exists('mysql_field_typeThis'))
{
    function mysql_field_typeThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return mysql_field_type($result, $field_offset);
    }
}

/**
 * mysql_free_resultThis
 *
 * Libère le résultat de la mémoire.
 *
 * @link http://php.net/manual/fr/function.mysql-free-result.php Documentation pour mysql_free_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_free_resultThis'))
{
    function mysql_free_resultThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return mysql_free_result($result);
    }
}

/**
 * mysql_get_client_infoThis
 *
 * Lit les informations sur le client MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-get-client-info.php Documentation pour mysql_get_client_info.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 * @return string	La version du client MySQL.
 *
 */
if(!function_exists('mysql_get_client_infoThis'))
{
    function mysql_get_client_infoThis()
    {
		return mysql_get_client_info();
    }
}

/**
 * mysql_get_host_infoThis
 *
 * Lit les informations sur l'hôte MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-get-host-info.php Documentation pour mysql_get_host_info.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return string	Retourne une chaîne décrivant le type de connexion MySQL utilisé pour la connexion ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_get_host_infoThis'))
{
    function mysql_get_host_infoThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_get_host_info($link_identifier);
    }
}

/**
 * mysql_get_proto_infoThis
 *
 * Lit les informations sur le protocole MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-get-proto-info.php Documentation pour mysql_get_proto_info.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return int	Retourne le protocole MySQL en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_get_proto_infoThis'))
{
    function mysql_get_proto_infoThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_get_proto_info($link_identifier);
    }
}

/**
 * mysql_get_server_infoThis
 *
 * Lit les informations sur le serveur MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-get-server-info.php Documentation pour mysql_get_server_info.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return string	Retourne la version du serveur MySQL en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_get_server_infoThis'))
{
    function mysql_get_server_infoThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_get_server_info($link_identifier);
    }
}

/**
 * mysql_infoThis
 *
 * Lit des informations à propos de la dernière requête MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-info.php Documentation pour mysql_info.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return string	Retourne des informations sur une requête en cas de succès, ou FALSE si une erreur survient. Regardez l'exemple ci-dessous pour savoir quelles sortes de requêtes fournissent des informations et avoir un aperçu des informations retournées. Les sortes de requêtes qui ne sont pas listées retournent FALSE.
 *
 */
if(!function_exists('mysql_infoThis'))
{
    function mysql_infoThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_info($link_identifier);
    }
}

/**
 * mysql_insert_idThis
 *
 * Retourne l'identifiant généré par la dernière requête.
 *
 * @link http://php.net/manual/fr/function.mysql-insert-id.php Documentation pour mysql_insert_id.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return int	L'ID généré pour une colonne AUTO_INCREMENT par la dernière requête en cas de succès, 0 si la dernière requête n'a pas généré de valeur AUTO_INCREMENT, ou FALSE si aucune connexion MySQL n'a été établie.
 *
 */
if(!function_exists('mysql_insert_idThis'))
{
    function mysql_insert_idThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_insert_id($link_identifier);
    }
}

/**
 * mysql_list_dbsThis
 *
 * Liste les bases de données disponibles sur le serveur MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-list-dbs.php Documentation pour mysql_list_dbs.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return resource	Retourne une ressource de pointeurs de résultats en cas de succès, ou FALSE si une erreur survient. Utilisez la fonction mysql_tablename() pour parcourir ce résultat ou tout autre fonction pour les résultats de table, comme la fonction mysql_fetch_array().
 *
 */
if(!function_exists('mysql_list_dbsThis'))
{
    function mysql_list_dbsThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_list_dbs($link_identifier);
    }
}

/**
 * mysql_list_fieldsThis
 *
 * Liste les champs d'une table MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-list-fields.php Documentation pour mysql_list_fields.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données qui va être interrogée.
 * @param string   $table_name    Le nom de la table qui va être interrogée.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return resource	Une ressource de pointeurs de résultats en cas de succès, ou FALSE si une erreur survint.
 *
 */
if(!function_exists('mysql_list_fieldsThis'))
{
    function mysql_list_fieldsThis($database_name, $table_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$table_name = (string)$table_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_list_fields($database_name, $table_name, $link_identifier);
    }
}

/**
 * mysql_list_processesThis
 *
 * Liste les processus MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-list-processes.php Documentation pour mysql_list_processes.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return resource	Une ressource de pointeurs de résultats en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_list_processesThis'))
{
    function mysql_list_processesThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_list_processes($link_identifier);
    }
}

/**
 * mysql_list_tablesThis
 *
 * Liste les tables d'une base de données MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-list-tables.php Documentation pour mysql_list_tables.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database    Le nom de la base de données
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return resource	Une ressource de pointeurs de résultats en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_list_tablesThis'))
{
    function mysql_list_tablesThis($database, $link_identifier = NULL)
    {
		$database = (string)$database;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_list_tables($database, $link_identifier);
    }
}

/**
 * mysql_num_fieldsThis
 *
 * Retourne le nombre de champs d'un résultat MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-num-fields.php Documentation pour mysql_num_fields.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 *
 * @return int	Retourne le nombre de champs d'un jeu de résultat en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_num_fieldsThis'))
{
    function mysql_num_fieldsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return mysql_num_fields($result);
    }
}

/**
 * mysql_num_rowsThis
 *
 * Retourne le nombre de lignes d'un résultat MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-num-rows.php Documentation pour mysql_num_rows.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 *
 * @return int	Le nombre de lignes dans un jeu de résultats en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_num_rowsThis'))
{
    function mysql_num_rowsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return mysql_num_rows($result);
    }
}

/**
 * mysql_pconnectThis
 *
 * Ouvre une connexion persistante à un serveur MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-pconnect.php Documentation pour mysql_pconnect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $server    Le serveur MySQL. Il peut également comprendre un numéro de port, e.g. "hostname:port" ou un chemin vers un socket local e.g. ":/path/to/socket". Si la directive PHP mysql.default_host n'est pas définie (défaut), alors, la valeur par défaut est "localhost:3306".
 * @param string   $username    Le nom de l'utilisateur. La valeur par défaut est l'utilisateur faisant fonctionner le processus serveur courant.
 * @param string   $password    Le mot de passe. La valeur par défaut est un mot de passe vide.
 * @param int      $client_flags    Le paramètre client_flags peut être une compilation des constantes suivantes : 28 (active le gestionnaire LOAD DATA LOCAL), MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE ou MYSQL_CLIENT_INTERACTIVE.
 *
 * @return resource	Retourne un identifiant de lien persistant MySQL en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_pconnectThis'))
{
    function mysql_pconnectThis($server = NULL, $username = NULL, $password = NULL, $client_flags = 0)
    {
		$server = empty($server) ? (string)ini_get("mysql.default_host") : (string)$server;
		$username = empty($username) ? (string)ini_get("mysql.default_user") : (string)$username;
		$password = empty($password) ? (string)ini_get("mysql.default_password") : (string)$password;
		$client_flags = (int)$client_flags;

		return mysql_pconnect($server, $username, $password, $client_flags);
    }
}

/**
 * mysql_pingThis
 *
 * Vérifie la connexion au serveur MySQL, et s'y reconnecte au besoin.
 *
 * @link http://php.net/manual/fr/function.mysql-ping.php Documentation pour mysql_ping.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return bool	Retourne TRUE si la connexion au serveur MySQL fonctionne, FALSE sinon.
 *
 */
if(!function_exists('mysql_pingThis'))
{
    function mysql_pingThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_ping($link_identifier);
    }
}

/**
 * mysql_queryThis
 *
 * Envoie une requête à un serveur MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-query.php Documentation pour mysql_query.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $query    Une requête SQL La chaîne de requête ne doit pas se terminer par un point-virgule. Les données contenues dans la requête doivent être échappées proprement.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return resource	Pour les requêtes du type SELECT, SHOW, DESCRIBE, EXPLAIN et les autres requêtes retournant un jeu de résultats, mysql_query() retournera une ressource en cas de succès, ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('mysql_queryThis'))
{
    function mysql_queryThis($query, $link_identifier = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_query($query, $link_identifier);
    }
}

/**
 * mysql_real_escape_stringThis
 *
 * Protège une commande SQL de la présence de caractères spéciaux.
 *
 * @link http://php.net/manual/fr/function.mysql-real-escape-string.php Documentation pour mysql_real_escape_string.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $unescaped_string    La chaîne à échapper.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return string	Retourne la chaîne échappée, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_real_escape_stringThis'))
{
    function mysql_real_escape_stringThis($unescaped_string, $link_identifier = NULL)
    {
		$unescaped_string = (string)$unescaped_string;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_real_escape_string($unescaped_string, $link_identifier);
    }
}

/**
 * mysql_resultThis
 *
 * Retourne un champ d'un résultat MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-result.php Documentation pour mysql_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat qui vient d'être évaluée. Ce résultat vient de l'appel à la fonction mysql_query().
 * @param int      $row    Le numéro de la ligne à récupérer. Les numéros de lignes commencent à 0.
 * @param mixed     $field    Le nom ou la position du champ à récupérer. Il peut être la position du champ, le nom du champ ou le nom de la table suivi d'un point, suivi du nom du champ (tablename.fieldname). Si un alias a été utilisé pour le nom de la colonne ("selected foo as bar from..."), utilisez plutôt l'alias. Si ce paramètre n'est pas défini, le premier champ sera récupéré.
 *
 * @return string	Le contenu d'un champ depuis un jeu de résultats MySQL en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_resultThis'))
{
    function mysql_resultThis($result, $row, $field = 0)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$field = ($field);
		return mysql_result($result, $row, $field);
    }
}

/**
 * mysql_select_dbThis
 *
 * Sélectionne une base de données MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-select-db.php Documentation pour mysql_select_db.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name    Le nom de la base de données à sélectionner.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_select_dbThis'))
{
    function mysql_select_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_select_db($database_name, $link_identifier);
    }
}

/**
 * mysql_set_charsetThis
 *
 * Définit le jeu de caractères du client MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-set-charset.php Documentation pour mysql_set_charset.
 *
 * @version PHP 5 >= 5.2.3
 *
 * @param string   $charset    Un nom de jeu de caractères valide.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_set_charsetThis'))
{
    function mysql_set_charsetThis($charset, $link_identifier = NULL)
    {
		$charset = (string)$charset;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_set_charset($charset, $link_identifier);
    }
}

/**
 * mysql_statThis
 *
 * Retourne le statut courant du serveur MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-stat.php Documentation pour mysql_stat.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return string	Retourne une chaîne contenant le statut de durée de fonctionnement, les threads, les requêtes, les tables ouvertes et sur disque, et le nombre de requêtes par seconde. Pour une liste complète des autres variables de statuts, vous devez utiliser la commande SQL SHOW STATUS. Si link_identifier est invalide, NULL est retourné.
 *
 */
if(!function_exists('mysql_statThis'))
{
    function mysql_statThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_stat($link_identifier);
    }
}

/**
 * mysql_tablenameThis
 *
 * Lit le nom de la table qui contient un champ.
 *
 * @link http://php.net/manual/fr/function.mysql-tablename.php Documentation pour mysql_tablename.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    Un pointeur de résultats retourné par la fonction mysql_list_tables().
 * @param int      $i    L'index (numéro ligne/table)
 *
 * @return string	Le nom de la table en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_tablenameThis'))
{
    function mysql_tablenameThis($result, $i)
    {
		$result = is_resource($result) ? $result : NULL;
		$i = (int)$i;

		return mysql_tablename($result, $i);
    }
}

/**
 * mysql_thread_idThis
 *
 * Retourne l'identifiant du thread MySQL courant.
 *
 * @link http://php.net/manual/fr/function.mysql-thread-id.php Documentation pour mysql_thread_id.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return int	L'identifiant du thread en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_thread_idThis'))
{
    function mysql_thread_idThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_thread_id($link_identifier);
    }
}

/**
 * mysql_unbuffered_queryThis
 *
 * Exécute une requête SQL sans mobiliser les résultats MySQL.
 *
 * @link http://php.net/manual/fr/function.mysql-unbuffered-query.php Documentation pour mysql_unbuffered_query.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $query    La requête SQL à exécuter Les données de la requête doivent être proprement échappées.
 * @param resource $link_identifier    La connexion MySQL. S'il n'est pas spécifié, la dernière connexion ouverte avec la fonction mysql_connect() sera utilisée. Si une telle connexion n'est pas trouvée, la fonction tentera d'ouvrir une connexion, comme si la fonction mysql_connect() avait été appelée sans argument. Si aucune connexion n'est trouvée ou établie, une alerte E_WARNING est générée.
 *
 * @return resource	Pour les requêtes SELECT, SHOW, DESCRIBE ou EXPLAIN, mysql_unbuffered_query() retourne une ressource en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('mysql_unbuffered_queryThis'))
{
    function mysql_unbuffered_queryThis($query, $link_identifier = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return mysql_unbuffered_query($query, $link_identifier);
    }
}

/**
 * mysqli_disable_rpl_parseThis
 *
 * Désactive l'analyseur RPL.
 *
 * @link http://php.net/manual/fr/function.mysqli-disable-rpl-parse.php Documentation pour mysqli_disable_rpl_parse.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 *
 */
if(!function_exists('mysqli_disable_rpl_parseThis'))
{
    function mysqli_disable_rpl_parseThis($link)
    {
		$link = is_resource($link) ? $link : NULL;

		return mysqli_disable_rpl_parse($link);
    }
}

/**
 * mysqli_enable_reads_from_masterThis
 *
 * Active la lecture depuis le maître.
 *
 * @link http://php.net/manual/fr/function.mysqli-enable-reads-from-master.php Documentation pour mysqli_enable_reads_from_master.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 *
 */
if(!function_exists('mysqli_enable_reads_from_masterThis'))
{
    function mysqli_enable_reads_from_masterThis($link)
    {
		$link = is_resource($link) ? $link : NULL;

		return mysqli_enable_reads_from_master($link);
    }
}

/**
 * mysqli_enable_rpl_parseThis
 *
 * Active l'analyseur RPL.
 *
 * @link http://php.net/manual/fr/function.mysqli-enable-rpl-parse.php Documentation pour mysqli_enable_rpl_parse.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 *
 */
if(!function_exists('mysqli_enable_rpl_parseThis'))
{
    function mysqli_enable_rpl_parseThis($link)
    {
		$link = is_resource($link) ? $link : NULL;

		return mysqli_enable_rpl_parse($link);
    }
}

/**
 * mysqli_get_cache_statsThis
 *
 * Retourne les statistiques sur le cache du client Zval.
 *
 * @link http://php.net/manual/fr/function.mysqli-get-cache-stats.php Documentation pour mysqli_get_cache_stats.
 *
 * @version PHP 5 >= 5.3.0
 * @return array	Retourne un tableau avec les statistiques sur le cache du client Zval en cas de succès, FALSE sinon.
 *
 */
if(!function_exists('mysqli_get_cache_statsThis'))
{
    function mysqli_get_cache_statsThis()
    {
		return mysqli_get_cache_stats();
    }
}

/**
 * mysqli_get_client_statsThis
 *
 * Retournes des statistiques sur le client, par processus.
 *
 * @link http://php.net/manual/fr/mysqli.get-client-stats.php Documentation pour mysqli_get_client_stats.
 *
 * @version PHP 5 >= 5.3.0
 * @return array	Retourne un tableau avec les statistiques sur le client en cas de succès, FALSE sinon.
 *
 */
if(!function_exists('mysqli_get_client_statsThis'))
{
    function mysqli_get_client_statsThis()
    {
		return mysqli_get_client_stats();
    }
}

/**
 * mysqli_get_client_versionThis
 *
 * Retourne la version du client MySQL sous forme de chaîne de caractères.
 *
 * @link http://php.net/manual/fr/mysqli.get-client-version.php Documentation pour mysqli_get_client_version.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 *
 * @return int	Un nombre qui représente la version de la bibliothèque cliente MySQL dans ce format : version_principale*10000 + version_mineure *100 + sous_version. Par exemple, la version 4.1.0 est retournée sous la forme 4100.
 *
 */
if(!function_exists('mysqli_get_client_versionThis'))
{
    function mysqli_get_client_versionThis($link)
    {
		$link = is_resource($link) ? $link : NULL;

		return mysqli_get_client_version($link);
    }
}

/**
 * mysqli_master_queryThis
 *
 * Force l'exécution d'une requête sur le maître dans une configuration maître/esclave.
 *
 * @link http://php.net/manual/fr/function.mysqli-master-query.php Documentation pour mysqli_master_query.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 * @param string   $query
 *
 */
if(!function_exists('mysqli_master_queryThis'))
{
    function mysqli_master_queryThis($link, $query)
    {
		$link = is_resource($link) ? $link : NULL;
		$query = (string)$query;

		return mysqli_master_query($link, $query);
    }
}

/**
 * mysqli_rpl_parse_enabledThis
 *
 * Vérifie si l'analyseur RPL est activé.
 *
 * @link http://php.net/manual/fr/function.mysqli-rpl-parse-enabled.php Documentation pour mysqli_rpl_parse_enabled.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 *
 */
if(!function_exists('mysqli_rpl_parse_enabledThis'))
{
    function mysqli_rpl_parse_enabledThis($link)
    {
		$link = is_resource($link) ? $link : NULL;

		return mysqli_rpl_parse_enabled($link);
    }
}

/**
 * mysqli_rpl_probeThis
 *
 * Sonde le RPL.
 *
 * @link http://php.net/manual/fr/function.mysqli-rpl-probe.php Documentation pour mysqli_rpl_probe.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 *
 */
if(!function_exists('mysqli_rpl_probeThis'))
{
    function mysqli_rpl_probeThis($link)
    {
		$link = is_resource($link) ? $link : NULL;

		return mysqli_rpl_probe($link);
    }
}

/**
 * mysqli_slave_queryThis
 *
 * Force l'exécution de la requête sur un serveur esclave pour une configuration maître/esclave.
 *
 * @link http://php.net/manual/fr/function.mysqli-slave-query.php Documentation pour mysqli_slave_query.
 *
 * @version PHP 5
 *
 * @param mysqli     $link
 * @param string   $query
 *
 */
if(!function_exists('mysqli_slave_queryThis'))
{
    function mysqli_slave_queryThis($link, $query)
    {
		$link = is_resource($link) ? $link : NULL;
		$query = (string)$query;

		return mysqli_slave_query($link, $query);
    }
}

/**
 * natcasesortThis
 *
 * Trie un tableau avec l'algorithme à "ordre naturel" insensible à la casse.
 *
 * @link http://php.net/manual/fr/function.natcasesort.php Documentation pour natcasesort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('natcasesortThis'))
{
    function natcasesortThis(&$array)
    {
		$array = (array)$array;

		return natcasesort($array);
    }
}

/**
 * natsortThis
 *
 * Trie un tableau avec l'algorithme à "ordre naturel".
 *
 * @link http://php.net/manual/fr/function.natsort.php Documentation pour natsort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('natsortThis'))
{
    function natsortThis(&$array)
    {
		$array = (array)$array;

		return natsort($array);
    }
}

/**
 * nextThis
 *
 * Avance le pointeur interne d'un tableau.
 *
 * @link http://php.net/manual/fr/function.next.php Documentation pour next.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau à traiter.
 *
 * @return mixed	Retourne la prochaine valeur du tableau suivant le pointeur interne, ou FALSE s'il n'y a plus d'élément.
 *
 */
if(!function_exists('nextThis'))
{
    function nextThis(&$array)
    {
		$array = (array)$array;

		return next($array);
    }
}

/**
 * ngettextThis
 *
 * Version plurielle de gettext.
 *
 * @link http://php.net/manual/fr/function.ngettext.php Documentation pour ngettext.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $msgid1
 * @param string   $msgid2
 * @param int      $n
 *
 * @return string	Retourne un message au pluriel identifié par msgid1 et msgid2 pour le compteur n.
 *
 */
if(!function_exists('ngettextThis'))
{
    function ngettextThis($msgid1, $msgid2, $n)
    {
		$msgid1 = (string)$msgid1;
		$msgid2 = (string)$msgid2;
		$n = (int)$n;

		return ngettext($msgid1, $msgid2, $n);
    }
}

/**
 * nl2brThis
 *
 * Insère un retour à la ligne HTML à chaque nouvelle ligne.
 *
 * @link http://php.net/manual/fr/function.nl2br.php Documentation pour nl2br.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne d'entrée.
 * @param bool     $is_xhtml    Produit des césures compatibles XHTML ou non.
 *
 * @return string	Retourne la chaîne modifiée.
 *
 */
if(!function_exists('nl2brThis'))
{
    function nl2brThis($string, $is_xhtml = true)
    {
		$string = (string)$string;
		$is_xhtml = (bool)$is_xhtml;

		return nl2br($string, $is_xhtml);
    }
}

/**
 * nl_langinfoThis
 *
 * Rassemble des informations sur la langue et la configuration locale.
 *
 * @link http://php.net/manual/fr/function.nl-langinfo.php Documentation pour nl_langinfo.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $item    item peut être la valeur entière d'un élément, ou le nom de sa constante. Voici une liste des noms de constantes pour item qui peuvent être utilisés et leur description. Certaines constantes peuvent ne pas être définies, ou ne contenir aucune valeur pour certaines locales.
 *
 * @return string	Retourne l'élément, sous la forme d'une chaîne de caractères ou FALSE si le paramètre item n'est pas valide.
 *
 */
if(!function_exists('nl_langinfoThis'))
{
    function nl_langinfoThis($item)
    {
		$item = (int)$item;

		return nl_langinfo($item);
    }
}

/**
 * notes_bodyThis
 *
 * Ouvre le message msg_number dans la boîte aux lettres et le serveur précisés.
 *
 * @link http://php.net/manual/fr/function.notes-body.php Documentation pour notes_body.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $server
 * @param string   $mailbox
 * @param int      $msg_number
 *
 */
if(!function_exists('notes_bodyThis'))
{
    function notes_bodyThis($server, $mailbox, $msg_number)
    {
		$server = (string)$server;
		$mailbox = (string)$mailbox;
		$msg_number = (int)$msg_number;

		return notes_body($server, $mailbox, $msg_number);
    }
}

/**
 * notes_copy_dbThis
 *
 * Copie une base de données Lotus Notes.
 *
 * @link http://php.net/manual/fr/function.notes-copy-db.php Documentation pour notes_copy_db.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $from_database_name
 * @param string   $to_database_name
 *
 */
if(!function_exists('notes_copy_dbThis'))
{
    function notes_copy_dbThis($from_database_name, $to_database_name)
    {
		$from_database_name = (string)$from_database_name;
		$to_database_name = (string)$to_database_name;

		return notes_copy_db($from_database_name, $to_database_name);
    }
}

/**
 * notes_create_dbThis
 *
 * Crée une base Lotus Notes.
 *
 * @link http://php.net/manual/fr/function.notes-create-db.php Documentation pour notes_create_db.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 *
 */
if(!function_exists('notes_create_dbThis'))
{
    function notes_create_dbThis($database_name)
    {
		$database_name = (string)$database_name;

		return notes_create_db($database_name);
    }
}

/**
 * notes_create_noteThis
 *
 * Crée une note à partir du formulaire form_name.
 *
 * @link http://php.net/manual/fr/function.notes-create-note.php Documentation pour notes_create_note.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 * @param string   $form_name
 *
 */
if(!function_exists('notes_create_noteThis'))
{
    function notes_create_noteThis($database_name, $form_name)
    {
		$database_name = (string)$database_name;
		$form_name = (string)$form_name;

		return notes_create_note($database_name, $form_name);
    }
}

/**
 * notes_drop_dbThis
 *
 * Supprime une base Lotus Notes.
 *
 * @link http://php.net/manual/fr/function.notes-drop-db.php Documentation pour notes_drop_db.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 *
 */
if(!function_exists('notes_drop_dbThis'))
{
    function notes_drop_dbThis($database_name)
    {
		$database_name = (string)$database_name;

		return notes_drop_db($database_name);
    }
}

/**
 * notes_find_noteThis
 *
 * Retourne un identifiant de note, dans le serveur database_name.
 *
 * @link http://php.net/manual/fr/function.notes-find-note.php Documentation pour notes_find_note.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 * @param string   $name
 * @param string   $type
 *
 */
if(!function_exists('notes_find_noteThis'))
{
    function notes_find_noteThis($database_name, $name, $type = NULL)
    {
		$database_name = (string)$database_name;
		$name = (string)$name;
		$type = (string)$type;

		return notes_find_note($database_name, $name, $type);
    }
}

/**
 * notes_header_infoThis
 *
 * Ouvre le message msg_number dans la boîte aux lettres et le serveur spécifiés.
 *
 * @link http://php.net/manual/fr/function.notes-header-info.php Documentation pour notes_header_info.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $server
 * @param string   $mailbox
 * @param int      $msg_number
 *
 */
if(!function_exists('notes_header_infoThis'))
{
    function notes_header_infoThis($server, $mailbox, $msg_number)
    {
		$server = (string)$server;
		$mailbox = (string)$mailbox;
		$msg_number = (int)$msg_number;

		return notes_header_info($server, $mailbox, $msg_number);
    }
}

/**
 * notes_list_msgsThis
 *
 * Retourne les notes rangées dans database_name.
 *
 * @link http://php.net/manual/fr/function.notes-list-msgs.php Documentation pour notes_list_msgs.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $db
 *
 */
if(!function_exists('notes_list_msgsThis'))
{
    function notes_list_msgsThis($db)
    {
		$db = (string)$db;

		return notes_list_msgs($db);
    }
}

/**
 * notes_mark_readThis
 *
 * Marque la note note_id comme lue par l'utilisateur user_name.
 *
 * @link http://php.net/manual/fr/function.notes-mark-read.php Documentation pour notes_mark_read.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 * @param string   $user_name
 * @param string   $note_id
 *
 */
if(!function_exists('notes_mark_readThis'))
{
    function notes_mark_readThis($database_name, $user_name, $note_id)
    {
		$database_name = (string)$database_name;
		$user_name = (string)$user_name;
		$note_id = (string)$note_id;

		return notes_mark_read($database_name, $user_name, $note_id);
    }
}

/**
 * notes_mark_unreadThis
 *
 * Marque la note note_id comme non lue pour l'utilisateur user_name.
 *
 * @link http://php.net/manual/fr/function.notes-mark-unread.php Documentation pour notes_mark_unread.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 * @param string   $user_name
 * @param string   $note_id
 *
 */
if(!function_exists('notes_mark_unreadThis'))
{
    function notes_mark_unreadThis($database_name, $user_name, $note_id)
    {
		$database_name = (string)$database_name;
		$user_name = (string)$user_name;
		$note_id = (string)$note_id;

		return notes_mark_unread($database_name, $user_name, $note_id);
    }
}

/**
 * notes_nav_createThis
 *
 * Crée un nom de navigateur dans database_name.
 *
 * @link http://php.net/manual/fr/function.notes-nav-create.php Documentation pour notes_nav_create.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 * @param string   $name
 *
 */
if(!function_exists('notes_nav_createThis'))
{
    function notes_nav_createThis($database_name, $name)
    {
		$database_name = (string)$database_name;
		$name = (string)$name;

		return notes_nav_create($database_name, $name);
    }
}

/**
 * notes_searchThis
 *
 * Cherche les notes par mots-clés dans database_name.
 *
 * @link http://php.net/manual/fr/function.notes-search.php Documentation pour notes_search.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 * @param string   $keywords
 *
 */
if(!function_exists('notes_searchThis'))
{
    function notes_searchThis($database_name, $keywords)
    {
		$database_name = (string)$database_name;
		$keywords = (string)$keywords;

		return notes_search($database_name, $keywords);
    }
}

/**
 * notes_unreadThis
 *
 * Retourne l'identifiant de la note non lue pour l'utilisateur user_name.
 *
 * @link http://php.net/manual/fr/function.notes-unread.php Documentation pour notes_unread.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 * @param string   $user_name
 *
 */
if(!function_exists('notes_unreadThis'))
{
    function notes_unreadThis($database_name, $user_name)
    {
		$database_name = (string)$database_name;
		$user_name = (string)$user_name;

		return notes_unread($database_name, $user_name);
    }
}

/**
 * notes_versionThis
 *
 * Lit la version de Lotus Notes.
 *
 * @link http://php.net/manual/fr/function.notes-version.php Documentation pour notes_version.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param string   $database_name
 *
 */
if(!function_exists('notes_versionThis'))
{
    function notes_versionThis($database_name)
    {
		$database_name = (string)$database_name;

		return notes_version($database_name);
    }
}

/**
 * nsapi_request_headersThis
 *
 * Lit tous les en-têtes de requête HTTP sur un serveur Netscape.
 *
 * @link http://php.net/manual/fr/function.nsapi-request-headers.php Documentation pour nsapi_request_headers.
 *
 * @version PHP 4 >= 4.3.3
 * @version PHP 5
 * @return array	Retourne un tableau associatif contenant tous les en-têtes HTTP.
 *
 */
if(!function_exists('nsapi_request_headersThis'))
{
    function nsapi_request_headersThis()
    {
		return nsapi_request_headers();
    }
}

/**
 * nsapi_response_headersThis
 *
 * Lit tous les en-têtes de réponse HTTP sur Netscape serveur.
 *
 * @link http://php.net/manual/fr/function.nsapi-response-headers.php Documentation pour nsapi_response_headers.
 *
 * @version PHP 4 >= 4.3.3
 * @version PHP 5
 * @return array	Retourne un tableau associatif contenant tous les en-têtes de réponse NSAPI.
 *
 */
if(!function_exists('nsapi_response_headersThis'))
{
    function nsapi_response_headersThis()
    {
		return nsapi_response_headers();
    }
}

/**
 * nsapi_virtualThis
 *
 * Effectue une sous-requête NSAPI.
 *
 * @link http://php.net/manual/fr/function.nsapi-virtual.php Documentation pour nsapi_virtual.
 *
 * @version PHP 4 >= 4.3.3
 * @version PHP 5
 *
 * @param string   $uri    L'URI du script.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('nsapi_virtualThis'))
{
    function nsapi_virtualThis($uri)
    {
		$uri = (string)$uri;

		return nsapi_virtual($uri);
    }
}

/**
 * number_formatThis
 *
 * Formate un nombre pour l'affichage.
 *
 * @link http://php.net/manual/fr/function.number-format.php Documentation pour number_format.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $number    Le nombre à formater.
 * @param int      $decimals    Définit le nombre de décimal.
 *
 * @return string	Une version formatée du nombre number.
 *
 */
if(!function_exists('number_formatThis'))
{
    function number_formatThis($number, $decimals = 0)
    {
		$number = (float)$number;
		$decimals = (int)$decimals;

		return number_format($number, $decimals);
    }
}

/**
 * ob_cleanThis
 *
 * Efface le tampon de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-clean.php Documentation pour ob_clean.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('ob_cleanThis'))
{
    function ob_cleanThis()
    {
		return ob_clean();
    }
}

/**
 * ob_end_cleanThis
 *
 * Détruit les données du tampon de sortie et éteint la tamporisation de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-end-clean.php Documentation pour ob_end_clean.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Les raisons d'un tel échec sont que la tamporisation de sortie pouvait ne pas être activée, ou que, pour une raison quelconque, le tampon n'a pu être détruit.
 *
 */
if(!function_exists('ob_end_cleanThis'))
{
    function ob_end_cleanThis()
    {
		return ob_end_clean();
    }
}

/**
 * ob_end_flushThis
 *
 * Envoie les données du tampon de sortie et éteint la tamporisation de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-end-flush.php Documentation pour ob_end_flush.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Les raisons d'échec sont que vous pourriez avoir appelé la fonction sans avoir de tampon actif, ou que, pour une raison quelconque, le tampon n'a pu être effacé (possible pour un tampon spécial).
 *
 */
if(!function_exists('ob_end_flushThis'))
{
    function ob_end_flushThis()
    {
		return ob_end_flush();
    }
}

/**
 * ob_flushThis
 *
 * Envoie le tampon de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-flush.php Documentation pour ob_flush.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('ob_flushThis'))
{
    function ob_flushThis()
    {
		return ob_flush();
    }
}

/**
 * ob_get_cleanThis
 *
 * Lit le contenu courant du tampon de sortie puis l'efface.
 *
 * @link http://php.net/manual/fr/function.ob-get-clean.php Documentation pour ob_get_clean.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return string	Retourne le contenu du tampon de sortie et termine la session de tamporisation. Si la tamporisation n'est pas activée, alors FALSE sera retourné.
 *
 */
if(!function_exists('ob_get_cleanThis'))
{
    function ob_get_cleanThis()
    {
		return ob_get_clean();
    }
}

/**
 * ob_get_contentsThis
 *
 * Retourne le contenu du tampon de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-get-contents.php Documentation pour ob_get_contents.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le contenu du tampon de sortie sans l'effacer ou FALSE, si la tamporisation de sortie n'est pas activée.
 *
 */
if(!function_exists('ob_get_contentsThis'))
{
    function ob_get_contentsThis()
    {
		return ob_get_contents();
    }
}

/**
 * ob_get_flushThis
 *
 * Vide le tampon, le retourne en tant que chaîne et stoppe la tamporisation.
 *
 * @link http://php.net/manual/fr/function.ob-get-flush.php Documentation pour ob_get_flush.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return string	Retourne le tampon de sortie ou FALSE s'il n'y en a aucun d'actif.
 *
 */
if(!function_exists('ob_get_flushThis'))
{
    function ob_get_flushThis()
    {
		return ob_get_flush();
    }
}

/**
 * ob_get_lengthThis
 *
 * Retourne la longueur du contenu du tampon de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-get-length.php Documentation pour ob_get_length.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 * @return int	Retourne la longueur du contenu du tampon de sortie si la tamporisation est activée, et FALSE sinon.
 *
 */
if(!function_exists('ob_get_lengthThis'))
{
    function ob_get_lengthThis()
    {
		return ob_get_length();
    }
}

/**
 * ob_get_levelThis
 *
 * Retourne le nombre de niveaux d'imbrications du système de tamporisation de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-get-level.php Documentation pour ob_get_level.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 * @return int	Retourne le nombre de niveaux d'imbrications du système de tamporisation de sortie, et zéro s'il n'est pas actif.
 *
 */
if(!function_exists('ob_get_levelThis'))
{
    function ob_get_levelThis()
    {
		return ob_get_level();
    }
}

/**
 * ob_get_statusThis
 *
 * Lit le statut du tampon de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-get-status.php Documentation pour ob_get_status.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param bool     $full_status    TRUE pour retourner tous les tampons d'affichage. Si vaut FALSE ou non défini, seul le statut du tampon d'affichage de haut niveau sera retourné.
 *
 * @return array	Si la fonction est appelée sans le paramètre full_status ou avec le paramètre full_status = FALSE, un tableau simple avec les éléments suivants sera retourné :
 *
 */
if(!function_exists('ob_get_statusThis'))
{
    function ob_get_statusThis($full_status = FALSE)
    {
		$full_status = (bool)$full_status;

		return ob_get_status($full_status);
    }
}

/**
 * ob_gzhandlerThis
 *
 * Fonction de rappel pour la compression automatique des tampons.
 *
 * @link http://php.net/manual/fr/function.ob-gzhandler.php Documentation pour ob_gzhandler.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $buffer
 * @param int      $mode
 *
 */
if(!function_exists('ob_gzhandlerThis'))
{
    function ob_gzhandlerThis($buffer, $mode)
    {
		$buffer = (string)$buffer;
		$mode = (int)$mode;

		return ob_gzhandler($buffer, $mode);
    }
}

/**
 * ob_iconv_handlerThis
 *
 * Gestionnaire de sortie pour maîtriser le jeu de caractères de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-iconv-handler.php Documentation pour ob_iconv_handler.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $contents
 * @param int      $status
 *
 * @return string	Voir la documentation sur la fonction ob_start() pour plus d'informations sur les valeurs retournées par cette fonction.
 *
 */
if(!function_exists('ob_iconv_handlerThis'))
{
    function ob_iconv_handlerThis($contents, $status)
    {
		$contents = (string)$contents;
		$status = (int)$status;

		return ob_iconv_handler($contents, $status);
    }
}

/**
 * ob_implicit_flushThis
 *
 * Active/désactive l'envoi implicite.
 *
 * @link http://php.net/manual/fr/function.ob-implicit-flush.php Documentation pour ob_implicit_flush.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $flag    TRUE pour activer, FALSE sinon.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('ob_implicit_flushThis'))
{
    function ob_implicit_flushThis($flag = true)
    {
		$flag = (int)$flag;

		return ob_implicit_flush($flag);
    }
}

/**
 * ob_list_handlersThis
 *
 * Liste les gestionnaires d'affichage utilisés.
 *
 * @link http://php.net/manual/fr/function.ob-list-handlers.php Documentation pour ob_list_handlers.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return array	Retourne un tableau avec le gestionnaire d'affichage en cours d'utilisation (s'il existe). Si output_buffering est activé ou si une fonction anonyme est utilisée avec ob_start(), ob_list_handlers() retournera un tableau avec comme valeur d'entrée : "default output handler".
 *
 */
if(!function_exists('ob_list_handlersThis'))
{
    function ob_list_handlersThis()
    {
		return ob_list_handlers();
    }
}

/**
 * ob_startThis
 *
 * Enclenche la temporisation de sortie.
 *
 * @link http://php.net/manual/fr/function.ob-start.php Documentation pour ob_start.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param callable     $output_callback    Une fonction optionnelle de rappel peut être spécifiée. Cette fonction prend une chaîne comme paramètre, et retourne une chaîne. Elle sera appelée lorsque le tampon sera envoyé ou supprimé (avec les fonctions ob_flush(), ob_clean() ou des fonctions similaires) ou lorsque le tampon sera envoyé au navigateur à la fin du script et recevra le contenu du tampon de sortie. Lorsque la fonction output_callback est appelée, elle doit retourner un nouveau contenu pour le tampon de sortie : celui-ci sera envoyé au navigateur. Si output_callback n'est pas une fonction accessible, la fonction retournera FALSE. Voici la signature de la fonction de rappel : Si output_callback retourne FALSE, l'entrée originale est envoyée au navigateur. Le paramètre output_callback peut être annulé en y passant la valeur NULL. ob_end_clean(), ob_end_flush(), ob_clean(), ob_flush() et ob_start() ne doivent pas être appelés depuis une fonction de rappel. Si vous les appelez depuis une fonction de rappel, le comportement ne sera pas défini. Si vous voulez effacer le contenu du tampon, retournez "" (une chaîne vide) comme fonction de rappel. Vous ne pourrez jamais appeler les fonctions utilisant la fonction de temporisation de sortie comme print_r($expression, true) ou highlight_file($filename, true) depuis une fonction de rappel.
 * @param int      $chunk_size
 * @param bool     $erase
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ob_startThis'))
{
    function ob_startThis($output_callback = NULL, $chunk_size = 0, $erase = true)
    {
		$output_callback = is_callable($output_callback) ? $output_callback : NULL;
		$chunk_size = (int)$chunk_size;
		$erase = (bool)$erase;

		return ob_start($output_callback, $chunk_size, $erase);
    }
}

/**
 * ob_tidyhandlerThis
 *
 * Fonction de rappel ob_start pour réparer le buffer.
 *
 * @link http://php.net/manual/fr/function.ob-tidyhandler.php Documentation pour ob_tidyhandler.
 *
 * @version PHP 5
 *
 * @param string   $input    Le buffer.
 * @param int      $mode    Le mode du buffer.
 *
 * @return string	Retourne le buffer modifié.
 *
 */
if(!function_exists('ob_tidyhandlerThis'))
{
    function ob_tidyhandlerThis($input, $mode = NULL)
    {
		$input = (string)$input;
		$mode = (int)$mode;

		return ob_tidyhandler($input, $mode);
    }
}

/**
 * octdecThis
 *
 * Conversion d'octal en décimal.
 *
 * @link http://php.net/manual/fr/function.octdec.php Documentation pour octdec.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $octal_string    La chaîne de caractères octale à convertir
 *
 * @return number	La représentation décimale de octal_string
 *
 */
if(!function_exists('octdecThis'))
{
    function octdecThis($octal_string)
    {
		$octal_string = (string)$octal_string;

		return octdec($octal_string);
    }
}

/**
 * odbc_autocommitThis
 *
 * Active le mode d'autovalidation.
 *
 * @link http://php.net/manual/fr/function.odbc-autocommit.php Documentation pour odbc_autocommit.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param bool     $OnOff    Si OnOff vaut TRUE, l'autovalidation est activée. S'il est FALSE, l'autovalidation est désactivée.
 *
 * @return mixed	Sans le paramètre OnOff, odbc_autocommit() retourne le statut d'autovalidation de la connexion connection_id. Une valeur différente de 0 si le mode est activé, 0 s'il ne l'est pas, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_autocommitThis'))
{
    function odbc_autocommitThis($connection_id, $OnOff = false)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$OnOff = (bool)$OnOff;

		return odbc_autocommit($connection_id, $OnOff);
    }
}

/**
 * odbc_binmodeThis
 *
 * Modifie la gestion des colonnes de données binaires.
 *
 * @link http://php.net/manual/fr/function.odbc-binmode.php Documentation pour odbc_binmode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat. Si result_id vaut 0, ces paramètres seront appliqués aux nouveaux résultats.
 * @param int      $mode    Valeurs possibles pour le paramètre mode :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_binmodeThis'))
{
    function odbc_binmodeThis($result_id, $mode)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$mode = (int)$mode;

		return odbc_binmode($result_id, $mode);
    }
}

/**
 * odbc_closeThis
 *
 * Ferme une connexion ODBC.
 *
 * @link http://php.net/manual/fr/function.odbc-close.php Documentation pour odbc_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('odbc_closeThis'))
{
    function odbc_closeThis($connection_id)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return odbc_close($connection_id);
    }
}

/**
 * odbc_close_allThis
 *
 * Ferme toutes les connexions ODBC.
 *
 * @link http://php.net/manual/fr/function.odbc-close-all.php Documentation pour odbc_close_all.
 *
 * @version PHP 4
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('odbc_close_allThis'))
{
    function odbc_close_allThis()
    {
		return odbc_close_all();
    }
}

/**
 * odbc_columnprivilegesThis
 *
 * Liste les colonnes et leurs droits associés.
 *
 * @link http://php.net/manual/fr/function.odbc-columnprivileges.php Documentation pour odbc_columnprivileges.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $qualifier    Le qualifieur.
 * @param string   $owner    Le propriétaire.
 * @param string   $table_name    Le nom de la table.
 * @param string   $column_name    Le paramètre column_name accepte des masques de recherche ('%' pour remplacer zéro ou plus caractères, et '_' pour n'en remplacer qu'un seul).
 *
 * @return resource	Retourne un identifiant de résultat ODBC ou FALSE si une erreur survient. Cet identifiant de résultat pourra être utilisé pour récupérer une liste des colonnes ainsi que les droits associés.
 *
 */
if(!function_exists('odbc_columnprivilegesThis'))
{
    function odbc_columnprivilegesThis($connection_id, $qualifier, $owner, $table_name, $column_name)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$qualifier = (string)$qualifier;
		$owner = (string)$owner;
		$table_name = (string)$table_name;
		$column_name = (string)$column_name;

		return odbc_columnprivileges($connection_id, $qualifier, $owner, $table_name, $column_name);
    }
}

/**
 * odbc_columnsThis
 *
 * Liste les colonnes d'une table.
 *
 * @link http://php.net/manual/fr/function.odbc-columns.php Documentation pour odbc_columns.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $qualifier    Le qualifieur.
 * @param string   $schema    Le propriétaire.
 * @param string   $table_name    Le nom de la table.
 * @param string   $column_name    Le nom de la colonne.
 *
 * @return resource	Retourne un identifiant de résultat ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_columnsThis'))
{
    function odbc_columnsThis($connection_id, $qualifier = NULL, $schema = NULL, $table_name = NULL, $column_name = NULL)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$qualifier = (string)$qualifier;
		$schema = (string)$schema;
		$table_name = (string)$table_name;
		$column_name = (string)$column_name;

		return odbc_columns($connection_id, $qualifier, $schema, $table_name, $column_name);
    }
}

/**
 * odbc_commitThis
 *
 * Valide une transaction ODBC.
 *
 * @link http://php.net/manual/fr/function.odbc-commit.php Documentation pour odbc_commit.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_commitThis'))
{
    function odbc_commitThis($connection_id)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return odbc_commit($connection_id);
    }
}

/**
 * odbc_connectThis
 *
 * Connexion à une source.
 *
 * @link http://php.net/manual/fr/function.odbc-connect.php Documentation pour odbc_connect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $dsn    Le nom source de la base de données (DSN), pour la connexion.
 * @param string   $user    Le nom d'utilisateur.
 * @param string   $password    Le mot de passe.
 * @param int      $cursor_type    Fixe le type de pointeur de résultat utilisé pour cette connexion. Ce paramètre n'est généralement pas nécessaire, mais il peut être utile pour contourner certains problèmes ODBC.
 *
 * @return resource	Retourne une connexion ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_connectThis'))
{
    function odbc_connectThis($dsn, $user, $password, $cursor_type = NULL)
    {
		$dsn = (string)$dsn;
		$user = (string)$user;
		$password = (string)$password;
		$cursor_type = (int)$cursor_type;

		return odbc_connect($dsn, $user, $password, $cursor_type);
    }
}

/**
 * odbc_cursorThis
 *
 * Lit le nom du pointeur de résultat courant.
 *
 * @link http://php.net/manual/fr/function.odbc-cursor.php Documentation pour odbc_cursor.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    La ressource de résultat.
 *
 * @return string	Retourne le nom du curseur, sous forme d'une chaîne de caractères.
 *
 */
if(!function_exists('odbc_cursorThis'))
{
    function odbc_cursorThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return odbc_cursor($result_id);
    }
}

/**
 * odbc_data_sourceThis
 *
 * Retourne des informations sur la connexion courante.
 *
 * @link http://php.net/manual/fr/function.odbc-data-source.php Documentation pour odbc_data_source.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param int      $fetch_type    Le paramètre connection_id est une connexion ODBC valide. Le paramètre fetch_type peut être l'une des deux constantes suivantes : SQL_FETCH_FIRST ou SQL_FETCH_NEXT. Utilisez SQL_FETCH_FIRST la première fois que la fonction est appelée, puis SQL_FETCH_NEXT.
 *
 * @return array	Retourne FALSE si une erreur survient, un tableau sinon.
 *
 */
if(!function_exists('odbc_data_sourceThis'))
{
    function odbc_data_sourceThis($connection_id, $fetch_type)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$fetch_type = (int)$fetch_type;

		return odbc_data_source($connection_id, $fetch_type);
    }
}

/**
 * odbc_errorThis
 *
 * Lit le dernier code d'erreur.
 *
 * @link http://php.net/manual/fr/function.odbc-error.php Documentation pour odbc_error.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 *
 * @return string	Si connection_id est spécifié, le dernier état ODBC de cette connexion est retourné. Si connection_id est omis, c'est le dernier état de n'importe quelle connexion qui est retourné.
 *
 */
if(!function_exists('odbc_errorThis'))
{
    function odbc_errorThis($connection_id = NULL)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return odbc_error($connection_id);
    }
}

/**
 * odbc_errormsgThis
 *
 * Lit le dernier message d'erreur.
 *
 * @link http://php.net/manual/fr/function.odbc-errormsg.php Documentation pour odbc_errormsg.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 *
 * @return string	Si connection_id est spécifié, le dernier état ODBC de cette connexion est retourné.
 *
 */
if(!function_exists('odbc_errormsgThis'))
{
    function odbc_errormsgThis($connection_id = NULL)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return odbc_errormsg($connection_id);
    }
}

/**
 * odbc_execThis
 *
 * Prépare et exécute une requête SQL.
 *
 * @link http://php.net/manual/fr/function.odbc-exec.php Documentation pour odbc_exec.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $query_string    La requête SQL.
 * @param int      $flags    Ce paramètre n'est actuellement pas utilisé.
 *
 * @return resource	Retourne une ressource de résultat ODBC en cas de succès, FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_execThis'))
{
    function odbc_execThis($connection_id, $query_string, $flags = NULL)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$query_string = (string)$query_string;
		$flags = (int)$flags;

		return odbc_exec($connection_id, $query_string, $flags);
    }
}

/**
 * odbc_executeThis
 *
 * Exécute une requête SQL préparée.
 *
 * @link http://php.net/manual/fr/function.odbc-execute.php Documentation pour odbc_execute.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat, depuis la fonction odbc_prepare().
 * @param array    $parameters_array    Les valeurs du paramètre parameter_array seront substituées dans les variables de requêtes de la requête préparée. Les éléments de ce tableau seront convertis en chaînes de caractères en appelant cette fonction. Tout paramètre de parameter_array qui commence et termine par des guillemets simples sera considéré comme un nom de fichier à lire et envoyé à la base de données, avec la variable de requête appropriée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_executeThis'))
{
    function odbc_executeThis($result_id, $parameters_array = NULL)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$parameters_array = (array)$parameters_array;

		return odbc_execute($result_id, $parameters_array);
    }
}

/**
 * odbc_fetch_arrayThis
 *
 * Lit une ligne de résultat dans un tableau associatif.
 *
 * @link http://php.net/manual/fr/function.odbc-fetch-array.php Documentation pour odbc_fetch_array.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat depuis la fonction odbc_exec().
 * @param int      $rownumber    Le numéro de ligne doit être lu, optionnel.
 *
 * @return array	Retourne un tableau correspondant à la ligne récupérée, ou FALSE s'il n'y a plus de ligne de disponible.
 *
 */
if(!function_exists('odbc_fetch_arrayThis'))
{
    function odbc_fetch_arrayThis($result, $rownumber = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$rownumber = (int)$rownumber;

		return odbc_fetch_array($result, $rownumber);
    }
}

/**
 * odbc_fetch_intoThis
 *
 * Lit une ligne de résultat, et la place dans un tableau.
 *
 * @link http://php.net/manual/fr/function.odbc-fetch-into.php Documentation pour odbc_fetch_into.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    La ressource de résultat.
 * @param array    &$result_array    Peut être de n'importe quel type, étant donné qu'il sera converti en tableau. Le tableau contiendra les valeurs des colonnes, ces dernières étant numérotées à partir de 0.
 * @param int      $rownumber    Le numéro de la ligne.
 *
 * @return int	Retourne le nombre de colonnes du résultat, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_fetch_intoThis'))
{
    function odbc_fetch_intoThis($result_id, &$result_array, $rownumber = NULL)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$result_array = (array)$result_array;
		$rownumber = (int)$rownumber;

		return odbc_fetch_into($result_id, $result_array, $rownumber);
    }
}

/**
 * odbc_fetch_objectThis
 *
 * Lit une ligne de résultat dans un objet.
 *
 * @link http://php.net/manual/fr/function.odbc-fetch-object.php Documentation pour odbc_fetch_object.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param resource $result    La ressource de résultat depuis la fonction odbc_exec().
 * @param int      $rownumber    Le numéro de ligne à récupérer, en option.
 *
 * @return object	Retourne un objet qui correspond à la ligne récupérée, ou FALSE s'il n'y a plus de ligne de disponible.
 *
 */
if(!function_exists('odbc_fetch_objectThis'))
{
    function odbc_fetch_objectThis($result, $rownumber = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$rownumber = (int)$rownumber;

		return odbc_fetch_object($result, $rownumber);
    }
}

/**
 * odbc_fetch_rowThis
 *
 * Lit une ligne de résultat.
 *
 * @link http://php.net/manual/fr/function.odbc-fetch-row.php Documentation pour odbc_fetch_row.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param int      $row_number    Si row_number est omis, row_number va tenter de lire la prochaine ligne dans le résultat. Des appels répétés à odbc_fetch_row() avec et sans paramètre row_number peuvent être combinés librement. Pour passer en revue toutes les lignes d'un résultat plusieurs fois, vous pouvez appeler odbc_fetch_row() avec row_number = 1, puis continuer à appeler odbc_fetch_row() sans le paramètre row_number pour passer en revue tout le résultat. Si un pilote ne supporte pas la lecture des lignes par numéro, le paramètre sera ignoré.
 *
 * @return bool	Retourne TRUE si la ligne existe, FALSE sinon.
 *
 */
if(!function_exists('odbc_fetch_rowThis'))
{
    function odbc_fetch_rowThis($result_id, $row_number = NULL)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$row_number = (int)$row_number;

		return odbc_fetch_row($result_id, $row_number);
    }
}

/**
 * odbc_field_lenThis
 *
 * Lit la longueur d'un champ.
 *
 * @link http://php.net/manual/fr/function.odbc-field-len.php Documentation pour odbc_field_len.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param int      $field_number    Le numéro du champ. La numérotation commence à 1.
 *
 * @return int	Retourne le nom du champ, sous la forme d'une chaîne de caractères ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_field_lenThis'))
{
    function odbc_field_lenThis($result_id, $field_number)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$field_number = (int)$field_number;

		return odbc_field_len($result_id, $field_number);
    }
}

/**
 * odbc_field_nameThis
 *
 * Lit le nom de la colonne.
 *
 * @link http://php.net/manual/fr/function.odbc-field-name.php Documentation pour odbc_field_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param int      $field_number    Le numéro de la colonne. La numérotation commence à 1.
 *
 * @return string	Retourne le nom de la colonne, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_field_nameThis'))
{
    function odbc_field_nameThis($result_id, $field_number)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$field_number = (int)$field_number;

		return odbc_field_name($result_id, $field_number);
    }
}

/**
 * odbc_field_numThis
 *
 * Numéro de colonne.
 *
 * @link http://php.net/manual/fr/function.odbc-field-num.php Documentation pour odbc_field_num.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param string   $field_name    Le nom du champ.
 *
 * @return int	Retourne le numéro du champ, sous la forme d'un entier, ou FALSE si une erreur survient. La numérotation commence à 1.
 *
 */
if(!function_exists('odbc_field_numThis'))
{
    function odbc_field_numThis($result_id, $field_name)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$field_name = (string)$field_name;

		return odbc_field_num($result_id, $field_name);
    }
}

/**
 * odbc_field_scaleThis
 *
 * Lit l'échelle d'un champ.
 *
 * @link http://php.net/manual/fr/function.odbc-field-scale.php Documentation pour odbc_field_scale.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param int      $field_number    Le numéro du champ. La numérotation commence à 1.
 *
 * @return int	Retourne l'échelle du champ, sous la forme d'un entier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_field_scaleThis'))
{
    function odbc_field_scaleThis($result_id, $field_number)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$field_number = (int)$field_number;

		return odbc_field_scale($result_id, $field_number);
    }
}

/**
 * odbc_field_typeThis
 *
 * Type de données d'un champ.
 *
 * @link http://php.net/manual/fr/function.odbc-field-type.php Documentation pour odbc_field_type.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param int      $field_number    Le numéro du champ. La numérotation commence à 1.
 *
 * @return string	Retourne le type du champ, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_field_typeThis'))
{
    function odbc_field_typeThis($result_id, $field_number)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$field_number = (int)$field_number;

		return odbc_field_type($result_id, $field_number);
    }
}

/**
 * odbc_foreignkeysThis
 *
 * Liste les clés étrangères.
 *
 * @link http://php.net/manual/fr/function.odbc-foreignkeys.php Documentation pour odbc_foreignkeys.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $pk_qualifier    Le qualifieur de la clé primaire.
 * @param string   $pk_owner    Le propriétaire de la clé primaire.
 * @param string   $pk_table    La table de la clé primaire.
 * @param string   $fk_qualifier    Le qualifieur de la clé étrangère.
 * @param string   $fk_owner    Le propriétaire de la clé étrangère.
 * @param string   $fk_table    La table de la clé étrangère.
 *
 * @return resource	Retourne un identifiant de résultat ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_foreignkeysThis'))
{
    function odbc_foreignkeysThis($connection_id, $pk_qualifier, $pk_owner, $pk_table, $fk_qualifier, $fk_owner, $fk_table)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$pk_qualifier = (string)$pk_qualifier;
		$pk_owner = (string)$pk_owner;
		$pk_table = (string)$pk_table;
		$fk_qualifier = (string)$fk_qualifier;
		$fk_owner = (string)$fk_owner;
		$fk_table = (string)$fk_table;

		return odbc_foreignkeys($connection_id, $pk_qualifier, $pk_owner, $pk_table, $fk_qualifier, $fk_owner, $fk_table);
    }
}

/**
 * odbc_free_resultThis
 *
 * Libère les ressources associées à un résultat.
 *
 * @link http://php.net/manual/fr/function.odbc-free-result.php Documentation pour odbc_free_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 *
 * @return bool	Retourne toujours TRUE.
 *
 */
if(!function_exists('odbc_free_resultThis'))
{
    function odbc_free_resultThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return odbc_free_result($result_id);
    }
}

/**
 * odbc_gettypeinfoThis
 *
 * Liste les types de données supportés par une source.
 *
 * @link http://php.net/manual/fr/function.odbc-gettypeinfo.php Documentation pour odbc_gettypeinfo.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param int      $data_type    Peut être utilisé pour restreindre les informations à un seul type de données.
 *
 * @return resource	Retourne l'identifiant de résultat ODBC, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_gettypeinfoThis'))
{
    function odbc_gettypeinfoThis($connection_id, $data_type = NULL)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$data_type = (int)$data_type;

		return odbc_gettypeinfo($connection_id, $data_type);
    }
}

/**
 * odbc_longreadlenThis
 *
 * Gestion des colonnes de type LONG.
 *
 * @link http://php.net/manual/fr/function.odbc-longreadlen.php Documentation pour odbc_longreadlen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param int      $length    Le nombre d'octets retourné à PHP. S'il est défini à 0, les données des colonnes de type LONG sont passé au client.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_longreadlenThis'))
{
    function odbc_longreadlenThis($result_id, $length)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$length = (int)$length;

		return odbc_longreadlen($result_id, $length);
    }
}

/**
 * odbc_next_resultThis
 *
 * Vérifie si plusieurs résultats sont disponibles.
 *
 * @link http://php.net/manual/fr/function.odbc-next-result.php Documentation pour odbc_next_result.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 *
 * @return bool	Retourne TRUE s'il n'y a plus de jeux de résultats, FALSE sinon.
 *
 */
if(!function_exists('odbc_next_resultThis'))
{
    function odbc_next_resultThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return odbc_next_result($result_id);
    }
}

/**
 * odbc_num_fieldsThis
 *
 * Nombre de colonnes dans un résultat.
 *
 * @link http://php.net/manual/fr/function.odbc-num-fields.php Documentation pour odbc_num_fields.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat, retourné par la fonction odbc_exec().
 *
 * @return int	Retourne le nombre de colonnes, ou -1 si une erreur survient.
 *
 */
if(!function_exists('odbc_num_fieldsThis'))
{
    function odbc_num_fieldsThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return odbc_num_fields($result_id);
    }
}

/**
 * odbc_num_rowsThis
 *
 * Nombre de lignes dans un résultat.
 *
 * @link http://php.net/manual/fr/function.odbc-num-rows.php Documentation pour odbc_num_rows.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat, retourné par la fonction odbc_exec().
 *
 * @return int	Retourne le nombre de lignes dans le résultat ODBC. Cette fonction retournera -1 si une erreur survient.
 *
 */
if(!function_exists('odbc_num_rowsThis'))
{
    function odbc_num_rowsThis($result_id)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;

		return odbc_num_rows($result_id);
    }
}

/**
 * odbc_pconnectThis
 *
 * Ouvre une connexion persistante à une source de données.
 *
 * @link http://php.net/manual/fr/function.odbc-pconnect.php Documentation pour odbc_pconnect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $dsn
 * @param string   $user
 * @param string   $password
 * @param int      $cursor_type
 *
 * @return resource	Retourne un identifiant de connexion ODBC, ou 0 (FALSE) si une erreur survient.
 *
 */
if(!function_exists('odbc_pconnectThis'))
{
    function odbc_pconnectThis($dsn, $user, $password, $cursor_type = NULL)
    {
		$dsn = (string)$dsn;
		$user = (string)$user;
		$password = (string)$password;
		$cursor_type = (int)$cursor_type;

		return odbc_pconnect($dsn, $user, $password, $cursor_type);
    }
}

/**
 * odbc_prepareThis
 *
 * Prépare une commande pour l'exécution.
 *
 * @link http://php.net/manual/fr/function.odbc-prepare.php Documentation pour odbc_prepare.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $query_string    La requête à préparer.
 *
 * @return resource	Retourne un identifiant de résultat ODBC si la commande SQL a été préparée avec succès. Retourne FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_prepareThis'))
{
    function odbc_prepareThis($connection_id, $query_string)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$query_string = (string)$query_string;

		return odbc_prepare($connection_id, $query_string);
    }
}

/**
 * odbc_primarykeysThis
 *
 * Liste les colonnes utilisées dans une clé primaire.
 *
 * @link http://php.net/manual/fr/function.odbc-primarykeys.php Documentation pour odbc_primarykeys.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $qualifier
 * @param string   $owner
 * @param string   $table
 *
 * @return resource	Retourne un identifiant de résultat ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_primarykeysThis'))
{
    function odbc_primarykeysThis($connection_id, $qualifier, $owner, $table)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$qualifier = (string)$qualifier;
		$owner = (string)$owner;
		$table = (string)$table;

		return odbc_primarykeys($connection_id, $qualifier, $owner, $table);
    }
}

/**
 * odbc_procedurecolumnsThis
 *
 * Liste les paramètres des procédures.
 *
 * @link http://php.net/manual/fr/function.odbc-procedurecolumns.php Documentation pour odbc_procedurecolumns.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 *
 * @return resource	Retourne les paramètres d'entrée et de sortie, ainsi que les colonnes utilisées dans les procédures désignées par les paramètres. Retourne un identifiant de résultat ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_procedurecolumnsThis'))
{
    function odbc_procedurecolumnsThis($connection_id)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return odbc_procedurecolumns($connection_id);
    }
}

/**
 * odbc_proceduresThis
 *
 * Liste les procédures stockées.
 *
 * @link http://php.net/manual/fr/function.odbc-procedures.php Documentation pour odbc_procedures.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 *
 * @return resource	Retourne un identifiant de résultat ODBC contenant les informations ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_proceduresThis'))
{
    function odbc_proceduresThis($connection_id)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return odbc_procedures($connection_id);
    }
}

/**
 * odbc_resultThis
 *
 * Lit un champ de résultat UODBC.
 *
 * @link http://php.net/manual/fr/function.odbc-result.php Documentation pour odbc_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    Une ressource ODBC.
 * @param mixed     $field    Le nom du champ à récupérer. Peut être aussi bien un entier, contenant le numéro de colonne du champ, dans le résultat, ou bien une chaîne de caractères, qui représente le nom du champ.
 *
 * @return mixed	Retourne le contenu du champ, FALSE si une erreur survient, NULL pour les données NULL, ou TRUE pour des données binaires.
 *
 */
if(!function_exists('odbc_resultThis'))
{
    function odbc_resultThis($result_id, $field)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$field = ($field);
		return odbc_result($result_id, $field);
    }
}

/**
 * odbc_result_allThis
 *
 * Affiche le résultat sous la forme d'une table HTML.
 *
 * @link http://php.net/manual/fr/function.odbc-result-all.php Documentation pour odbc_result_all.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_id    L'identifiant de résultat.
 * @param string   $format    Permet de modifier l'aspect global de la table.
 *
 * @return int	Retourne le nombre de lignes du résultat, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_result_allThis'))
{
    function odbc_result_allThis($result_id, $format = NULL)
    {
		$result_id = is_resource($result_id) ? $result_id : NULL;
		$format = (string)$format;

		return odbc_result_all($result_id, $format);
    }
}

/**
 * odbc_rollbackThis
 *
 * Annule une transaction.
 *
 * @link http://php.net/manual/fr/function.odbc-rollback.php Documentation pour odbc_rollback.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_rollbackThis'))
{
    function odbc_rollbackThis($connection_id)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;

		return odbc_rollback($connection_id);
    }
}

/**
 * odbc_setoptionThis
 *
 * Modifie les paramètres ODBC.
 *
 * @link http://php.net/manual/fr/function.odbc-setoption.php Documentation pour odbc_setoption.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $id    Un identifiant de connexion, ou un identifiant de résultat, pour lequel vous souhaitez modifier des options. Pour SQLSetConnectOption(), c'est un identifiant de connexion. Pour SQLSetStmtOption(), c'est un identifiant de résultat.
 * @param int      $function    Fonction ODBC à utiliser. La valeur doit être de 1 pour utiliser SQLSetConnectOption() et 2 pour SQLSetStmtOption().
 * @param int      $option    L'option à définir.
 * @param int      $param    La valeur pour l'option donnée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_setoptionThis'))
{
    function odbc_setoptionThis($id, $function, $option, $param)
    {
		$id = is_resource($id) ? $id : NULL;
		$function = (int)$function;
		$option = (int)$option;
		$param = (int)$param;

		return odbc_setoption($id, $function, $option, $param);
    }
}

/**
 * odbc_specialcolumnsThis
 *
 * Retourne l'ensemble optimal de colonnes.
 *
 * @link http://php.net/manual/fr/function.odbc-specialcolumns.php Documentation pour odbc_specialcolumns.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param int      $type
 * @param string   $qualifier    Le qualifieur.
 * @param string   $owner    Le propriétaire.
 * @param string   $table    La table.
 * @param int      $scope    Le scope, qui ordonne le jeu de résultats.
 * @param int      $nullable    L'option nullable.
 *
 * @return resource	Retourne la ressource de résultat ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_specialcolumnsThis'))
{
    function odbc_specialcolumnsThis($connection_id, $type, $qualifier, $owner, $table, $scope, $nullable)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$type = (int)$type;
		$qualifier = (string)$qualifier;
		$owner = (string)$owner;
		$table = (string)$table;
		$scope = (int)$scope;
		$nullable = (int)$nullable;

		return odbc_specialcolumns($connection_id, $type, $qualifier, $owner, $table, $scope, $nullable);
    }
}

/**
 * odbc_statisticsThis
 *
 * Calcul des statistiques sur une table.
 *
 * @link http://php.net/manual/fr/function.odbc-statistics.php Documentation pour odbc_statistics.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $qualifier    Le qualifieur.
 * @param string   $owner    Le propriétaire.
 * @param string   $table_name    Le nom de la table.
 * @param int      $unique    L'attribut unique.
 * @param int      $accuracy    L'attribut accuracy.
 *
 * @return resource	Retourne un identifiant de résultat ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_statisticsThis'))
{
    function odbc_statisticsThis($connection_id, $qualifier, $owner, $table_name, $unique, $accuracy)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$qualifier = (string)$qualifier;
		$owner = (string)$owner;
		$table_name = (string)$table_name;
		$unique = (int)$unique;
		$accuracy = (int)$accuracy;

		return odbc_statistics($connection_id, $qualifier, $owner, $table_name, $unique, $accuracy);
    }
}

/**
 * odbc_tableprivilegesThis
 *
 * Liste les tables et leurs privilèges.
 *
 * @link http://php.net/manual/fr/function.odbc-tableprivileges.php Documentation pour odbc_tableprivileges.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $qualifier    Le qualifieur.
 * @param string   $owner    Le propriétaire. Acceptent des masques de recherche ('%' pour remplacer zéro ou plus caractères, et '_' pour n'en remplacer qu'un seul).
 * @param string   $name    Le nom. Acceptent des masques de recherche ('%' pour remplacer zéro ou plus caractères, et '_' pour n'en remplacer qu'un seul).
 *
 * @return resource	Retourne un identifiant de résultat ODBC ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_tableprivilegesThis'))
{
    function odbc_tableprivilegesThis($connection_id, $qualifier, $owner, $name)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$qualifier = (string)$qualifier;
		$owner = (string)$owner;
		$name = (string)$name;

		return odbc_tableprivileges($connection_id, $qualifier, $owner, $name);
    }
}

/**
 * odbc_tablesThis
 *
 * Liste les tables d'une source.
 *
 * @link http://php.net/manual/fr/function.odbc-tables.php Documentation pour odbc_tables.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection_id    L'identifiant de connexion ODBC, voir la documentation de la fonction odbc_connect() pour plus de détails.
 * @param string   $qualifier    Le qualifieur.
 * @param string   $owner    Le propriétaire. Accepte des masques de recherche ('%' pour remplacer zéro ou plus caractères, et '_' pour n'en remplacer qu'un seul).
 * @param string   $name    Le nom. Accepte des masques de recherche ('%' pour remplacer zéro ou plus caractères, et '_' pour n'en remplacer qu'un seul).
 * @param string   $types    Si table_type n'est pas une chaîne vide, il doit contenir une liste de valeurs, séparées par des virgules, qui représentent les types recherchés. Chaque valeur peut être insérée entre guillemets simples ('), ou sans guillemets. Par exemple, "'TABLE','VIEW'" ou "TABLE, VIEW". Si la source de données ne supporte pas un type de table donné, odbc_tables() ne retournera aucun résultat pour ce type.
 *
 * @return resource	Retourne un identifiant de résultat ODBC contenant les informations ou FALSE si une erreur survient.
 *
 */
if(!function_exists('odbc_tablesThis'))
{
    function odbc_tablesThis($connection_id, $qualifier = NULL, $owner = NULL, $name = NULL, $types = NULL)
    {
		$connection_id = is_resource($connection_id) ? $connection_id : NULL;
		$qualifier = (string)$qualifier;
		$owner = (string)$owner;
		$name = (string)$name;
		$types = (string)$types;

		return odbc_tables($connection_id, $qualifier, $owner, $name, $types);
    }
}

/**
 * opendirThis
 *
 * Ouvre un dossier, et récupère un pointeur dessus.
 *
 * @link http://php.net/manual/fr/function.opendir.php Documentation pour opendir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Le chemin du répertoire à ouvrir
 * @param resource $context    Pour la description du paramètre context, référez-vous à la section des flux du manuel.
 *
 * @return resource	Retourne la ressource de dossier en cas de succès ou FALSE en cas d'échec.
 *
 */
if(!function_exists('opendirThis'))
{
    function opendirThis($path, $context = NULL)
    {
		$path = (string)$path;
		$context = is_resource($context) ? $context : NULL;

		return opendir($path, $context);
    }
}

/**
 * openlogThis
 *
 * Ouvre la connexion à l'historique système.
 *
 * @link http://php.net/manual/fr/function.openlog.php Documentation pour openlog.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $ident    La chaîne ident sera ajoutée à chaque message.
 * @param int      $option    L'argument option indique les options de journalisation utilisées pour générer le message.
 * @param int      $facility    L'argument facility sert à indiquer quel programme enregistre ce message. Cela vous permet de spécifier (sur la machine d'historique) comment traiter les messages venant de plusieurs serveurs.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openlogThis'))
{
    function openlogThis($ident, $option, $facility)
    {
		$ident = (string)$ident;
		$option = (int)$option;
		$facility = (int)$facility;

		return openlog($ident, $option, $facility);
    }
}

/**
 * openssl_cipher_iv_lengthThis
 *
 * Récupère la longueur cipher iv.
 *
 * @link http://php.net/manual/fr/function.openssl-cipher-iv-length.php Documentation pour openssl_cipher_iv_length.
 *
 * @version PHP 5 >= PHP 5.3.3
 *
 * @param string   $method    La méthode.
 *
 * @return int	Retourne la longueur cipher en cas de succès, ou $false; si une erreur survient.
 *
 */
if(!function_exists('openssl_cipher_iv_lengthThis'))
{
    function openssl_cipher_iv_lengthThis($method)
    {
		$method = (string)$method;

		return openssl_cipher_iv_length($method);
    }
}

/**
 * openssl_csr_exportThis
 *
 * Exporte un CSR vers un fichier ou une variable.
 *
 * @link http://php.net/manual/fr/function.openssl-csr-export.php Documentation pour openssl_csr_export.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $csr
 * @param string   &$out
 * @param bool     $notext    Le paramètre optionnel notext affecte le niveau verbeux de l'affichage ; s'il vaut FALSE, des informations humainement lisibles seront ajoutées dans l'affichage. Par défaut, le paramètre notext vaut TRUE.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_csr_exportThis'))
{
    function openssl_csr_exportThis($csr, &$out, $notext = true)
    {
		$csr = is_resource($csr) ? $csr : NULL;
		$out = (string)$out;
		$notext = (bool)$notext;

		return openssl_csr_export($csr, $out, $notext);
    }
}

/**
 * openssl_csr_export_to_fileThis
 *
 * Exporte une CSR vers un fichier.
 *
 * @link http://php.net/manual/fr/function.openssl-csr-export-to-file.php Documentation pour openssl_csr_export_to_file.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $csr
 * @param string   $outfilename    Chemin vers le fichier de sortie.
 * @param bool     $notext    Le paramètre optionnel notext affecte le niveau verbeux de l'affichage ; s'il vaut FALSE, des informations humainement lisibles seront ajoutées dans l'affichage. Par défaut, le paramètre notext vaut TRUE.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_csr_export_to_fileThis'))
{
    function openssl_csr_export_to_fileThis($csr, $outfilename, $notext = true)
    {
		$csr = is_resource($csr) ? $csr : NULL;
		$outfilename = (string)$outfilename;
		$notext = (bool)$notext;

		return openssl_csr_export_to_file($csr, $outfilename, $notext);
    }
}

/**
 * openssl_csr_get_public_keyThis
 *
 * Retourne la clé publique d'un CERT.
 *
 * @link http://php.net/manual/fr/function.openssl-csr-get-public-key.php Documentation pour openssl_csr_get_public_key.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param mixed     $csr
 * @param bool     $use_shortnames
 *
 */
if(!function_exists('openssl_csr_get_public_keyThis'))
{
    function openssl_csr_get_public_keyThis($csr, $use_shortnames = true)
    {
		$csr = ($csr);
		$use_shortnames = (bool)$use_shortnames;

		return openssl_csr_get_public_key($csr, $use_shortnames);
    }
}

/**
 * openssl_csr_get_subjectThis
 *
 * Retourne le sujet d'un CERT.
 *
 * @link http://php.net/manual/fr/function.openssl-csr-get-subject.php Documentation pour openssl_csr_get_subject.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param mixed     $csr
 * @param bool     $use_shortnames
 *
 */
if(!function_exists('openssl_csr_get_subjectThis'))
{
    function openssl_csr_get_subjectThis($csr, $use_shortnames = true)
    {
		$csr = ($csr);
		$use_shortnames = (bool)$use_shortnames;

		return openssl_csr_get_subject($csr, $use_shortnames);
    }
}

/**
 * openssl_csr_newThis
 *
 * Génère une CSR.
 *
 * @link http://php.net/manual/fr/function.openssl-csr-new.php Documentation pour openssl_csr_new.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param array    $dn    Le nom distingué qui doit être utilisé dans le certificat.
 * @param resource &$privkey    privkey doit être une clé privée qui a été générée par openssl_pkey_new() (ou obtenue autrement par l'une des fonctions de la famille openssl_pkey) La clé publique sera utilisée pour signer la CSR.
 * @param array    $configargs    Par défaut, le fichier openssl.conf de votre système est utilisé pour initialiser la requête; vous pouvez spécifier une section du fichier de configuration en paramétrant la clé config_section_section de configargs. Vous pouvez aussi spécifier un fichier de configuration openssl alternatif en paramétrant la valeur de config avec le chemin du fichier à utiliser. Si les clés suivantes sont présentes dans configargs, elles se comportent comme leurs équivalents dans openssl.conf, selon la liste suivante.
 * @param array    $extraattribs    extraattribs est utilisé pour spécifier des options de configuration supplémentaires pour la CSR. Les deux paramètres dn et extraattribs sont des tableaux associatifs dont les clés sont converties en OIDs et appliquées aux parties appropriées de la requête.
 *
 * @return mixed	Retourne la CSR.
 *
 */
if(!function_exists('openssl_csr_newThis'))
{
    function openssl_csr_newThis($dn, &$privkey, $configargs = NULL, $extraattribs = NULL)
    {
		$dn = (array)$dn;
		$privkey = is_resource($privkey) ? $privkey : NULL;
		$configargs = (array)$configargs;
		$extraattribs = (array)$extraattribs;

		return openssl_csr_new($dn, $privkey, $configargs, $extraattribs);
    }
}

/**
 * openssl_csr_signThis
 *
 * Signe un CSR avec un autre certificat (ou lui-même) et génère un certificat.
 *
 * @link http://php.net/manual/fr/function.openssl-csr-sign.php Documentation pour openssl_csr_sign.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $csr    Une CSR générée précédemment par openssl_csr_new(). mais ce paramètre peut aussi être une Ca peut aussi être le chemin vers une CSR encodée au format PEM, et spécifiée avec file://path/to/csr ou une chaîne exportée par openssl_csr_export().
 * @param mixed     $cacert    Le certificat généré sera signé par le certificat cacert. Si cacert vaut NULL, le certificat généré sera autosigné.
 * @param mixed     $priv_key    priv_key est la clé privée qui correspond au certificat cacert.
 * @param int      $days    days spécifie la durée pour laquelle le certificat est valide, en nombre de jours.
 * @param array    $configargs    Vous pouvez affiner la signature CSR avec configargs. Voir la fonction openssl_csr_new() pour plus d'informations sur configargs.
 * @param int      $serial    Un numéro de série optionnel pour le certificat émis. S'il n'est pas spécifié, il vaudra 0.
 *
 * @return resource	Retourne la ressource de certificat x509 en cas de succès, FALSE sinon.
 *
 */
if(!function_exists('openssl_csr_signThis'))
{
    function openssl_csr_signThis($csr, $cacert, $priv_key, $days, $configargs = NULL, $serial = 0)
    {
		$csr = ($csr);
		$cacert = ($cacert);
		$priv_key = ($priv_key);
		$days = (int)$days;
		$configargs = (array)$configargs;
		$serial = (int)$serial;

		return openssl_csr_sign($csr, $cacert, $priv_key, $days, $configargs, $serial);
    }
}

/**
 * openssl_decryptThis
 *
 * Décrypte les données.
 *
 * @link http://php.net/manual/fr/function.openssl-decrypt.php Documentation pour openssl_decrypt.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $data    Les données.
 * @param string   $method    La méthode de cipher.
 * @param string   $password    Le password.
 * @param int      $options    Le paramètre options peut prendre comme valeur OPENSSL_RAW_DATA ou OPENSSL_ZERO_PADDING.
 * @param string   $iv    Un vecteur d'initialisation non-nul.
 *
 * @return string	La chaine décryptée en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_decryptThis'))
{
    function openssl_decryptThis($data, $method, $password, $options = 0, $iv = "")
    {
		$data = (string)$data;
		$method = (string)$method;
		$password = (string)$password;
		$options = (int)$options;
		$iv = (string)$iv;

		return openssl_decrypt($data, $method, $password, $options, $iv);
    }
}

/**
 * openssl_dh_compute_keyThis
 *
 * Calcule un secret partagé pour une valeur publique des clés DH locales et distantes.
 *
 * @link http://php.net/manual/fr/function.openssl-dh-compute-key.php Documentation pour openssl_dh_compute_key.
 *
 * @version PHP 5 >= 5.3.11
 *
 * @param string   $pub_key    La clé publique
 * @param resource $dh_key    La clé DH
 *
 * @return string	Retourne la clé calculée en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_dh_compute_keyThis'))
{
    function openssl_dh_compute_keyThis($pub_key, $dh_key)
    {
		$pub_key = (string)$pub_key;
		$dh_key = is_resource($dh_key) ? $dh_key : NULL;

		return openssl_dh_compute_key($pub_key, $dh_key);
    }
}

/**
 * openssl_digestThis
 *
 * Calcule un digest.
 *
 * @link http://php.net/manual/fr/function.openssl-digest.php Documentation pour openssl_digest.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $data    Les données.
 * @param string   $method    La méthode digest à utiliser.
 * @param bool     $raw_output    Passez à TRUE et une donnée brute sera retournée, sinon la valeur retournée sera héxadécimale.
 *
 * @return string	Retourne la valeur en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_digestThis'))
{
    function openssl_digestThis($data, $method, $raw_output = false)
    {
		$data = (string)$data;
		$method = (string)$method;
		$raw_output = (bool)$raw_output;

		return openssl_digest($data, $method, $raw_output);
    }
}

/**
 * openssl_encryptThis
 *
 * Crypte les données.
 *
 * @link http://php.net/manual/fr/function.openssl-encrypt.php Documentation pour openssl_encrypt.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $data    Les données.
 * @param string   $method    La méthode de cipher.
 * @param string   $password    Le password.
 * @param int      $options    Le paramètre options peut prendre la valeur OPENSSL_RAW_DATA ou la valeur OPENSSL_ZERO_PADDING.
 * @param string   $iv    Un vecteur d'initialisation non-nul.
 *
 * @return string	Retourne la chaine cryptée en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_encryptThis'))
{
    function openssl_encryptThis($data, $method, $password, $options = 0, $iv = "")
    {
		$data = (string)$data;
		$method = (string)$method;
		$password = (string)$password;
		$options = (int)$options;
		$iv = (string)$iv;

		return openssl_encrypt($data, $method, $password, $options, $iv);
    }
}

/**
 * openssl_error_stringThis
 *
 * Retourne le message d'erreur OpenSSL.
 *
 * @link http://php.net/manual/fr/function.openssl-error-string.php Documentation pour openssl_error_string.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 * @return string	Retourne un message d'erreur, sous la forme d'une chaîne de caractères, ou FALSE s'il n'y a plus de message à afficher.
 *
 */
if(!function_exists('openssl_error_stringThis'))
{
    function openssl_error_stringThis()
    {
		return openssl_error_string();
    }
}

/**
 * openssl_free_keyThis
 *
 * Libère les ressources.
 *
 * @link http://php.net/manual/fr/function.openssl-free-key.php Documentation pour openssl_free_key.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param resource $key_identifier
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('openssl_free_keyThis'))
{
    function openssl_free_keyThis($key_identifier)
    {
		$key_identifier = is_resource($key_identifier) ? $key_identifier : NULL;

		return openssl_free_key($key_identifier);
    }
}

/**
 * openssl_get_cipher_methodsThis
 *
 * Récupère la liste des méthodes cipher disponibles.
 *
 * @link http://php.net/manual/fr/function.openssl-get-cipher-methods.php Documentation pour openssl_get_cipher_methods.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param bool     $aliases    Passez TRUE si vous voulez que les alias de cipher soient inclus dans le tableau retourné.
 *
 * @return array	Un array des méthodes cipher disponibles.
 *
 */
if(!function_exists('openssl_get_cipher_methodsThis'))
{
    function openssl_get_cipher_methodsThis($aliases = false)
    {
		$aliases = (bool)$aliases;

		return openssl_get_cipher_methods($aliases);
    }
}

/**
 * openssl_get_md_methodsThis
 *
 * Récupère la liste des méthodes digest disponibles.
 *
 * @link http://php.net/manual/fr/function.openssl-get-md-methods.php Documentation pour openssl_get_md_methods.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param bool     $aliases    Passez TRUE si vous voulez que les alias de digest soient inclus dans le tableau retourné.
 *
 * @return array	Un array des méthodes digest disponibles.
 *
 */
if(!function_exists('openssl_get_md_methodsThis'))
{
    function openssl_get_md_methodsThis($aliases = false)
    {
		$aliases = (bool)$aliases;

		return openssl_get_md_methods($aliases);
    }
}

/**
 * openssl_openThis
 *
 * Ouvre des données scellées.
 *
 * @link http://php.net/manual/fr/function.openssl-open.php Documentation pour openssl_open.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $sealed_data
 * @param string   &$open_data    Si l'appel a réussi, les données ouvertes sont retournées dans ce paramètre.
 * @param string   $env_key
 * @param mixed     $priv_key_id
 * @param string   $method
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_openThis'))
{
    function openssl_openThis($sealed_data, &$open_data, $env_key, $priv_key_id, $method = NULL)
    {
		$sealed_data = (string)$sealed_data;
		$open_data = (string)$open_data;
		$env_key = (string)$env_key;
		$priv_key_id = ($priv_key_id);
		$method = (string)$method;

		return openssl_open($sealed_data, $open_data, $env_key, $priv_key_id, $method);
    }
}

/**
 * openssl_pbkdf2This
 *
 * Génère une chaîne PKCS5 v2 PBKDF2, par défaut un SHA-1.
 *
 * @link http://php.net/manual/fr/function.openssl-pbkdf2.php Documentation pour openssl_pbkdf2.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $password
 * @param string   $salt
 * @param int      $key_length
 * @param int      $iterations
 * @param string   $digest_algorithm
 *
 * @return string	Retourne une chaîne ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pbkdf2This'))
{
    function openssl_pbkdf2This($password, $salt, $key_length, $iterations, $digest_algorithm = NULL)
    {
		$password = (string)$password;
		$salt = (string)$salt;
		$key_length = (int)$key_length;
		$iterations = (int)$iterations;
		$digest_algorithm = (string)$digest_algorithm;

		return openssl_pbkdf2($password, $salt, $key_length, $iterations, $digest_algorithm);
    }
}

/**
 * openssl_pkcs2_exportThis
 *
 * Exporte un certificat compatible PKCS#2 dans une variable.
 *
 * @link http://php.net/manual/fr/function.openssl-pkcs2-export.php Documentation pour openssl_pkcs2_export.
 *
 * @version PHP 5 >= 5.2.2
 *
 * @param mixed     $x509    Voir les paramètres clés/Certificats pour une liste de valeurs valides.
 * @param string   &$out    En cas de succès, cette variable contiendra le PKCS#2.
 * @param mixed     $priv_key    Clé privée du fichier PKCS#2.
 * @param string   $pass    Mot de passe de chiffrement pour déverrouiller le fichier PKCS#2.
 * @param array    $args
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkcs2_exportThis'))
{
    function openssl_pkcs2_exportThis($x509, &$out, $priv_key, $pass, $args = NULL)
    {
		$x509 = ($x509);
		$out = (string)$out;
		$priv_key = ($priv_key);
		$pass = (string)$pass;
		$args = (array)$args;

		return openssl_pkcs2_export($x509, $out, $priv_key, $pass, $args);
    }
}

/**
 * openssl_pkcs2_export_to_fileThis
 *
 * Exporte un certificat compatible PKCS#2.
 *
 * @link http://php.net/manual/fr/function.openssl-pkcs2-export-to-file.php Documentation pour openssl_pkcs2_export_to_file.
 *
 * @version PHP 5 >= 5.2.2
 *
 * @param mixed     $x509    Voir les paramètres clés/Certificats pour une liste de valeurs valides.
 * @param string   $filename    Chemin vers le fichier de sortie.
 * @param mixed     $priv_key    Clé privée du fichier PKCS#2.
 * @param string   $pass    Mot de passe de chiffrement pour déverrouiller le fichier PKCS#2.
 * @param array    $args
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkcs2_export_to_fileThis'))
{
    function openssl_pkcs2_export_to_fileThis($x509, $filename, $priv_key, $pass, $args = NULL)
    {
		$x509 = ($x509);
		$filename = (string)$filename;
		$priv_key = ($priv_key);
		$pass = (string)$pass;
		$args = (array)$args;

		return openssl_pkcs2_export_to_file($x509, $filename, $priv_key, $pass, $args);
    }
}

/**
 * openssl_pkcs2_readThis
 *
 * Lit un certificat PKCS#2 dans un tableau.
 *
 * @link http://php.net/manual/fr/function.openssl-pkcs2-read.php Documentation pour openssl_pkcs2_read.
 *
 * @version PHP 5 >= 5.2.2
 *
 * @param string   $pkcs2
 * @param array    &$certs    En cas de succès, ce tableau contiendra les données du certificat.
 * @param string   $pass    Mot de passe de chiffrement pour déverrouiller le fichier PKCS#2.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkcs2_readThis'))
{
    function openssl_pkcs2_readThis($pkcs2, &$certs, $pass)
    {
		$pkcs2 = (string)$pkcs2;
		$certs = (array)$certs;
		$pass = (string)$pass;

		return openssl_pkcs2_read($pkcs2, $certs, $pass);
    }
}

/**
 * openssl_pkcs7_decryptThis
 *
 * Déchiffre un message S/MIME.
 *
 * @link http://php.net/manual/fr/function.openssl-pkcs7-decrypt.php Documentation pour openssl_pkcs7_decrypt.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $infilename
 * @param string   $outfilename    Le message déchiffré est écrit dans le fichier spécifié par ce paramètre.
 * @param mixed     $recipcert
 * @param mixed     $recipkey
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkcs7_decryptThis'))
{
    function openssl_pkcs7_decryptThis($infilename, $outfilename, $recipcert, $recipkey = NULL)
    {
		$infilename = (string)$infilename;
		$outfilename = (string)$outfilename;
		$recipcert = ($recipcert);
		$recipkey = ($recipkey);
		return openssl_pkcs7_decrypt($infilename, $outfilename, $recipcert, $recipkey);
    }
}

/**
 * openssl_pkcs7_encryptThis
 *
 * Chiffre un message S/MIME.
 *
 * @link http://php.net/manual/fr/function.openssl-pkcs7-encrypt.php Documentation pour openssl_pkcs7_encrypt.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $infile
 * @param string   $outfile
 * @param mixed     $recipcerts    Soit un certificat X.509, soit un tableau de certificats X.509.
 * @param array    $headers    headers est un tableau d'en-têtes qui seront ajoutés en tête de message, une fois que les données auront été chiffrées. headers peut être un tableau associatif, dont les clés sont les noms d'en-tête, ou bien un tableau indexé dont chaque ligne contient un en-tête complet.
 * @param int      $flags    flags peut être utilisé pour spécifier des options qui affecteront le chiffrement (voir les constantes PKCS7).
 * @param int      $cipherid    Une des constantes cipher.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkcs7_encryptThis'))
{
    function openssl_pkcs7_encryptThis($infile, $outfile, $recipcerts, $headers, $flags = 0, $cipherid = OPENSSL_CIPHER_RC2_40)
    {
		$infile = (string)$infile;
		$outfile = (string)$outfile;
		$recipcerts = ($recipcerts);
		$headers = (array)$headers;
		$flags = (int)$flags;
		$cipherid = (int)$cipherid;

		return openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, $headers, $flags, $cipherid);
    }
}

/**
 * openssl_pkcs7_signThis
 *
 * Signe un message S/MIME.
 *
 * @link http://php.net/manual/fr/function.openssl-pkcs7-sign.php Documentation pour openssl_pkcs7_sign.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $infilename
 * @param string   $outfilename
 * @param mixed     $signcert
 * @param mixed     $privkey
 * @param array    $headers    headers est un tableau d'en-têtes qui seront ajoutés aux données chiffrées (voir la fonction openssl_pkcs7_encrypt() pour plus de détails sur le format du paramètre).
 * @param int      $flags    flags sert à modifier le message final. Voyez les constantes PKCS7.
 * @param string   $extracerts    extracerts spécifie le nom du fichier contenant un ensemble de certificats supplémentaires à inclure dans la signature, qui pourront aider le destinataire à vérifier les données que vous utilisez.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkcs7_signThis'))
{
    function openssl_pkcs7_signThis($infilename, $outfilename, $signcert, $privkey, $headers, $flags = PKCS7_DETACHED, $extracerts = NULL)
    {
		$infilename = (string)$infilename;
		$outfilename = (string)$outfilename;
		$signcert = ($signcert);
		$privkey = ($privkey);
		$headers = (array)$headers;
		$flags = (int)$flags;
		$extracerts = (string)$extracerts;

		return openssl_pkcs7_sign($infilename, $outfilename, $signcert, $privkey, $headers, $flags, $extracerts);
    }
}

/**
 * openssl_pkcs7_verifyThis
 *
 * Vérifie la signature d'un message S/MIME.
 *
 * @link http://php.net/manual/fr/function.openssl-pkcs7-verify.php Documentation pour openssl_pkcs7_verify.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le message.
 * @param int      $flags    flags sert à modifier la façon dont la signature est vérifiée. Voyez les constantes PKCS7. Par défaut, la valeur est : PKCS7_DETACHED.
 * @param string   $outfilename    Si le paramètre outfilename est spécifié, il doit être une chaîne contenant le nom d'un fichier qui contient le certificat du signataire, au format PEM.
 * @param array    $cainfo    Si le paramètre cainfo est spécifié, il doit contenir les informations sur les tiers de certificats de confiance utilisé lors de la vérification. Voyez vérification des certificats pour plus de détails.
 * @param string   $extracerts    Si le paramètre extracerts est spécifié, il doit représenter le nom d'un fichier contenant un ensemble de certificats utilisés comme certificats de peu de confiance.
 * @param string   $content    Vous pouvez spécifier un nom de fichier avec le paramètre content qui peut être remplit avec les données vérifiées, mais avec les informations de signature.
 *
 * @return mixed	Retourne TRUE si la signature est vérifiée, et FALSE sinon (le message a été modifié, ou bien le certificat de signature est invalide) ou -1 si une erreur survient.
 *
 */
if(!function_exists('openssl_pkcs7_verifyThis'))
{
    function openssl_pkcs7_verifyThis($filename, $flags, $outfilename = NULL, $cainfo = NULL, $extracerts = NULL, $content = NULL)
    {
		$filename = (string)$filename;
		$flags = (int)$flags;
		$outfilename = (string)$outfilename;
		$cainfo = (array)$cainfo;
		$extracerts = (string)$extracerts;
		$content = (string)$content;

		return openssl_pkcs7_verify($filename, $flags, $outfilename, $cainfo, $extracerts, $content);
    }
}

/**
 * openssl_pkey_exportThis
 *
 * Stocke une représentation exportable de la clé dans une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.openssl-pkey-export.php Documentation pour openssl_pkey_export.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $key
 * @param string   &$out
 * @param string   $passphrase    La clé est éventuellement protégée par le mot de passe passphrase.
 * @param array    $configargs    configargs peut être utilisé pour calibrer le processus d'exportation en spécifiant ou remplaçant les options du fichier de configuration d'OpenSSl. Voyez openssl_csr_new() pour plus d'informations sur configargs.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkey_exportThis'))
{
    function openssl_pkey_exportThis($key, &$out, $passphrase = NULL, $configargs = NULL)
    {
		$key = ($key);
		$out = (string)$out;
		$passphrase = (string)$passphrase;
		$configargs = (array)$configargs;

		return openssl_pkey_export($key, $out, $passphrase, $configargs);
    }
}

/**
 * openssl_pkey_export_to_fileThis
 *
 * Sauve une clé au format ASCII dans un fichier.
 *
 * @link http://php.net/manual/fr/function.openssl-pkey-export-to-file.php Documentation pour openssl_pkey_export_to_file.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $key
 * @param string   $outfilename    Chemin du fichier de sortie.
 * @param string   $passphrase    La clé peut éventuellement être protégée par un mot de passe.
 * @param array    $configargs    configargs peut être utilisé pour calibrer le processus d'exportation en spécifiant ou remplaçant les options du fichier de configuration d'OpenSSl. Voyez openssl_csr_new() pour plus d'informations sur configargs.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkey_export_to_fileThis'))
{
    function openssl_pkey_export_to_fileThis($key, $outfilename, $passphrase = NULL, $configargs = NULL)
    {
		$key = ($key);
		$outfilename = (string)$outfilename;
		$passphrase = (string)$passphrase;
		$configargs = (array)$configargs;

		return openssl_pkey_export_to_file($key, $outfilename, $passphrase, $configargs);
    }
}

/**
 * openssl_pkey_freeThis
 *
 * Libère une clé privée.
 *
 * @link http://php.net/manual/fr/function.openssl-pkey-free.php Documentation pour openssl_pkey_free.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $key    Ressource représentant la clé.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('openssl_pkey_freeThis'))
{
    function openssl_pkey_freeThis($key)
    {
		$key = is_resource($key) ? $key : NULL;

		return openssl_pkey_free($key);
    }
}

/**
 * openssl_pkey_get_detailsThis
 *
 * Retourne un tableau contenant le détail d'une clé.
 *
 * @link http://php.net/manual/fr/function.openssl-pkey-get-details.php Documentation pour openssl_pkey_get_details.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param resource $key    Ressource représentant la clé.
 *
 * @return array	Retourne un tableau avec les détails de la clé en cas de succès, ou FALSE si une erreur survient. Le tableau retourné contient l'index bits (nombre d'octets), key (représentation sous forme de chaîne de caractères de la clé publique) et type (type de clé, parmi les constantes OPENSSL_KEYTYPE_RSA, OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH, OPENSSL_KEYTYPE_EC ou -1, signifiant "inconnu").
 *
 */
if(!function_exists('openssl_pkey_get_detailsThis'))
{
    function openssl_pkey_get_detailsThis($key)
    {
		$key = is_resource($key) ? $key : NULL;

		return openssl_pkey_get_details($key);
    }
}

/**
 * openssl_pkey_get_privateThis
 *
 * Lit une clé privée.
 *
 * @link http://php.net/manual/fr/function.openssl-pkey-get-private.php Documentation pour openssl_pkey_get_private.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $key    key peut être l'une des valeurs suivantes :
 * @param string   $passphrase    Le paramètre optionnel passphrase doit être utilisé si la clé spécifiée est chiffrée (protégée par un mot de passe).
 *
 * @return resource	Retourne une ressource positive représentant une clé en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkey_get_privateThis'))
{
    function openssl_pkey_get_privateThis($key, $passphrase = "")
    {
		$key = ($key);
		$passphrase = (string)$passphrase;

		return openssl_pkey_get_private($key, $passphrase);
    }
}

/**
 * openssl_pkey_get_publicThis
 *
 * Extrait une clé publique d'un certificat, et la prépare.
 *
 * @link http://php.net/manual/fr/function.openssl-pkey-get-public.php Documentation pour openssl_pkey_get_public.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $certificate    certificate peut avoir l'une des valeurs suivantes :
 *
 * @return resource	Retourne une ressource positive, représentant une clé en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_pkey_get_publicThis'))
{
    function openssl_pkey_get_publicThis($certificate)
    {
		$certificate = ($certificate);
		return openssl_pkey_get_public($certificate);
    }
}

/**
 * openssl_pkey_newThis
 *
 * Génère une nouvelle clé privée.
 *
 * @link http://php.net/manual/fr/function.openssl-pkey-new.php Documentation pour openssl_pkey_new.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param array    $configargs    Vous pouvez calibrer la génération de la clé (comme le nombre de bits) en utilisant le paramètre configargs. Voir la fonction openssl_csr_new() pour plus de détails sur configargs.
 *
 * @return resource	Retourne un identifiant de ressource pour la pkey en cas de succès, FALSE sinon.
 *
 */
if(!function_exists('openssl_pkey_newThis'))
{
    function openssl_pkey_newThis($configargs = NULL)
    {
		$configargs = (array)$configargs;

		return openssl_pkey_new($configargs);
    }
}

/**
 * openssl_private_decryptThis
 *
 * Déchiffre des données avec une clé privée.
 *
 * @link http://php.net/manual/fr/function.openssl-private-decrypt.php Documentation pour openssl_private_decrypt.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $data
 * @param string   &$decrypted
 * @param mixed     $key    key doit être la clé privée utilisée pour chiffrer les données.
 * @param int      $padding    padding peut être OPENSSL_PKCS1_PADDING, OPENSSL_SSLV3_PADDING, OPENSSL_PKCS1_OAEP_PADDING ou OPENSSL_NO_PADDING.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_private_decryptThis'))
{
    function openssl_private_decryptThis($data, &$decrypted, $key, $padding = OPENSSL_PKCS1_PADDING)
    {
		$data = (string)$data;
		$decrypted = (string)$decrypted;
		$key = ($key);
		$padding = (int)$padding;

		return openssl_private_decrypt($data, $decrypted, $key, $padding);
    }
}

/**
 * openssl_private_encryptThis
 *
 * Chiffre des données avec une clé privée.
 *
 * @link http://php.net/manual/fr/function.openssl-private-encrypt.php Documentation pour openssl_private_encrypt.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $data
 * @param string   &$crypted
 * @param mixed     $key
 * @param int      $padding    Le paramètre padding peut être OPENSSL_PKCS1_PADDING ou OPENSSL_NO_PADDING.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_private_encryptThis'))
{
    function openssl_private_encryptThis($data, &$crypted, $key, $padding = OPENSSL_PKCS1_PADDING)
    {
		$data = (string)$data;
		$crypted = (string)$crypted;
		$key = ($key);
		$padding = (int)$padding;

		return openssl_private_encrypt($data, $crypted, $key, $padding);
    }
}

/**
 * openssl_public_decryptThis
 *
 * Déchiffre des données avec une clé publique.
 *
 * @link http://php.net/manual/fr/function.openssl-public-decrypt.php Documentation pour openssl_public_decrypt.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $data
 * @param string   &$decrypted
 * @param mixed     $key    key doit être la clé publique qui a été utilisée pour chiffrer les données.
 * @param int      $padding    padding peut être OPENSSL_PKCS1_PADDING ou OPENSSL_NO_PADDING.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_public_decryptThis'))
{
    function openssl_public_decryptThis($data, &$decrypted, $key, $padding = OPENSSL_PKCS1_PADDING)
    {
		$data = (string)$data;
		$decrypted = (string)$decrypted;
		$key = ($key);
		$padding = (int)$padding;

		return openssl_public_decrypt($data, $decrypted, $key, $padding);
    }
}

/**
 * openssl_public_encryptThis
 *
 * Chiffre des données avec une clé publique.
 *
 * @link http://php.net/manual/fr/function.openssl-public-encrypt.php Documentation pour openssl_public_encrypt.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param string   $data
 * @param string   &$crypted    Contiendra le résultat du chiffrage.
 * @param mixed     $key    La clé publique.
 * @param int      $padding    padding peut être OPENSSL_PKCS1_PADDING, OPENSSL_SSLV3_PADDING, OPENSSL_PKCS1_OAEP_PADDING ou OPENSSL_NO_PADDING.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_public_encryptThis'))
{
    function openssl_public_encryptThis($data, &$crypted, $key, $padding = OPENSSL_PKCS1_PADDING)
    {
		$data = (string)$data;
		$crypted = (string)$crypted;
		$key = ($key);
		$padding = (int)$padding;

		return openssl_public_encrypt($data, $crypted, $key, $padding);
    }
}

/**
 * openssl_random_pseudo_bytesThis
 *
 * Génère une chaine pseudo-aléatoire d'octets.
 *
 * @link http://php.net/manual/fr/function.openssl-random-pseudo-bytes.php Documentation pour openssl_random_pseudo_bytes.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param int      $length    La taille désirée pour la chaine d'octets. Un entier positif est demandé. PHP va tenter de transtyper ce paramètre en un entier non nul pour l'utiliser.
 * @param bool     &$crypto_strong    Si fourni, détermine si l'agorithme de cryptologie utilisé doit être fort, i.e. sécurisé lorsqu'utilisé avec GPG, les mots de passe, etc... TRUE s'il le doit, FALSE sinon.
 *
 * @return string	Retourne la chaine d'octets générée en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_random_pseudo_bytesThis'))
{
    function openssl_random_pseudo_bytesThis($length, &$crypto_strong = NULL)
    {
		$length = (int)$length;
		$crypto_strong = (bool)$crypto_strong;

		return openssl_random_pseudo_bytes($length, $crypto_strong);
    }
}

/**
 * openssl_sealThis
 *
 * Scelle des données.
 *
 * @link http://php.net/manual/fr/function.openssl-seal.php Documentation pour openssl_seal.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $data
 * @param string   &$sealed_data
 * @param array    &$env_keys
 * @param array    $pub_key_ids
 * @param string   $method
 *
 * @return int	Retourne la longueur des données scellées en cas de succès, et FALSE sinon. En cas de succès, les données scellées sont placées dans le paramètre sealed_data, et les clés d'enveloppe dans env_keys.
 *
 */
if(!function_exists('openssl_sealThis'))
{
    function openssl_sealThis($data, &$sealed_data, &$env_keys, $pub_key_ids, $method = NULL)
    {
		$data = (string)$data;
		$sealed_data = (string)$sealed_data;
		$env_keys = (array)$env_keys;
		$pub_key_ids = (array)$pub_key_ids;
		$method = (string)$method;

		return openssl_seal($data, $sealed_data, $env_keys, $pub_key_ids, $method);
    }
}

/**
 * openssl_signThis
 *
 * Signe les données.
 *
 * @link http://php.net/manual/fr/function.openssl-sign.php Documentation pour openssl_sign.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $data
 * @param string   &$signature    Si l'appel à la fonction est un succès, la signature sera retournée dans le paramètre signature.
 * @param mixed     $priv_key_id
 * @param int      $signature_alg    Pour plus d'informations, reportez-vous à la liste des algorithmes de signature.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_signThis'))
{
    function openssl_signThis($data, &$signature, $priv_key_id, $signature_alg = OPENSSL_ALGO_SHA1)
    {
		$data = (string)$data;
		$signature = (string)$signature;
		$priv_key_id = ($priv_key_id);
		$signature_alg = (int)$signature_alg;

		return openssl_sign($data, $signature, $priv_key_id, $signature_alg);
    }
}

/**
 * openssl_verifyThis
 *
 * Vérifie une signature.
 *
 * @link http://php.net/manual/fr/function.openssl-verify.php Documentation pour openssl_verify.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param string   $data
 * @param string   $signature
 * @param mixed     $pub_key_id
 * @param int      $signature_alg    Pour plus d'informations, reportez-vous à la liste des algorithmes de signature.
 *
 * @return int	Retourne 1 si la signature est correcte, 0 si elle est incorrecte et -1 si une erreur survient.
 *
 */
if(!function_exists('openssl_verifyThis'))
{
    function openssl_verifyThis($data, $signature, $pub_key_id, $signature_alg = OPENSSL_ALGO_SHA1)
    {
		$data = (string)$data;
		$signature = (string)$signature;
		$pub_key_id = ($pub_key_id);
		$signature_alg = (int)$signature_alg;

		return openssl_verify($data, $signature, $pub_key_id, $signature_alg);
    }
}

/**
 * openssl_x509_check_private_keyThis
 *
 * Vérifie si une clé privée correspond à un certificat.
 *
 * @link http://php.net/manual/fr/function.openssl-x509-check-private-key.php Documentation pour openssl_x509_check_private_key.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $cert    Le certificat.
 * @param mixed     $key    La clé privée.
 *
 * @return bool	Retourne TRUE si key est la clé privée qui correspond à cert, ou FALSE sinon.
 *
 */
if(!function_exists('openssl_x509_check_private_keyThis'))
{
    function openssl_x509_check_private_keyThis($cert, $key)
    {
		$cert = ($cert);
		$key = ($key);
		return openssl_x509_check_private_key($cert, $key);
    }
}

/**
 * openssl_x509_checkpurposeThis
 *
 * Vérifie l'usage d'un certificat.
 *
 * @link http://php.net/manual/fr/function.openssl-x509-checkpurpose.php Documentation pour openssl_x509_checkpurpose.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param mixed     $x509cert    Le certificat examiné.
 * @param int      $purpose
 * @param array    $cainfo    cainfo doit être un tableau de dossiers/fichiers de CA de confiance comme décrit dans la Vérification des certificats.
 * @param string   $untrustedfile    Si spécifié, est le nom d'un fichier au format PEM contenant les certificats qui pourront aider lors de la vérification du certificat, même si une confiance limitée doit leur être portée.
 *
 * @return int	Retourne TRUE si le certificat peut être utilisé pour un but particulier, FALSE s'il ne le peut pas, ou -1 si une erreur survient.
 *
 */
if(!function_exists('openssl_x509_checkpurposeThis'))
{
    function openssl_x509_checkpurposeThis($x509cert, $purpose, $cainfo = NULL, $untrustedfile = NULL)
    {
		$x509cert = ($x509cert);
		$purpose = (int)$purpose;
		$cainfo = empty($cainfo) ? (array)array() : (array)$cainfo;
		$untrustedfile = (string)$untrustedfile;

		return openssl_x509_checkpurpose($x509cert, $purpose, $cainfo, $untrustedfile);
    }
}

/**
 * openssl_x509_exportThis
 *
 * Exporte un certificat vers une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.openssl-x509-export.php Documentation pour openssl_x509_export.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $x509    Voir les paramètres clés/Certificats pour une liste de valeurs valides.
 * @param string   &$output    En cas de succès, contiendra le PEM.
 * @param bool     $notext    Le paramètre optionnel notext affecte le niveau verbeux de l'affichage ; s'il vaut FALSE, des informations humainement lisibles seront ajoutées dans l'affichage. Par défaut, le paramètre notext vaut TRUE.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_x509_exportThis'))
{
    function openssl_x509_exportThis($x509, &$output, $notext = TRUE)
    {
		$x509 = ($x509);
		$output = (string)$output;
		$notext = (bool)$notext;

		return openssl_x509_export($x509, $output, $notext);
    }
}

/**
 * openssl_x509_export_to_fileThis
 *
 * Exporte un certificat vers un fichier.
 *
 * @link http://php.net/manual/fr/function.openssl-x509-export-to-file.php Documentation pour openssl_x509_export_to_file.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $x509    Voir les paramètres clés/Certificats pour une liste de valeurs valides.
 * @param string   $outfilename    Chemin du fichier de sortie.
 * @param bool     $notext    Le paramètre optionnel notext affecte le niveau verbeux de l'affichage ; s'il vaut FALSE, des informations humainement lisibles seront ajoutées dans l'affichage. Par défaut, le paramètre notext vaut TRUE.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_x509_export_to_fileThis'))
{
    function openssl_x509_export_to_fileThis($x509, $outfilename, $notext = TRUE)
    {
		$x509 = ($x509);
		$outfilename = (string)$outfilename;
		$notext = (bool)$notext;

		return openssl_x509_export_to_file($x509, $outfilename, $notext);
    }
}

/**
 * openssl_x509_freeThis
 *
 * Libère les ressources prises par un certificat.
 *
 * @link http://php.net/manual/fr/function.openssl-x509-free.php Documentation pour openssl_x509_free.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $x509cert
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('openssl_x509_freeThis'))
{
    function openssl_x509_freeThis($x509cert)
    {
		$x509cert = is_resource($x509cert) ? $x509cert : NULL;

		return openssl_x509_free($x509cert);
    }
}

/**
 * openssl_x509_parseThis
 *
 * Analyse un certificat X509.
 *
 * @link http://php.net/manual/fr/function.openssl-x509-parse.php Documentation pour openssl_x509_parse.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param mixed     $x509cert
 * @param bool     $shortnames    shortnames contrôle l'indexation des données dans le tableau : si shortnames vaut TRUE (valeur par défaut), alors les champs seront indexés avec la forme courte des noms, sinon, les noms longs seront utilisés. (par exemple, CN est le nom court de commonName).
 *
 * @return array	La structure des données retournées est (délibérément) non documentée, car elle est sujette à des changements sans préavis.
 *
 */
if(!function_exists('openssl_x509_parseThis'))
{
    function openssl_x509_parseThis($x509cert, $shortnames = true)
    {
		$x509cert = ($x509cert);
		$shortnames = (bool)$shortnames;

		return openssl_x509_parse($x509cert, $shortnames);
    }
}

/**
 * openssl_x509_readThis
 *
 * Analyse un certificat X.509 et retourne une ressource.
 *
 * @link http://php.net/manual/fr/function.openssl-x509-read.php Documentation pour openssl_x509_read.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param mixed     $x509certdata
 *
 * @return resource	Retourne une ressource en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('openssl_x509_readThis'))
{
    function openssl_x509_readThis($x509certdata)
    {
		$x509certdata = ($x509certdata);
		return openssl_x509_read($x509certdata);
    }
}

/**
 * ordThis
 *
 * Retourne le code ASCII d'un caractère.
 *
 * @link http://php.net/manual/fr/function.ord.php Documentation pour ord.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    Un caractère.
 *
 * @return int	Retourne la valeur ASCII, sous la forme d'un entier.
 *
 */
if(!function_exists('ordThis'))
{
    function ordThis($string)
    {
		$string = (string)$string;

		return ord($string);
    }
}

/**
 * output_add_rewrite_varThis
 *
 * Ajoute une règle de réécriture d'URL.
 *
 * @link http://php.net/manual/fr/function.output-add-rewrite-var.php Documentation pour output_add_rewrite_var.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $name    Le nom de la variable.
 * @param string   $value    La valeur de la variable.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('output_add_rewrite_varThis'))
{
    function output_add_rewrite_varThis($name, $value)
    {
		$name = (string)$name;
		$value = (string)$value;

		return output_add_rewrite_var($name, $value);
    }
}

/**
 * output_reset_rewrite_varsThis
 *
 * Annule la réécriture d'URL.
 *
 * @link http://php.net/manual/fr/function.output-reset-rewrite-vars.php Documentation pour output_reset_rewrite_vars.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('output_reset_rewrite_varsThis'))
{
    function output_reset_rewrite_varsThis()
    {
		return output_reset_rewrite_vars();
    }
}

/**
 * ovrimos_closeThis
 *
 * Ferme une connexion Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-close.php Documentation pour ovrimos_close.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $connection    L'identifiant de connexion Ovrimos, retourné par la fonction ovrimos_connect().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('ovrimos_closeThis'))
{
    function ovrimos_closeThis($connection)
    {
		$connection = (int)$connection;

		return ovrimos_close($connection);
    }
}

/**
 * ovrimos_commitThis
 *
 * Valide une transaction Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-commit.php Documentation pour ovrimos_commit.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $connection_id    L'identifiant de connexion Ovrimos, retourné par la fonction ovrimos_connect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_commitThis'))
{
    function ovrimos_commitThis($connection_id)
    {
		$connection_id = (int)$connection_id;

		return ovrimos_commit($connection_id);
    }
}

/**
 * ovrimos_connectThis
 *
 * Connexion à un serveur.
 *
 * @link http://php.net/manual/fr/function.ovrimos-connect.php Documentation pour ovrimos_connect.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $host    Le nom de l'hôte ou l'adresse IP.
 * @param string   $dborport    Soit le nom de la base de données, soit le numéro du port de connexion.
 * @param string   $user    Le nom d'utilisateur.
 * @param string   $password    Le mot de passe associé à l'utilisateur user.
 *
 * @return int	Retourne un identifiant de connexion (supérieur à 0) en cas de succès, ou 0 si une erreur survient.
 *
 */
if(!function_exists('ovrimos_connectThis'))
{
    function ovrimos_connectThis($host, $dborport, $user, $password)
    {
		$host = (string)$host;
		$dborport = (string)$dborport;
		$user = (string)$user;
		$password = (string)$password;

		return ovrimos_connect($host, $dborport, $user, $password);
    }
}

/**
 * ovrimos_cursorThis
 *
 * Retourne le nom du curseur Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-cursor.php Documentation pour ovrimos_cursor.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 *
 * @return string	Retourne le nom, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_cursorThis'))
{
    function ovrimos_cursorThis($result_id)
    {
		$result_id = (int)$result_id;

		return ovrimos_cursor($result_id);
    }
}

/**
 * ovrimos_execThis
 *
 * Exécute une requête SQL.
 *
 * @link http://php.net/manual/fr/function.ovrimos-exec.php Documentation pour ovrimos_exec.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $connection_id    Un identifiant de connexion Ovrimos, retourné par la fonction ovrimos_connect().
 * @param string   $query    La requête SQL. Évidemment, la requête SQL ne doit pas contenir de paramètres. Utilisez la fonction ovrimos_prepare() pour les requêtes préparées.
 *
 * @return int	Retourne l'identifiant de résultat, sous la forme d'un entier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_execThis'))
{
    function ovrimos_execThis($connection_id, $query)
    {
		$connection_id = (int)$connection_id;
		$query = (string)$query;

		return ovrimos_exec($connection_id, $query);
    }
}

/**
 * ovrimos_executeThis
 *
 * Exécute une requête Ovrimos préparée.
 *
 * @link http://php.net/manual/fr/function.ovrimos-execute.php Documentation pour ovrimos_execute.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat Ovrimos, préparé par la fonction ovrimos_prepare().
 * @param array    $parameters_array    Si la requête préparée contient des paramètres (des points d'interrogation dans la requête), un nombre correct de paramètres doit être passé dans le tableau.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_executeThis'))
{
    function ovrimos_executeThis($result_id, $parameters_array = NULL)
    {
		$result_id = (int)$result_id;
		$parameters_array = (array)$parameters_array;

		return ovrimos_execute($result_id, $parameters_array);
    }
}

/**
 * ovrimos_fetch_intoThis
 *
 * Lit une ligne dans un résultat Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-fetch-into.php Documentation pour ovrimos_fetch_into.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param array    &$result_array    Vous devez passer un tableau par référence. Il sera complété par les valeurs récupérées.
 * @param string   $how    Détermine la façon dont les lignes sont récupérées. Peut être une des chaînes suivantes (la casse n'est pas significatif) :
 * @param int      $rownumber    Le numéro de la ligne, en commençant à 0. Seulement nécessaire lorsque how est défini à Absolute.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_fetch_intoThis'))
{
    function ovrimos_fetch_intoThis($result_id, &$result_array, $how = NULL, $rownumber = NULL)
    {
		$result_id = (int)$result_id;
		$result_array = (array)$result_array;
		$how = (string)$how;
		$rownumber = (int)$rownumber;

		return ovrimos_fetch_into($result_id, $result_array, $how, $rownumber);
    }
}

/**
 * ovrimos_fetch_rowThis
 *
 * Lit une ligne dans un résultat Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-fetch-row.php Documentation pour ovrimos_fetch_row.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param int      $how    Détermine la façon dont les lignes sont récupérées. Peut être une des chaînes suivantes (la casse n'est pas significative) :
 * @param int      $row_number    Le numéro de la ligne, en commençant à 0. Seulement nécessaire lorsque how est défini à Absolute.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_fetch_rowThis'))
{
    function ovrimos_fetch_rowThis($result_id, $how = NULL, $row_number = NULL)
    {
		$result_id = (int)$result_id;
		$how = (int)$how;
		$row_number = (int)$row_number;

		return ovrimos_fetch_row($result_id, $how, $row_number);
    }
}

/**
 * ovrimos_field_lenThis
 *
 * Retourne la taille d'une colonne Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-field-len.php Documentation pour ovrimos_field_len.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param int      $field_number    Le numéro du champ. La numérotation commence à 1.
 *
 * @return int	Retourne la taille, sous la forme d'un entier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_field_lenThis'))
{
    function ovrimos_field_lenThis($result_id, $field_number)
    {
		$result_id = (int)$result_id;
		$field_number = (int)$field_number;

		return ovrimos_field_len($result_id, $field_number);
    }
}

/**
 * ovrimos_field_nameThis
 *
 * Retourne le nom d'une colonne Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-field-name.php Documentation pour ovrimos_field_name.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param int      $field_number    Le numéro du champ. La numérotation commence à 1.
 *
 * @return string	Retourne le nom du champ, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_field_nameThis'))
{
    function ovrimos_field_nameThis($result_id, $field_number)
    {
		$result_id = (int)$result_id;
		$field_number = (int)$field_number;

		return ovrimos_field_name($result_id, $field_number);
    }
}

/**
 * ovrimos_field_numThis
 *
 * Retourne le numéro de colonne Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-field-num.php Documentation pour ovrimos_field_num.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param string   $field_name    Le nom du champ.
 *
 * @return int	Retourne l'index, en commençant à 1, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_field_numThis'))
{
    function ovrimos_field_numThis($result_id, $field_name)
    {
		$result_id = (int)$result_id;
		$field_name = (string)$field_name;

		return ovrimos_field_num($result_id, $field_name);
    }
}

/**
 * ovrimos_field_typeThis
 *
 * Retourne le type numérique d'une colonne Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-field-type.php Documentation pour ovrimos_field_type.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param int      $field_number    Un index, en commençant à 0.
 *
 * @return int	Retourne le type du champ, sous la forme d'un entier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_field_typeThis'))
{
    function ovrimos_field_typeThis($result_id, $field_number)
    {
		$result_id = (int)$result_id;
		$field_number = (int)$field_number;

		return ovrimos_field_type($result_id, $field_number);
    }
}

/**
 * ovrimos_free_resultThis
 *
 * Libère les ressources utilisées par un résultat Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-free-result.php Documentation pour ovrimos_free_result.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 *
 * @return bool	Retourne TRUE.
 *
 */
if(!function_exists('ovrimos_free_resultThis'))
{
    function ovrimos_free_resultThis($result_id)
    {
		$result_id = (int)$result_id;

		return ovrimos_free_result($result_id);
    }
}

/**
 * ovrimos_longreadlenThis
 *
 * Indique la taille des données à lire dans une colonne de grande taille.
 *
 * @link http://php.net/manual/fr/function.ovrimos-longreadlen.php Documentation pour ovrimos_longreadlen.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param int      $length    Le nombre d'octets à récupérer. Par défaut, 0.
 *
 * @return bool	Retourne TRUE.
 *
 */
if(!function_exists('ovrimos_longreadlenThis'))
{
    function ovrimos_longreadlenThis($result_id, $length)
    {
		$result_id = (int)$result_id;
		$length = (int)$length;

		return ovrimos_longreadlen($result_id, $length);
    }
}

/**
 * ovrimos_num_fieldsThis
 *
 * Retourne le nombre de colonnes Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-num-fields.php Documentation pour ovrimos_num_fields.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 *
 * @return int	Retourne le nombre de colonnes, sous la forme d'un entier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_num_fieldsThis'))
{
    function ovrimos_num_fieldsThis($result_id)
    {
		$result_id = (int)$result_id;

		return ovrimos_num_fields($result_id);
    }
}

/**
 * ovrimos_num_rowsThis
 *
 * Retourne le nombre de lignes affectées par une modification Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-num-rows.php Documentation pour ovrimos_num_rows.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 *
 * @return int	Retourne le nombre de lignes, sous la forme d'un entier, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_num_rowsThis'))
{
    function ovrimos_num_rowsThis($result_id)
    {
		$result_id = (int)$result_id;

		return ovrimos_num_rows($result_id);
    }
}

/**
 * ovrimos_prepareThis
 *
 * Prépare une requête SQL Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-prepare.php Documentation pour ovrimos_prepare.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $connection_id    Un identifiant de connexion Ovrimos, retourné par la fonction ovrimos_connect().
 * @param string   $query    La requête SQL.
 *
 * @return int	Retourne un identifiant de résultat en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_prepareThis'))
{
    function ovrimos_prepareThis($connection_id, $query)
    {
		$connection_id = (int)$connection_id;
		$query = (string)$query;

		return ovrimos_prepare($connection_id, $query);
    }
}

/**
 * ovrimos_resultThis
 *
 * Lit le contenu d'une colonne Ovrimos.
 *
 * @link http://php.net/manual/fr/function.ovrimos-result.php Documentation pour ovrimos_result.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Un identifiant de résultat, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param mixed     $field    Soit une chaîne de caractères représentant le nom du champ, soit son index (en commençant à 1).
 *
 * @return string	Retourne le nom de la colonne, sous la forme d'une chaîne de caractères, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_resultThis'))
{
    function ovrimos_resultThis($result_id, $field)
    {
		$result_id = (int)$result_id;
		$field = ($field);
		return ovrimos_result($result_id, $field);
    }
}

/**
 * ovrimos_result_allThis
 *
 * Affiche un résultat Ovrimos sous forme de tableau HTML.
 *
 * @link http://php.net/manual/fr/function.ovrimos-result-all.php Documentation pour ovrimos_result_all.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $result_id    Une ressource de résultats, retourné par la fonction ovrimos_execute() ou la fonction ovrimos_exec().
 * @param string   $format    Attributs HTML optionnels pour les éléments du tableau généré.
 *
 * @return int	Retourne le nombre de lignes générées dans le tableau.
 *
 */
if(!function_exists('ovrimos_result_allThis'))
{
    function ovrimos_result_allThis($result_id, $format = NULL)
    {
		$result_id = (int)$result_id;
		$format = (string)$format;

		return ovrimos_result_all($result_id, $format);
    }
}

/**
 * ovrimos_rollbackThis
 *
 * Annule une transaction.
 *
 * @link http://php.net/manual/fr/function.ovrimos-rollback.php Documentation pour ovrimos_rollback.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $connection_id    Un identifiant de connexion Ovrimos, retourné par la fonction ovrimos_connect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('ovrimos_rollbackThis'))
{
    function ovrimos_rollbackThis($connection_id)
    {
		$connection_id = (int)$connection_id;

		return ovrimos_rollback($connection_id);
    }
}

/**
 * packThis
 *
 * Compacte des données dans une chaîne binaire.
 *
 * @link http://php.net/manual/fr/function.pack.php Documentation pour pack.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    La chaîne de caractères format consiste en des codes de format suivis par un argument répéteur optionnel. Le répéteur peut être soit une valeur entière, soit * pour une répétition jusqu'à la fin des données d'entrées. Pour a, A, h, H, le répéteur spécifie combien de caractères d'une donnée est pris, pour @, c'est la position absolue où l'on insère les prochaines données, pour tout le reste, le répéteur spécifie combien d'arguments de données sont consommés et compactés dans la chaîne binaire résultante. Les formats actuellement acceptés sont :
 * @param mixed     $args
 * @param mixed     $item
 *
 * @return string	Retourne une chaîne de caractères binaire contenant les données.
 *
 */
if(!function_exists('packThis'))
{
    function packThis($format, $args = NULL, $args1 = NULL)
    {
		$format = (string)$format;
		$args = ($args);
		$args1 = ($args1);
		return pack($format, $args, $args1);
    }
}

/**
 * parse_ini_fileThis
 *
 * Analyse un fichier de configuration.
 *
 * @link http://php.net/manual/fr/function.parse-ini-file.php Documentation pour parse_ini_file.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier de configuration à analyser.
 * @param bool     $process_sections    En passant le deuxième paramètre optionnel à process_sections, vous obtiendrez un tableau multidimensionnel avec les noms des sections. La valeur par défaut de ce paramètre est FALSE
 * @param int      $scanner_mode    Peut être INI_SCANNER_NORMAL (défaut) ou INI_SCANNER_RAW. Si INI_SCANNER_RAW est fourni, alors les valeurs en option ne seront pas analysées.
 *
 * @return array	La configuration est retournée sous la forme d'un tableau associatif en cas de succès, et FALSE si une erreur survient.
 *
 */
if(!function_exists('parse_ini_fileThis'))
{
    function parse_ini_fileThis($filename, $process_sections = false, $scanner_mode = INI_SCANNER_NORMAL)
    {
		$filename = (string)$filename;
		$process_sections = (bool)$process_sections;
		$scanner_mode = (int)$scanner_mode;

		return parse_ini_file($filename, $process_sections, $scanner_mode);
    }
}

/**
 * parse_ini_stringThis
 *
 * Analyse une chaîne de configuration.
 *
 * @link http://php.net/manual/fr/function.parse-ini-string.php Documentation pour parse_ini_string.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $ini    Le contenu de type ini à analyser.
 * @param bool     $process_sections    En activant le paramètre process_sections avec TRUE, vous obtiendrez un tableau multidimensionnel, avec les noms de sections et de directives. La valeur par défaut du paramètre process_sections est FALSE
 * @param int      $scanner_mode    Peut prendre les valeurs des constantes INI_SCANNER_NORMAL (par défaut) ou INI_SCANNER_RAW. Si INI_SCANNER_RAW est utilisé, les valeurs des options ne seront pas analysées.
 *
 * @return array	Les directives sont retournées sous forme de tableau array en cas de succès, et FALSE en cas d'erreur.
 *
 */
if(!function_exists('parse_ini_stringThis'))
{
    function parse_ini_stringThis($ini, $process_sections = false, $scanner_mode = INI_SCANNER_NORMAL)
    {
		$ini = (string)$ini;
		$process_sections = (bool)$process_sections;
		$scanner_mode = (int)$scanner_mode;

		return parse_ini_string($ini, $process_sections, $scanner_mode);
    }
}

/**
 * parse_strThis
 *
 * Analyse une requête HTTP.
 *
 * @link http://php.net/manual/fr/function.parse-str.php Documentation pour parse_str.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param array    &$arr    Si le second paramètre arr est fourni, les variables y seront stockées, sous forme d'index de tableau.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('parse_strThis'))
{
    function parse_strThis($str, &$arr = NULL)
    {
		$str = (string)$str;
		$arr = (array)$arr;

		return parse_str($str, $arr);
    }
}

/**
 * parse_urlThis
 *
 * Analyse une URL et retourne ses composants.
 *
 * @link http://php.net/manual/fr/function.parse-url.php Documentation pour parse_url.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $url    L'URL à analyser. Les caractères invalides sont remplacés par des caractères soulignés _.
 * @param int      $component    Peut être une des constantes parmi PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY ou PHP_URL_FRAGMENT pour récupérer uniquement une partie de l'URL en tant que chaîne de caractères (sauf lorsque PHP_URL_PORT est fourni ; dans ce cas, la valeur retournée sera un entier).
 *
 * @return mixed	Pour les URL vraiment mal formées, parse_url() peut retourner FALSE.
 *
 */
if(!function_exists('parse_urlThis'))
{
    function parse_urlThis($url, $component = -1)
    {
		$url = (string)$url;
		$component = (int)$component;

		return parse_url($url, $component);
    }
}

/**
 * passthruThis
 *
 * Exécute un programme externe et affiche le résultat brut.
 *
 * @link http://php.net/manual/fr/function.passthru.php Documentation pour passthru.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $command    La commande à exécuter.
 * @param int      &$return_var    Si l'argument return_var est présent, le statut retourné par la commande Unix sera placé dans cette variable.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('passthruThis'))
{
    function passthruThis($command, &$return_var = NULL)
    {
		$command = (string)$command;
		$return_var = (int)$return_var;

		return passthru($command, $return_var);
    }
}

/**
 * password_get_infoThis
 *
 * Retourne des informations à propos de la table de hachage fournie.
 *
 * @link http://php.net/manual/fr/function.password-get-info.php Documentation pour password_get_info.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $hash    Un hachage créé par la fonction password_hash().
 *
 * @return array	Retourne un tableau associatif contenant 3 éléments : algo, qui correspond à une constante d'algorithme de mot de passe ; algoName, qui correspond à un nom humainement lisible de l'algorithme ; et options, qui inclut les options fournies lors de l'appel à la fonction password_hash().
 *
 */
if(!function_exists('password_get_infoThis'))
{
    function password_get_infoThis($hash)
    {
		$hash = (string)$hash;

		return password_get_info($hash);
    }
}

/**
 * password_hashThis
 *
 * Crée une table de hachage pour un mot de passe.
 *
 * @link http://php.net/manual/fr/function.password-hash.php Documentation pour password_hash.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $password    Le mot de passe utilisateur.
 * @param integer  $algo    Une constantes de l'algorithme de mot de passe représentant l'algorithme à utiliser lors du hachage du mot de passe.
 * @param array    $options    Un tableau associatif contenant les options. Actuellement, deux options sont supportées : salt, pour fournir un salt à utiliser lors du hachage du mot de passe, et cost, qui représente le coût algorithmique à utiliser. Des exemples de ces valeurs peuvent être trouvés sur la page de la fonction crypt(). Si omis, un salt aléatoire sera créé et le cost par défaut sera utilisé.
 *
 * @return string	Retourne le mot de passe haché, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('password_hashThis'))
{
    function password_hashThis($password, $algo, $options = NULL)
    {
		$password = (string)$password;
		$algo = (integer)$algo;
		$options = (array)$options;

		return password_hash($password, $algo, $options);
    }
}

/**
 * password_needs_rehashThis
 *
 * Vérifie si la table de hachage fournie correspond aux options fournies.
 *
 * @link http://php.net/manual/fr/function.password-needs-rehash.php Documentation pour password_needs_rehash.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $hash    Un hachage créé par la fonction password_hash().
 * @param string   $algo    Une constantes de l'algorithme de mot de passe représentant l'algorithme à utiliser lors du hachage du mot de passe.
 * @param string   $options    Un tableau associatif contenant les options. Actuellement, deux options sont supportées : salt, pour fournir un salt à utiliser lors du hachage du mot de passe, et cost, qui représente le coût algorithmique à utiliser. Des exemples de ces valeurs peuvent être trouvés sur la page de la fonction crypt(). Si omis, la valeur par défaut de cost sera utilisée.
 *
 * @return boolean	Retourne TRUE si la table de hachage doit être re-générée pour correspondre aux paramètres algo et options fournis, ou FALSE sinon.
 *
 */
if(!function_exists('password_needs_rehashThis'))
{
    function password_needs_rehashThis($hash, $algo, $options = NULL)
    {
		$hash = (string)$hash;
		$algo = (string)$algo;
		$options = (string)$options;

		return password_needs_rehash($hash, $algo, $options);
    }
}

/**
 * password_verifyThis
 *
 * Vérifie qu'un mot de passe correspond à une table de hachage.
 *
 * @link http://php.net/manual/fr/function.password-verify.php Documentation pour password_verify.
 *
 * @version PHP 5 >= 5.5.0
 *
 * @param string   $password    Le mot de passe utilisateur.
 * @param string   $hash    Un hachage créé par la fonction password_hash().
 *
 * @return boolean	Retourne TRUE si le mot de passe et la table de hachage correspondent, ou FALSE sinon.
 *
 */
if(!function_exists('password_verifyThis'))
{
    function password_verifyThis($password, $hash)
    {
		$password = (string)$password;
		$hash = (string)$hash;

		return password_verify($password, $hash);
    }
}

/**
 * pathinfoThis
 *
 * Retourne des informations sur un chemin système.
 *
 * @link http://php.net/manual/fr/function.pathinfo.php Documentation pour pathinfo.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param string   $path    Le chemin à analyser.
 * @param int      $options    Spécifie quel élément sera retourné. Vous pouvez associer les constantes PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION et PATHINFO_FILENAME. Si options n'est pas renseigné, tous les éléments sont retournés.
 *
 * @return mixed	Si options n'est pas utilisé, cette fonction retournera un tableau associatif contenant les éléments suivants : dirname, basename, extension (s'il y en a), et filename.
 *
 */
if(!function_exists('pathinfoThis'))
{
    function pathinfoThis($path, $options = NULL)
    {
		$path = (string)$path;
		$options = empty($options) ? (int)PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME : (int)$options;

		return pathinfo($path, $options);
    }
}

/**
 * pcloseThis
 *
 * Ferme un processus de pointeur de fichier.
 *
 * @link http://php.net/manual/fr/function.pclose.php Documentation pour pclose.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide, et avoir été ouvert correctement par popen().
 *
 * @return int	Retourne le statut final du processus exécuté ou -1 en cas d'echec.
 *
 */
if(!function_exists('pcloseThis'))
{
    function pcloseThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return pclose($handle);
    }
}

/**
 * pcntl_alarmThis
 *
 * Planifie une alarme pour délivrer un signal.
 *
 * @link http://php.net/manual/fr/function.pcntl-alarm.php Documentation pour pcntl_alarm.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $seconds    Le nombre de secondes à attendre. Si seconds vaut 0, aucune nouvelle alarme ne sera créée.
 *
 * @return int	Retourne le temps en seconde qui reste avant l'exécution de l'alarme précédente, ou 0 si aucune alarme n'était planifiée.
 *
 */
if(!function_exists('pcntl_alarmThis'))
{
    function pcntl_alarmThis($seconds)
    {
		$seconds = (int)$seconds;

		return pcntl_alarm($seconds);
    }
}

/**
 * pcntl_execThis
 *
 * Exécute le programme indiqué dans l'espace courant de processus.
 *
 * @link http://php.net/manual/fr/function.pcntl-exec.php Documentation pour pcntl_exec.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $path    path doit être le chemin vers un binaire exécutable ou un script avec un chemin valide pointant vers un exécutable à la première ligne (par exemple, #!/usr/local/bin/perl). Voir les pages d'aide de votre système concernant execve(2) pour plus d'informations.
 * @param array    $args    args est un tableau d'arguments sous la forme de chaînes de caractères passées au programme.
 * @param array    $envs    envs est un tableau de chaînes de caractères qui sont passées au programme comme variables d'environnement. Le tableau est de la forme nom => valeur, la clé est le nom de la variable d'environnement et la valeur est la valeur de cette variable.
 *
 * @return void	Retourne FALSE si une erreur survient et ne retourne rien en cas de succès.
 *
 */
if(!function_exists('pcntl_execThis'))
{
    function pcntl_execThis($path, $args = NULL, $envs = NULL)
    {
		$path = (string)$path;
		$args = (array)$args;
		$envs = (array)$envs;

		return pcntl_exec($path, $args, $envs);
    }
}

/**
 * pcntl_forkThis
 *
 * Duplique le process courant.
 *
 * @link http://php.net/manual/fr/function.pcntl-fork.php Documentation pour pcntl_fork.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 * @return int	En cas de succès, le PID (identifiant de processus) du fils est retourné dans le processus père, et 0 est retourné dans le processus fils. En cas d'échec, -1 est retourné dans le contexte du père, aucun processus fils ne sera créé et PHP générera une erreur.
 *
 */
if(!function_exists('pcntl_forkThis'))
{
    function pcntl_forkThis()
    {
		return pcntl_fork();
    }
}

/**
 * pcntl_get_last_errorThis
 *
 * Récupère le numéro de l'erreur générée par la dernière fonction pcntl utilisée.
 *
 * @link http://php.net/manual/fr/function.pcntl-get-last-error.php Documentation pour pcntl_get_last_error.
 *
 * @version PHP 5 >= 5.3.4
 * @return int	Returns error code.
 *
 */
if(!function_exists('pcntl_get_last_errorThis'))
{
    function pcntl_get_last_errorThis()
    {
		return pcntl_get_last_error();
    }
}

/**
 * pcntl_getpriorityThis
 *
 * Retourne la priorité d'un processus.
 *
 * @link http://php.net/manual/fr/function.pcntl-getpriority.php Documentation pour pcntl_getpriority.
 *
 * @version PHP 5
 *
 * @param int      $pid    Si non spécifié, le pid du processus courant est utilisé.
 * @param int      $process_identifier    Une constante parmi PRIO_PGRP, PRIO_USER ou PRIO_PROCESS.
 *
 * @return int	pcntl_getpriority() retourne la priorité du processus ou FALSE en cas d'erreur. Une valeur numérique plus petite rend la planification plus favorable.
 *
 */
if(!function_exists('pcntl_getpriorityThis'))
{
    function pcntl_getpriorityThis($pid = NULL, $process_identifier = PRIO_PROCESS)
    {
		$pid = empty($pid) ? (int)getmypid() : (int)$pid;
		$process_identifier = (int)$process_identifier;

		return pcntl_getpriority($pid, $process_identifier);
    }
}

/**
 * pcntl_setpriorityThis
 *
 * Change la priorité d'un processus.
 *
 * @link http://php.net/manual/fr/function.pcntl-setpriority.php Documentation pour pcntl_setpriority.
 *
 * @version PHP 5
 *
 * @param int      $priority    priority est généralement une valeur allant de -20 à 20. La priorité par défaut est 0 tandis qu'une valeur numérique plus petite favorise une meilleure planification. Comme les niveaux de priorité changent entre les types de systèmes et les versions de kernel, lisez la page de manuel getpriority(2) de votre système pour des détails spécifiques.
 * @param int      $pid    Si non spécifié, le pid du processus courant est utilisé.
 * @param int      $process_identifier    Une constante parmi PRIO_PGRP, PRIO_USER ou PRIO_PROCESS.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pcntl_setpriorityThis'))
{
    function pcntl_setpriorityThis($priority, $pid = NULL, $process_identifier = PRIO_PROCESS)
    {
		$priority = (int)$priority;
		$pid = empty($pid) ? (int)getmypid() : (int)$pid;
		$process_identifier = (int)$process_identifier;

		return pcntl_setpriority($priority, $pid, $process_identifier);
    }
}

/**
 * pcntl_signalThis
 *
 * Installe un gestionnaire de signaux.
 *
 * @link http://php.net/manual/fr/function.pcntl-signal.php Documentation pour pcntl_signal.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $signo    Le numéro du signal.
 * @param callable     $handler    Le gestionnaire de signaux est affecté à handler qui peut être le nom d'une fonction utilisateur, ou bien l'une des deux constantes globales SIG_IGN et SIG_DFL.
 * @param bool     $restart_syscalls    Le paramètre optionnel restart_syscalls spécifie si l'appel système de redémarrage (restarting) doit être utilisé lorsque ce signal arrive.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pcntl_signalThis'))
{
    function pcntl_signalThis($signo, $handler, $restart_syscalls = true)
    {
		$signo = (int)$signo;
		$handler = is_callable($handler) ? $handler : NULL;
		$restart_syscalls = (bool)$restart_syscalls;

		return pcntl_signal($signo, $handler, $restart_syscalls);
    }
}

/**
 * pcntl_signal_dispatchThis
 *
 * Appelle les gestionnaires de signaux pour chaque signal en attente.
 *
 * @link http://php.net/manual/fr/function.pcntl-signal-dispatch.php Documentation pour pcntl_signal_dispatch.
 *
 * @version PHP 5 >= 5.3.0
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pcntl_signal_dispatchThis'))
{
    function pcntl_signal_dispatchThis()
    {
		return pcntl_signal_dispatch();
    }
}

/**
 * pcntl_sigprocmaskThis
 *
 * Liste et configure les signaux bloqués.
 *
 * @link http://php.net/manual/fr/function.pcntl-sigprocmask.php Documentation pour pcntl_sigprocmask.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param int      $how    Configure le comportement de pcntl_sigprocmask(). Les valeurs possibles sont :
 * @param array    $set    Liste de signaux.
 * @param array    &$oldset    Le paramètre oldset est un tableau qui contient la liste précédente des signaux bloqués.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pcntl_sigprocmaskThis'))
{
    function pcntl_sigprocmaskThis($how, $set, &$oldset = NULL)
    {
		$how = (int)$how;
		$set = (array)$set;
		$oldset = (array)$oldset;

		return pcntl_sigprocmask($how, $set, $oldset);
    }
}

/**
 * pcntl_sigtimedwaitThis
 *
 * Attend un signal dans un délai donné.
 *
 * @link http://php.net/manual/fr/function.pcntl-sigtimedwait.php Documentation pour pcntl_sigtimedwait.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param array    $set    Une liste de signaux à attendre.
 * @param array    &$siginfo    Le paramètre siginfo reçoit les informations du signal, sous forme de tableau. Voyez pcntl_sigwaitinfo().
 * @param int      $seconds    Délai d'attente maximal en secondes.
 * @param int      $nanoseconds    Délai d'attente maximal en nanosecondes.
 *
 * @return int	En cas de réussite, pcntl_sigtimedwait() retourne un numéro de signal.
 *
 */
if(!function_exists('pcntl_sigtimedwaitThis'))
{
    function pcntl_sigtimedwaitThis($set, &$siginfo = NULL, $seconds = 0, $nanoseconds = 0)
    {
		$set = (array)$set;
		$siginfo = (array)$siginfo;
		$seconds = (int)$seconds;
		$nanoseconds = (int)$nanoseconds;

		return pcntl_sigtimedwait($set, $siginfo, $seconds, $nanoseconds);
    }
}

/**
 * pcntl_sigwaitinfoThis
 *
 * Attend un signal.
 *
 * @link http://php.net/manual/fr/function.pcntl-sigwaitinfo.php Documentation pour pcntl_sigwaitinfo.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param array    $set    Un tableau de signaux à attendre.
 * @param array    &$siginfo    Le paramètre siginfo reçoit un tableau contenant les informations sur le signal. Les éléments suivants sont toujours disponibles pour tous les signaux : Les éléments suivants peuvent être disponibles pour le signal SIGCHLD : Les éléments suivants peuvent être disponibles pour les signaux SIGILL, SIGFPE, SIGSEGV et SIGBUS : Les éléments suivants peuvent être disponibles pour le signal SIGPOLL :
 *
 * @return int	En cas de succès, pcntl_sigwaitinfo() retourne le numéro du signal.
 *
 */
if(!function_exists('pcntl_sigwaitinfoThis'))
{
    function pcntl_sigwaitinfoThis($set, &$siginfo = NULL)
    {
		$set = (array)$set;
		$siginfo = (array)$siginfo;

		return pcntl_sigwaitinfo($set, $siginfo);
    }
}

/**
 * pcntl_strerrorThis
 *
 * Récupère le message d'erreur système associé avec l'errno fourni.
 *
 * @link http://php.net/manual/fr/function.pcntl-strerror.php Documentation pour pcntl_strerror.
 *
 * @version PHP 5 >= 5.3.4
 *
 * @param int      $errno
 *
 * @return string	Retourne la description de l'erreur en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pcntl_strerrorThis'))
{
    function pcntl_strerrorThis($errno)
    {
		$errno = (int)$errno;

		return pcntl_strerror($errno);
    }
}

/**
 * pcntl_waitThis
 *
 * Attend ou retourne le statut d'un processus fils.
 *
 * @link http://php.net/manual/fr/function.pcntl-wait.php Documentation pour pcntl_wait.
 *
 * @version PHP 5
 *
 * @param int      &$status    pcntl_wait() va stocker les informations de statut dans le paramètre status qui peut être lu avec les fonctions suivantes : pcntl_wifexited(), pcntl_wifstopped(), pcntl_wifsignaled(), pcntl_wexitstatus(), pcntl_wtermsig() et pcntl_wstopsig().
 * @param int      $options    Si wait3 est disponible sur votre système (c'est le cas de la plupart des systèmes BSD-), vous pouvez ajouter le paramètre optionnel options. S'il n'est pas fourni, wait() sera utilisé pour l'appel système. Si wait3 n'est pas disponible, le paramètre options n'aura pas d'effet. La valeur de options est la combinaison de zéro ou plusieurs des constantes suivantes :
 *
 * @return int	pcntl_wait() retourne l'identifiant de processus qui s'est terminé, -1 en cas d'erreur ou zéro si WNOHANG a été fourni comme option (disponible sur les systèmes wait3), et qu'aucun processus fils n'était disponible.
 *
 */
if(!function_exists('pcntl_waitThis'))
{
    function pcntl_waitThis(&$status, $options = 0)
    {
		$status = (int)$status;
		$options = (int)$options;

		return pcntl_wait($status, $options);
    }
}

/**
 * pcntl_waitpidThis
 *
 * Attend la fin de l'exécution d'un processus fils.
 *
 * @link http://php.net/manual/fr/function.pcntl-waitpid.php Documentation pour pcntl_waitpid.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $pid    La valeur de pid peut être une parmi les suivantes :
 * @param int      &$status    pcntl_waitpid() enregistrera des informations sur le statut courant du processus dans le paramètre status, auquel on peut accéder grâce aux fonctions suivantes : pcntl_wifexited(), pcntl_wifstopped(), pcntl_wifsignaled(), pcntl_wexitstatus(), pcntl_wtermsig() et pcntl_wstopsig().
 * @param int      $options    Le paramètre options peut prendre la valeur zéro, ou plusieurs des constantes globales suivantes (combinez les avec l'opérateur OR) :
 *
 * @return int	pcntl_waitpid() retourne l'identifiant de processus du processus fils qui s'est terminé, ou bien -1 en cas d'erreur ou encore zéro si WNOHANG a été utilisée et qu'aucun processus fils n'était disponible.
 *
 */
if(!function_exists('pcntl_waitpidThis'))
{
    function pcntl_waitpidThis($pid, &$status, $options = 0)
    {
		$pid = (int)$pid;
		$status = (int)$status;
		$options = (int)$options;

		return pcntl_waitpid($pid, $status, $options);
    }
}

/**
 * pcntl_wexitstatusThis
 *
 * Retourne le code d'un processus fils terminé.
 *
 * @link http://php.net/manual/fr/function.pcntl-wexitstatus.php Documentation pour pcntl_wexitstatus.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $status    Le paramètre status est le paramètre status passé à un appel de pcntl_waitpid() ayant réussi.
 *
 * @return int	Retourne le code de retour, sous la forme d'un entier.
 *
 */
if(!function_exists('pcntl_wexitstatusThis'))
{
    function pcntl_wexitstatusThis($status)
    {
		$status = (int)$status;

		return pcntl_wexitstatus($status);
    }
}

/**
 * pcntl_wifexitedThis
 *
 * Vérifie si le code de retour représente une fin normale.
 *
 * @link http://php.net/manual/fr/function.pcntl-wifexited.php Documentation pour pcntl_wifexited.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $status    Le paramètre status est le paramètre status passé à un appel de pcntl_waitpid() ayant réussi.
 *
 * @return bool	Retourne TRUE si le processus fils a retourné un code qui représente une fin normale, FALSE sinon.
 *
 */
if(!function_exists('pcntl_wifexitedThis'))
{
    function pcntl_wifexitedThis($status)
    {
		$status = (int)$status;

		return pcntl_wifexited($status);
    }
}

/**
 * pcntl_wifsignaledThis
 *
 * Retourne TRUE si le code statut représente une fin due à un signal.
 *
 * @link http://php.net/manual/fr/function.pcntl-wifsignaled.php Documentation pour pcntl_wifsignaled.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $status    Le paramètre status est le paramètre status passé à un appel de pcntl_waitpid() ayant réussi.
 *
 * @return bool	Retourne TRUE si le processus fils sort car un signal n'a pu être reçu, FALSE sinon.
 *
 */
if(!function_exists('pcntl_wifsignaledThis'))
{
    function pcntl_wifsignaledThis($status)
    {
		$status = (int)$status;

		return pcntl_wifsignaled($status);
    }
}

/**
 * pcntl_wifstoppedThis
 *
 * Retourne TRUE si le processus fils est stoppé.
 *
 * @link http://php.net/manual/fr/function.pcntl-wifstopped.php Documentation pour pcntl_wifstopped.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $status    Le paramètre status est le paramètre status passé à un appel de pcntl_waitpid() ayant réussi.
 *
 * @return bool	Retourne TRUE si le processus fils est stoppé, FALSE sinon.
 *
 */
if(!function_exists('pcntl_wifstoppedThis'))
{
    function pcntl_wifstoppedThis($status)
    {
		$status = (int)$status;

		return pcntl_wifstopped($status);
    }
}

/**
 * pcntl_wstopsigThis
 *
 * Retourne le signal qui a causé l'arrêt du processus fils.
 *
 * @link http://php.net/manual/fr/function.pcntl-wstopsig.php Documentation pour pcntl_wstopsig.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $status    Le paramètre status est le paramètre status passé à un appel de pcntl_waitpid() ayant réussi.
 *
 * @return int	Retourne le numéro du signal.
 *
 */
if(!function_exists('pcntl_wstopsigThis'))
{
    function pcntl_wstopsigThis($status)
    {
		$status = (int)$status;

		return pcntl_wstopsig($status);
    }
}

/**
 * pcntl_wtermsigThis
 *
 * Retourne le signal qui a provoqué la fin du processus fils.
 *
 * @link http://php.net/manual/fr/function.pcntl-wtermsig.php Documentation pour pcntl_wtermsig.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $status    Le paramètre status est le paramètre status passé à un appel de pcntl_waitpid() ayant réussi.
 *
 * @return int	Retourne le numéro du signal, sous la forme d'un entier.
 *
 */
if(!function_exists('pcntl_wtermsigThis'))
{
    function pcntl_wtermsigThis($status)
    {
		$status = (int)$status;

		return pcntl_wtermsig($status);
    }
}

/**
 * pfsockopenThis
 *
 * Ouvre un socket de connexion Internet ou Unix persistante.
 *
 * @link http://php.net/manual/fr/function.pfsockopen.php Documentation pour pfsockopen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname
 * @param int      $port
 * @param int      &$errno
 * @param string   &$errstr
 * @param float    $timeout
 *
 */
if(!function_exists('pfsockopenThis'))
{
    function pfsockopenThis($hostname, $port = -1, &$errno = NULL, &$errstr = NULL, $timeout = NULL)
    {
		$hostname = (string)$hostname;
		$port = (int)$port;
		$errno = (int)$errno;
		$errstr = (string)$errstr;
		$timeout = empty($timeout) ? (float)ini_get("default_socket_timeout") : (float)$timeout;

		return pfsockopen($hostname, $port, $errno, $errstr, $timeout);
    }
}

/**
 * pg_affected_rowsThis
 *
 * Retourne le nombre de lignes affectées.
 *
 * @link http://php.net/manual/fr/function.pg-affected-rows.php Documentation pour pg_affected_rows.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 *
 * @return int	Le nombre de lignes affectées par la requête. S'il n'y a pas de ligne affecté, la fonction retournera 0.
 *
 */
if(!function_exists('pg_affected_rowsThis'))
{
    function pg_affected_rowsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return pg_affected_rows($result);
    }
}

/**
 * pg_cancel_queryThis
 *
 * Annule une requête asynchrone.
 *
 * @link http://php.net/manual/fr/function.pg-cancel-query.php Documentation pour pg_cancel_query.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_cancel_queryThis'))
{
    function pg_cancel_queryThis($connection)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_cancel_query($connection);
    }
}

/**
 * pg_client_encodingThis
 *
 * Lit l'encodage du client.
 *
 * @link http://php.net/manual/fr/function.pg-client-encoding.php Documentation pour pg_client_encoding.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return string	L'encodage du client ou FALSE en cas d'échec.
 *
 */
if(!function_exists('pg_client_encodingThis'))
{
    function pg_client_encodingThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_client_encoding($connection);
    }
}

/**
 * pg_closeThis
 *
 * Termine une connexion PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-close.php Documentation pour pg_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_closeThis'))
{
    function pg_closeThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_close($connection);
    }
}

/**
 * pg_connectThis
 *
 * Établit une connexion PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-connect.php Documentation pour pg_connect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $connection_string    La chaîne connection_string peut être vide pour utiliser tous les paramètres par défaut ou elle peut contenir un ou plusieurs paramètres de configuration séparés par des espaces. Chaque paramètre de configuration est sous la forme code = valeur. Les espaces autour du signe égal sont optionnels. Pour écrire une valeur vide ou une valeur contenant des espaces, entourez cette valeur avec des apostrophes, par exemple : code = 'une valeur'. Les apostrophes et les antislashs à l'intérieur de la valeur doivent être échappés par un antislash, c'est-à-dire \' et \\. Les mots-clé actuellement reconnus sont : host, hostaddr, port, dbname (valeur par défaut: user), user, password, connect_timeout, options, tty (ignoré), sslmode, requiressl (obsolète, utilisez sslmode) et service. La liste de ces arguments dépend de la version de votre serveur PostgreSQL. Le paramètre options peut être utilisé pour passer des paramètres pour la ligne de commande invoquant le serveur.
 * @param int      $connect_type    Si PGSQL_CONNECT_FORCE_NEW est passé en argument, alors une nouvelle connexion sera créée, même si la chaîne connection_string est identique à celle de la connexion existante.
 *
 * @return resource	Ressource de connexion PostgreSQL en cas de succès, FALSE en cas d'échec.
 *
 */
if(!function_exists('pg_connectThis'))
{
    function pg_connectThis($connection_string, $connect_type = NULL)
    {
		$connection_string = (string)$connection_string;
		$connect_type = (int)$connect_type;

		return pg_connect($connection_string, $connect_type);
    }
}

/**
 * pg_connection_busyThis
 *
 * Vérifie si la connexion PostgreSQL est occupée.
 *
 * @link http://php.net/manual/fr/function.pg-connection-busy.php Documentation pour pg_connection_busy.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 *
 * @return bool	Retourne TRUE si la connexion est occupée, sinon FALSE.
 *
 */
if(!function_exists('pg_connection_busyThis'))
{
    function pg_connection_busyThis($connection)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_connection_busy($connection);
    }
}

/**
 * pg_connection_resetThis
 *
 * Relance la connexion au serveur PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-connection-reset.php Documentation pour pg_connection_reset.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_connection_resetThis'))
{
    function pg_connection_resetThis($connection)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_connection_reset($connection);
    }
}

/**
 * pg_connection_statusThis
 *
 * Lit le statut de la connexion PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-connection-status.php Documentation pour pg_connection_status.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 *
 * @return int	PGSQL_CONNECTION_OK ou PGSQL_CONNECTION_BAD.
 *
 */
if(!function_exists('pg_connection_statusThis'))
{
    function pg_connection_statusThis($connection)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_connection_status($connection);
    }
}

/**
 * pg_convertThis
 *
 * Convertit des tableaux associatifs en une commande PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-convert.php Documentation pour pg_convert.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 * @param string   $table_name    Nom de la table sur pour laquelle les types seront convertis.
 * @param array    $assoc_array    Données à être converties.
 * @param int      $options    Un nombre de PGSQL_CONV_IGNORE_DEFAULT, PGSQL_CONV_FORCE_NULL ou PGSQL_CONV_IGNORE_NOT_NULL, combiné.
 *
 * @return array	Un tableau des valeurs converties ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_convertThis'))
{
    function pg_convertThis($connection, $table_name, $assoc_array, $options = 0)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;
		$assoc_array = (array)$assoc_array;
		$options = (int)$options;

		return pg_convert($connection, $table_name, $assoc_array, $options);
    }
}

/**
 * pg_copy_fromThis
 *
 * Insère des lignes dans une table à partir d'un tableau.
 *
 * @link http://php.net/manual/fr/function.pg-copy-from.php Documentation pour pg_copy_from.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 * @param string   $table_name    Nom de la table dans laquelle rows sera copié.
 * @param array    $rows    Un tableau de données à être copié à l'intérieur de table_name. Chaque valeur dans rows devient une ligne dans table_name. Chaque valeur dans rows devrait être une chaîne délimitée par des valeurs à insérer à l'intérieur de chaque champ. Les valeurs doivent être terminées par un saut à la ligne.
 * @param string   $delimiter    Le marqueur qui sépare les valeurs pour chaque champ dans chaque élément de rows. La valeur par défaut est TAB.
 * @param string   $null_as    Comment les valeurs NULL de SQL sont représentées dans rows. La valeur par défaut est \N ("\\N").
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_copy_fromThis'))
{
    function pg_copy_fromThis($connection, $table_name, $rows, $delimiter = NULL, $null_as = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;
		$rows = (array)$rows;
		$delimiter = (string)$delimiter;
		$null_as = (string)$null_as;

		return pg_copy_from($connection, $table_name, $rows, $delimiter, $null_as);
    }
}

/**
 * pg_copy_toThis
 *
 * Copie une table dans un tableau.
 *
 * @link http://php.net/manual/fr/function.pg-copy-to.php Documentation pour pg_copy_to.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 * @param string   $table_name    Nom de la table à partir de laquelle les données dans rows seront copiées.
 * @param string   $delimiter    Le marqueur qui sépare les valeurs pour chaque champ dans chaque élément de rows. La valeur par défaut est TAB.
 * @param string   $null_as    Comment les valeurs NULL de SQL sont représentées dans rows. La valeur par défaut est \N ("\\N").
 *
 * @return array	Un tableau avec un élément pour chaque ligne de données COPY. La fonction retourne FALSE en cas d'échec.
 *
 */
if(!function_exists('pg_copy_toThis'))
{
    function pg_copy_toThis($connection, $table_name, $delimiter = NULL, $null_as = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;
		$delimiter = (string)$delimiter;
		$null_as = (string)$null_as;

		return pg_copy_to($connection, $table_name, $delimiter, $null_as);
    }
}

/**
 * pg_dbnameThis
 *
 * Retourne le nom de la base de données PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-dbname.php Documentation pour pg_dbname.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return string	Une chaîne de type string contenant le nom de la base de données associée à la connexion connection ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_dbnameThis'))
{
    function pg_dbnameThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_dbname($connection);
    }
}

/**
 * pg_deleteThis
 *
 * Efface des lignes PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-delete.php Documentation pour pg_delete.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion PostgreSQL.
 * @param string   $table_name    Nom de la table depuis laquelle les lignes seront effacées.
 * @param array    $assoc_array    Un tableau où les clés sont les noms des champs de la table table_name et où les valeurs sont les valeurs de ces champs qui sont à effacés.
 * @param int      $options    Toute combinaison des valeurs suivantes : PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC ou PGSQL_DML_STRING. Si PGSQL_DML_STRING fait partie du paramètre options alors, la requête sera retournée.
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Retourne une chaîne de caractères si PGSQL_DML_STRING est passé dans le paramètre options.
 *
 */
if(!function_exists('pg_deleteThis'))
{
    function pg_deleteThis($connection, $table_name, $assoc_array, $options = PGSQL_DML_EXEC)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;
		$assoc_array = (array)$assoc_array;
		$options = (int)$options;

		return pg_delete($connection, $table_name, $assoc_array, $options);
    }
}

/**
 * pg_end_copyThis
 *
 * Synchronise avec le serveur PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-end-copy.php Documentation pour pg_end_copy.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_end_copyThis'))
{
    function pg_end_copyThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_end_copy($connection);
    }
}

/**
 * pg_escape_byteaThis
 *
 * Protège une chaîne pour insertion dans un champ bytea.
 *
 * @link http://php.net/manual/fr/function.pg-escape-bytea.php Documentation pour pg_escape_bytea.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion à une base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion créée par la fonction pg_connect() ou la fonction pg_pconnect().
 * @param string   $data    Une chaîne de caractères contenant du texte ou des données binaires qui seront insérées dans la colonne bytea.
 *
 * @return string	Une chaîne de caractères contenant les données échappées.
 *
 */
if(!function_exists('pg_escape_byteaThis'))
{
    function pg_escape_byteaThis($connection, $data = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$data = (string)$data;

		return pg_escape_bytea($connection, $data);
    }
}

/**
 * pg_escape_identifierThis
 *
 * Protège un identifiant pour l'insertion dans un champ texte.
 *
 * @link http://php.net/manual/fr/function.pg-escape-identifier.php Documentation pour pg_escape_identifier.
 *
 * @version PHP 5 >= 5.4.4
 *
 * @param resource $connection    Ressource de connexion à une base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion créée par la fonction pg_connect() ou la fonction pg_pconnect().
 * @param string   $data    Une chaîne de caractères contenant du texte à protéger.
 *
 * @return string	Une chaîne de caractères contenant les données protégées.
 *
 */
if(!function_exists('pg_escape_identifierThis'))
{
    function pg_escape_identifierThis($connection, $data = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$data = (string)$data;

		return pg_escape_identifier($connection, $data);
    }
}

/**
 * pg_escape_literalThis
 *
 * Protège une requête SQL littérale à insérer dans un champ texte.
 *
 * @link http://php.net/manual/fr/function.pg-escape-literal.php Documentation pour pg_escape_literal.
 *
 * @version PHP 5 >= 5.4.4
 *
 * @param resource $connection    Ressource de connexion à une base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion créée par la fonction pg_connect() ou la fonction pg_pconnect().
 * @param string   $data    Une chaîne de caractères contenant du texte à protéger.
 *
 * @return string	Une chaîne de caractères contenant les données protégées.
 *
 */
if(!function_exists('pg_escape_literalThis'))
{
    function pg_escape_literalThis($connection, $data = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$data = (string)$data;

		return pg_escape_literal($connection, $data);
    }
}

/**
 * pg_escape_stringThis
 *
 * Protège une chaîne de caractères pour une requête SQL.
 *
 * @link http://php.net/manual/fr/function.pg-escape-string.php Documentation pour pg_escape_string.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion à une base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion créée par la fonction pg_connect() ou la fonction pg_pconnect().
 * @param string   $data    Une chaîne de caractères contenant le texte à échapper.
 *
 * @return string	Une chaîne de caractères contenant les données échappées.
 *
 */
if(!function_exists('pg_escape_stringThis'))
{
    function pg_escape_stringThis($connection, $data = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$data = (string)$data;

		return pg_escape_string($connection, $data);
    }
}

/**
 * pg_executeThis
 *
 * Exécute une requête préparée PostGreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-execute.php Documentation pour pg_execute.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $stmtname    Le nom de la requête préparée à exécuter. Si une chaîne vide est spécifiée (""), alors la requête qui n'est pas nommée est exécutée. Le nom doit avoir été précédemment préparé en utilisant pg_prepare(), pg_send_prepare() ou une commande SQL PREPARE.
 * @param array    $params    Un tableau de valeurs de paramètres pour substituer les variables $1, $2, etc. dans la requête préparée originale. Le nombre d'éléments présents dans le tableau doit concorder avec le nombre de variables à remplacer.
 *
 * @return resource	Une ressource de résultats en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_executeThis'))
{
    function pg_executeThis($connection, $stmtname, $params = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$stmtname = (string)$stmtname;
		$params = (array)$params;

		return pg_execute($connection, $stmtname, $params);
    }
}

/**
 * pg_fetch_allThis
 *
 * Lit toutes les lignes d'un résultat.
 *
 * @link http://php.net/manual/fr/function.pg-fetch-all.php Documentation pour pg_fetch_all.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $result    Ressource résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 *
 * @return array	Un tableau array de toutes les lignes dans le jeu de résultats. Chaque ligne est un tableau de valeurs des champs indexée par le nom des champs.
 *
 */
if(!function_exists('pg_fetch_allThis'))
{
    function pg_fetch_allThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return pg_fetch_all($result);
    }
}

/**
 * pg_fetch_all_columnsThis
 *
 * Récupère toutes les lignes d'une colonne de résultats particulière en tant que tableau.
 *
 * @link http://php.net/manual/fr/function.pg-fetch-all-columns.php Documentation pour pg_fetch_all_columns.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $result    Ressource de résultats d'une requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $column    Numéro de la colonne, commençant à 0, à récupérer depuis la ressource de résultats. Par défaut, la première colonne si ce paramètre n'est pas spécifié.
 *
 * @return array	Un tableau contenant toutes les valeurs d'une colonne du résultat.
 *
 */
if(!function_exists('pg_fetch_all_columnsThis'))
{
    function pg_fetch_all_columnsThis($result, $column = 0)
    {
		$result = is_resource($result) ? $result : NULL;
		$column = (int)$column;

		return pg_fetch_all_columns($result, $column);
    }
}

/**
 * pg_fetch_arrayThis
 *
 * Lit une ligne de résultat PostgreSQL dans un tableau.
 *
 * @link http://php.net/manual/fr/function.pg-fetch-array.php Documentation pour pg_fetch_array.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre d'autres).
 * @param int      $row    Numéro de la ligne à récupérer. Les lignes sont numérotées en commençant à 0. Si l'argument est omis ou s'il vaut NULL, la ligne suivante est récupérée.
 * @param int      $result_type    Paramètre optionnel qui contrôle comment sera indexé le array retourné. pg_fetch_array() est une constante, qui peut prendre les valeurs suivantes : PGSQL_ASSOC, PGSQL_NUM et PGSQL_BOTH. En utilisant PGSQL_NUM, pg_fetch_array() retourne un tableau avec des indices numériques, en utilisant PGSQL_ASSOC retourne uniquement des indices associatifs alors que, PGSQL_BOTH, la valeur par défaut, retourne à la fois des indices numériques et associatifs.
 *
 * @return array	Un tableau à indice numérique (commençant à 0), associatif (indexé avec le nom des champs) ou les deux. Chaque valeur dans le tableau est représentée comme une chaîne (string). Les valeurs NULL de la base de données sont retournées NULL.
 *
 */
if(!function_exists('pg_fetch_arrayThis'))
{
    function pg_fetch_arrayThis($result, $row = NULL, $result_type = PGSQL_BOTH)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$result_type = (int)$result_type;

		return pg_fetch_array($result, $row, $result_type);
    }
}

/**
 * pg_fetch_assocThis
 *
 * Lit une ligne de résultat PostgreSQL sous forme de tableau associatif.
 *
 * @link http://php.net/manual/fr/function.pg-fetch-assoc.php Documentation pour pg_fetch_assoc.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $row    Numéro de la ligne à récupérer. Les lignes sont numérotées en commençant à 0. Si l'argument est omis ou s'il vaut NULL, la ligne suivante est récupérée.
 *
 * @return array	Un tableau à indice associatif (par nom de champ). Chaque valeur dans le tableau est représentée comme une chaîne (string). Les valeurs NULL de la base de données sont retournées NULL.
 *
 */
if(!function_exists('pg_fetch_assocThis'))
{
    function pg_fetch_assocThis($result, $row = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;

		return pg_fetch_assoc($result, $row);
    }
}

/**
 * pg_fetch_objectThis
 *
 * Lit une ligne de résultat PostgreSQL dans un objet.
 *
 * @link http://php.net/manual/fr/function.pg-fetch-object.php Documentation pour pg_fetch_object.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $row    Numéro de la ligne à récupérer. Les lignes sont numérotées en commençant à 0. Si l'argument est omis ou s'il vaut NULL, la ligne suivante est récupérée.
 * @param int      $result_type    Ignoré et obsolète.
 *
 * @return object	Un objet de type object avec les attributs pour chaque champ dans le jeu de résultats. Les valeurs NULL de la base de données sont retournées NULL.
 *
 */
if(!function_exists('pg_fetch_objectThis'))
{
    function pg_fetch_objectThis($result, $row = NULL, $result_type = PGSQL_ASSOC)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$result_type = (int)$result_type;

		return pg_fetch_object($result, $row, $result_type);
    }
}

/**
 * pg_fetch_resultThis
 *
 * Retourne les valeurs d'un résultat.
 *
 * @link http://php.net/manual/fr/function.pg-fetch-result.php Documentation pour pg_fetch_result.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $row    Numéro de la ligne à récupérer. Les lignes sont numérotées de 0 en montant. Si l'argument est omis, la ligne suivante est récupérée.
 * @param mixed     $field    Une chaîne de type string représentant le nom du champ (colonne) à récupérer, sinon un entier de type int représentant le numéro du champ à récupérer. Les champs sont numérotés de 0 en montant.
 *
 * @return string	Les booléens sont retournés comme des "t" ou "f". Tous les autres types, y compris les tableaux, sont retournés sous forme de chaînes formatées, de la même manière que PostgreSQL vous les afficherait dans le client psql. Les valeurs NULL de la base de données sont retournées NULL.
 *
 */
if(!function_exists('pg_fetch_resultThis'))
{
    function pg_fetch_resultThis($result, $row, $field)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$field = ($field);
		return pg_fetch_result($result, $row, $field);
    }
}

/**
 * pg_fetch_rowThis
 *
 * Lit une ligne dans un tableau.
 *
 * @link http://php.net/manual/fr/function.pg-fetch-row.php Documentation pour pg_fetch_row.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $row    Numéro de la ligne à récupérer. Les lignes sont numérotées en commençant à 0. Si l'argument est omis ou s'il vaut NULL, la ligne suivante est récupérée.
 *
 * @return array	Un tableau de type array, indexé de 0 en montant, avec chaque valeur représentée comme une chaîne (string). Les valeurs NULL de la base de données sont retournées NULL.
 *
 */
if(!function_exists('pg_fetch_rowThis'))
{
    function pg_fetch_rowThis($result, $row = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;

		return pg_fetch_row($result, $row);
    }
}

/**
 * pg_field_is_nullThis
 *
 * Teste si un champ PostgreSQL est à NULL.
 *
 * @link http://php.net/manual/fr/function.pg-field-is-null.php Documentation pour pg_field_is_null.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $row    Numéro de la ligne à récupérer. Les lignes sont numérotées de 0 en montant. Si l'argument est omis, la ligne suivante est récupérée.
 * @param mixed     $field    Numéro du champ (commençant à 0) de type int ou le nom du champ de type string.
 *
 * @return int	Retourne 1 si le champ de la ligne donnée est NULL, 0 s'il n'est pas NULL. FALSE est retournée si la ligne n'est pas dans le tableau ou tout autre erreur.
 *
 */
if(!function_exists('pg_field_is_nullThis'))
{
    function pg_field_is_nullThis($result, $row, $field)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$field = ($field);
		return pg_field_is_null($result, $row, $field);
    }
}

/**
 * pg_field_nameThis
 *
 * Retourne le nom d'un champ PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-field-name.php Documentation pour pg_field_name.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $field_number    Numéro du champ, commençant à 0.
 *
 * @return string	Le nom du champ ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_field_nameThis'))
{
    function pg_field_nameThis($result, $field_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_number = (int)$field_number;

		return pg_field_name($result, $field_number);
    }
}

/**
 * pg_field_numThis
 *
 * Retourne le numéro d'une colonne.
 *
 * @link http://php.net/manual/fr/function.pg-field-num.php Documentation pour pg_field_num.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param string   $field_name    Le nom du champ.
 *
 * @return int	Le numéro du champ (commençant à 0) ou -1 en cas d'erreur.
 *
 */
if(!function_exists('pg_field_numThis'))
{
    function pg_field_numThis($result, $field_name)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_name = (string)$field_name;

		return pg_field_num($result, $field_name);
    }
}

/**
 * pg_field_prtlenThis
 *
 * Retourne la taille imprimée.
 *
 * @link http://php.net/manual/fr/function.pg-field-prtlen.php Documentation pour pg_field_prtlen.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $row_number    Numéro de la ligne dans le résultat. Les lignes sont numérotées à partir de 0 en montant. Si ce paramètre n'est pas fourni, la ligne en cours est récupérée.
 * @param mixed     $field_name_or_number
 *
 * @return int	Le nombre de caractères imprimés ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_field_prtlenThis'))
{
    function pg_field_prtlenThis($result, $row_number, $field_name_or_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$row_number = (int)$row_number;
		$field_name_or_number = ($field_name_or_number);
		return pg_field_prtlen($result, $row_number, $field_name_or_number);
    }
}

/**
 * pg_field_sizeThis
 *
 * Retourne la taille interne de stockage d'un champ donné.
 *
 * @link http://php.net/manual/fr/function.pg-field-size.php Documentation pour pg_field_size.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $field_number    Numéro du champ, commençant à 0.
 *
 * @return int	La taille du stockage interne d'un champ (en octets). -1 signifie un champ à grandeur variable. FALSE est retourné en cas d'erreur.
 *
 */
if(!function_exists('pg_field_sizeThis'))
{
    function pg_field_sizeThis($result, $field_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_number = (int)$field_number;

		return pg_field_size($result, $field_number);
    }
}

/**
 * pg_field_tableThis
 *
 * Retourne le nom ou l'oid d'une table.
 *
 * @link http://php.net/manual/fr/function.pg-field-table.php Documentation pour pg_field_table.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param resource $result    Ressource du résultat d'une requête PostgreSQL, retournée par la fonction pg_query(), pg_query_params() ou pg_execute() (et d'autres).
 * @param int      $field_number    Numéro du champ, commençant à 0.
 * @param bool     $oid_only    Par défaut, le nom de la table à laquelle le champ appartient est retourné mais si le paramètre oid_only est défini à TRUE, alors, ce sera l'oid qui sera retourné.
 *
 * @return mixed	En cas de succès, le nom de la table ou l'oid, FALSE en cas d'échec.
 *
 */
if(!function_exists('pg_field_tableThis'))
{
    function pg_field_tableThis($result, $field_number, $oid_only = false)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_number = (int)$field_number;
		$oid_only = (bool)$oid_only;

		return pg_field_table($result, $field_number, $oid_only);
    }
}

/**
 * pg_field_typeThis
 *
 * Retourne le type d'un champ PostgreSQL donné par index.
 *
 * @link http://php.net/manual/fr/function.pg-field-type.php Documentation pour pg_field_type.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $field_number    Numéro du champ, commençant à 0.
 *
 * @return string	Une chaîne de type string contenant le nom de base du type de champ ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_field_typeThis'))
{
    function pg_field_typeThis($result, $field_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_number = (int)$field_number;

		return pg_field_type($result, $field_number);
    }
}

/**
 * pg_field_type_oidThis
 *
 * Retourne le type ID (OID) pour le numéro du champ correspondant.
 *
 * @link http://php.net/manual/fr/function.pg-field-type-oid.php Documentation pour pg_field_type_oid.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $result    Ressource de résultats de PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $field_number    Numéro du champ, commençant à 0.
 *
 * @return int	Le OID du type de base du champ ou FALSE est retourné en cas d'erreur.
 *
 */
if(!function_exists('pg_field_type_oidThis'))
{
    function pg_field_type_oidThis($result, $field_number)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_number = (int)$field_number;

		return pg_field_type_oid($result, $field_number);
    }
}

/**
 * pg_free_resultThis
 *
 * Libère la mémoire.
 *
 * @link http://php.net/manual/fr/function.pg-free-result.php Documentation pour pg_free_result.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultats PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (et quelques autres).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_free_resultThis'))
{
    function pg_free_resultThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return pg_free_result($result);
    }
}

/**
 * pg_get_notifyThis
 *
 * Lit le message SQL NOTIFY.
 *
 * @link http://php.net/manual/fr/function.pg-get-notify.php Documentation pour pg_get_notify.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion PostgreSQL.
 * @param int      $result_type    Un paramètre optionnel qui contrôle la façon dont le tableau sera indexé. result_type est une constante et peut prendre les valeurs suivantes : PGSQL_ASSOC, PGSQL_NUM et PGSQL_BOTH. L'utilisation de PGSQL_NUM, pg_get_notify() retournera un tableau avec des indices numériques, l'utilisation de PGSQL_ASSOC retournera un tableau associatif tandis que PGSQL_BOTH, la valeur par défaut, retournera des indices numériques et associatifs.
 *
 * @return array	Un tableau contenant le nom du message NOTIFY. Sinon, si aucun NOTIFY n'est en attente, alors FALSE sera retourné.
 *
 */
if(!function_exists('pg_get_notifyThis'))
{
    function pg_get_notifyThis($connection, $result_type = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$result_type = (int)$result_type;

		return pg_get_notify($connection, $result_type);
    }
}

/**
 * pg_get_pidThis
 *
 * Lit l'identifiant de processus du serveur PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-get-pid.php Documentation pour pg_get_pid.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Une ressource de connexion PostgreSQL
 *
 * @return int	L'identifiant du processus du serveur.
 *
 */
if(!function_exists('pg_get_pidThis'))
{
    function pg_get_pidThis($connection)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_get_pid($connection);
    }
}

/**
 * pg_get_resultThis
 *
 * Lit un résultat PostgreSQL asynchrone.
 *
 * @link http://php.net/manual/fr/function.pg-get-result.php Documentation pour pg_get_result.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 *
 * @return resource	La resource de résultat ou FALSE s'il n'y a plus de résultat disponible.
 *
 */
if(!function_exists('pg_get_resultThis'))
{
    function pg_get_resultThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_get_result($connection);
    }
}

/**
 * pg_hostThis
 *
 * Retourne le nom d'hôte.
 *
 * @link http://php.net/manual/fr/function.pg-host.php Documentation pour pg_host.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return string	Une chaîne contenant le nom de l'ordinateur hôte de connection ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_hostThis'))
{
    function pg_hostThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_host($connection);
    }
}

/**
 * pg_insertThis
 *
 * Insère un tableau dans une table.
 *
 * @link http://php.net/manual/fr/function.pg-insert.php Documentation pour pg_insert.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Une ressource de connexion PostgreSQL.
 * @param string   $table_name    Nom de la table dans laquelle les lignes seront insérées. La table table_name doit avoir au moins autant de colonnes que assoc_array a d'éléments.
 * @param array    $assoc_array    Un tableau dont les clés sont les noms des champs dans la table table_name, et où les valeurs sont les valeurs de ces champs qui seront insérés.
 * @param int      $options    Toutes combinaisons de constantes parmi PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC ou PGSQL_DML_STRING. Si PGSQL_DML_STRING fait partie du paramètre options, alors la requête sera retournée.
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Retourne une chaîne de caractères si PGSQL_DML_STRING est passé via le paramètre options.
 *
 */
if(!function_exists('pg_insertThis'))
{
    function pg_insertThis($connection, $table_name, $assoc_array, $options = PGSQL_DML_EXEC)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;
		$assoc_array = (array)$assoc_array;
		$options = (int)$options;

		return pg_insert($connection, $table_name, $assoc_array, $options);
    }
}

/**
 * pg_last_errorThis
 *
 * Lit le dernier message d'erreur sur la connexion.
 *
 * @link http://php.net/manual/fr/function.pg-last-error.php Documentation pour pg_last_error.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return string	Une chaîne de caractères contenant le dernier message d'erreur sur la connexion connection ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_last_errorThis'))
{
    function pg_last_errorThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_last_error($connection);
    }
}

/**
 * pg_last_noticeThis
 *
 * Retourne la dernière note du serveur PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-last-notice.php Documentation pour pg_last_notice.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 *
 * @return string	Une chaîne de caractères contenant la dernière note sur la connexion connection ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_last_noticeThis'))
{
    function pg_last_noticeThis($connection)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_last_notice($connection);
    }
}

/**
 * pg_last_oidThis
 *
 * Retourne l'identifiant de la dernière ligne.
 *
 * @link http://php.net/manual/fr/function.pg-last-oid.php Documentation pour pg_last_oid.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource de résultat de requête PostgreSQL, retournée par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 *
 * @return string	Une chaîne de caractères contenant le OID assigné à la plus récente ligne insérée dans la connexion connection spécifiée ou FALSE en cas d'erreur ou de OID indisponible.
 *
 */
if(!function_exists('pg_last_oidThis'))
{
    function pg_last_oidThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return pg_last_oid($result);
    }
}

/**
 * pg_lo_closeThis
 *
 * Ferme un objet de grande taille PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-lo-close.php Documentation pour pg_lo_close.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $large_object    Ressource objet de grande taille (LOB) PostgreSQL retournée par pg_lo_open().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_lo_closeThis'))
{
    function pg_lo_closeThis($large_object)
    {
		$large_object = is_resource($large_object) ? $large_object : NULL;

		return pg_lo_close($large_object);
    }
}

/**
 * pg_lo_createThis
 *
 * Crée un objet de grande taille PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-lo-create.php Documentation pour pg_lo_create.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param mixed     $object_id    Si le paramètre object_id est fourni, la fonction essayera de créer un objet large avec cet identifiant, sinon, un identifiant d'objet disponible sera assigné par le serveur. Ce paramètre a été ajouté en PHP 5.3 et cette fonctionnalité est apparue avec PostgreSQL 8.1.
 *
 * @return int	Un objet large OID ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_lo_createThis'))
{
    function pg_lo_createThis($connection = NULL, $object_id = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$object_id = ($object_id);
		return pg_lo_create($connection, $object_id);
    }
}

/**
 * pg_lo_exportThis
 *
 * Exporte un objet de grande taille vers un fichier.
 *
 * @link http://php.net/manual/fr/function.pg-lo-export.php Documentation pour pg_lo_export.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param int      $oid    Le OID de l'objet de grande taille dans la base de données.
 * @param string   $pathname    Le chemin d'accès complet ainsi que le fichier dans lequel il sera écrit l'objet de grande taille sur le système du client.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_lo_exportThis'))
{
    function pg_lo_exportThis($connection, $oid, $pathname = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$oid = (int)$oid;
		$pathname = (string)$pathname;

		return pg_lo_export($connection, $oid, $pathname);
    }
}

/**
 * pg_lo_importThis
 *
 * Importe un objet de grande taille depuis un fichier.
 *
 * @link http://php.net/manual/fr/function.pg-lo-import.php Documentation pour pg_lo_import.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $pathname    Le chemin d'accès complet ainsi que le fichier dans lequel il sera lu l'objet de grande taille sur le système du client.
 * @param mixed     $object_id    Si le paramètre object_id est fourni, la fonction essayera de créer un objet large avec cette identifiant, sinon, un identifiant d'objet disponible sera assigné par le serveur. Ce paramètre a été ajouté en PHP 5.3 et cette fonctionnalité est apparue avec PostgreSQL 8.1.
 *
 * @return int	Le OID du nouvel objet de grande taille créé ou FALSE en cas d'échec.
 *
 */
if(!function_exists('pg_lo_importThis'))
{
    function pg_lo_importThis($connection, $pathname = NULL, $object_id = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$pathname = (string)$pathname;
		$object_id = ($object_id);
		return pg_lo_import($connection, $pathname, $object_id);
    }
}

/**
 * pg_lo_openThis
 *
 * Ouvre un objet de grande taille PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-lo-open.php Documentation pour pg_lo_open.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param int      $oid    Le OID de l'objet de grande taille dans la base de données.
 * @param string   $mode    Peut être "r" pour lecture seule, "w" pour écriture seule ou "rw" pour lecture et écriture.
 *
 * @return resource	Une ressource d'objet de grande taille ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_lo_openThis'))
{
    function pg_lo_openThis($connection, $oid, $mode)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$oid = (int)$oid;
		$mode = (string)$mode;

		return pg_lo_open($connection, $oid, $mode);
    }
}

/**
 * pg_lo_readThis
 *
 * Lit un objet de grande taille.
 *
 * @link http://php.net/manual/fr/function.pg-lo-read.php Documentation pour pg_lo_read.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $large_object    Ressource objet de grande taille (LOB) PostgreSQL retournée par pg_lo_open().
 * @param int      $len    Un nombre maximal d'octets à retourner. Cet argument est optionnel.
 *
 * @return string	Une chaîne contenant len octets de l'objet de grande taille ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_lo_readThis'))
{
    function pg_lo_readThis($large_object, $len = 8192)
    {
		$large_object = is_resource($large_object) ? $large_object : NULL;
		$len = (int)$len;

		return pg_lo_read($large_object, $len);
    }
}

/**
 * pg_lo_read_allThis
 *
 * Lit un objet de grande taille en totalité.
 *
 * @link http://php.net/manual/fr/function.pg-lo-read-all.php Documentation pour pg_lo_read_all.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $large_object    Ressource objet de grande taille (LOB) PostgreSQL retournée par pg_lo_open().
 *
 * @return int	Nombre d'octets lu ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_lo_read_allThis'))
{
    function pg_lo_read_allThis($large_object)
    {
		$large_object = is_resource($large_object) ? $large_object : NULL;

		return pg_lo_read_all($large_object);
    }
}

/**
 * pg_lo_seekThis
 *
 * Modifie la position dans un objet de grande taille.
 *
 * @link http://php.net/manual/fr/function.pg-lo-seek.php Documentation pour pg_lo_seek.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $large_object    Ressource objet de grande taille (LOB) PostgreSQL retournée par pg_lo_open().
 * @param int      $offset    Le nombre d'octets de déplacement.
 * @param int      $whence    Une de ces constantes PGSQL_SEEK_SET (positionne à partir du début de l'objet), PGSQL_SEEK_CUR (positionne à partir de la position courante) ou PGSQL_SEEK_END (positionne à partir de la fin de l'objet).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_lo_seekThis'))
{
    function pg_lo_seekThis($large_object, $offset, $whence = PGSQL_SEEK_CUR)
    {
		$large_object = is_resource($large_object) ? $large_object : NULL;
		$offset = (int)$offset;
		$whence = (int)$whence;

		return pg_lo_seek($large_object, $offset, $whence);
    }
}

/**
 * pg_lo_tellThis
 *
 * Retourne la position courante dans un objet de grande taille PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-lo-tell.php Documentation pour pg_lo_tell.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $large_object    Ressource objet de grande taille (LOB) PostgreSQL retournée par pg_lo_open().
 *
 * @return int	La position courante du pointeur (en nombre d'octets) à partir du début de l'objet de grande taille. S'il y a une erreur, la valeur retournée sera négative.
 *
 */
if(!function_exists('pg_lo_tellThis'))
{
    function pg_lo_tellThis($large_object)
    {
		$large_object = is_resource($large_object) ? $large_object : NULL;

		return pg_lo_tell($large_object);
    }
}

/**
 * pg_lo_unlinkThis
 *
 * Efface un objet de grande taille PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-lo-unlink.php Documentation pour pg_lo_unlink.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param int      $oid    Le OID de l'objet de grande taille dans la base de données.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_lo_unlinkThis'))
{
    function pg_lo_unlinkThis($connection, $oid)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$oid = (int)$oid;

		return pg_lo_unlink($connection, $oid);
    }
}

/**
 * pg_lo_writeThis
 *
 * Écrit un objet de grande taille PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-lo-write.php Documentation pour pg_lo_write.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $large_object    Ressource objet de grande taille (LOB) PostgreSQL retournée par pg_lo_open().
 * @param string   $data    Les données à être écrites dans l'objet de grande taille. Si len est spécifié et est inférieur à la grandeur de data, seul les len octets y seront écrits.
 * @param int      $len    Un nombre maximal d'octets à écrire. Il doit être supérieur à zéro et inférieur à la grandeur de data. Cet argument est optionnel, s'il est omis, il prendra par défaut la grandeur de data.
 *
 * @return int	Le nombre d'octets écrit dans l'objet de grande taille ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_lo_writeThis'))
{
    function pg_lo_writeThis($large_object, $data, $len = NULL)
    {
		$large_object = is_resource($large_object) ? $large_object : NULL;
		$data = (string)$data;
		$len = (int)$len;

		return pg_lo_write($large_object, $data, $len);
    }
}

/**
 * pg_meta_dataThis
 *
 * Lit les métadonnées de la table PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-meta-data.php Documentation pour pg_meta_data.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 * @param string   $table_name    Le nom de la table.
 *
 * @return array	Un tableau de la table de définition ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_meta_dataThis'))
{
    function pg_meta_dataThis($connection, $table_name)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;

		return pg_meta_data($connection, $table_name);
    }
}

/**
 * pg_num_fieldsThis
 *
 * Retourne le nombre de champ.
 *
 * @link http://php.net/manual/fr/function.pg-num-fields.php Documentation pour pg_num_fields.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 *
 * @return int	Le nombre de champs (ou colonne) dans le jeu de résultats. En cas d'erreur, -1 est retourné.
 *
 */
if(!function_exists('pg_num_fieldsThis'))
{
    function pg_num_fieldsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return pg_num_fields($result);
    }
}

/**
 * pg_num_rowsThis
 *
 * Retourne le nombre de lignes PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-num-rows.php Documentation pour pg_num_rows.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 *
 * @return int	Le nombre de lignes dans le jeu de résultats. En cas d'erreur, -1 est retourné.
 *
 */
if(!function_exists('pg_num_rowsThis'))
{
    function pg_num_rowsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return pg_num_rows($result);
    }
}

/**
 * pg_optionsThis
 *
 * Retourne les options PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-options.php Documentation pour pg_options.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return string	Une chaîne contenant les options de connection ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_optionsThis'))
{
    function pg_optionsThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_options($connection);
    }
}

/**
 * pg_parameter_statusThis
 *
 * Consulte un paramètre de configuration courant du serveur.
 *
 * @link http://php.net/manual/fr/function.pg-parameter-status.php Documentation pour pg_parameter_status.
 *
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $param_name    Les valeurs possibles de param_name sont server_version, server_encoding, client_encoding, is_superuser, session_authorization, DateStyle, TimeZone et integer_datetimes.
 *
 * @return string	Une chaîne contenant la valeur du paramètre, FALSE en cas d'échec ou du paramètre param_name invalide.
 *
 */
if(!function_exists('pg_parameter_statusThis'))
{
    function pg_parameter_statusThis($connection, $param_name = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$param_name = (string)$param_name;

		return pg_parameter_status($connection, $param_name);
    }
}

/**
 * pg_pconnectThis
 *
 * Établit une connexion PostgreSQL persistante.
 *
 * @link http://php.net/manual/fr/function.pg-pconnect.php Documentation pour pg_pconnect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $connection_string    La chaîne connection_string peut être vide pour utiliser tous les paramètres par défaut ou elle peut contenir un ou plusieurs paramètres de configuration séparés par des espaces. Chaque paramètre de configuration est sous la forme code = valeur. Les espaces autour du signe égal sont optionnels. Pour écrire une valeur vide ou une valeur contenant des espaces, entourez cette valeur avec des apostrophes, par exemple : code = 'une valeur'. Les apostrophes et les antislashs à l'intérieur de la valeur doivent être échappés par un antislash, c'est-à-dire \' et \\. Les mots-clé actuellement reconnus sont : host, hostaddr, port, dbname, user, password, connect_timeout, options, tty (ignoré), sslmode, requiressl (obsolète, utilisez sslmode) et service. La liste de ces arguments dépend de la version de votre serveur PostgreSQL.
 * @param int      $connect_type    Si PGSQL_CONNECT_FORCE_NEW est passé en argument, alors une nouvelle connexion sera créée, même si la chaîne connection_string est identique à celle de la connexion existante.
 *
 * @return resource	Ressource de connexion PostgreSQL en cas de succès, FALSE en cas d'échec.
 *
 */
if(!function_exists('pg_pconnectThis'))
{
    function pg_pconnectThis($connection_string, $connect_type = NULL)
    {
		$connection_string = (string)$connection_string;
		$connect_type = (int)$connect_type;

		return pg_pconnect($connection_string, $connect_type);
    }
}

/**
 * pg_pingThis
 *
 * Ping la connexion à la base.
 *
 * @link http://php.net/manual/fr/function.pg-ping.php Documentation pour pg_ping.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_pingThis'))
{
    function pg_pingThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_ping($connection);
    }
}

/**
 * pg_portThis
 *
 * Retourne le numéro de port.
 *
 * @link http://php.net/manual/fr/function.pg-port.php Documentation pour pg_port.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return int	Un entier contenant le numéro du port du serveur de base de données identifié par connection ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_portThis'))
{
    function pg_portThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_port($connection);
    }
}

/**
 * pg_prepareThis
 *
 * Envoie une requête pour créer une requête préparée avec les paramètres donnés et attend l'exécution.
 *
 * @link http://php.net/manual/fr/function.pg-prepare.php Documentation pour pg_prepare.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $stmtname    Le nom à donner à la requête préparée. Il doit être unique à chaque session. Si une chaîne vide est spécifiée ("") alors une requête sans nom est créée, écrasant les requêtes sans noms précédemment définies.
 * @param string   $query    La requête SQL avec ses paramètres. Elle doit contenir seulement une seule requête. Plusieurs requêtes séparées par des points-virgules ne sont pas autorisées. Si des paramètres sont utilisés, ils sont référés à $1, $2, etc.
 *
 * @return resource	Une ressource de résultats en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_prepareThis'))
{
    function pg_prepareThis($connection, $stmtname, $query = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$stmtname = (string)$stmtname;
		$query = (string)$query;

		return pg_prepare($connection, $stmtname, $query);
    }
}

/**
 * pg_put_lineThis
 *
 * Envoie une chaîne au serveur PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-put-line.php Documentation pour pg_put_line.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $data    Une ligne de texte à envoyer directement au serveur PostgreSQL. Un caractère d'arrêt NULL est automatiquement ajouté.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_put_lineThis'))
{
    function pg_put_lineThis($connection, $data = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$data = (string)$data;

		return pg_put_line($connection, $data);
    }
}

/**
 * pg_queryThis
 *
 * Exécute une requête PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-query.php Documentation pour pg_query.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $query    La requête ou les requêtes SQL à être exécutées. Lorsque plusieurs requêtes sont passées à la fonction, elles sont automatiquement exécutées comme étant une transaction, à moins qu'il y aille les commandes BEGIN/COMMIT incluses dans la requête. Cependant, l'utilisation de transactions multiples dans un seul appel de fonction n'est pas recommandée. Les données contenues dans la requête doivent être échappées proprement.
 *
 * @return resource	Une ressource de résultats en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_queryThis'))
{
    function pg_queryThis($connection, $query = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$query = (string)$query;

		return pg_query($connection, $query);
    }
}

/**
 * pg_query_paramsThis
 *
 * Envoie une commande au serveur et attend le résultat, avec les capacités de passer des paramètres séparément de la commande texte SQL.
 *
 * @link http://php.net/manual/fr/function.pg-query-params.php Documentation pour pg_query_params.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $query    La requête SQL avec ses paramètres. Elle doit contenir seulement une seule requête. Plusieurs requêtes séparées par des points-virgules ne sont pas autorisées. Si des paramètres sont utilisés, ils sont référés à $1, $2, etc.
 * @param array    $params    Un tableau de valeurs de paramètres pour substituer les variables $1, $2, etc. dans la requête préparée originale. Le nombre d'éléments présents dans le tableau doit concorder avec le nombre de variables à remplacer.
 *
 * @return resource	Une ressource de résultats en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_query_paramsThis'))
{
    function pg_query_paramsThis($connection, $query, $params = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$query = (string)$query;
		$params = (array)$params;

		return pg_query_params($connection, $query, $params);
    }
}

/**
 * pg_result_errorThis
 *
 * Lit le message d'erreur associé à un résultat.
 *
 * @link http://php.net/manual/fr/function.pg-result-error.php Documentation pour pg_result_error.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 *
 * @return string	Retourne une chaîne de caractères s'il y a une erreur associée avec le paramètre result, FALSE autrement.
 *
 */
if(!function_exists('pg_result_errorThis'))
{
    function pg_result_errorThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return pg_result_error($result);
    }
}

/**
 * pg_result_error_fieldThis
 *
 * Retourne un champ individuel d'un rapport d'erreur.
 *
 * @link http://php.net/manual/fr/function.pg-result-error-field.php Documentation pour pg_result_error_field.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $result    Une ressource requête PostgreSQL provenant d'une requête précédemment exécutée.
 * @param int      $fieldcode    Les valeurs possibles de fieldcode sont : PGSQL_DIAG_SEVERITY, PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY, PGSQL_DIAG_MESSAGE_DETAIL, PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION, PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ seulement), PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ seulement), PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE, PGSQL_DIAG_SOURCE_LINE ou PGSQL_DIAG_SOURCE_FUNCTION.
 *
 * @return string	Retourne une chaîne contenant le contenu du champ d'erreur, NULL si le champ n'existe pas ou FALSE en cas d'échec.
 *
 */
if(!function_exists('pg_result_error_fieldThis'))
{
    function pg_result_error_fieldThis($result, $fieldcode)
    {
		$result = is_resource($result) ? $result : NULL;
		$fieldcode = (int)$fieldcode;

		return pg_result_error_field($result, $fieldcode);
    }
}

/**
 * pg_result_seekThis
 *
 * Modifie la ligne courant dans un résultat.
 *
 * @link http://php.net/manual/fr/function.pg-result-seek.php Documentation pour pg_result_seek.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $result    Ressource résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $offset    Ligne à déplacer la position interne dans le jeu de résultats result. Les lignes sont numérotées à partir de zéro.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_result_seekThis'))
{
    function pg_result_seekThis($result, $offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$offset = (int)$offset;

		return pg_result_seek($result, $offset);
    }
}

/**
 * pg_result_statusThis
 *
 * Lit le statut du résultat.
 *
 * @link http://php.net/manual/fr/function.pg-result-status.php Documentation pour pg_result_status.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $result    Ressource résultat de requête PostgreSQL, retourné par pg_query(), pg_query_params() ou pg_execute() (entre autres).
 * @param int      $type    Soit PGSQL_STATUS_LONG pour retourner un statut numérique de result ou PGSQL_STATUS_STRING pour retourner le tag de la commande de result. Si l'argument n'est pas spécifié, PGSQL_STATUS_LONG est la valeur par défaut.
 *
 * @return mixed	Les valeurs de retour possibles sont PGSQL_EMPTY_QUERY, PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_OUT, PGSQL_COPY_IN, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR et PGSQL_FATAL_ERROR si PGSQL_STATUS_LONG est spécifié. Autrement, une chaîne contenant le tag de la commande PostgreSQL est retourné.
 *
 */
if(!function_exists('pg_result_statusThis'))
{
    function pg_result_statusThis($result, $type = PGSQL_STATUS_LONG)
    {
		$result = is_resource($result) ? $result : NULL;
		$type = (int)$type;

		return pg_result_status($result, $type);
    }
}

/**
 * pg_selectThis
 *
 * Effectue une sélection PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-select.php Documentation pour pg_select.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 * @param string   $table_name    Nom de la table dans laquelle on sélectionne les lignes.
 * @param array    $assoc_array    Un tableau à qui les clés sont les noms des champs dans la table table_name et à qui les valeurs sont les conditions que la ligne doit vérifier pour être récupérée.
 * @param int      $options    N'importe quelle de PGSQL_CONV_FORCE_NULL, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC, PGSQL_DML_ASYNC ou PGSQL_DML_STRING combinée. Si PGSQL_DML_STRING fait partie de options alors la requête est retournée sous forme de chaîne de caractères.
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Retourne une chaîne de caractères si PGSQL_DML_STRING est passé via options.
 *
 */
if(!function_exists('pg_selectThis'))
{
    function pg_selectThis($connection, $table_name, $assoc_array, $options = PGSQL_DML_EXEC)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;
		$assoc_array = (array)$assoc_array;
		$options = (int)$options;

		return pg_select($connection, $table_name, $assoc_array, $options);
    }
}

/**
 * pg_send_executeThis
 *
 * Envoie une requête pour exécuter une requête préparée avec des paramètres donnés, sans attendre le(s) résultat(s).
 *
 * @link http://php.net/manual/fr/function.pg-send-execute.php Documentation pour pg_send_execute.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $stmtname    Le nom de la requête préparée à exécuter. Si une chaîne vide est spécifiée (""), alors la requête qui n'est pas nommée est exécutée. Le nom doit avoir été précédemment préparé en utilisant pg_prepare(), pg_send_prepare() ou une commande SQL PREPARE.
 * @param array    $params    Un tableau de valeurs de paramètres pour substituer les variables $1, $2, etc. dans la requête préparée originale. Le nombre d'éléments présents dans le tableau doit concorder avec le nombre de variables à remplacer.
 *
 * @return bool	Retourne TRUE en cas de succès, FALSE en cas d'échec. Utilisez pg_get_result() pour déterminer le résultat de la requête.
 *
 */
if(!function_exists('pg_send_executeThis'))
{
    function pg_send_executeThis($connection, $stmtname, $params)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$stmtname = (string)$stmtname;
		$params = (array)$params;

		return pg_send_execute($connection, $stmtname, $params);
    }
}

/**
 * pg_send_prepareThis
 *
 * Envoie une requête pour créer une requête préparée avec les paramètres donnés, sans attendre la fin de son exécution.
 *
 * @link http://php.net/manual/fr/function.pg-send-prepare.php Documentation pour pg_send_prepare.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $stmtname    Le nom à donner à la requête préparée. Il doit être unique à chaque session. Si une chaîne vide est spécifiée ("") alors une requête sans nom est créée, écrasant les requêtes sans nom précédemment définies.
 * @param string   $query    La requête SQL avec ses paramètres. Elle doit contenir seulement une seule requête. Plusieurs requêtes séparées par des points-virgules ne sont pas autorisées. Si des paramètres sont utilisés, ils sont référés à $1, $2, etc.
 *
 * @return bool	Retourne TRUE en cas de succès, FALSE en cas d'échec. Utilisez pg_get_result() pour déterminer le résultat de la requête.
 *
 */
if(!function_exists('pg_send_prepareThis'))
{
    function pg_send_prepareThis($connection, $stmtname, $query)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$stmtname = (string)$stmtname;
		$query = (string)$query;

		return pg_send_prepare($connection, $stmtname, $query);
    }
}

/**
 * pg_send_queryThis
 *
 * Exécute une requête PostgreSQL asynchrone.
 *
 * @link http://php.net/manual/fr/function.pg-send-query.php Documentation pour pg_send_query.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL.
 * @param string   $query    La requête ou les requêtes SQL à être exécutées. Les données contenues dans la requête doivent être échappées proprement.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_send_queryThis'))
{
    function pg_send_queryThis($connection, $query)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$query = (string)$query;

		return pg_send_query($connection, $query);
    }
}

/**
 * pg_send_query_paramsThis
 *
 * Envoie une commande et sépare les paramètres au serveur sans attendre le(s) résultat(s).
 *
 * @link http://php.net/manual/fr/function.pg-send-query-params.php Documentation pour pg_send_query_params.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 * @param string   $query    La requête SQL avec ses paramètres. Elle doit contenir seulement une seule requête. Plusieurs requêtes séparées par des points-virgules ne sont pas autorisées. Si des paramètres sont utilisés, ils sont référés à $1, $2, etc.
 * @param array    $params    Un tableau de valeurs de paramètres pour substituer les variables $1, $2, etc. dans la requête préparée originale. Le nombre d'éléments présents dans le tableau doit concorder avec le nombre de variables à remplacer.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_send_query_paramsThis'))
{
    function pg_send_query_paramsThis($connection, $query, $params)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$query = (string)$query;
		$params = (array)$params;

		return pg_send_query_params($connection, $query, $params);
    }
}

/**
 * pg_set_client_encodingThis
 *
 * Choisit l'encodage du client PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-set-client-encoding.php Documentation pour pg_set_client_encoding.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param string   $encoding    L'encodage client demandé. Un de ces constantes : SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE, MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5 ou WIN250. La liste exacte des encodages disponibles dépend de votre version PostgreSQL, alors vérifiez votre manuel PostgreSQL pour une liste plus spécifique.
 *
 * @return int	Retourne 0 en cas de succès ou -1 en cas d'erreur.
 *
 */
if(!function_exists('pg_set_client_encodingThis'))
{
    function pg_set_client_encodingThis($connection, $encoding = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$encoding = (string)$encoding;

		return pg_set_client_encoding($connection, $encoding);
    }
}

/**
 * pg_set_error_verbosityThis
 *
 * Détermine la le degré des messages retournés par pg_last_error() et pg_result_error().
 *
 * @link http://php.net/manual/fr/function.pg-set-error-verbosity.php Documentation pour pg_set_error_verbosity.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 * @param int      $verbosity    Le degré de message d'erreur : PGSQL_ERRORS_TERSE, PGSQL_ERRORS_DEFAULT ou PGSQL_ERRORS_VERBOSE.
 *
 * @return int	Le degré de message d'erreur précédant : PGSQL_ERRORS_TERSE, PGSQL_ERRORS_DEFAULT ou PGSQL_ERRORS_VERBOSE.
 *
 */
if(!function_exists('pg_set_error_verbosityThis'))
{
    function pg_set_error_verbosityThis($connection, $verbosity = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$verbosity = (int)$verbosity;

		return pg_set_error_verbosity($connection, $verbosity);
    }
}

/**
 * pg_traceThis
 *
 * Active le suivi d'une connexion PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-trace.php Documentation pour pg_trace.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $pathname    Le chemin complet et le nom du fichier dans lequel le suivi sera enregistré. Comme fopen().
 * @param string   $mode    Le mode d'accès optionnel, comme fopen().
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pg_traceThis'))
{
    function pg_traceThis($pathname, $mode = "w", $connection = NULL)
    {
		$pathname = (string)$pathname;
		$mode = (string)$mode;
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_trace($pathname, $mode, $connection);
    }
}

/**
 * pg_transaction_statusThis
 *
 * Retourne le statut de la transaction en cours du serveur.
 *
 * @link http://php.net/manual/fr/function.pg-transaction-status.php Documentation pour pg_transaction_status.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $connection    Ressource de connexion de base de données PostgreSQL.
 *
 * @return int	Le statut peut être PGSQL_TRANSACTION_IDLE (actuellement inactif), PGSQL_TRANSACTION_ACTIVE (une commande est en cours), PGSQL_TRANSACTION_INTRANS (inactif, dans un bloc de transaction valide), ou PGSQL_TRANSACTION_INERROR (inactif, dans un bloc de transaction en échec). PGSQL_TRANSACTION_UNKNOWN est retourné si la connexion est mauvaise. PGSQL_TRANSACTION_ACTIVE est retourné seulement si la requête a été envoyée au serveur et que celle-ci n'a pas été encore complétée.
 *
 */
if(!function_exists('pg_transaction_statusThis'))
{
    function pg_transaction_statusThis($connection)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_transaction_status($connection);
    }
}

/**
 * pg_ttyThis
 *
 * Retourne le nom de TTY associé à la connexion.
 *
 * @link http://php.net/manual/fr/function.pg-tty.php Documentation pour pg_tty.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return string	Une chaîne contenant le débogue TTY de la connexion connection ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pg_ttyThis'))
{
    function pg_ttyThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_tty($connection);
    }
}

/**
 * pg_unescape_byteaThis
 *
 * Supprime la protection d'une chaîne de type bytea.
 *
 * @link http://php.net/manual/fr/function.pg-unescape-bytea.php Documentation pour pg_unescape_bytea.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $data    Une chaîne de caractères contenant les données bytea PostgreSQL à être converties en chaîne de caractères binaire PHP.
 *
 * @return string	Une chaîne de caractères contenant les données protégées.
 *
 */
if(!function_exists('pg_unescape_byteaThis'))
{
    function pg_unescape_byteaThis($data)
    {
		$data = (string)$data;

		return pg_unescape_bytea($data);
    }
}

/**
 * pg_untraceThis
 *
 * Termine le suivi d'une connexion PostgreSQL.
 *
 * @link http://php.net/manual/fr/function.pg-untrace.php Documentation pour pg_untrace.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return bool	Retourne toujours TRUE.
 *
 */
if(!function_exists('pg_untraceThis'))
{
    function pg_untraceThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_untrace($connection);
    }
}

/**
 * pg_updateThis
 *
 * Modifie les lignes d'une table.
 *
 * @link http://php.net/manual/fr/function.pg-update.php Documentation pour pg_update.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $connection    Une ressource de connexion PostgreSQL.
 * @param string   $table_name    Le nom de la table dans laquelle les lignes seront mises à jour.
 * @param array    $data    Un tableau dont les clés sont les noms des champs dans la table table_name, et où les valeurs sont les lignes correspondantes qui seront mises à jour.
 * @param array    $condition    Un tableau dont les clés sont les noms des champs dans la table table_name, et où les valeurs sont les conditions à remplir par les lignes pour être mises à jour.
 * @param int      $options    Toutes combinaisons de constantes parmi PGSQL_CONV_OPTS, PGSQL_DML_NO_CONV, PGSQL_DML_EXEC ou PGSQL_DML_STRING. Si PGSQL_DML_STRING fait partie du paramètre options, alors la requête sera retournée.
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Retourne une chaîne de caractères si PGSQL_DML_STRING est passé via le paramètre options.
 *
 */
if(!function_exists('pg_updateThis'))
{
    function pg_updateThis($connection, $table_name, $data, $condition, $options = PGSQL_DML_EXEC)
    {
		$connection = is_resource($connection) ? $connection : NULL;
		$table_name = (string)$table_name;
		$data = (array)$data;
		$condition = (array)$condition;
		$options = (int)$options;

		return pg_update($connection, $table_name, $data, $condition, $options);
    }
}

/**
 * pg_versionThis
 *
 * Retourne un tableau avec les versions du client, du protocole et du serveur (si disponible).
 *
 * @link http://php.net/manual/fr/function.pg-version.php Documentation pour pg_version.
 *
 * @version PHP 5
 *
 * @param resource $connection    La ressource de connexion de la base de données PostgreSQL. Lorsque connection n'est pas présent, la connexion par défaut est utilisée. La connexion par défaut est la dernière connexion faite par pg_connect() ou pg_pconnect().
 *
 * @return array	Retourne un tableau avec les clés client, protocol et server et valeurs (si disponibles). Retourne FALSE en cas d'erreur ou de connexion invalide.
 *
 */
if(!function_exists('pg_versionThis'))
{
    function pg_versionThis($connection = NULL)
    {
		$connection = is_resource($connection) ? $connection : NULL;

		return pg_version($connection);
    }
}

/**
 * php_check_syntaxThis
 *
 * Vérifie la syntaxe PHP (et exécute) d'un fichier spécifique.
 *
 * @link http://php.net/manual/fr/function.php-check-syntax.php Documentation pour php_check_syntax.
 *
 * @version PHP 5 <= 5.0.4
 *
 * @param string   $filename    Le nom du fichier à vérifier.
 * @param string   &$error_message    Si le paramètre error_message est utilisé, il contiendra le message d'erreur généré par la vérification de la syntaxe. error_message est passé par référence.
 *
 * @return bool	Retourne TRUE si la vérification a réussie, et FALSE si la vérification échoue ou si le fichier file_name n'a pu être ouvert.
 *
 */
if(!function_exists('php_check_syntaxThis'))
{
    function php_check_syntaxThis($filename, &$error_message = NULL)
    {
		$filename = (string)$filename;
		$error_message = (string)$error_message;

		return php_check_syntax($filename, $error_message);
    }
}

/**
 * php_ini_loaded_fileThis
 *
 * Récupère le chemin d'un fichier php.ini chargé.
 *
 * @link http://php.net/manual/fr/function.php-ini-loaded-file.php Documentation pour php_ini_loaded_file.
 *
 * @version PHP 5 >= 5.2.4
 * @return string	Le chemin du fichier php.ini chargé, ou FALSE si aucun n'a été chargé.
 *
 */
if(!function_exists('php_ini_loaded_fileThis'))
{
    function php_ini_loaded_fileThis()
    {
		return php_ini_loaded_file();
    }
}

/**
 * php_ini_scanned_filesThis
 *
 * Retourne la liste des fichiers .ini analysés dans les dossiers de configuration supplémentaires.
 *
 * @link http://php.net/manual/fr/function.php-ini-scanned-files.php Documentation pour php_ini_scanned_files.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return string	Retourne une chaîne de caractères, où les noms de fichiers sont séparés par des virgules. Si --with-config-file-scan-dir n'était pas configuré, FALSE est retourné. Si cette option était configurée, mais que le dossier était vide, une chaîne vide est retournée. Si un fichier n'est pas lisible, le nom du fichier sera inclus dans la liste, mais une erreur sera générée. Cette erreur sera visible au moment de la compilation, et lorsque vous appellerez la fonction php_ini_scanned_files().
 *
 */
if(!function_exists('php_ini_scanned_filesThis'))
{
    function php_ini_scanned_filesThis()
    {
		return php_ini_scanned_files();
    }
}

/**
 * php_logo_guidThis
 *
 * Retourne l'identifiant du logo PHP.
 *
 * @link http://php.net/manual/fr/function.php-logo-guid.php Documentation pour php_logo_guid.
 *
 * @version PHP 4
 * @version PHP 5 < 5.5
 * @return string	Retourne PHPE9568F34-D428-11d2-A769-00AA01ACF42.
 *
 */
if(!function_exists('php_logo_guidThis'))
{
    function php_logo_guidThis()
    {
		return php_logo_guid();
    }
}

/**
 * php_sapi_nameThis
 *
 * Retourne le type d'interface utilisée entre le serveur web et PHP.
 *
 * @link http://php.net/manual/fr/function.php-sapi-name.php Documentation pour php_sapi_name.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 * @return string	Retourne le type de l'interface, sous la forme d'une chaîne de caractères en minuscule.
 *
 */
if(!function_exists('php_sapi_nameThis'))
{
    function php_sapi_nameThis()
    {
		return php_sapi_name();
    }
}

/**
 * php_strip_whitespaceThis
 *
 * Retourne la source sans commentaires, ni espaces blancs.
 *
 * @link http://php.net/manual/fr/function.php-strip-whitespace.php Documentation pour php_strip_whitespace.
 *
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier PHP.
 *
 * @return string	Le code source nettoyé sera retourné en cas de succès ou une chaîne vide en cas d'échec.
 *
 */
if(!function_exists('php_strip_whitespaceThis'))
{
    function php_strip_whitespaceThis($filename)
    {
		$filename = (string)$filename;

		return php_strip_whitespace($filename);
    }
}

/**
 * php_unameThis
 *
 * Retourne les informations sur le système d'exploitation.
 *
 * @link http://php.net/manual/fr/function.php-uname.php Documentation pour php_uname.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $mode    mode est un seul caractère qui définit quelles seront les informations à retourner :
 *
 * @return string	Retourne la description, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('php_unameThis'))
{
    function php_unameThis($mode = "a")
    {
		$mode = (string)$mode;

		return php_uname($mode);
    }
}

/**
 * phpcreditsThis
 *
 * Affiche les crédits de PHP.
 *
 * @link http://php.net/manual/fr/function.phpcredits.php Documentation pour phpcredits.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $flag    Pour générer une page personnalisée sur les crédits, il faut utiliser le paramètre flag.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('phpcreditsThis'))
{
    function phpcreditsThis($flag = CREDITS_ALL)
    {
		$flag = (int)$flag;

		return phpcredits($flag);
    }
}

/**
 * phpinfoThis
 *
 * Affiche de nombreuses informations sur la configuration de PHP.
 *
 * @link http://php.net/manual/fr/function.phpinfo.php Documentation pour phpinfo.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $what    L'affichage peut être personnalisé en utilisant une ou plusieurs des constantes suivantes. Elles sont combinables avec l'opérateur or, et doivent être passées dans le paramètre what. Vous pouvez aussi additionner ces constantes.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('phpinfoThis'))
{
    function phpinfoThis($what = INFO_ALL)
    {
		$what = (int)$what;

		return phpinfo($what);
    }
}

/**
 * phpversionThis
 *
 * Retourne le numéro de la version courante de PHP.
 *
 * @link http://php.net/manual/fr/function.phpversion.php Documentation pour phpversion.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $extension    Un nom d'extension, optionnel.
 *
 * @return string	Si le paramètre optionnel extension est spécifié, la fonction phpversion() retournera la version de cette extension ou FALSE s'il n'y a aucune information sur la version associée ou si cette extension n'est pas disponible.
 *
 */
if(!function_exists('phpversionThis'))
{
    function phpversionThis($extension = NULL)
    {
		$extension = (string)$extension;

		return phpversion($extension);
    }
}

/**
 * piThis
 *
 * Retourne la valeur de pi.
 *
 * @link http://php.net/manual/fr/function.pi.php Documentation pour pi.
 *
 * @version PHP 4
 * @version PHP 5
 * @return float	La valeur de pi, sous la forme d'un nombre décimal.
 *
 */
if(!function_exists('piThis'))
{
    function piThis()
    {
		return pi();
    }
}

/**
 * png2wbmpThis
 *
 * Convertit une image PNG en image WBMP.
 *
 * @link http://php.net/manual/fr/function.png2wbmp.php Documentation pour png2wbmp.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $pngname    Chemin vers le fichier PNG.
 * @param string   $wbmpname    Chemin vers le fichier final WBMP.
 * @param int      $dest_height    Hauteur de l'image de destination.
 * @param int      $dest_width    Largeur de l'image de destination.
 * @param int      $threshold    Valeur du seuil, entre 0 et 8 inclus.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('png2wbmpThis'))
{
    function png2wbmpThis($pngname, $wbmpname, $dest_height, $dest_width, $threshold)
    {
		$pngname = (string)$pngname;
		$wbmpname = (string)$wbmpname;
		$dest_height = (int)$dest_height;
		$dest_width = (int)$dest_width;
		$threshold = (int)$threshold;

		return png2wbmp($pngname, $wbmpname, $dest_height, $dest_width, $threshold);
    }
}

/**
 * popenThis
 *
 * Crée un processus de pointeur de fichier.
 *
 * @link http://php.net/manual/fr/function.popen.php Documentation pour popen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $command    La commande
 * @param string   $mode    Le mode
 *
 * @return resource	Retourne un pointeur de fichier identique à celui retourné par fopen(), hormis le fait qu'il sera unidirectionnel (lecture seule, ou écriture seule), et doit être terminé par pclose(). Ce pointeur peut être utilisé avec fgets(), fgetss() et fwrite(). Lorsque le mode est 'r', le pointeur de fichier retourné équivaut au STDOUT de la commande, et lorsque le mode est 'w', le pointeur de fichier retourné équivaut au STDIN de la commande.
 *
 */
if(!function_exists('popenThis'))
{
    function popenThis($command, $mode)
    {
		$command = (string)$command;
		$mode = (string)$mode;

		return popen($command, $mode);
    }
}

/**
 * posix_accessThis
 *
 * Détermine l'accessibilité d'un fichier.
 *
 * @link http://php.net/manual/fr/function.posix-access.php Documentation pour posix_access.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $file    Le nom du fichier à tester.
 * @param int      $mode    Un masque constitué d'une ou plusieurs constantes parmi POSIX_F_OK, POSIX_R_OK, POSIX_W_OK et POSIX_X_OK. POSIX_R_OK, POSIX_W_OK et POSIX_X_OK vérifie si, respectivement, le fichier existe et a les permissions en lecture, écriture et exécution. POSIX_F_OK vérifie uniquement si le fichier existe.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_accessThis'))
{
    function posix_accessThis($file, $mode = POSIX_F_OK)
    {
		$file = (string)$file;
		$mode = (int)$mode;

		return posix_access($file, $mode);
    }
}

/**
 * posix_ctermidThis
 *
 * Retourne le chemin du terminal.
 *
 * @link http://php.net/manual/fr/function.posix-ctermid.php Documentation pour posix_ctermid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne une chaîne de caractères représentant le nom du chemin du terminal courant en cas de succès. Sinon, FALSE est retourné et errno est défini, qui pourra être récupérer en utilisant la fonction posix_get_last_error().
 *
 */
if(!function_exists('posix_ctermidThis'))
{
    function posix_ctermidThis()
    {
		return posix_ctermid();
    }
}

/**
 * posix_get_last_errorThis
 *
 * Lit le dernier numéro d'erreur généré par la dernière fonction POSIX qui a échoué.
 *
 * @link http://php.net/manual/fr/function.posix-get-last-error.php Documentation pour posix_get_last_error.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 * @return int	Retourne le numéro de la dernière erreur survenue lors d'un appel à une fonction POSIX. Si aucune erreur n'existe, 0 sera retourné.
 *
 */
if(!function_exists('posix_get_last_errorThis'))
{
    function posix_get_last_errorThis()
    {
		return posix_get_last_error();
    }
}

/**
 * posix_getcwdThis
 *
 * Chemin du dossier de travail courant.
 *
 * @link http://php.net/manual/fr/function.posix-getcwd.php Documentation pour posix_getcwd.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne une chaîne de caractères représentant le nom du chemin absolu en cas de succès. Si une erreur survient, retourne FALSE et définit l'errno qui pourra être récupéré en utilisant la fonction posix_get_last_error().
 *
 */
if(!function_exists('posix_getcwdThis'))
{
    function posix_getcwdThis()
    {
		return posix_getcwd();
    }
}

/**
 * posix_getegidThis
 *
 * Retourne l'ID effectif du groupe du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-getegid.php Documentation pour posix_getegid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne un entier représentant l'ID effectif du groupe.
 *
 */
if(!function_exists('posix_getegidThis'))
{
    function posix_getegidThis()
    {
		return posix_getegid();
    }
}

/**
 * posix_geteuidThis
 *
 * Retourne l'UID effectif de l'utilisateur du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-geteuid.php Documentation pour posix_geteuid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'ID de l'utilisateur, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_geteuidThis'))
{
    function posix_geteuidThis()
    {
		return posix_geteuid();
    }
}

/**
 * posix_getgidThis
 *
 * Retourne l'UID du groupe du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-getgid.php Documentation pour posix_getgid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'ID réel du groupe, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_getgidThis'))
{
    function posix_getgidThis()
    {
		return posix_getgid();
    }
}

/**
 * posix_getgrgidThis
 *
 * Retourne des informations sur un groupe.
 *
 * @link http://php.net/manual/fr/function.posix-getgrgid.php Documentation pour posix_getgrgid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $gid    L'identifiant du groupe.
 *
 * @return array	Les éléments du tableau retourné sont :
 *
 */
if(!function_exists('posix_getgrgidThis'))
{
    function posix_getgrgidThis($gid)
    {
		$gid = (int)$gid;

		return posix_getgrgid($gid);
    }
}

/**
 * posix_getgrnamThis
 *
 * Retourne des informations sur un groupe.
 *
 * @link http://php.net/manual/fr/function.posix-getgrnam.php Documentation pour posix_getgrnam.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $name    Le nom du groupe
 *
 * @return array	Les éléments du tableau retourné sont :
 *
 */
if(!function_exists('posix_getgrnamThis'))
{
    function posix_getgrnamThis($name)
    {
		$name = (string)$name;

		return posix_getgrnam($name);
    }
}

/**
 * posix_getgroupsThis
 *
 * Retourne les identifiants du groupe du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-getgroups.php Documentation pour posix_getgroups.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau contenant les identifiants du groupe du processus courant.
 *
 */
if(!function_exists('posix_getgroupsThis'))
{
    function posix_getgroupsThis()
    {
		return posix_getgroups();
    }
}

/**
 * posix_getloginThis
 *
 * Retourne le nom de login.
 *
 * @link http://php.net/manual/fr/function.posix-getlogin.php Documentation pour posix_getlogin.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le nom de login de l'utilisateur, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('posix_getloginThis'))
{
    function posix_getloginThis()
    {
		return posix_getlogin();
    }
}

/**
 * posix_getpgidThis
 *
 * Retourne l'id du groupe de processus.
 *
 * @link http://php.net/manual/fr/function.posix-getpgid.php Documentation pour posix_getpgid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $pid    L'identifiant du processus.
 *
 * @return int	Retourne l'identifiant, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_getpgidThis'))
{
    function posix_getpgidThis($pid)
    {
		$pid = (int)$pid;

		return posix_getpgid($pid);
    }
}

/**
 * posix_getpgrpThis
 *
 * Retourne l'identifiant du groupe de processus.
 *
 * @link http://php.net/manual/fr/function.posix-getpgrp.php Documentation pour posix_getpgrp.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'identifiant, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_getpgrpThis'))
{
    function posix_getpgrpThis()
    {
		return posix_getpgrp();
    }
}

/**
 * posix_getpidThis
 *
 * Retourne l'identifiant du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-getpid.php Documentation pour posix_getpid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'identifiant, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_getpidThis'))
{
    function posix_getpidThis()
    {
		return posix_getpid();
    }
}

/**
 * posix_getppidThis
 *
 * Retourne l'identifiant du processus parent.
 *
 * @link http://php.net/manual/fr/function.posix-getppid.php Documentation pour posix_getppid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'identifiant, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_getppidThis'))
{
    function posix_getppidThis()
    {
		return posix_getppid();
    }
}

/**
 * posix_getpwnamThis
 *
 * Retourne des informations sur un utilisateur.
 *
 * @link http://php.net/manual/fr/function.posix-getpwnam.php Documentation pour posix_getpwnam.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $username    Un nom alphanumérique d'utilisateur.
 *
 * @return array	En cas de succès, un tableau avec les éléments suivants est retourné, sinon, FALSE :
 *
 */
if(!function_exists('posix_getpwnamThis'))
{
    function posix_getpwnamThis($username)
    {
		$username = (string)$username;

		return posix_getpwnam($username);
    }
}

/**
 * posix_getpwuidThis
 *
 * Retourne des informations sur un utilisateur.
 *
 * @link http://php.net/manual/fr/function.posix-getpwuid.php Documentation pour posix_getpwuid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $uid    L'identifiant de l'utilisateur.
 *
 * @return array	Retourne un tableau associatif contenant les éléments suivants :
 *
 */
if(!function_exists('posix_getpwuidThis'))
{
    function posix_getpwuidThis($uid)
    {
		$uid = (int)$uid;

		return posix_getpwuid($uid);
    }
}

/**
 * posix_getrlimitThis
 *
 * Retourne des informations concernant les limites des ressources système.
 *
 * @link http://php.net/manual/fr/function.posix-getrlimit.php Documentation pour posix_getrlimit.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau associatif d'éléments pour chaque limite définie. Chaque limite a une limite soft et hard.
 *
 */
if(!function_exists('posix_getrlimitThis'))
{
    function posix_getrlimitThis()
    {
		return posix_getrlimit();
    }
}

/**
 * posix_getsidThis
 *
 * Retourne le sid du processus.
 *
 * @link http://php.net/manual/fr/function.posix-getsid.php Documentation pour posix_getsid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $pid    L'identifiant du processus. S'il est défini à 0, le processus courant est utilisé. Si un pid invalide est fourni, alors FALSE est retourné et une erreur est définie et pourra être récupérée avec la fonction posix_get_last_error().
 *
 * @return int	Retourne l'identifiant, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_getsidThis'))
{
    function posix_getsidThis($pid)
    {
		$pid = (int)$pid;

		return posix_getsid($pid);
    }
}

/**
 * posix_getuidThis
 *
 * Retourne l'ID de l'utilisateur du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-getuid.php Documentation pour posix_getuid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'identifiant, sous la forme d'un entier.
 *
 */
if(!function_exists('posix_getuidThis'))
{
    function posix_getuidThis()
    {
		return posix_getuid();
    }
}

/**
 * posix_initgroupsThis
 *
 * Calcule la liste des accès de groupe.
 *
 * @link http://php.net/manual/fr/function.posix-initgroups.php Documentation pour posix_initgroups.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $name    L'utilisateur pour lequel on doit calculer la liste.
 * @param int      $base_group_id    Typiquement, le numéro du groupe depuis le fichier de mot de passe.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_initgroupsThis'))
{
    function posix_initgroupsThis($name, $base_group_id)
    {
		$name = (string)$name;
		$base_group_id = (int)$base_group_id;

		return posix_initgroups($name, $base_group_id);
    }
}

/**
 * posix_isattyThis
 *
 * Détermine si un pointeur de fichier est un terminal interactif.
 *
 * @link http://php.net/manual/fr/function.posix-isatty.php Documentation pour posix_isatty.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $fd    Le pointeur de fichier.
 *
 * @return bool	Retourne TRUE si fd est un pointeur de fichier connecté à un terminal, FALSE sinon.
 *
 */
if(!function_exists('posix_isattyThis'))
{
    function posix_isattyThis($fd)
    {
		$fd = (int)$fd;

		return posix_isatty($fd);
    }
}

/**
 * posix_killThis
 *
 * Envoie un signal à un processus.
 *
 * @link http://php.net/manual/fr/function.posix-kill.php Documentation pour posix_kill.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $pid    L'identifiant du processus.
 * @param int      $sig    Une des constantes de signals PCNTL.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_killThis'))
{
    function posix_killThis($pid, $sig)
    {
		$pid = (int)$pid;
		$sig = (int)$sig;

		return posix_kill($pid, $sig);
    }
}

/**
 * posix_mkfifoThis
 *
 * Crée un fichier FIFO (first in, first out) (un pipe nommé).
 *
 * @link http://php.net/manual/fr/function.posix-mkfifo.php Documentation pour posix_mkfifo.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pathname    Chemin vers le fichier FIFO.
 * @param int      $mode    Le second paramètre mode doit être au format octal (i.e. 0644). Les droits donnés à la nouvelle pile FIFO dépendent aussi de la configuration de la fonction umask(). Les droits créées sont (mode & ~umask).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_mkfifoThis'))
{
    function posix_mkfifoThis($pathname, $mode)
    {
		$pathname = (string)$pathname;
		$mode = (int)$mode;

		return posix_mkfifo($pathname, $mode);
    }
}

/**
 * posix_mknodThis
 *
 * Crée un fichier spécial ou ordinaire (POSIX.1).
 *
 * @link http://php.net/manual/fr/function.posix-mknod.php Documentation pour posix_mknod.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $pathname    Le fichier à créer.
 * @param int      $mode    Ce paramètre est construit par une manipulation de bits ou par des types de fichier (une des constantes suivantes : POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK, POSIX_S_IFIFO ou POSIX_S_IFSOCK) et des permissions.
 * @param int      $major    L'identifiant majeur du dispositif du noyau (requis lorsque vous utilisez S_IFCHR ou S_IFBLK).
 * @param int      $minor    L'identifiant mineur du dispositif du noyau.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_mknodThis'))
{
    function posix_mknodThis($pathname, $mode, $major = 0, $minor = 0)
    {
		$pathname = (string)$pathname;
		$mode = (int)$mode;
		$major = (int)$major;
		$minor = (int)$minor;

		return posix_mknod($pathname, $mode, $major, $minor);
    }
}

/**
 * posix_setegidThis
 *
 * Modifie le GID réel du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-setegid.php Documentation pour posix_setegid.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $gid    L'ID du groupe.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_setegidThis'))
{
    function posix_setegidThis($gid)
    {
		$gid = (int)$gid;

		return posix_setegid($gid);
    }
}

/**
 * posix_seteuidThis
 *
 * Modifie l'identifiant d'utilisateur réel (UID) du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-seteuid.php Documentation pour posix_seteuid.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $uid    L'ID de l'utilisateur.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_seteuidThis'))
{
    function posix_seteuidThis($uid)
    {
		$uid = (int)$uid;

		return posix_seteuid($uid);
    }
}

/**
 * posix_setgidThis
 *
 * Fixe le GID effectif du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-setgid.php Documentation pour posix_setgid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $gid    L'ID du groupe.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_setgidThis'))
{
    function posix_setgidThis($gid)
    {
		$gid = (int)$gid;

		return posix_setgid($gid);
    }
}

/**
 * posix_setpgidThis
 *
 * Fixe l'identifiant de groupe de processus.
 *
 * @link http://php.net/manual/fr/function.posix-setpgid.php Documentation pour posix_setpgid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $pid    L'ID du processus.
 * @param int      $pgid    L'ID du groupe du processus.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_setpgidThis'))
{
    function posix_setpgidThis($pid, $pgid)
    {
		$pid = (int)$pid;
		$pgid = (int)$pgid;

		return posix_setpgid($pid, $pgid);
    }
}

/**
 * posix_setsidThis
 *
 * Fait du processus courant un chef de session.
 *
 * @link http://php.net/manual/fr/function.posix-setsid.php Documentation pour posix_setsid.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Retourne l'identifiant de session, ou -1 si une erreur survient.
 *
 */
if(!function_exists('posix_setsidThis'))
{
    function posix_setsidThis()
    {
		return posix_setsid();
    }
}

/**
 * posix_setuidThis
 *
 * Fixe l'UID effective du processus courant.
 *
 * @link http://php.net/manual/fr/function.posix-setuid.php Documentation pour posix_setuid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $uid    L'ID de l'utilisateur.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('posix_setuidThis'))
{
    function posix_setuidThis($uid)
    {
		$uid = (int)$uid;

		return posix_setuid($uid);
    }
}

/**
 * posix_strerrorThis
 *
 * Lit le message d'erreur associé à un numéro d'erreur POSIX.
 *
 * @link http://php.net/manual/fr/function.posix-strerror.php Documentation pour posix_strerror.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param int      $errno    Un numéro d'erreur POSIX, retourné par la fonction posix_get_last_error(). Si défini à 0, alors, la chaîne de caractères "Success" est retournée.
 *
 * @return string	Retourne le message d'erreur, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('posix_strerrorThis'))
{
    function posix_strerrorThis($errno)
    {
		$errno = (int)$errno;

		return posix_strerror($errno);
    }
}

/**
 * posix_timesThis
 *
 * Utilisation des ressources.
 *
 * @link http://php.net/manual/fr/function.posix-times.php Documentation pour posix_times.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau avec les informations sur l'utilisation du CPU. Les indices sont :
 *
 */
if(!function_exists('posix_timesThis'))
{
    function posix_timesThis()
    {
		return posix_times();
    }
}

/**
 * posix_ttynameThis
 *
 * Retourne le nom de device du terminal.
 *
 * @link http://php.net/manual/fr/function.posix-ttyname.php Documentation pour posix_ttyname.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $fd    Le pointeur de fichier.
 *
 * @return string	En cas de succès, retourne une chaîne de caractères correspondant au chemin absolu de fd. En cas d'erreur, retourne FALSE.
 *
 */
if(!function_exists('posix_ttynameThis'))
{
    function posix_ttynameThis($fd)
    {
		$fd = (int)$fd;

		return posix_ttyname($fd);
    }
}

/**
 * posix_unameThis
 *
 * Retourne le nom du système.
 *
 * @link http://php.net/manual/fr/function.posix-uname.php Documentation pour posix_uname.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau associatif avec des informations sur le système. Les indices du tableau sont :
 *
 */
if(!function_exists('posix_unameThis'))
{
    function posix_unameThis()
    {
		return posix_uname();
    }
}

/**
 * powThis
 *
 * Expression exponentielle.
 *
 * @link http://php.net/manual/fr/function.pow.php Documentation pour pow.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param number     $base    La base à utiliser
 * @param number     $exp    L'exponentielle
 *
 * @return number	base élevé à la puissance exp. Si les arguments ne sont pas des entiers négatifs, et que le résultat peut être représenté sous la forme d'un entier, le résultat sera retourné sous la forme d'un entier, sinon, si il sera retourné sous la forme d'un nombre à virgule flottante.
 *
 */
if(!function_exists('powThis'))
{
    function powThis($base, $exp)
    {
		$base = (float) $base;
		$exp = (float) $exp;

		return pow($base, $exp);
    }
}

/**
 * preg_filterThis
 *
 * Recherche et remplace avec une expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.preg-filter.php Documentation pour preg_filter.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param mixed     $pattern
 * @param mixed     $replacement
 * @param mixed     $subject
 * @param int      $limit
 * @param int      &$count
 *
 * @return mixed	Retourne un tableau si le paramètre subject est de type tableau ou une chaîne de caractères autrement.
 *
 */
if(!function_exists('preg_filterThis'))
{
    function preg_filterThis($pattern, $replacement, $subject, $limit = -1, &$count = NULL)
    {
		$pattern = ($pattern);
		$replacement = ($replacement);
		$subject = ($subject);
		$limit = (int)$limit;
		$count = (int)$count;

		return preg_filter($pattern, $replacement, $subject, $limit, $count);
    }
}

/**
 * preg_grepThis
 *
 * Retourne un tableau avec les résultats de la recherche.
 *
 * @link http://php.net/manual/fr/function.preg-grep.php Documentation pour preg_grep.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Le motif à chercher, sous la forme d'une chaîne de caractères.
 * @param array    $input    Le tableau d'entrée.
 * @param int      $flags    Si cette option vaut PREG_GREP_INVERT, cette fonction retourne les éléments du tableau input qui ne correspondent pas au motif pattern.
 *
 * @return array	Retourne un tableau indexé, en utilisant les clés du tableau input d'entrée.
 *
 */
if(!function_exists('preg_grepThis'))
{
    function preg_grepThis($pattern, $input, $flags = 0)
    {
		$pattern = (string)$pattern;
		$input = (array)$input;
		$flags = (int)$flags;

		return preg_grep($pattern, $input, $flags);
    }
}

/**
 * preg_last_errorThis
 *
 * Retourne le code erreur de la dernière expression PCRE exécutée.
 *
 * @link http://php.net/manual/fr/function.preg-last-error.php Documentation pour preg_last_error.
 *
 * @version PHP 5 >= 5.2.0
 * @return int	Retourne une des constantes suivantes (expliquées sur cette page):
 *
 */
if(!function_exists('preg_last_errorThis'))
{
    function preg_last_errorThis()
    {
		return preg_last_error();
    }
}

/**
 * preg_matchThis
 *
 * Expression rationnelle standard.
 *
 * @link http://php.net/manual/fr/function.preg-match.php Documentation pour preg_match.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Le masque à chercher, sous la forme d'une chaîne de caractères.
 * @param string   $subject    La chaîne d'entrée.
 * @param array    &$matches    Si matches est fourni, il sera rempli par les résultats de la recherche. $matches[0] contiendra le texte qui satisfait le masque complet, $matches[1] contiendra le texte qui satisfait la première parenthèse capturante, etc.
 * @param int      $flags    Le paramètre flags peut prendre l'une des valeurs suivantes :
 * @param int      $offset
 *
 * @return int	preg_match() retourne 1 si le pattern fourni correspond, 0 s'il ne correspond pas, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('preg_matchThis'))
{
    function preg_matchThis($pattern, $subject, &$matches = NULL, $flags = 0, $offset = 0)
    {
		$pattern = (string)$pattern;
		$subject = (string)$subject;
		$matches = (array)$matches;
		$flags = (int)$flags;
		$offset = (int)$offset;

		return preg_match($pattern, $subject, $matches, $flags, $offset);
    }
}

/**
 * preg_match_allThis
 *
 * Expression rationnelle globale.
 *
 * @link http://php.net/manual/fr/function.preg-match-all.php Documentation pour preg_match_all.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Le masque à chercher, sous la forme d'une chaîne de caractères.
 * @param string   $subject    La chaîne d'entrée.
 * @param array    &$matches    Tableau contenant tous les résultats, dans un tableau multidimensionnel ordonné suivant le paramètre flags.
 * @param int      $flags    Peut prendre une des deux valeurs suivantes (notez bien qu'il est incohérent d'utiliser PREG_PATTERN_ORDER avec PREG_SET_ORDER ) : Si order est omis, PREG_PATTERN_ORDER est utilisé par défaut.
 * @param int      $offset    L'ordre est tel que $matches[0] est un tableau qui contient les résultats qui satisfont le masque complet, $matches[1] est un tableau qui contient les résultats qui satisfont la première parenthèse capturante, etc.
 *
 * @return int	Retourne le nombre de résultats qui satisfont le masque complet, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('preg_match_allThis'))
{
    function preg_match_allThis($pattern, $subject, &$matches = NULL, $flags = PREG_PATTERN_ORDER, $offset = 0)
    {
		$pattern = (string)$pattern;
		$subject = (string)$subject;
		$matches = (array)$matches;
		$flags = (int)$flags;
		$offset = (int)$offset;

		return preg_match_all($pattern, $subject, $matches, $flags, $offset);
    }
}

/**
 * preg_quoteThis
 *
 * Protection des caractères spéciaux des expressions rationnelles.
 *
 * @link http://php.net/manual/fr/function.preg-quote.php Documentation pour preg_quote.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param string   $delimiter    Si l'argument optionnel delimiter est fourni, il sera aussi échappé. Ceci est pratique pour échapper le délimiteur requis par les fonctions PCRE. Le slash / est le délimiteur le plus répandu.
 *
 * @return string	Retourne la chaîne protégée.
 *
 */
if(!function_exists('preg_quoteThis'))
{
    function preg_quoteThis($str, $delimiter = NULL)
    {
		$str = (string)$str;
		$delimiter = (string)$delimiter;

		return preg_quote($str, $delimiter);
    }
}

/**
 * preg_replaceThis
 *
 * Rechercher et remplacer par expression rationnelle standard.
 *
 * @link http://php.net/manual/fr/function.preg-replace.php Documentation pour preg_replace.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $pattern    Le masque à chercher. Il peut être une chaîne ou un tableau de chaînes. Plusieurs modificateurs PCRE sont également disponibles, incluant 'e' (PREG_REPLACE_EVAL), qui est spécifique à cette fonction.
 * @param mixed     $replacement    La chaîne ou un tableau de chaînes pour le remplacement. Si ce paramètre est une chaîne et le paramètre pattern est un tableau, tous les masques seront remplacés par cette chaîne. Si les paramètres pattern et replacement sont des tableaux, chaque pattern sera remplacé son replacement associé. Si replacement à moins d'éléments que pattern, alors une chaîne vide est utilisée pour le reste des valeurs. Pour utiliser les antislashs dans le masque, vous devez les doubler ("\\\\"). replacement peut contenir des références de la forme \\n ou, (depuis PHP 4.0.4) $n. Cette dernière forme est recommandée. Ces références seront remplacées par le texte capturé par la n-ième parenthèse capturante du masque. n peut prendre des valeurs de 0 à 99, et \\0 ou $0, correspondent au texte de qui satisfait le masque complet. Les parenthèses ouvrantes sont comptées de gauche à droite (en commençant à 1) pour déterminer le numéro de parenthèse capturante. Lorsque vous travaillez avec un masque de remplacement où une référence arrière est directement suivie par un nombre (i.e.: placer un nombre littéral immédiatement après une référence arrière), vous ne pouvez pas utiliser la syntaxe classique \\1 pour la référence arrière. \\11, par exemple, sera confus pour la fonction preg_replace() dans le sens où elle ne saura pas si vous désirez la référence arrière \\1 suivi du nombre 1 ou si vous désirez la référence arrière \\11 suivi de "rien". Dans ce cas, la solution est d'utiliser la syntaxe \${1}1. Cela créera une référence arrière isolée $1, suivi du nombre littéral 1. Lorsque vous utilisez l'option e, cette fonction échappe quelques caractères (', ", \ et NULL) dans la chaîne qui remplace les références arrières. Ce comportement se justifie afin d'assurer qu'aucune erreur de syntaxe ne survient lors de l'utilisation des références arrières avec des guillemets simples et doubles (e.g. 'strlen(\'$1\')+strlen("$2")'). Assurez-vous d'être familier avec la syntaxe des chaînes afin de savoir exactement à quoi la chaîne interprétée doit ressembler.
 * @param mixed     $subject    La chaîne ou le tableau contenant des chaînes à chercher et à remplacer. Si subject est un tableau, alors l'opération sera appliquée à chacun des éléments du tableau, et le tableau sera retourné.
 * @param int      $limit    Le nombre maximal de remplacement pour chaque masque dans chaque chaîne subject. Par défaut, vaut -1 (aucune limite).
 * @param int      &$count    Si fournie, cette variable contiendra le nombre de remplacements effectués.
 *
 * @return mixed	preg_replace() retourne un tableau si le paramètre subject est un tableau, ou une chaîne sinon.
 *
 */
if(!function_exists('preg_replaceThis'))
{
    function preg_replaceThis($pattern, $replacement, $subject, $limit = -1, &$count = NULL)
    {
		$pattern = ($pattern);
		$replacement = ($replacement);
		$subject = ($subject);
		$limit = (int)$limit;
		$count = (int)$count;

		return preg_replace($pattern, $replacement, $subject, $limit, $count);
    }
}

/**
 * preg_replace_callbackThis
 *
 * Rechercher et remplacer par expression rationnelle standard en utilisant une fonction de callback.
 *
 * @link http://php.net/manual/fr/function.preg-replace-callback.php Documentation pour preg_replace_callback.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param mixed     $pattern    Le masque à chercher. Il peut être une chaîne de caractères ou un tableau contenant des chaînes.
 * @param callable     $callback    La fonction de rappel qui recevra le tableau d'éléments trouvés dans la chaîne subject. La fonction de rappel doit retourner la chaîne de remplacement. Voici la signature de la fonction de rappel : Vous aurez souvent besoin de la fonction callback avec preg_replace_callback() à un seul endroit. Dans ce cas, vous pouvez simplement utiliser une fonction anonyme (depuis PHP 5.3.0) ou la fonction create_function() pour déclarer une fonction anonyme comme fonction de rappel pour preg_replace_callback(). En faisant cela, vous concentrez toutes les routines liées à votre remplacement à un seul endroit, et nous ne polluez par votre espace de noms de fonctions avec des fonctions à usage unique.
 * @param mixed     $subject    La chaîne ou le tableau de chaînes à chercher et à remplacer.
 * @param int      $limit    Le nombre maximal de remplacement pour chaque masque dans chaque chaîne subject. Vaut par défaut -1 (aucune limite).
 * @param int      &$count    Si fournie, cette variable sera remplie avec le nombre de remplacements effectués.
 *
 * @return mixed	preg_replace_callback() retourne un tableau si le paramètre subject est un tableau, ou, sinon, une chaîne de caractères. Si une erreur survient, la valeur retournée sera NULL.
 *
 */
if(!function_exists('preg_replace_callbackThis'))
{
    function preg_replace_callbackThis($pattern, $callback, $subject, $limit = -1, &$count = NULL)
    {
		$pattern = ($pattern);
		$callback = is_callable($callback) ? $callback : NULL;
		$subject = ($subject);
		$limit = (int)$limit;
		$count = (int)$count;

		return preg_replace_callback($pattern, $callback, $subject, $limit, $count);
    }
}

/**
 * preg_splitThis
 *
 * Éclate une chaîne par expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.preg-split.php Documentation pour preg_split.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Le masque à chercher, sous la forme d'une chaîne de caractères.
 * @param string   $subject    La chaîne d'entrée.
 * @param int      $limit    Si limit est spécifié, alors seules les limit premières sous-chaînes sont retournées avec le reste de la chaîne placé dans la dernière sous-chaîne. Si vous définissez le paramètre limit à -1, 0, ou NULL, cela signifie "aucune limite" et, vous pouvez utiliser la valeur NULL pour ignorer le paramètre flags.
 * @param int      $flags    flags peut être la combinaison des options suivantes (combinées avec l'opérateur |):
 *
 * @return array	Retourne un tableau contenant les sous-chaînes de subject, séparées par les chaînes qui vérifient pattern.
 *
 */
if(!function_exists('preg_splitThis'))
{
    function preg_splitThis($pattern, $subject, $limit = -1, $flags = 0)
    {
		$pattern = (string)$pattern;
		$subject = (string)$subject;
		$limit = (int)$limit;
		$flags = (int)$flags;

		return preg_split($pattern, $subject, $limit, $flags);
    }
}

/**
 * prevThis
 *
 * Recule le pointeur courant de tableau.
 *
 * @link http://php.net/manual/fr/function.prev.php Documentation pour prev.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 *
 * @return mixed	Retourne la valeur précédente du tableau suivant le pointeur interne du tableau, ou FALSE s'il n'y a plus d'élément.
 *
 */
if(!function_exists('prevThis'))
{
    function prevThis(&$array)
    {
		$array = (array)$array;

		return prev($array);
    }
}

/**
 * printThis
 *
 * Affiche une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.print.php Documentation pour print.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $arg    Les données d'entrée.
 *
 * @return int	Retourne 1, toujours.
 *
 */
if(!function_exists('printThis'))
{
    function printThis($arg)
    {
		$arg = (string)$arg;

		return print($arg);
    }
}

/**
 * print_rThis
 *
 * Affiche des informations lisibles pour une variable.
 *
 * @link http://php.net/manual/fr/function.print-r.php Documentation pour print_r.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $expression    L'expression à afficher.
 * @param bool     $return    Si vous voulez obtenir le résultat de print_r() dans une chaîne, utilisez le paramètre return. Lorsque ce paramètre vaut TRUE, print_r() retournera l'information plutôt que de l'afficher.
 *
 * @return mixed	Si une chaîne de caractères, un entier ou un nombre décimal est fournie, sa valeur sera affichée. Si un tableau est fourni, les valeurs seront affichées dans un format permettant de voir les clés et les éléments. Un format similaire sera également utilisé pour les objets.
 *
 */
if(!function_exists('print_rThis'))
{
    function print_rThis($expression, $return = false)
    {
		$expression = ($expression);
		$return = (bool)$return;

		return print_r($expression, $return);
    }
}

/**
 * printfThis
 *
 * Affiche une chaîne de caractères formatée.
 *
 * @link http://php.net/manual/fr/function.printf.php Documentation pour printf.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    Voir la documentation de la fonction sprintf() pour une description du paramètre format.
 * @param mixed     $args
 * @param mixed     $item
 *
 * @return int	Retourne la taille de la chaîne affichée.
 *
 */
if(!function_exists('printfThis'))
{
    function printfThis($format, $args = NULL, $args1 = NULL)
    {
		$format = (string)$format;
		$args = ($args);
		$args1 = ($args1);
		return printf($format, $args, $args1);
    }
}

/**
 * proc_closeThis
 *
 * Ferme un processus ouvert par proc_open().
 *
 * @link http://php.net/manual/fr/function.proc-close.php Documentation pour proc_close.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $process    La resource proc_open() à fermer
 *
 * @return int	Retourne le code de sortie du processus ou -1 en cas d'echec.
 *
 */
if(!function_exists('proc_closeThis'))
{
    function proc_closeThis($process)
    {
		$process = is_resource($process) ? $process : NULL;

		return proc_close($process);
    }
}

/**
 * proc_get_statusThis
 *
 * Lit les informations concernant un processus ouvert par proc_open().
 *
 * @link http://php.net/manual/fr/function.proc-get-status.php Documentation pour proc_get_status.
 *
 * @version PHP 5
 *
 * @param resource $process    La ressource proc_open() à évaluer.
 *
 * @return array	Un tableau contenant les informations collectées en cas de succès, et FALSE en cas d'échec. Le tableau retourné contient les éléments suivants :
 *
 */
if(!function_exists('proc_get_statusThis'))
{
    function proc_get_statusThis($process)
    {
		$process = is_resource($process) ? $process : NULL;

		return proc_get_status($process);
    }
}

/**
 * proc_niceThis
 *
 * Change la priorité d'exécution du processus courant.
 *
 * @link http://php.net/manual/fr/function.proc-nice.php Documentation pour proc_nice.
 *
 * @version PHP 5
 *
 * @param int      $increment    La valeur de l'incrément de la priorité.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Si une erreur survient, par exemple, si l'utilisateur qui tente de changer la priorité d'un processus n'a pas suffisamment de droit pour le faire, une erreur de niveau E_WARNING est générée et FALSE est retourné.
 *
 */
if(!function_exists('proc_niceThis'))
{
    function proc_niceThis($increment)
    {
		$increment = (int)$increment;

		return proc_nice($increment);
    }
}

/**
 * proc_openThis
 *
 * Exécute une commande et ouvre les pointeurs de fichiers pour les entrées / sorties.
 *
 * @link http://php.net/manual/fr/function.proc-open.php Documentation pour proc_open.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $cmd    La commande à exécuter
 * @param array    $descriptorspec    Un tableau indexé, dont les clés représentent le numéro de descripteur et la valeur la méthode avec laquelle PHP va passer ce descripteur au processus fils. 0 est stdin, 1 est stdout, et 2 est stderr. Chaque élément peut être : Les numéros de pointeurs de fichiers ne sont pas limités à 0, 1 et 2 - vous pouvez spécifier n'importe quel numéro de descripteur valide, et il sera passé au processus fils. Cela permettra à votre script d'inter opérer avec d'autres scripts, et d'être exécuté comme "co-processus". En particulier, c'est très pratique pour passer des mots de passes à des programmes comme PGP, GPG et openssl, avec une méthode très protégée. C'est aussi pratique pour lire des informations de statut fournies par ces programmes, sur des descripteurs auxiliaires.
 * @param array    &$pipes    Doit être défini en un tableau indexé de pointeurs de fichiers qui correspondent à la fin de n'importe quel descripteur PHP qui sont créés.
 * @param string   $cwd    Le dossier initial de travail de la commande. Cela doit être un chemin absolu vers le dossier ou NULL si vous voulez utiliser la valeur par défaut (le dossier de travail du processus courant PHP)
 * @param array    $env    Un tableau contenant les variables d'environnement pour la commande qui doit être exécutée, ou NULL pour utiliser le même environnement que le processus PHP courant
 * @param array    $other_options    Vous permet de spécifier des options supplémentaires. Les options actuellement supportées sont :
 *
 * @return resource	Retourne une ressource représentant le processus, qui pourra être utilisé par la fonction proc_close() lorsque vous n'en aurez plus besoin. En cas d'échec, FALSE sera retourné.
 *
 */
if(!function_exists('proc_openThis'))
{
    function proc_openThis($cmd, $descriptorspec, &$pipes, $cwd = NULL, $env = NULL, $other_options = NULL)
    {
		$cmd = (string)$cmd;
		$descriptorspec = (array)$descriptorspec;
		$pipes = (array)$pipes;
		$cwd = (string)$cwd;
		$env = (array)$env;
		$other_options = (array)$other_options;

		return proc_open($cmd, $descriptorspec, $pipes, $cwd, $env, $other_options);
    }
}

/**
 * proc_terminateThis
 *
 * Termine un processus ouvert par proc_open().
 *
 * @link http://php.net/manual/fr/function.proc-terminate.php Documentation pour proc_terminate.
 *
 * @version PHP 5
 *
 * @param resource $process    La ressource proc_open() qui sera fermée.
 * @param int      $signal    Ce paramètre optionnel n'est utile que sur les plates-formes POSIX : vous pouvez alors spécifier un signal à envoyer au processus, en utilisant l'appel système kill(2). La valeur par défaut est alors SIGTERM.
 *
 * @return bool	Retourne le code de sortie du processus.
 *
 */
if(!function_exists('proc_terminateThis'))
{
    function proc_terminateThis($process, $signal = 15)
    {
		$process = is_resource($process) ? $process : NULL;
		$signal = (int)$signal;

		return proc_terminate($process, $signal);
    }
}

/**
 * property_existsThis
 *
 * Vérifie si un objet ou une classe possède une propriété.
 *
 * @link http://php.net/manual/fr/function.property-exists.php Documentation pour property_exists.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param mixed     $class    Le nom de la classe ou un objet de la classe à tester
 * @param string   $property    Le nom de la propriété
 *
 * @return bool	Retourne TRUE si la propriété existe, FALSE si elle n'existe pas et NULL si une erreur survient.
 *
 */
if(!function_exists('property_existsThis'))
{
    function property_existsThis($class, $property)
    {
		$class = ($class);
		$property = (string)$property;

		return property_exists($class, $property);
    }
}

/**
 * pspell_add_to_personalThis
 *
 * Ajoute le mot au dictionnaire personnel.
 *
 * @link http://php.net/manual/fr/function.pspell-add-to-personal.php Documentation pour pspell_add_to_personal.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param string   $word    Le Mot ajouté.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_add_to_personalThis'))
{
    function pspell_add_to_personalThis($dictionary_link, $word)
    {
		$dictionary_link = (int)$dictionary_link;
		$word = (string)$word;

		return pspell_add_to_personal($dictionary_link, $word);
    }
}

/**
 * pspell_add_to_sessionThis
 *
 * Ajoute le mot au dictionnaire personnel de la session courante.
 *
 * @link http://php.net/manual/fr/function.pspell-add-to-session.php Documentation pour pspell_add_to_session.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param string   $word    Le mot ajouté.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_add_to_sessionThis'))
{
    function pspell_add_to_sessionThis($dictionary_link, $word)
    {
		$dictionary_link = (int)$dictionary_link;
		$word = (string)$word;

		return pspell_add_to_session($dictionary_link, $word);
    }
}

/**
 * pspell_checkThis
 *
 * Vérifie un mot.
 *
 * @link http://php.net/manual/fr/function.pspell-check.php Documentation pour pspell_check.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param string   $word    Le mot testé.
 *
 * @return bool	Retourne TRUE si l'orthographe est correcte, FALSE sinon.
 *
 */
if(!function_exists('pspell_checkThis'))
{
    function pspell_checkThis($dictionary_link, $word)
    {
		$dictionary_link = (int)$dictionary_link;
		$word = (string)$word;

		return pspell_check($dictionary_link, $word);
    }
}

/**
 * pspell_clear_sessionThis
 *
 * Remet à zéro la session courante.
 *
 * @link http://php.net/manual/fr/function.pspell-clear-session.php Documentation pour pspell_clear_session.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_clear_sessionThis'))
{
    function pspell_clear_sessionThis($dictionary_link)
    {
		$dictionary_link = (int)$dictionary_link;

		return pspell_clear_session($dictionary_link);
    }
}

/**
 * pspell_config_createThis
 *
 * Crée une configuration utilisée pour ouvrir un dictionnaire.
 *
 * @link http://php.net/manual/fr/function.pspell-config-create.php Documentation pour pspell_config_create.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $language    Le paramètre de langage language est le code de langue en deux lettres, défini dans la norme ISO 639, et deux lettres optionnelles ISO 3166, après un tiret ou un souligné (_).
 * @param string   $spelling    Le paramètre d'orthographe spelling est nécessaire pour les langues qui ont plus d'une orthographe, comme l'anglais. Les valeurs reconnues sont alors 'american' (américain) , 'british' (anglais), et 'canadian' (canadien).
 * @param string   $jargon    Le paramètre de jargon jargon contient des informations supplémentaires pour distinguer deux dictionnaires distincts pour la même langue et le même paramètre d'orthographe spelling.
 * @param string   $encoding    Le paramètre d'encodage encoding indique l'encodage attendu pour la réponse. Les valeurs valides sont : 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp252', 'machine unsigned 16', 'machine unsigned 32'. Ce paramètre n'a pas été testé de manière exhaustive, alors soyez prudent.
 *
 * @return int	Retourne une ressource pspell config, ou FALSE en cas d'erreur.
 *
 */
if(!function_exists('pspell_config_createThis'))
{
    function pspell_config_createThis($language, $spelling = NULL, $jargon = NULL, $encoding = NULL)
    {
		$language = (string)$language;
		$spelling = (string)$spelling;
		$jargon = (string)$jargon;
		$encoding = (string)$encoding;

		return pspell_config_create($language, $spelling, $jargon, $encoding);
    }
}

/**
 * pspell_config_data_dirThis
 *
 * Dossier qui contient les fichiers de données linguistiques.
 *
 * @link http://php.net/manual/fr/function.pspell-config-data-dir.php Documentation pour pspell_config_data_dir.
 *
 * @version PHP 5
 *
 * @param int      $conf
 * @param string   $directory
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_data_dirThis'))
{
    function pspell_config_data_dirThis($conf, $directory)
    {
		$conf = (int)$conf;
		$directory = (string)$directory;

		return pspell_config_data_dir($conf, $directory);
    }
}

/**
 * pspell_config_dict_dirThis
 *
 * Endroit où se trouve le fichier global des mots.
 *
 * @link http://php.net/manual/fr/function.pspell-config-dict-dir.php Documentation pour pspell_config_dict_dir.
 *
 * @version PHP 5
 *
 * @param int      $conf
 * @param string   $directory
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_dict_dirThis'))
{
    function pspell_config_dict_dirThis($conf, $directory)
    {
		$conf = (int)$conf;
		$directory = (string)$directory;

		return pspell_config_dict_dir($conf, $directory);
    }
}

/**
 * pspell_config_ignoreThis
 *
 * Ignore les mots de moins de N caractères.
 *
 * @link http://php.net/manual/fr/function.pspell-config-ignore.php Documentation pour pspell_config_ignore.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param int      $n    Les mots de moins de n caractères seront ignorés.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_ignoreThis'))
{
    function pspell_config_ignoreThis($dictionary_link, $n)
    {
		$dictionary_link = (int)$dictionary_link;
		$n = (int)$n;

		return pspell_config_ignore($dictionary_link, $n);
    }
}

/**
 * pspell_config_modeThis
 *
 * Change le mode de suggestion.
 *
 * @link http://php.net/manual/fr/function.pspell-config-mode.php Documentation pour pspell_config_mode.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param int      $mode    Le paramètre de mode est le mode de travail du vérificateur d'orthographe. Plusieurs modes sont disponibles :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_modeThis'))
{
    function pspell_config_modeThis($dictionary_link, $mode)
    {
		$dictionary_link = (int)$dictionary_link;
		$mode = (int)$mode;

		return pspell_config_mode($dictionary_link, $mode);
    }
}

/**
 * pspell_config_personalThis
 *
 * Choisit le fichier qui contient le dictionnaire personnel.
 *
 * @link http://php.net/manual/fr/function.pspell-config-personal.php Documentation pour pspell_config_personal.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param string   $file    Le dictionnaire personnel. Si le fichier n'existe pas, il sera créé. Le fichier doit être accessible en écriture pour l'utilisateur invoquant PHP (ex. nobody).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_personalThis'))
{
    function pspell_config_personalThis($dictionary_link, $file)
    {
		$dictionary_link = (int)$dictionary_link;
		$file = (string)$file;

		return pspell_config_personal($dictionary_link, $file);
    }
}

/**
 * pspell_config_replThis
 *
 * Choisit le fichier qui contient les paires de remplacement.
 *
 * @link http://php.net/manual/fr/function.pspell-config-repl.php Documentation pour pspell_config_repl.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param string   $file    Le fichier doit être accessible en écriture pour l'utilisateur invoquant PHP (ex. nobody).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_replThis'))
{
    function pspell_config_replThis($dictionary_link, $file)
    {
		$dictionary_link = (int)$dictionary_link;
		$file = (string)$file;

		return pspell_config_repl($dictionary_link, $file);
    }
}

/**
 * pspell_config_runtogetherThis
 *
 * Considère deux mots accolés comme un composé.
 *
 * @link http://php.net/manual/fr/function.pspell-config-runtogether.php Documentation pour pspell_config_runtogether.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param bool     $flag    TRUE si deux mots accolés doivent être traités comme un composé valide, FALSE sinon.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_runtogetherThis'))
{
    function pspell_config_runtogetherThis($dictionary_link, $flag)
    {
		$dictionary_link = (int)$dictionary_link;
		$flag = (bool)$flag;

		return pspell_config_runtogether($dictionary_link, $flag);
    }
}

/**
 * pspell_config_save_replThis
 *
 * Détermine s'il faut sauver les paires de remplacement avec le dictionnaire.
 *
 * @link http://php.net/manual/fr/function.pspell-config-save-repl.php Documentation pour pspell_config_save_repl.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param bool     $flag    TRUE si les paires de remplacement doivent être sauvées, FALSE sinon.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_config_save_replThis'))
{
    function pspell_config_save_replThis($dictionary_link, $flag)
    {
		$dictionary_link = (int)$dictionary_link;
		$flag = (bool)$flag;

		return pspell_config_save_repl($dictionary_link, $flag);
    }
}

/**
 * pspell_newThis
 *
 * Charge un nouveau dictionnaire.
 *
 * @link http://php.net/manual/fr/function.pspell-new.php Documentation pour pspell_new.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $language    Le paramètre de langue spelling est constitué des deux lettres du codage de langue ISO 639, et du codage optionnel de pays ISO 3166, séparés par un '_'.
 * @param string   $spelling    Ce paramètre est nécessaire pour les langues qui ont plus d'une orthographe, comme l'anglais ou le français. Les valeurs reconnues sont 'american', 'british', et 'canadian'.
 * @param string   $jargon    Le paramètre jargon contient des informations supplémentaires pour distinguer deux listes de mots qui ont le même marquage de langue et d'orthographe.
 * @param string   $encoding    Le paramètre encoding est le type d'encodage des mots. Les valeurs valides sont 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp252', 'machine unsigned 16', 'machine unsigned 32'. Ce paramètre n'ayant pas été testé de façon exhaustive, il convient d'être prudent lors de son utilisation.
 * @param int      $mode    Le paramètre mode est le mode de travail du vérificateur d'orthographe. Plusieurs modes sont disponibles :
 *
 * @return int	Retourne l'identifiant de dictionnaire en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_newThis'))
{
    function pspell_newThis($language, $spelling = NULL, $jargon = NULL, $encoding = NULL, $mode = 0)
    {
		$language = (string)$language;
		$spelling = (string)$spelling;
		$jargon = (string)$jargon;
		$encoding = (string)$encoding;
		$mode = (int)$mode;

		return pspell_new($language, $spelling, $jargon, $encoding, $mode);
    }
}

/**
 * pspell_new_configThis
 *
 * Charge un nouveau dictionnaire avec les paramètres spécifiés dans une configuration.
 *
 * @link http://php.net/manual/fr/function.pspell-new-config.php Documentation pour pspell_new_config.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $config    Le config est celui qui est retourné par pspell_config_create() lorsque la configuration est créée.
 *
 * @return int	Retourne un identifiant de dictionnaire en cas de succès.
 *
 */
if(!function_exists('pspell_new_configThis'))
{
    function pspell_new_configThis($config)
    {
		$config = (int)$config;

		return pspell_new_config($config);
    }
}

/**
 * pspell_new_personalThis
 *
 * Charge un nouveau dictionnaire avec un dictionnaire personnel.
 *
 * @link http://php.net/manual/fr/function.pspell-new-personal.php Documentation pour pspell_new_personal.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $personal    Le fichier où seront ajoutés les mots du dictionnaire personnel. Ce doit être un chemin absolu, qui commence par '/' car, sinon, il sera relatif à $HOME, qui est "/root" sur la plupart des systèmes, et probablement pas ce que vous souhaitez.
 * @param string   $language    Le paramètre de langage language est le code de langue ISO 639 en deux lettres, suivi de deux lettres optionnelles ISO 3166, après un tiret ou un souligné (_).
 * @param string   $spelling    Le paramètre d'orthographe spelling est nécessaire pour les langues qui ont plus d'une orthographe, comme l'anglais. Les valeurs reconnues sont alors 'american' (américain) , 'british' (anglais), et 'canadian' (canadien).
 * @param string   $jargon    Informations supplémentaires pour distinguer deux dictionnaires distincts pour la même langue et le même paramètre d'orthographe spelling.
 * @param string   $encoding    L'encodage attendu pour la réponse. Les valeurs valides sont : utf-8, iso8859-*, koi8-r, viscii, cp252, machine unsigned 16, machine unsigned 32.
 * @param int      $mode    Le mode de travail du vérificateur d'orthographe. Plusieurs modes sont disponibles :
 *
 * @return int	Retourne l'identifiant de dictionnaire à utiliser avec les autres fonctions pspell.
 *
 */
if(!function_exists('pspell_new_personalThis'))
{
    function pspell_new_personalThis($personal, $language, $spelling = NULL, $jargon = NULL, $encoding = NULL, $mode = 0)
    {
		$personal = (string)$personal;
		$language = (string)$language;
		$spelling = (string)$spelling;
		$jargon = (string)$jargon;
		$encoding = (string)$encoding;
		$mode = (int)$mode;

		return pspell_new_personal($personal, $language, $spelling, $jargon, $encoding, $mode);
    }
}

/**
 * pspell_save_wordlistThis
 *
 * Sauve le dictionnaire personnel dans un fichier.
 *
 * @link http://php.net/manual/fr/function.pspell-save-wordlist.php Documentation pour pspell_save_wordlist.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link    Un identifiant de dictionnaire ouvert avec pspell_new_personal().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_save_wordlistThis'))
{
    function pspell_save_wordlistThis($dictionary_link)
    {
		$dictionary_link = (int)$dictionary_link;

		return pspell_save_wordlist($dictionary_link);
    }
}

/**
 * pspell_store_replacementThis
 *
 * Enregistre une paire de remplacement pour un mot.
 *
 * @link http://php.net/manual/fr/function.pspell-store-replacement.php Documentation pour pspell_store_replacement.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link    Un identifiant de dictionnaire, ouvert avec pspell_new_personal()
 * @param string   $misspelled    Le mot mal orthographié.
 * @param string   $correct    La bonne orthographe du mot misspelled.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('pspell_store_replacementThis'))
{
    function pspell_store_replacementThis($dictionary_link, $misspelled, $correct)
    {
		$dictionary_link = (int)$dictionary_link;
		$misspelled = (string)$misspelled;
		$correct = (string)$correct;

		return pspell_store_replacement($dictionary_link, $misspelled, $correct);
    }
}

/**
 * pspell_suggestThis
 *
 * Suggère l'orthographe d'un mot.
 *
 * @link http://php.net/manual/fr/function.pspell-suggest.php Documentation pour pspell_suggest.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param int      $dictionary_link
 * @param string   $word    Le mot testé.
 *
 * @return array	Retourne un tableau de suggestions pour le mot word.
 *
 */
if(!function_exists('pspell_suggestThis'))
{
    function pspell_suggestThis($dictionary_link, $word)
    {
		$dictionary_link = (int)$dictionary_link;
		$word = (string)$word;

		return pspell_suggest($dictionary_link, $word);
    }
}

/**
 * putenvThis
 *
 * Fixe la valeur d'une variable d'environnement.
 *
 * @link http://php.net/manual/fr/function.putenv.php Documentation pour putenv.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $setting    La configuration, comme "FOO=BAR"
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('putenvThis'))
{
    function putenvThis($setting)
    {
		$setting = (string)$setting;

		return putenv($setting);
    }
}

/**
 * qdom_errorThis
 *
 * Retourne le message d'erreur de la dernière opération QDOM, ou FALSE si aucune erreur n'est survenue.
 *
 * @link http://php.net/manual/fr/function.qdom-error.php Documentation pour qdom_error.
 *
 * @version PHP 4 >= 4.0.5
 *
 */
if(!function_exists('qdom_errorThis'))
{
    function qdom_errorThis()
    {
		return qdom_error();
    }
}

/**
 * qdom_treeThis
 *
 * Crée un arbre à partir d'une chaîne XML.
 *
 * @link http://php.net/manual/fr/function.qdom-tree.php Documentation pour qdom_tree.
 *
 * @version PHP 4 >= 4.0.4
 *
 * @param string   $doc
 *
 */
if(!function_exists('qdom_treeThis'))
{
    function qdom_treeThis($doc)
    {
		$doc = (string)$doc;

		return qdom_tree($doc);
    }
}

/**
 * quoted_printable_decodeThis
 *
 * Convertit une chaîne quoted-printable en chaîne 8 bits.
 *
 * @link http://php.net/manual/fr/function.quoted-printable-decode.php Documentation pour quoted_printable_decode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne, convertie au format 8-bits.
 *
 */
if(!function_exists('quoted_printable_decodeThis'))
{
    function quoted_printable_decodeThis($str)
    {
		$str = (string)$str;

		return quoted_printable_decode($str);
    }
}

/**
 * quoted_printable_encodeThis
 *
 * Convertit une chaîne 8 bits en une chaîne quoted-printable.
 *
 * @link http://php.net/manual/fr/function.quoted-printable-encode.php Documentation pour quoted_printable_encode.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $str    La chaîne à traiter.
 *
 * @return string	La chaîne encodée.
 *
 */
if(!function_exists('quoted_printable_encodeThis'))
{
    function quoted_printable_encodeThis($str)
    {
		$str = (string)$str;

		return quoted_printable_encode($str);
    }
}

/**
 * quotemetaThis
 *
 * Protège les métacaractères.
 *
 * @link http://php.net/manual/fr/function.quotemeta.php Documentation pour quotemeta.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne dont les métacaractères ont été protégés ou FALSE si une chaîne vide est fournie dans le paramètre str.
 *
 */
if(!function_exists('quotemetaThis'))
{
    function quotemetaThis($str)
    {
		$str = (string)$str;

		return quotemeta($str);
    }
}

/**
 * rad2degThis
 *
 * Conversion de radians en degrés.
 *
 * @link http://php.net/manual/fr/function.rad2deg.php Documentation pour rad2deg.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $number    Une valeur, en radians
 *
 * @return float	L'équivalent de number, en degrés.
 *
 */
if(!function_exists('rad2degThis'))
{
    function rad2degThis($number)
    {
		$number = (float)$number;

		return rad2deg($number);
    }
}

/**
 * randThis
 *
 * Génère une valeur aléatoire.
 *
 * @link http://php.net/manual/fr/function.rand.php Documentation pour rand.
 *
 * @version PHP 4
 * @version PHP 5
 * @return int	Une valeur pseudoaléatoire, comprise entre min (ou 0) et max (ou mt_getrandmax(), inclusif).
 *
 */
if(!function_exists('randThis'))
{
    function randThis()
    {
		return rand();
    }
}

/**
 * rangeThis
 *
 * Crée un tableau contenant un intervalle d'éléments.
 *
 * @link http://php.net/manual/fr/function.range.php Documentation pour range.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $start    Première valeur de la séquence.
 * @param mixed     $end    La séquence se termine lorsque la valeur end est atteinte.
 * @param number     $step    Si une valeur est donnée au paramètre step, il sera utilisé comme valeur incrémentale entre les éléments de la séquence. step doit être exprimé comme un nombre entier positif. S'il n'est pas spécifié, step vaut par défaut 1.
 *
 * @return array	Retourne un tableau d'éléments depuis start jusqu'à end, inclusif.
 *
 */
if(!function_exists('rangeThis'))
{
    function rangeThis($start, $end, $step = 1)
    {
		$start = ($start);
		$end = ($end);
		$step = (float) $step;

		return range($start, $end, $step);
    }
}

/**
 * rawurldecodeThis
 *
 * Décode une chaîne URL.
 *
 * @link http://php.net/manual/fr/function.rawurldecode.php Documentation pour rawurldecode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    L'URL à décoder.
 *
 * @return string	Retourne l'URL décodée, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('rawurldecodeThis'))
{
    function rawurldecodeThis($str)
    {
		$str = (string)$str;

		return rawurldecode($str);
    }
}

/**
 * rawurlencodeThis
 *
 * Encode une chaîne en URL, selon la RFC 3986.
 *
 * @link http://php.net/manual/fr/function.rawurlencode.php Documentation pour rawurlencode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    L'URL à encoder.
 *
 * @return string	Retourne une chaîne dont tous les caractères non alphanumériques (hormis
 *
 */
if(!function_exists('rawurlencodeThis'))
{
    function rawurlencodeThis($str)
    {
		$str = (string)$str;

		return rawurlencode($str);
    }
}

/**
 * readdirThis
 *
 * Lit une entrée du dossier.
 *
 * @link http://php.net/manual/fr/function.readdir.php Documentation pour readdir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $dir_handle    La ressource de dossier ouverte précédemment avec opendir(). Si la ressource de dossier n'est pas spécifiée, la dernière ressource ouverte avec la fonction opendir() sera utilisée.
 *
 * @return string	Retourne le nom de l'entrée en cas de réussite ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readdirThis'))
{
    function readdirThis($dir_handle = NULL)
    {
		$dir_handle = is_resource($dir_handle) ? $dir_handle : NULL;

		return readdir($dir_handle);
    }
}

/**
 * readfileThis
 *
 * Affiche un fichier.
 *
 * @link http://php.net/manual/fr/function.readfile.php Documentation pour readfile.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le fichier à lire.
 * @param bool     $use_include_path    Vous pouvez utiliser le deuxième paramètre optionnel pour explorer le dossier include_path, en passant la valeur de TRUE.
 * @param resource $context    Une ressource de contexte.
 *
 * @return int	Retourne le nombre d'octets lus depuis le fichier. Si une erreur survient, retourne FALSE, et à moins que la fonction n'ait été appelée avec @ readfile(), un message d'erreur est affiché.
 *
 */
if(!function_exists('readfileThis'))
{
    function readfileThis($filename, $use_include_path = false, $context = NULL)
    {
		$filename = (string)$filename;
		$use_include_path = (bool)$use_include_path;
		$context = is_resource($context) ? $context : NULL;

		return readfile($filename, $use_include_path, $context);
    }
}

/**
 * readgzfileThis
 *
 * Lit tout le fichier compressé.
 *
 * @link http://php.net/manual/fr/function.readgzfile.php Documentation pour readgzfile.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier. Ce fichier devra être ouvert depuis le système de fichiers et son contenu sera affiché.
 * @param int      $use_include_path    Vous pouvez définir ce paramètre optionnel à 1, si vous voulez chercher le fichier également dans l'include_path.
 *
 * @return int	Retourne le nombre d'octets (décompressés) lus depuis le fichier. Si une erreur survient, FALSE est retourné et si la fonction n'a pas été appelée de cette façon : @readgzfile, un message d'erreur sera affiché.
 *
 */
if(!function_exists('readgzfileThis'))
{
    function readgzfileThis($filename, $use_include_path = 0)
    {
		$filename = (string)$filename;
		$use_include_path = (int)$use_include_path;

		return readgzfile($filename, $use_include_path);
    }
}

/**
 * readlineThis
 *
 * Lit une ligne.
 *
 * @link http://php.net/manual/fr/function.readline.php Documentation pour readline.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $prompt    Vous pouvez spécifier une chaîne de caractères à utiliser comme prompt à l'utilisateur.
 *
 * @return string	Retourne une chaîne de caractères depuis l'utilisateur. La ligne retournée a été débarrassée du caractère final de nouvelle ligne.
 *
 */
if(!function_exists('readlineThis'))
{
    function readlineThis($prompt = NULL)
    {
		$prompt = (string)$prompt;

		return readline($prompt);
    }
}

/**
 * readline_add_historyThis
 *
 * Ajoute une ligne à l'historique.
 *
 * @link http://php.net/manual/fr/function.readline-add-history.php Documentation pour readline_add_history.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $line    La ligne à ajouter à l'historique.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readline_add_historyThis'))
{
    function readline_add_historyThis($line)
    {
		$line = (string)$line;

		return readline_add_history($line);
    }
}

/**
 * readline_callback_handler_installThis
 *
 * Initialise l'interface et le terminal de rappel de readline, affiche le prompt et retourne immédiatement.
 *
 * @link http://php.net/manual/fr/function.readline-callback-handler-install.php Documentation pour readline_callback_handler_install.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $prompt    Le message de prompt.
 * @param callable     $callback    La fonction callback prend un paramètre : l'entrée utilisateur retournée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readline_callback_handler_installThis'))
{
    function readline_callback_handler_installThis($prompt, $callback)
    {
		$prompt = (string)$prompt;
		$callback = is_callable($callback) ? $callback : NULL;

		return readline_callback_handler_install($prompt, $callback);
    }
}

/**
 * readline_callback_handler_removeThis
 *
 * Efface un gestionnaire de rappel readline.
 *
 * @link http://php.net/manual/fr/function.readline-callback-handler-remove.php Documentation pour readline_callback_handler_remove.
 *
 * @version PHP 5 >= 5.1.0
 * @return bool	Retourne TRUE si un gestionnaire de rappel précédemment installé a été effacé ou FALSE s'il n'a pas été trouvé.
 *
 */
if(!function_exists('readline_callback_handler_removeThis'))
{
    function readline_callback_handler_removeThis()
    {
		return readline_callback_handler_remove();
    }
}

/**
 * readline_callback_read_charThis
 *
 * Lit un caractère et informe l'interface de rappel readline.
 *
 * @link http://php.net/manual/fr/function.readline-callback-read-char.php Documentation pour readline_callback_read_char.
 *
 * @version PHP 5 >= 5.1.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('readline_callback_read_charThis'))
{
    function readline_callback_read_charThis()
    {
		return readline_callback_read_char();
    }
}

/**
 * readline_clear_historyThis
 *
 * Efface l'historique.
 *
 * @link http://php.net/manual/fr/function.readline-clear-history.php Documentation pour readline_clear_history.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readline_clear_historyThis'))
{
    function readline_clear_historyThis()
    {
		return readline_clear_history();
    }
}

/**
 * readline_completion_functionThis
 *
 * Enregistre une fonction de complétion.
 *
 * @link http://php.net/manual/fr/function.readline-completion-function.php Documentation pour readline_completion_function.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param callable     $function    Vous devez fournir le nom d'une fonction qui accepte un nom partiel de commande, et retourne une liste de fonctions complète possibles.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readline_completion_functionThis'))
{
    function readline_completion_functionThis($function)
    {
		$function = is_callable($function) ? $function : NULL;

		return readline_completion_function($function);
    }
}

/**
 * readline_infoThis
 *
 * Lit ou modifie diverses variables internes de readline.
 *
 * @link http://php.net/manual/fr/function.readline-info.php Documentation pour readline_info.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $varname    Un nom de variable.
 * @param string   $newvalue    Si fourni, ce sera la nouvelle valeur à définir.
 *
 * @return mixed	Appelée sans paramètre, readline_info() retourne une tableau contenant les valeurs des paramètres de Readline. Les éléments seront indexés par les clés suivantes : "done", "end", "erase_empty_line", "library_version", "line_buffer", "mark", "pending_input", "point", "prompt", "readline_name" et "terminal_name".
 *
 */
if(!function_exists('readline_infoThis'))
{
    function readline_infoThis($varname = NULL, $newvalue = NULL)
    {
		$varname = (string)$varname;
		$newvalue = (string)$newvalue;

		return readline_info($varname, $newvalue);
    }
}

/**
 * readline_list_historyThis
 *
 * Liste l'historique.
 *
 * @link http://php.net/manual/fr/function.readline-list-history.php Documentation pour readline_list_history.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau avec la liste de toutes les lignes de commandes de l'historique. Les éléments sont indexés numériquement, à partir de 0.
 *
 */
if(!function_exists('readline_list_historyThis'))
{
    function readline_list_historyThis()
    {
		return readline_list_history();
    }
}

/**
 * readline_on_new_lineThis
 *
 * Informe readline que le curseur est passé à une nouvelle ligne.
 *
 * @link http://php.net/manual/fr/function.readline-on-new-line.php Documentation pour readline_on_new_line.
 *
 * @version PHP 5 >= 5.1.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('readline_on_new_lineThis'))
{
    function readline_on_new_lineThis()
    {
		return readline_on_new_line();
    }
}

/**
 * readline_read_historyThis
 *
 * Lit l'historique.
 *
 * @link http://php.net/manual/fr/function.readline-read-history.php Documentation pour readline_read_history.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier contenant l'historique des commandes.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readline_read_historyThis'))
{
    function readline_read_historyThis($filename = NULL)
    {
		$filename = (string)$filename;

		return readline_read_history($filename);
    }
}

/**
 * readline_redisplayThis
 *
 * Demande à readline de refaire l'affichage.
 *
 * @link http://php.net/manual/fr/function.readline-redisplay.php Documentation pour readline_redisplay.
 *
 * @version PHP 5 >= 5.1.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('readline_redisplayThis'))
{
    function readline_redisplayThis()
    {
		return readline_redisplay();
    }
}

/**
 * readline_write_historyThis
 *
 * Écrit dans l'historique.
 *
 * @link http://php.net/manual/fr/function.readline-write-history.php Documentation pour readline_write_history.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier à sauvegarder.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readline_write_historyThis'))
{
    function readline_write_historyThis($filename = NULL)
    {
		$filename = (string)$filename;

		return readline_write_history($filename);
    }
}

/**
 * readlinkThis
 *
 * Renvoie le contenu d'un lien symbolique.
 *
 * @link http://php.net/manual/fr/function.readlink.php Documentation pour readlink.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Le chemin vers le lien symbolique.
 *
 * @return string	Retourne le contenu du lien symbolique ou FALSE si une erreur survient.
 *
 */
if(!function_exists('readlinkThis'))
{
    function readlinkThis($path)
    {
		$path = (string)$path;

		return readlink($path);
    }
}

/**
 * realpathThis
 *
 * Retourne le chemin canonique absolu.
 *
 * @link http://php.net/manual/fr/function.realpath.php Documentation pour realpath.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Le chemin à vérifier.
 *
 * @return string	Retourne le chemin canonique absolu ainsi trouvé. Le résultat ne contient aucun lien symbolique, /./ ou /../.
 *
 */
if(!function_exists('realpathThis'))
{
    function realpathThis($path)
    {
		$path = (string)$path;

		return realpath($path);
    }
}

/**
 * realpath_cache_getThis
 *
 * Récupère les entrées du cache realpath.
 *
 * @link http://php.net/manual/fr/function.realpath-cache-get.php Documentation pour realpath_cache_get.
 *
 * @version PHP 5 >= 5.3.2
 * @return array	Retourne un tableaux d'entrées du cache realpath. Les clés sont les chemins originaux et les valeurs sont des tableaux de données contenant le chemin résolu, la date d'expiration et d'autres param-tres gardés en cache.
 *
 */
if(!function_exists('realpath_cache_getThis'))
{
    function realpath_cache_getThis()
    {
		return realpath_cache_get();
    }
}

/**
 * realpath_cache_sizeThis
 *
 * Récupère la taille du cache realpath.
 *
 * @link http://php.net/manual/fr/function.realpath-cache-size.php Documentation pour realpath_cache_size.
 *
 * @version PHP 5 >= 5.3.2
 * @return int	Retourne la quantité de mémoire utilisée par le cache realpath.
 *
 */
if(!function_exists('realpath_cache_sizeThis'))
{
    function realpath_cache_sizeThis()
    {
		return realpath_cache_size();
    }
}

/**
 * recode_fileThis
 *
 * Recodage de fichier à fichier, en fonction de la demande.
 *
 * @link http://php.net/manual/fr/function.recode-file.php Documentation pour recode_file.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $request    Le type de requête recode désiré
 * @param resource $input    Un gestionnaire de fichier local pour le paramètre input
 * @param resource $output    Un gestionnaire de fichier local pour le paramètre output
 *
 * @return bool	Retourne FALSE, en cas d'échec, et TRUE sinon.
 *
 */
if(!function_exists('recode_fileThis'))
{
    function recode_fileThis($request, $input, $output)
    {
		$request = (string)$request;
		$input = is_resource($input) ? $input : NULL;
		$output = is_resource($output) ? $output : NULL;

		return recode_file($request, $input, $output);
    }
}

/**
 * recode_stringThis
 *
 * Recode une chaîne en fonction de la requête.
 *
 * @link http://php.net/manual/fr/function.recode-string.php Documentation pour recode_string.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $request    Le type de requête recode désiré
 * @param string   $string    La chaîne de caractères à recoder
 *
 * @return string	Retourne la chaîne recodée en cas de succès et FALSE sinon.
 *
 */
if(!function_exists('recode_stringThis'))
{
    function recode_stringThis($request, $string)
    {
		$request = (string)$request;
		$string = (string)$string;

		return recode_string($request, $string);
    }
}

/**
 * register_shutdown_functionThis
 *
 * Enregistre une fonction de rappel pour exécution à l'extinction.
 *
 * @link http://php.net/manual/fr/function.register-shutdown-function.php Documentation pour register_shutdown_function.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param callable     $callback    La fonction de rappel à enregistrer. La fonction de rappel est exécuté comme faisant parti de la requête, aussi, il est possible d'envoyer quelque à la sortie depuis cette dernière, puis d'accéder aux buffers de sortie.
 * @param mixed     $parameter    Il est possible de passer des paramètres aux fonctions d'extinction en configurant ces paramètres supplémentaires.
 * @param mixed     $item
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('register_shutdown_functionThis'))
{
    function register_shutdown_functionThis($callback, $parameter = NULL, $parameter1 = NULL)
    {
		$callback = is_callable($callback) ? $callback : NULL;
		$parameter = ($parameter);
		$parameter1 = ($parameter1);
		return register_shutdown_function($callback, $parameter, $parameter1);
    }
}

/**
 * register_tick_functionThis
 *
 * Enregistre une fonction exécutée à chaque tick.
 *
 * @link http://php.net/manual/fr/function.register-tick-function.php Documentation pour register_tick_function.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param callable     $function    Le nom de la fonction, sous la forme d'une chaîne de caractères ou d'un tableau d'objets et de méthodes.
 * @param mixed     $arg
 * @param mixed     $item
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('register_tick_functionThis'))
{
    function register_tick_functionThis($function, $arg = NULL, $arg1 = NULL)
    {
		$function = is_callable($function) ? $function : NULL;
		$arg = ($arg);
		$arg1 = ($arg1);
		return register_tick_function($function, $arg, $arg1);
    }
}

/**
 * renameThis
 *
 * Renomme un fichier ou un dossier.
 *
 * @link http://php.net/manual/fr/function.rename.php Documentation pour rename.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $oldname
 * @param string   $newname    Le nouveau nom.
 * @param resource $context
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('renameThis'))
{
    function renameThis($oldname, $newname, $context = NULL)
    {
		$oldname = (string)$oldname;
		$newname = (string)$newname;
		$context = is_resource($context) ? $context : NULL;

		return rename($oldname, $newname, $context);
    }
}

/**
 * resetThis
 *
 * Remet le pointeur interne de tableau au début.
 *
 * @link http://php.net/manual/fr/function.reset.php Documentation pour reset.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 *
 * @return mixed	Retourne la valeur du premier élément du tableau, ou FALSE si le tableau est vide.
 *
 */
if(!function_exists('resetThis'))
{
    function resetThis(&$array)
    {
		$array = (array)$array;

		return reset($array);
    }
}

/**
 * restore_error_handlerThis
 *
 * Réactive l'ancienne fonction de gestion des erreurs.
 *
 * @link http://php.net/manual/fr/function.restore-error-handler.php Documentation pour restore_error_handler.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 * @return bool	Cette fonction retourne toujours TRUE.
 *
 */
if(!function_exists('restore_error_handlerThis'))
{
    function restore_error_handlerThis()
    {
		return restore_error_handler();
    }
}

/**
 * restore_exception_handlerThis
 *
 * Réactive l'ancienne fonction de gestion d'exceptions.
 *
 * @link http://php.net/manual/fr/function.restore-exception-handler.php Documentation pour restore_exception_handler.
 *
 * @version PHP 5
 * @return bool	Cette fonction retourne toujours TRUE.
 *
 */
if(!function_exists('restore_exception_handlerThis'))
{
    function restore_exception_handlerThis()
    {
		return restore_exception_handler();
    }
}

/**
 * restore_include_pathThis
 *
 * Restaure la valeur de la directive de configuration include_path.
 *
 * @link http://php.net/manual/fr/function.restore-include-path.php Documentation pour restore_include_path.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('restore_include_pathThis'))
{
    function restore_include_pathThis()
    {
		return restore_include_path();
    }
}

/**
 * rewindThis
 *
 * Replace le pointeur de fichier au début.
 *
 * @link http://php.net/manual/fr/function.rewind.php Documentation pour rewind.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $handle    Le pointeur de fichier doit être valide, et avoir été correctement ouvert par fopen().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('rewindThis'))
{
    function rewindThis($handle)
    {
		$handle = is_resource($handle) ? $handle : NULL;

		return rewind($handle);
    }
}

/**
 * rewinddirThis
 *
 * Retourne à la première entrée du dossier.
 *
 * @link http://php.net/manual/fr/function.rewinddir.php Documentation pour rewinddir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $dir_handle    La ressource de dossier ouverte précédemment avec opendir(). Si la ressource de dossier n'est pas fournie, la dernière ressource ouverte avec la fonction opendir() sera utilisée.
 *
 */
if(!function_exists('rewinddirThis'))
{
    function rewinddirThis($dir_handle = NULL)
    {
		$dir_handle = is_resource($dir_handle) ? $dir_handle : NULL;

		return rewinddir($dir_handle);
    }
}

/**
 * rmdirThis
 *
 * Efface un dossier.
 *
 * @link http://php.net/manual/fr/function.rmdir.php Documentation pour rmdir.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $dirname    Le chemin vers le dossier.
 * @param resource $context
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('rmdirThis'))
{
    function rmdirThis($dirname, $context = NULL)
    {
		$dirname = (string)$dirname;
		$context = is_resource($context) ? $context : NULL;

		return rmdir($dirname, $context);
    }
}

/**
 * roundThis
 *
 * Arrondit un nombre à virgule flottante.
 *
 * @link http://php.net/manual/fr/function.round.php Documentation pour round.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $val    La valeur à arrondir
 * @param int      $precision    Le nombre optionnel de décimales à arrondir.
 * @param int      $mode    Utilisez une des constantes suivantes pour spécifier le mode d'arrondi.
 *
 * @return float	La valeur arrondie
 *
 */
if(!function_exists('roundThis'))
{
    function roundThis($val, $precision = 0, $mode = PHP_ROUND_HALF_UP)
    {
		$val = (float)$val;
		$precision = (int)$precision;
		$mode = (int)$mode;

		return round($val, $precision, $mode);
    }
}

/**
 * rsortThis
 *
 * Trie un tableau en ordre inverse.
 *
 * @link http://php.net/manual/fr/function.rsort.php Documentation pour rsort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param int      $sort_flags    Vous pouvez modifier le comportement de cette fonction en utilisant le paramètre optionnel sort_flags. Pour plus de détails, voyez le manuel pour la fonction sort().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('rsortThis'))
{
    function rsortThis(&$array, $sort_flags = SORT_REGULAR)
    {
		$array = (array)$array;
		$sort_flags = (int)$sort_flags;

		return rsort($array, $sort_flags);
    }
}

/**
 * rtrimThis
 *
 * Supprime les espaces (ou d'autres caractères) de fin de chaîne.
 *
 * @link http://php.net/manual/fr/function.rtrim.php Documentation pour rtrim.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param string   $charlist    Il est aussi possible de spécifier les caractères à supprimer en utilisant le paramètre charlist. Listez simplement les caractères que vous voulez supprimer dans ce paramètre. Avec .., vous pourrez spécifier des intervalles de caractères.
 *
 * @return string	Retourne la chaîne modifiée.
 *
 */
if(!function_exists('rtrimThis'))
{
    function rtrimThis($str, $charlist = NULL)
    {
		$str = (string)$str;
		$charlist = (string)$charlist;

		return rtrim($str, $charlist);
    }
}

/**
 * scandirThis
 *
 * Liste les fichiers et dossiers dans un dossier.
 *
 * @link http://php.net/manual/fr/function.scandir.php Documentation pour scandir.
 *
 * @version PHP 5
 *
 * @param string   $directory    Le dossier qui sera analysé.
 * @param int      $sorting_order    Par défaut, le tri est en ordre alphabétique, croissant. Si le paramètre optionnel sorting_order est défini à SCANDIR_SORT_DESCENDING, alors le tri sera en ordre alphabétique inverse. Si ce paramètre est défini à SCANDIR_SORT_NONE, alors le résultat ne sera pas trié.
 * @param resource $context    Pour une description du paramètre context, référez-vous à la section flux de données du manuel.
 *
 * @return array	Retourne un tableau des fichiers en cas de succès ou FALSE en cas d'échec. Si directory n'est pas un dossier, alors une valeur booléenne FALSE est retournée et une erreur de niveau E_WARNING est générée.
 *
 */
if(!function_exists('scandirThis'))
{
    function scandirThis($directory, $sorting_order = SCANDIR_SORT_ASCENDING, $context = NULL)
    {
		$directory = (string)$directory;
		$sorting_order = (int)$sorting_order;
		$context = is_resource($context) ? $context : NULL;

		return scandir($directory, $sorting_order, $context);
    }
}

/**
 * sem_acquireThis
 *
 * Réserve un sémaphore.
 *
 * @link http://php.net/manual/fr/function.sem-acquire.php Documentation pour sem_acquire.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $sem_identifier    sem_identifier est une ressource de sémaphore, obtenue de la fonction sem_get().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sem_acquireThis'))
{
    function sem_acquireThis($sem_identifier)
    {
		$sem_identifier = is_resource($sem_identifier) ? $sem_identifier : NULL;

		return sem_acquire($sem_identifier);
    }
}

/**
 * sem_getThis
 *
 * Retourne un identifiant de sémaphore.
 *
 * @link http://php.net/manual/fr/function.sem-get.php Documentation pour sem_get.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $key
 * @param int      $max_acquire    Le nombre de processus qui peuvent réserver simultanément le sémaphore est précisé dans le paramètre max_acquire.
 * @param int      $perm    Les permissions du sémaphore. Actuellement, cette valeur n'est affectée que si le processus est le seul processus actuellement attaché au sémaphore.
 * @param int      $auto_release    Le paramètre optionnel auto_release spécifie si le sémaphore doit être automatiquement libéré à la fermeture.
 *
 * @return resource	Retourne une ressource de sémaphore en cas de succès, et FALSE en cas d'erreur.
 *
 */
if(!function_exists('sem_getThis'))
{
    function sem_getThis($key, $max_acquire = 1, $perm = 666, $auto_release = 1)
    {
		$key = (int)$key;
		$max_acquire = (int)$max_acquire;
		$perm = (int)$perm;
		$auto_release = (int)$auto_release;

		return sem_get($key, $max_acquire, $perm, $auto_release);
    }
}

/**
 * sem_releaseThis
 *
 * Libère un sémaphore.
 *
 * @link http://php.net/manual/fr/function.sem-release.php Documentation pour sem_release.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $sem_identifier    Une ressource, représentant un sémaphore, telle que retournée par la fonction sem_get().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sem_releaseThis'))
{
    function sem_releaseThis($sem_identifier)
    {
		$sem_identifier = is_resource($sem_identifier) ? $sem_identifier : NULL;

		return sem_release($sem_identifier);
    }
}

/**
 * sem_removeThis
 *
 * Détruit un sémaphore.
 *
 * @link http://php.net/manual/fr/function.sem-remove.php Documentation pour sem_remove.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $sem_identifier    Une ressource représentant un sémaphore, telle que retournée par la fonction sem_get().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sem_removeThis'))
{
    function sem_removeThis($sem_identifier)
    {
		$sem_identifier = is_resource($sem_identifier) ? $sem_identifier : NULL;

		return sem_remove($sem_identifier);
    }
}

/**
 * serializeThis
 *
 * Génère une représentation stockable d'une valeur.
 *
 * @link http://php.net/manual/fr/function.serialize.php Documentation pour serialize.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $value    La valeur à linéariser. serialize() accepte tous les types sauf les ressources. Vous pouvez même linéariser un tableau qui contient des références sur lui-même. Les références cycliques dans des tableaux/objets seront également stockées. Toutes les autres références seront perdues. Lors de la linéarisation d'un objet, PHP tentera d'appeler la fonction membre __sleep() avant de linéariser. Cela permet à l'objet de faire un dernier nettoyage, etc. avant d'être linéarisé. De même, lorsque l'objet est restauré en utilisant unserialize(), la fonction membre __wakeup() est appelée.
 *
 * @return string	Retourne une chaîne contenant une représentation linéaire de value, pour stockage.
 *
 */
if(!function_exists('serializeThis'))
{
    function serializeThis($value)
    {
		$value = ($value);
		return serialize($value);
    }
}

/**
 * session_cache_expireThis
 *
 * Retourne la configuration actuelle du délai d'expiration du cache.
 *
 * @link http://php.net/manual/fr/function.session-cache-expire.php Documentation pour session_cache_expire.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $new_cache_expire    Si new_cache_expire est fourni, la configuration actuelle de cache expire sera remplacée par new_cache_expire.
 *
 * @return int	Retourne la configuration courante de session.cache_expire. La valeur retournée doit être lue en minutes, et vaut par défaut, 180.
 *
 */
if(!function_exists('session_cache_expireThis'))
{
    function session_cache_expireThis($new_cache_expire = NULL)
    {
		$new_cache_expire = (string)$new_cache_expire;

		return session_cache_expire($new_cache_expire);
    }
}

/**
 * session_cache_limiterThis
 *
 * Lit et/ou modifie le limiteur de cache de session.
 *
 * @link http://php.net/manual/fr/function.session-cache-limiter.php Documentation pour session_cache_limiter.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param string   $cache_limiter    Si cache_limiter est fourni, le limiteur de cache est reconfiguré avec cette valeur.
 *
 * @return string	Retourne le nom du limiteur de cache courant.
 *
 */
if(!function_exists('session_cache_limiterThis'))
{
    function session_cache_limiterThis($cache_limiter = NULL)
    {
		$cache_limiter = (string)$cache_limiter;

		return session_cache_limiter($cache_limiter);
    }
}

/**
 * session_decodeThis
 *
 * Décode les données encodées de session.
 *
 * @link http://php.net/manual/fr/function.session-decode.php Documentation pour session_decode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $data    Les données encodées.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('session_decodeThis'))
{
    function session_decodeThis($data)
    {
		$data = (string)$data;

		return session_decode($data);
    }
}

/**
 * session_destroyThis
 *
 * Détruit une session.
 *
 * @link http://php.net/manual/fr/function.session-destroy.php Documentation pour session_destroy.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('session_destroyThis'))
{
    function session_destroyThis()
    {
		return session_destroy();
    }
}

/**
 * session_encodeThis
 *
 * Encode les données de session.
 *
 * @link http://php.net/manual/fr/function.session-encode.php Documentation pour session_encode.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le contenu encodé de la session courante.
 *
 */
if(!function_exists('session_encodeThis'))
{
    function session_encodeThis()
    {
		return session_encode();
    }
}

/**
 * session_get_cookie_paramsThis
 *
 * Lit la configuration du cookie de session.
 *
 * @link http://php.net/manual/fr/function.session-get-cookie-params.php Documentation pour session_get_cookie_params.
 *
 * @version PHP 4
 * @version PHP 5
 * @return array	Retourne un tableau, qui contient les éléments suivants :
 *
 */
if(!function_exists('session_get_cookie_paramsThis'))
{
    function session_get_cookie_paramsThis()
    {
		return session_get_cookie_params();
    }
}

/**
 * session_idThis
 *
 * Lit et/ou modifie l'identifiant courant de session.
 *
 * @link http://php.net/manual/fr/function.session-id.php Documentation pour session_id.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $id    Si id est fourni, il remplacera l'identifiant courant de session. session_id() doit alors être appelé avant session_start(). Suivant le gestionnaire de sessions que vous utilisez, tous les caractères ne seront pas acceptés dans cette valeur. Par exemple, le gestionnaire de sessions par défaut, basé sur les fichiers, n'accepte que les caractères compris dans l'intervalle a-z, A-Z et 0-9 !
 *
 * @return string	session_id() retourne l'identifiant de session pour la session courante ou une chaîne vide ("") s'il n'y a pas de session courante (aucun identifiant de session n'existe).
 *
 */
if(!function_exists('session_idThis'))
{
    function session_idThis($id = NULL)
    {
		$id = (string)$id;

		return session_id($id);
    }
}

/**
 * session_is_registeredThis
 *
 * Vérifie si une variable est enregistrée dans la session.
 *
 * @link http://php.net/manual/fr/function.session-is-registered.php Documentation pour session_is_registered.
 *
 * @version PHP 4
 * @version PHP 5 < 5.4.0
 *
 * @param string   $name    Le nom de la variable.
 *
 * @return bool	session_is_registered() retourne TRUE si la variable de nom name fait partie de la session courante, FALSE sinon.
 *
 */
if(!function_exists('session_is_registeredThis'))
{
    function session_is_registeredThis($name)
    {
		$name = (string)$name;

		return session_is_registered($name);
    }
}

/**
 * session_module_nameThis
 *
 * Lit et/ou modifie le module de session courant.
 *
 * @link http://php.net/manual/fr/function.session-module-name.php Documentation pour session_module_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $module    Si module est fourni, cette valeur sera alors utilisée, et remplacera la valeur courante.
 *
 * @return string	Retourne le nom du module courant de session.
 *
 */
if(!function_exists('session_module_nameThis'))
{
    function session_module_nameThis($module = NULL)
    {
		$module = (string)$module;

		return session_module_name($module);
    }
}

/**
 * session_nameThis
 *
 * Lit et/ou modifie le nom de la session.
 *
 * @link http://php.net/manual/fr/function.session-name.php Documentation pour session_name.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $name    Le nom de session est utilisé comme nom pour les cookies et les URLs (i.e. PHPSESSID). Il ne doit contenir que des caractères alphanumériques ; il doit être court et descriptif (surtout pour les utilisateurs ayant activé l'alerte cookie). Si name est fourni, le nom de la session courante sera remplacé par cette valeur.
 *
 * @return string	Retourne le nom de la session courante.
 *
 */
if(!function_exists('session_nameThis'))
{
    function session_nameThis($name = NULL)
    {
		$name = (string)$name;

		return session_name($name);
    }
}

/**
 * session_regenerate_idThis
 *
 * Remplace l'identifiant de session courant par un nouveau.
 *
 * @link http://php.net/manual/fr/function.session-regenerate-id.php Documentation pour session_regenerate_id.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 *
 * @param bool     $delete_old_session    Si l'on doit effacer l'ancien fichier de session associé ou pas.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('session_regenerate_idThis'))
{
    function session_regenerate_idThis($delete_old_session = false)
    {
		$delete_old_session = (bool)$delete_old_session;

		return session_regenerate_id($delete_old_session);
    }
}

/**
 * session_registerThis
 *
 * Enregistre une variable globale dans une session.
 *
 * @link http://php.net/manual/fr/function.session-register.php Documentation pour session_register.
 *
 * @version PHP 4
 * @version PHP 5 < 5.4.0
 *
 * @param mixed     $name    Le nom de la variable ou du tableau contenant les noms des variables ou d'autres tableaux.
 * @param mixed     $item
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('session_registerThis'))
{
    function session_registerThis($name, $name1 = NULL)
    {
		$name = ($name);
		$name1 = ($name1);
		return session_register($name, $name1);
    }
}

/**
 * session_register_shutdownThis
 *
 * Fonction de fermeture de session.
 *
 * @link http://php.net/manual/fr/function.session-register-shutdown.php Documentation pour session_register_shutdown.
 *
 * @version PHP >=5.4.0
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('session_register_shutdownThis'))
{
    function session_register_shutdownThis()
    {
		return session_register_shutdown();
    }
}

/**
 * session_save_pathThis
 *
 * Lit et/ou modifie le chemin de sauvegarde des sessions.
 *
 * @link http://php.net/manual/fr/function.session-save-path.php Documentation pour session_save_path.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $path    Chemin des données de session. Si path est spécifié, le chemin du dossier sera modifié. session_save_path() doit être appelé avant session_start().
 *
 * @return string	Retourne le chemin du dossier courant utilisé pour y stocker les données.
 *
 */
if(!function_exists('session_save_pathThis'))
{
    function session_save_pathThis($path = NULL)
    {
		$path = (string)$path;

		return session_save_path($path);
    }
}

/**
 * session_set_cookie_paramsThis
 *
 * Modifie les paramètres du cookie de session.
 *
 * @link http://php.net/manual/fr/function.session-set-cookie-params.php Documentation pour session_set_cookie_params.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $lifetime    La durée de vie du cookie, en secondes. Voir la directive lifetime.
 * @param string   $path    Le chemin dans le domaine où le cookie sera accessible. Utilisez un simple slash ('/') pour tous les chemins du domaine. Voir la directive path.
 * @param string   $domain    Le domaine du cookie, par exemple 'www.php.net'. Pour rendre les cookies visibles sur tous les sous-domaines, le domaine doit être préfixé avec un point, tel que '.php.net'. Voir la directive domain.
 * @param bool     $secure    Si TRUE, le cookie ne sera envoyé que sur une connexion sécurisée. Voir la directive secure.
 * @param bool     $httponly    Si TRUE, PHP va tenter d'envoyer l'option httponly lors de la configuration du cookie. Voir la directive httponly.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('session_set_cookie_paramsThis'))
{
    function session_set_cookie_paramsThis($lifetime, $path = NULL, $domain = NULL, $secure = false, $httponly = false)
    {
		$lifetime = (int)$lifetime;
		$path = (string)$path;
		$domain = (string)$domain;
		$secure = (bool)$secure;
		$httponly = (bool)$httponly;

		return session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);
    }
}

/**
 * session_set_save_handlerThis
 *
 * Configure les fonctions de stockage de sessions.
 *
 * @link http://php.net/manual/fr/function.session-set-save-handler.php Documentation pour session_set_save_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param callable     $open    Une instance d'une classe implémentant l'interface SessionHandlerInterface, comme la classe SessionHandler, pour l'enregistrement comme gestionnaire de session. Depuis PHP 5.4 uniquement.
 * @param callable     $close    Enregistre la fonction session_write_close() comme fonction register_shutdown_function().
 * @param callable     $read    La fonction de rappel open fonctionne comme un constructeur dans une classe, et est exécutée lorsque la session s'ouvre. C'est la première fonction de rappel exécutée lorsque la session démarre automatiquement ou manuellement avec la fonction session_start(). La valeur retournée est TRUE en cas de succès ou FALSE si une erreur survient.
 * @param callable     $write    La fonction de rappel close fonctionne comme un destructeur dans une classe, et est exécutée une fois que la fonction de rappel write de la session a terminé de s'exécuter. Elle est également appelé lorsque la fonction session_write_close() est appelée. La valeur retournée est TRUE en cas de succès, ou FALSE si une erreur survient.
 * @param callable     $destroy    La fonction de rappel read doit toujours retournée une chaîne linéarisée contenant les données de session encodées ou une chaîne vide s'il n'y a aucune donnée à lire. Cette fonction de rappel est appelée en interne par PHP lorsque la session commence ou lorsque la fonction session_start() est appelée. Avant que cette fonction de rappel ne soit invoquée, PHP invoquera la fonction de rappel open. La valeur retournée par cette fonction de rappel doit être exactement du même format de linéarisation que celui passé pour le stockage à la fonction de rappel write. La valeur retournée sera délinéarisée automatiquement par PHP et utilisée pour peupler la variable superglobale $_SESSION. Malgré le fait que les données ressemblent fortement aux données issuées de la fonction serialize(), notez que c'est bien un format différent, qui est spécifié via l'option de configuration session.serialize_handler.
 * @param callable     $gc    La fonction de rappel write est appelée lorsque la session doit être sauvegardée et fermée. Cette fonction de rappel reçoit l'identifiant de la session courante ainsi qu'une version linéarisée du contenu de la variable superglobale $_SESSION. La méthode de linéarisation utilisée en interne par PHP est spécifiée via l'option de configuration session.serialize_handler. Les données de session linéarisées passées à cette fonction de rappel doivent être stockées en utilisant l'identifiant de session fournie. Lors de la récupération de ces données, la fonction de rappel read doit retourner la valeur exacte, originalement passée à la fonction de rappel write. Cette fonction de rappel est invoquée lorsque PHP s'arrête ou explicitement lorsque la fonction session_write_close() est appelée. Notez qu'après l'exécution de cette fonction, PHP exécutera en interne la fonction de rappel close.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('session_set_save_handlerThis'))
{
    function session_set_save_handlerThis($open, $close, $read, $write, $destroy, $gc)
    {
		$open = is_callable($open) ? $open : NULL;
		$close = is_callable($close) ? $close : NULL;
		$read = is_callable($read) ? $read : NULL;
		$write = is_callable($write) ? $write : NULL;
		$destroy = is_callable($destroy) ? $destroy : NULL;
		$gc = is_callable($gc) ? $gc : NULL;

		return session_set_save_handler($open, $close, $read, $write, $destroy, $gc);
    }
}

/**
 * session_startThis
 *
 * Démarre une nouvelle session ou reprend une session existante.
 *
 * @link http://php.net/manual/fr/function.session-start.php Documentation pour session_start.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Retourne TRUE si une session a pu être démarrée avec succès, et FALSE sinon.
 *
 */
if(!function_exists('session_startThis'))
{
    function session_startThis()
    {
		return session_start();
    }
}

/**
 * session_statusThis
 *
 * Détermine le statut de la session courante.
 *
 * @link http://php.net/manual/fr/function.session-status.php Documentation pour session_status.
 *
 * @version PHP >=5.4.0
 *
 */
if(!function_exists('session_statusThis'))
{
    function session_statusThis()
    {
		return session_status();
    }
}

/**
 * session_unregisterThis
 *
 * Supprime une variable de la session.
 *
 * @link http://php.net/manual/fr/function.session-unregister.php Documentation pour session_unregister.
 *
 * @version PHP 4
 * @version PHP 5 < 5.4.0
 *
 * @param string   $name    Le nom de la variable.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('session_unregisterThis'))
{
    function session_unregisterThis($name)
    {
		$name = (string)$name;

		return session_unregister($name);
    }
}

/**
 * session_unsetThis
 *
 * Détruit toutes les variables d'une session.
 *
 * @link http://php.net/manual/fr/function.session-unset.php Documentation pour session_unset.
 *
 * @version PHP 4
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('session_unsetThis'))
{
    function session_unsetThis()
    {
		return session_unset();
    }
}

/**
 * session_write_closeThis
 *
 * Écrit les données de session et ferme la session.
 *
 * @link http://php.net/manual/fr/function.session-write-close.php Documentation pour session_write_close.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('session_write_closeThis'))
{
    function session_write_closeThis()
    {
		return session_write_close();
    }
}

/**
 * set_error_handlerThis
 *
 * Spécifie une fonction utilisateur comme gestionnaire d'erreurs.
 *
 * @link http://php.net/manual/fr/function.set-error-handler.php Documentation pour set_error_handler.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param callable     $error_handler    Une fonction de rappel avec la signature suivante. NULL peut être passé à la place, pour ré-initialiser ce gestionnaire en son statut par défaut. Si la fonction retourne FALSE, alors le gestionnaire d'erreurs normal continue.
 * @param int      $error_types
 *
 * @return mixed	Retourne une chaîne contenant le dernier gestionnaire d'erreurs (s'il existe). Si le gestionnaire d'erreurs natif est utilisé, NULL est retourné. NULL est également retourné dans le cas d'une erreur, comme une fonction de rappel incorrecte. Si le gestionnaire d'erreurs précédent est une méthode d'une classe, cette fonction retournera un tableau indexé de la classe et du nom de la méthode.
 *
 */
if(!function_exists('set_error_handlerThis'))
{
    function set_error_handlerThis($error_handler, $error_types = NULL)
    {
		$error_handler = is_callable($error_handler) ? $error_handler : NULL;
		$error_types = empty($error_types) ? (int)E_ALL | E_STRICT : (int)$error_types;

		return set_error_handler($error_handler, $error_types);
    }
}

/**
 * set_exception_handlerThis
 *
 * Définit une fonction utilisateur de gestion d'exceptions.
 *
 * @link http://php.net/manual/fr/function.set-exception-handler.php Documentation pour set_exception_handler.
 *
 * @version PHP 5
 *
 * @param callable     $exception_handler    Nom de la fonction à appeler lorsqu'une exception qui n'a pu être attrapée survient. Cette fonction doit être définie avant l'appel de la fonction set_exception_handler(). Ce gestionnaire doit accepter un paramètre qui sera l'objet représentant l'exception qui vient d'être lancée. C'est le gestionnaire de signature : NULL peut être passé à la place, pour ré-initialiser ce gestionnaire en son statut initial.
 *
 * @return callable	Retourne le nom du gestionnaire précédemment défini ou NULL en cas d'erreur. Si aucun gestionnaire n'a été précédemment défini, NULL est également retourné.
 *
 */
if(!function_exists('set_exception_handlerThis'))
{
    function set_exception_handlerThis($exception_handler)
    {
		$exception_handler = is_callable($exception_handler) ? $exception_handler : NULL;

		return set_exception_handler($exception_handler);
    }
}

/**
 * set_include_pathThis
 *
 * Modifie la valeur de la directive de configuration include_path.
 *
 * @link http://php.net/manual/fr/function.set-include-path.php Documentation pour set_include_path.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $new_include_path    La nouvelle valeur pour la directive de configuration include_path
 *
 * @return string	Retourne l'ancienne valeur de include_path en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('set_include_pathThis'))
{
    function set_include_pathThis($new_include_path)
    {
		$new_include_path = (string)$new_include_path;

		return set_include_path($new_include_path);
    }
}

/**
 * set_magic_quotes_runtimeThis
 *
 * Active/désactive l'option magic_quotes_runtime.
 *
 * @link http://php.net/manual/fr/function.set-magic-quotes-runtime.php Documentation pour set_magic_quotes_runtime.
 *
 * @version PHP 4
 * @version PHP 5 < 5.4.0
 *
 * @param bool     $new_setting    0 l'option est désactivée, 1 l'option est activée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('set_magic_quotes_runtimeThis'))
{
    function set_magic_quotes_runtimeThis($new_setting)
    {
		$new_setting = (bool)$new_setting;

		return set_magic_quotes_runtime($new_setting);
    }
}

/**
 * set_time_limitThis
 *
 * Fixe le temps maximum d'exécution d'un script.
 *
 * @link http://php.net/manual/fr/function.set-time-limit.php Documentation pour set_time_limit.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $seconds    Le temps maximal d'exécution, en secondes. S'il vaut 0, aucune limite n'est imposée.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('set_time_limitThis'))
{
    function set_time_limitThis($seconds)
    {
		$seconds = (int)$seconds;

		return set_time_limit($seconds);
    }
}

/**
 * setcookieThis
 *
 * Envoie un cookie.
 *
 * @link http://php.net/manual/fr/function.setcookie.php Documentation pour setcookie.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $name    Le nom du cookie.
 * @param string   $value    La valeur du cookie. Cette valeur est stockée sur l'ordinateur du client ; ne stockez pas d'informations importantes. Si le paramètre name vaut 'cookiename', alors cette valeur est retrouvée en utilisant $_COOKIE['cookiename'].
 * @param int      $expire    Le temps après lequel le cookie expire. C'est un timestamp Unix, donc, ce sera un nombre de secondes depuis l'époque Unix (1 Janvier 1970). En d'autres termes, vous devriez fixer cette valeur à l'aide de la fonction time() en y ajoutant le nombre de secondes après lequel on veut que le cookie expire. Vous pouvez utiliser aussi mktime(). time()+60*60*24*30 fera expirer le cookie dans 30 jours. Si vous ne spécifiez pas ce paramètre ou s'il vaut 0, le cookie expirera à la fin de la session (lorsque le navigateur sera fermé).
 * @param string   $path    Le chemin sur le serveur sur lequel le cookie sera disponible. Si la valeur est '/', le cookie sera disponible sur l'ensemble du domaine domain. Si la valeur est '/foo/', le cookie sera uniquement disponible dans le répertoire /foo/ ainsi que tous ses sous-répertoires comme /foo/bar/ dans le domaine domain. La valeur par défaut est le répertoire courant où le cookie a été défini.
 * @param string   $domain    Le domaine pour lequel le cookie est disponible. Le fait de définir le domaine à 'www.example.com' rendra le cookie disponible pour le sous-domaine www mais aussi pour les sous-domaines supérieurs (ex: 'sub.www.example.com'). Les cookies disponibles pour un domaine inférieure, comme 'example.com' seront aussi disponibles pour les sous-domaines, comme 'www.example.com'. Les anciens navigateurs continuant d'implémenter la » RFC 2109 (obsolète) peuvent nécessiter un . pour rendre disponible tous les sous-domaines.
 * @param bool     $secure    Indique si le cookie doit uniquement être transmis à travers une connexion sécurisée HTTPS depuis le client. Lorsqu'il est positionné à TRUE, le cookie ne sera envoyé que si la connexion est sécurisée. Côté serveur, c'est au développeur d'envoyer ce genre de cookie uniquement sur les connexions sécurisées (par exemple, en utilisant la variable $_SERVER["HTTPS"]).
 * @param bool     $httponly    Lorsque ce paramètre vaut TRUE, le cookie ne sera accessible que par le protocole HTTP. Cela signifie que le cookie ne sera pas accessible via des langages de scripts, comme Javascript. Il a été accépté que cette configuration permet de limiter les attaques via XSS (bien qu'elle ne soit pas supportée par tous les navigateurs), c'est relativement discutable. Ajouté en PHP 5.2.0. TRUE ou FALSE
 *
 * @return bool	Si quelque chose a été envoyé sur la sortie standard avant l'appel à cette fonction, setcookie() échouera et retournera FALSE. Si setcookie() réussi, elle retournera TRUE. Cela n'indique pas si le client accepte ou pas le cookie.
 *
 */
if(!function_exists('setcookieThis'))
{
    function setcookieThis($name, $value = NULL, $expire = 0, $path = NULL, $domain = NULL, $secure = false, $httponly = false)
    {
		$name = (string)$name;
		$value = (string)$value;
		$expire = (int)$expire;
		$path = (string)$path;
		$domain = (string)$domain;
		$secure = (bool)$secure;
		$httponly = (bool)$httponly;

		return setcookie($name, $value, $expire, $path, $domain, $secure, $httponly);
    }
}

/**
 * setlocaleThis
 *
 * Modifie les informations de localisation.
 *
 * @link http://php.net/manual/fr/function.setlocale.php Documentation pour setlocale.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $category    category est une constante (ou une chaîne) qui spécifie la catégorie de fonctions affectées par la configuration de localisation :
 * @param string   $locale    Si locale est NULL ou la chaîne vide (""), les noms de locales seront pris dans l'environnement, à partir des variables de même nom que les catégories ci-dessus, ou depuis "LANG". Si locale vaut "0", la configuration locale ne sera pas modifiée, et la configuration courante sera retournée. Si locale est un tableau ou bien est suivi par des paramètres additionnels, alors chaque élément du tableau ou chaque paramètre tente d'être défini comme nouvelle locale jusqu'à ce qu'un réussisse. Cela est pratique si la locale est connue sous différents noms sur des systèmes différents ou bien pour prévoir une autre valeur en cas de non disponibilité de la locale choisie.
 * @param string   $item    (Chaîne ou tableau de paramètres optionnel à essayer comme configuration de la locale jusqu'à réussite.)
 *
 * @return string	Retourne la nouvelle configuration locale, ou FALSE si la localisation n'est pas implémentée sur votre plate-forme, si la variable de localisation n'existe pas, ou si la catégorie spécifiée n'est pas valide.
 *
 */
if(!function_exists('setlocaleThis'))
{
    function setlocaleThis($category, $locale, $locale1 = NULL)
    {
		$category = (int)$category;
		$locale = (string)$locale;
		$locale1 = (string)$locale1;

		return setlocale($category, $locale, $locale1);
    }
}

/**
 * setrawcookieThis
 *
 * Envoie un cookie sans encoder sa valeur en URL.
 *
 * @link http://php.net/manual/fr/function.setrawcookie.php Documentation pour setrawcookie.
 *
 * @version PHP 5
 *
 * @param string   $name
 * @param string   $value
 * @param int      $expire
 * @param string   $path
 * @param string   $domain
 * @param bool     $secure
 * @param bool     $httponly
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('setrawcookieThis'))
{
    function setrawcookieThis($name, $value = NULL, $expire = 0, $path = NULL, $domain = NULL, $secure = false, $httponly = false)
    {
		$name = (string)$name;
		$value = (string)$value;
		$expire = (int)$expire;
		$path = (string)$path;
		$domain = (string)$domain;
		$secure = (bool)$secure;
		$httponly = (bool)$httponly;

		return setrawcookie($name, $value, $expire, $path, $domain, $secure, $httponly);
    }
}

/**
 * settypeThis
 *
 * Affecte un type à une variable.
 *
 * @link http://php.net/manual/fr/function.settype.php Documentation pour settype.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     &$var    La variable à convertir.
 * @param string   $type    Les valeurs possibles pour le paramètre type sont :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('settypeThis'))
{
    function settypeThis(&$var, $type)
    {
		$var = ($var);
		$type = (string)$type;

		return settype($var, $type);
    }
}

/**
 * sha1This
 *
 * Calcule le sha1 d'une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.sha1.php Documentation pour sha1.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param bool     $raw_output    Si le paramètre optionnel raw_output est passé à TRUE, le sha1 est retourné sous forme binaire brute avec une taille de 20 caractères, sinon, il est retourné sous la forme d'un nombre hexadécimal d'une taille de 40 caractères.
 *
 * @return string	Retourne le sha1, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('sha1This'))
{
    function sha1This($str, $raw_output = false)
    {
		$str = (string)$str;
		$raw_output = (bool)$raw_output;

		return sha1($str, $raw_output);
    }
}

/**
 * sha1_fileThis
 *
 * Calcule le sha1 d'un fichier.
 *
 * @link http://php.net/manual/fr/function.sha1-file.php Documentation pour sha1_file.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier à hasher.
 * @param bool     $raw_output    Lorsque TRUE, retourne le prétraitement en format binaire brut avec une grandeur de 20.
 *
 * @return string	Retourne une chaîne de caractères en cas de succès, FALSE autrement.
 *
 */
if(!function_exists('sha1_fileThis'))
{
    function sha1_fileThis($filename, $raw_output = false)
    {
		$filename = (string)$filename;
		$raw_output = (bool)$raw_output;

		return sha1_file($filename, $raw_output);
    }
}

/**
 * shell_execThis
 *
 * Exécute une commande via le Shell et retourne le résultat sous forme de chaîne.
 *
 * @link http://php.net/manual/fr/function.shell-exec.php Documentation pour shell_exec.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $cmd    La commande à exécuter.
 *
 * @return string	La sortie de l'exécution de la commande ou NULL si une erreur survient.
 *
 */
if(!function_exists('shell_execThis'))
{
    function shell_execThis($cmd)
    {
		$cmd = (string)$cmd;

		return shell_exec($cmd);
    }
}

/**
 * shm_attachThis
 *
 * Crée ou ouvre un segment de mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shm-attach.php Documentation pour shm_attach.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $key    Un identifiant numérique de la mémoire partagée
 * @param int      $memsize    La taille mémoire. S'il n'est pas fourni, vaut par défaut la valeur de sysvshm.init_mem du fichier php.ini, sinon 10000 octets.
 * @param int      $perm    Les permissions (optionnelles). Par défaut, vaut 0666.
 *
 * @return resource	Retourne un identifiant de mémoire partagée.
 *
 */
if(!function_exists('shm_attachThis'))
{
    function shm_attachThis($key, $memsize = NULL, $perm = 666)
    {
		$key = (int)$key;
		$memsize = (int)$memsize;
		$perm = (int)$perm;

		return shm_attach($key, $memsize, $perm);
    }
}

/**
 * shm_detachThis
 *
 * Libère un segment de mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shm-detach.php Documentation pour shm_detach.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $shm_identifier    Une ressource représentant la mémoire partagée, telle que retournée par la fonction shm_attach()
 *
 * @return bool	shm_detach() retourne toujours TRUE.
 *
 */
if(!function_exists('shm_detachThis'))
{
    function shm_detachThis($shm_identifier)
    {
		$shm_identifier = is_resource($shm_identifier) ? $shm_identifier : NULL;

		return shm_detach($shm_identifier);
    }
}

/**
 * shm_get_varThis
 *
 * Lit une variable dans la mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shm-get-var.php Documentation pour shm_get_var.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $shm_identifier    Segment de mémoire partagée, obtenu depuis la fonction shm_attach().
 * @param int      $variable_key    La clé de la variable.
 *
 * @return mixed	Retourne la variable correspondant à la clé donnée.
 *
 */
if(!function_exists('shm_get_varThis'))
{
    function shm_get_varThis($shm_identifier, $variable_key)
    {
		$shm_identifier = is_resource($shm_identifier) ? $shm_identifier : NULL;
		$variable_key = (int)$variable_key;

		return shm_get_var($shm_identifier, $variable_key);
    }
}

/**
 * shm_has_varThis
 *
 * Vérifie si une variable existe en mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shm-has-var.php Documentation pour shm_has_var.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param resource $shm_identifier    Le segment de mémoire partagée, obtenu avec shm_attach().
 * @param int      $variable_key    Le nom de la variable.
 *
 * @return bool	Retourne TRUE si la variable existe, et FALSE sinon;
 *
 */
if(!function_exists('shm_has_varThis'))
{
    function shm_has_varThis($shm_identifier, $variable_key)
    {
		$shm_identifier = is_resource($shm_identifier) ? $shm_identifier : NULL;
		$variable_key = (int)$variable_key;

		return shm_has_var($shm_identifier, $variable_key);
    }
}

/**
 * shm_put_varThis
 *
 * Insère ou modifie une variable de la mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shm-put-var.php Documentation pour shm_put_var.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $shm_identifier    Une ressource, représentant la mémoire partagée, telle que retournée par la fonction shm_attach()
 * @param int      $variable_key    La clé de la variable.
 * @param mixed     $variable    La variable. Tous les types de variables supportés par la fonction serialize() peuvent être utilisés : cela signifie que tous les types, sauf les ressources et quelques objets internes, peuvent être linéarisés.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('shm_put_varThis'))
{
    function shm_put_varThis($shm_identifier, $variable_key, $variable)
    {
		$shm_identifier = is_resource($shm_identifier) ? $shm_identifier : NULL;
		$variable_key = (int)$variable_key;
		$variable = ($variable);
		return shm_put_var($shm_identifier, $variable_key, $variable);
    }
}

/**
 * shm_removeThis
 *
 * Supprime un segment de mémoire partagée sous Unix.
 *
 * @link http://php.net/manual/fr/function.shm-remove.php Documentation pour shm_remove.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $shm_identifier    L'identifiant de mémoire partagée, tel que retourné par la fonction shm_attach()
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('shm_removeThis'))
{
    function shm_removeThis($shm_identifier)
    {
		$shm_identifier = is_resource($shm_identifier) ? $shm_identifier : NULL;

		return shm_remove($shm_identifier);
    }
}

/**
 * shm_remove_varThis
 *
 * Efface une variable de la mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shm-remove-var.php Documentation pour shm_remove_var.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $shm_identifier    L'identifiant de la mémoire partagée, tel que retourné par la fonction shm_attach()
 * @param int      $variable_key    La clé de la variable.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('shm_remove_varThis'))
{
    function shm_remove_varThis($shm_identifier, $variable_key)
    {
		$shm_identifier = is_resource($shm_identifier) ? $shm_identifier : NULL;
		$variable_key = (int)$variable_key;

		return shm_remove_var($shm_identifier, $variable_key);
    }
}

/**
 * shmop_closeThis
 *
 * Ferme un bloc de mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shmop-close.php Documentation pour shmop_close.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $shmid    Identifiant de mémoire partagée créé par shmop_open().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('shmop_closeThis'))
{
    function shmop_closeThis($shmid)
    {
		$shmid = (int)$shmid;

		return shmop_close($shmid);
    }
}

/**
 * shmop_deleteThis
 *
 * Détruit un bloc de mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shmop-delete.php Documentation pour shmop_delete.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $shmid    Identifiant de mémoire partagée créé par shmop_open().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('shmop_deleteThis'))
{
    function shmop_deleteThis($shmid)
    {
		$shmid = (int)$shmid;

		return shmop_delete($shmid);
    }
}

/**
 * shmop_openThis
 *
 * Crée ou ouvre un bloc de mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shmop-open.php Documentation pour shmop_open.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $key    Identifiant système pour le bloc de mémoire partagé. Ce paramètre peut être passé comme un décimal ou un hexadécimal.
 * @param string   $flags    Vous pouvez utiliser :
 * @param int      $mode    Les permissions que vous donnez à ce bloc. Ce sont les mêmes que pour les fichiers. Ces permissions doivent être passées sous forme d'octal (i.e. 0644).
 * @param int      $size    La taille du bloc mémoire partagé que vous voulez créer, en octets
 *
 * @return int	En cas de succès, shmop_open() retourne un identifiant que vous pouvez utiliser pour accéder à la mémoire que vous venez de créer. FALSE sera retourné si une erreur survient.
 *
 */
if(!function_exists('shmop_openThis'))
{
    function shmop_openThis($key, $flags, $mode, $size)
    {
		$key = (int)$key;
		$flags = (string)$flags;
		$mode = (int)$mode;
		$size = (int)$size;

		return shmop_open($key, $flags, $mode, $size);
    }
}

/**
 * shmop_readThis
 *
 * Lit des données à partir d'un bloc.
 *
 * @link http://php.net/manual/fr/function.shmop-read.php Documentation pour shmop_read.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $shmid    L'identifiant du bloc mémoire partagé, créé par la fonction shmop_open()
 * @param int      $start    Position depuis laquelle on doit commencer à lire
 * @param int      $count    Le nombre d'octets à lire
 *
 * @return string	Retourne les données ou FALSE si une erreur survient.
 *
 */
if(!function_exists('shmop_readThis'))
{
    function shmop_readThis($shmid, $start, $count)
    {
		$shmid = (int)$shmid;
		$start = (int)$start;
		$count = (int)$count;

		return shmop_read($shmid, $start, $count);
    }
}

/**
 * shmop_sizeThis
 *
 * Lire la taille du bloc de mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shmop-size.php Documentation pour shmop_size.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $shmid    L'identifiant du bloc mémoire partagé créé par la fonction shmop_open()
 *
 * @return int	Retourne un entier, qui représente le nombre d'octets qu'occupe la mémoire partagée.
 *
 */
if(!function_exists('shmop_sizeThis'))
{
    function shmop_sizeThis($shmid)
    {
		$shmid = (int)$shmid;

		return shmop_size($shmid);
    }
}

/**
 * shmop_writeThis
 *
 * Écrire dans un bloc de mémoire partagée.
 *
 * @link http://php.net/manual/fr/function.shmop-write.php Documentation pour shmop_write.
 *
 * @version PHP 4 >= 4.0.4
 * @version PHP 5
 *
 * @param int      $shmid    L'identifiant du bloc mémoire partagé, créé par la fonction shmop_open()
 * @param string   $data    Une chaîne à écrire dans le bloc de la mémoire partagée
 * @param int      $offset    Spécifie la position à partir de laquelle les données doivent être écrites dans la mémoire partagée.
 *
 * @return int	La taille des données écrites, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('shmop_writeThis'))
{
    function shmop_writeThis($shmid, $data, $offset)
    {
		$shmid = (int)$shmid;
		$data = (string)$data;
		$offset = (int)$offset;

		return shmop_write($shmid, $data, $offset);
    }
}

/**
 * shuffleThis
 *
 * Mélange les éléments d'un tableau.
 *
 * @link http://php.net/manual/fr/function.shuffle.php Documentation pour shuffle.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('shuffleThis'))
{
    function shuffleThis(&$array)
    {
		$array = (array)$array;

		return shuffle($array);
    }
}

/**
 * similar_textThis
 *
 * Calcule la similarité de deux chaînes.
 *
 * @link http://php.net/manual/fr/function.similar-text.php Documentation pour similar_text.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $first    La première chaîne.
 * @param string   $second    La seconde chaîne.
 * @param float    &$percent    En passant une référence en tant que troisième argument, similar_text() va calculer la similarité en pourcentage automatiquement.
 *
 * @return int	Retourne le nombre de caractères identiques dans les deux chaînes.
 *
 */
if(!function_exists('similar_textThis'))
{
    function similar_textThis($first, $second, &$percent = NULL)
    {
		$first = (string)$first;
		$second = (string)$second;
		$percent = (float)$percent;

		return similar_text($first, $second, $percent);
    }
}

/**
 * simplexml_import_domThis
 *
 * Construit un objet SimpleXMLElement à partir d'un objet DOM.
 *
 * @link http://php.net/manual/fr/function.simplexml-import-dom.php Documentation pour simplexml_import_dom.
 *
 * @version PHP 5
 *
 * @param DOMNode     $node    Un élément DOM
 * @param string   $class_name    Vous pouvez utiliser ce paramètre optionnel afin que simplexml_load_string() retourne un objet de la classe spécifiée. Cette classe doit étendre la classe SimpleXMLElement.
 *
 * @return SimpleXMLElement	Retourne un objet SimpleXMLElement ou FALSE si une erreur survient.
 *
 */
if(!function_exists('simplexml_import_domThis'))
{
    function simplexml_import_domThis($node, $class_name = "SimpleXMLElement")
    {
		$node = is_object($node) ? $node : NULL;
		$class_name = (string)$class_name;

		return simplexml_import_dom($node, $class_name);
    }
}

/**
 * simplexml_load_fileThis
 *
 * Convertit un fichier XML en objet.
 *
 * @link http://php.net/manual/fr/function.simplexml-load-file.php Documentation pour simplexml_load_file.
 *
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier XML
 * @param string   $class_name    Vous pouvez utiliser ce paramètre optionnel et ainsi, la fonction simplexml_load_file() retournera un objet de la classe spécifiée. Cette classe doit étendre la classe SimpleXMLElement.
 * @param int      $options    Depuis PHP 5.1.0 et Libxml 2.6.0, vous pouvez aussi utiliser le paramètre options pour spécifier des paramètres additionnels Libxml.
 * @param string   $ns    Préfixe ou l'URI de l'espace de noms.
 * @param bool     $is_prefix    TRUE si ns est un préfixe, FALSE si c'est l'URI ; par défaut, FALSE.
 *
 * @return SimpleXMLElement	Retourne un objet de la classe SimpleXMLElement dont les propriétés contiennent les données du document XML, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('simplexml_load_fileThis'))
{
    function simplexml_load_fileThis($filename, $class_name = "SimpleXMLElement", $options = 0, $ns = "", $is_prefix = false)
    {
		$filename = (string)$filename;
		$class_name = (string)$class_name;
		$options = (int)$options;
		$ns = (string)$ns;
		$is_prefix = (bool)$is_prefix;

		return simplexml_load_file($filename, $class_name, $options, $ns, $is_prefix);
    }
}

/**
 * simplexml_load_stringThis
 *
 * Convertit une chaîne XML en objet.
 *
 * @link http://php.net/manual/fr/function.simplexml-load-string.php Documentation pour simplexml_load_string.
 *
 * @version PHP 5
 *
 * @param string   $data    Une chaîne XML valide
 * @param string   $class_name    Vous pouvez utiliser le paramètre optionnel et, ainsi, la fonction simplexml_load_string() retournera un objet de la classe spécifiée. Cette classe doit étendre la classe SimpleXMLElement.
 * @param int      $options    Depuis PHP 5.1.0 et Libxml 2.6.0, vous pouvez aussi utiliser le paramètre options pour spécifier des paramètres additionnels Libxml.
 * @param string   $ns    Préfixe ou URI de l'espace de noms.
 * @param bool     $is_prefix    TRUE si ns est un préfixe, FALSE si c'est l'URI.
 *
 * @return SimpleXMLElement	Retourne un objet de la classe SimpleXMLElement dont les propriétés contiennent les données du document XML, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('simplexml_load_stringThis'))
{
    function simplexml_load_stringThis($data, $class_name = "SimpleXMLElement", $options = 0, $ns = "", $is_prefix = false)
    {
		$data = (string)$data;
		$class_name = (string)$class_name;
		$options = (int)$options;
		$ns = (string)$ns;
		$is_prefix = (bool)$is_prefix;

		return simplexml_load_string($data, $class_name, $options, $ns, $is_prefix);
    }
}

/**
 * sinThis
 *
 * Sinus.
 *
 * @link http://php.net/manual/fr/function.sin.php Documentation pour sin.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    Une valeur, en radians
 *
 * @return float	Le sinus de arg.
 *
 */
if(!function_exists('sinThis'))
{
    function sinThis($arg)
    {
		$arg = (float)$arg;

		return sin($arg);
    }
}

/**
 * sinhThis
 *
 * Sinus hyperbolique.
 *
 * @link http://php.net/manual/fr/function.sinh.php Documentation pour sinh.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	Le sinus hyperbolique de arg.
 *
 */
if(!function_exists('sinhThis'))
{
    function sinhThis($arg)
    {
		$arg = (float)$arg;

		return sinh($arg);
    }
}

/**
 * sleepThis
 *
 * Arrête l'exécution durant quelques secondes.
 *
 * @link http://php.net/manual/fr/function.sleep.php Documentation pour sleep.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $seconds    Le temps d'arret, en nombre de secondes.
 *
 * @return int	Retourne zéro en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sleepThis'))
{
    function sleepThis($seconds)
    {
		$seconds = (int)$seconds;

		return sleep($seconds);
    }
}

/**
 * snmp2_getThis
 *
 * Récupère un objet SNMP.
 *
 * @link http://php.net/manual/fr/function.snmp2-get.php Documentation pour snmp2_get.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param string   $host    L'agent SNMP.
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    L'identifiant de l'objet SNMP.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentative dans le cas où le délai d'expiration survient.
 *
 * @return string	Retourne la valeur de l'objet SNMP en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmp2_getThis'))
{
    function snmp2_getThis($host, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp2_get($host, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmp2_getnextThis
 *
 * Récupère l'objet SNMP qui suit immédiatement l'identifiant de l'objet fourni.
 *
 * @link http://php.net/manual/fr/function.snmp2-getnext.php Documentation pour snmp2_getnext.
 *
 * @version PHP >= 5.2.0
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    L'identifiant de l'objet SNMP qui précède celui voulu.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentative dans le cas où le délai d'expiration survient.
 *
 * @return string	Retourne la valeur de l'objet SNMP en cas de succès, ou FALSE si une erreur survient. Dans le cas où une erreur survient, une alerte de type E_WARNING sera émise.
 *
 */
if(!function_exists('snmp2_getnextThis'))
{
    function snmp2_getnextThis($host, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp2_getnext($host, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmp2_real_walkThis
 *
 * Retourne tous les objets incluant les identifiants de leurs objets respectifs.
 *
 * @link http://php.net/manual/fr/function.snmp2-real-walk.php Documentation pour snmp2_real_walk.
 *
 * @version PHP >= 5.2.0
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    L'identifiant de l'objet SNMP qui précède celui désiré.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentatives dans le cas où le délai d'expiration survient.
 *
 * @return array	Retourne un tableau associatif d'identifiants d'objets SNMP ainsi que leurs valeurs en cas de succès ou FALSE une erreur survient. Dans le cas où une erreur survient, une alerte de type E_WARNING sera émise.
 *
 */
if(!function_exists('snmp2_real_walkThis'))
{
    function snmp2_real_walkThis($host, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp2_real_walk($host, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmp2_setThis
 *
 * Définit la valeur d'un objet SNMP.
 *
 * @link http://php.net/manual/fr/function.snmp2-set.php Documentation pour snmp2_set.
 *
 * @version PHP >= 5.2.0
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $community    La communauté d'écriture.
 * @param string   $object_id    L'identifiant de l'objet SNMP.
 * @param string   $type    Le MIB définit le type de chaque identifiant d'objets. Il doit être spécifié sous la forme d'un simple caractère depuis la liste suivante. Si la constante OPAQUE_SPECIAL_TYPES a été définie lors de la compilation de la bibliothèque SNMP, les caractères suivants seront également disponibles : La plupart de ces valeurs utilise le type ASN.1 correspondant. 's', 'x', 'd' et 'b' sont toutes des façons différentes de spécifier la valeur OCTET STRING et le type non-signé 'u' est également utilisé pour gérer les valeurs Gauge32. Si les fichiers MIB sont chargés dans l'arbre MIB avec "snmp_read_mib" ou en les spécifiant dans la configuration de libsnmp, '=' pourra être utilisé comme paramètre de type pour tous les identifiants d'objets, vu que le type peut automatiquement être lu depuis le MIB. Notez qu'il y a 2 façons de définir une variable de type BITS like i.e. "SYNTAX BITS {telnet(0), ftp(1), http(2), icmp(3), snmp(4), ssh(5), https(6)}": Reportez-vous à la section sur les exemples pour plus de détails.
 * @param string   $value    La nouvelle valeur.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentatives dans le cas où le délai d'expiration survient.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmp2_setThis'))
{
    function snmp2_setThis($host, $community, $object_id, $type, $value, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$type = (string)$type;
		$value = (string)$value;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp2_set($host, $community, $object_id, $type, $value, $timeout, $retries);
    }
}

/**
 * snmp2_walkThis
 *
 * Récupère tous les objets SNMP depuis un agent.
 *
 * @link http://php.net/manual/fr/function.snmp2-walk.php Documentation pour snmp2_walk.
 *
 * @version PHP >= 5.2.0
 *
 * @param string   $host    L'agent SNMP (serveur).
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    Si NULL, object_id sera la racine de l'arbre des objets SNMP et tous les objets de cet arbre seront retournés sous la forme d'un tableau. Si object_id est spécifié, tous les objets SNMP sous cet object_id seront retournés.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentatives dans le cas où un délai d'expiration survient.
 *
 * @return array	Retourne un tableau de valeurs d'objet SNMP en commençant par l'objet object_id ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmp2_walkThis'))
{
    function snmp2_walkThis($host, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp2_walk($host, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmp3_getThis
 *
 * Récupère un objet SNMP.
 *
 * @link http://php.net/manual/fr/function.snmp3-get.php Documentation pour snmp3_get.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    Le nom de l'hôte de l'agent SNMP (serveur).
 * @param string   $sec_name    Le nom de la sécurité, habituellement, le nom d'utilisateur.
 * @param string   $sec_level    Le niveau de sécurité (noAuthNoPriv|authNoPriv|authPriv).
 * @param string   $auth_protocol    Le protocole d'authentification (MD5 or SHA)
 * @param string   $auth_passphrase    La phrase secrète d'authentification.
 * @param string   $priv_protocol    Le protocole privé (DES ou AES).
 * @param string   $priv_passphrase    La phrase secrète privée.
 * @param string   $object_id    L'identifiant de l'objet SNMP.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentative dans le cas où le délai d'expiration survient.
 *
 * @return string	Retourne la valeur de l'objet SNMP en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmp3_getThis'))
{
    function snmp3_getThis($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$sec_name = (string)$sec_name;
		$sec_level = (string)$sec_level;
		$auth_protocol = (string)$auth_protocol;
		$auth_passphrase = (string)$auth_passphrase;
		$priv_protocol = (string)$priv_protocol;
		$priv_passphrase = (string)$priv_passphrase;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp3_get($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout, $retries);
    }
}

/**
 * snmp3_getnextThis
 *
 * Récupère l'objet SNMP qui suit immédiatement l'objet fourni.
 *
 * @link http://php.net/manual/fr/function.snmp3-getnext.php Documentation pour snmp3_getnext.
 *
 * @version PHP 5
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $sec_name    Le nom de la sécurité, habituellement, le nom d'utilisateur.
 * @param string   $sec_level    Le degré de sécurité (noAuthNoPriv|authNoPriv|authPriv).
 * @param string   $auth_protocol    Le protocole d'authentification (MD5 ou SHA).
 * @param string   $auth_passphrase    La phrase secrète d'authentification.
 * @param string   $priv_protocol    Le protocoloe privé (DES ou AES).
 * @param string   $priv_passphrase    La phrase secrète privée.
 * @param string   $object_id    L'identifiant de l'objet SNMP.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentatives dans le cas où un délai d'expiration survient.
 *
 * @return string	Retourne la valeur de l'objet SNMP en cas de succès ou FALSE si une erreur survient. Dans le cas d'une erreur, une alerte de type E_WARNING sera émise.
 *
 */
if(!function_exists('snmp3_getnextThis'))
{
    function snmp3_getnextThis($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$sec_name = (string)$sec_name;
		$sec_level = (string)$sec_level;
		$auth_protocol = (string)$auth_protocol;
		$auth_passphrase = (string)$auth_passphrase;
		$priv_protocol = (string)$priv_protocol;
		$priv_passphrase = (string)$priv_passphrase;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp3_getnext($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout, $retries);
    }
}

/**
 * snmp3_real_walkThis
 *
 * Retourne tous les objets incluant les identifiants de leurs objets respectifs.
 *
 * @link http://php.net/manual/fr/function.snmp3-real-walk.php Documentation pour snmp3_real_walk.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $sec_name    Le nom de la sécurité, habituellement, le nom d'utilisateur.
 * @param string   $sec_level    Le niveau de sécurité (noAuthNoPriv|authNoPriv|authPriv).
 * @param string   $auth_protocol    Le protocole d'authentification (MD5 ou SHA).
 * @param string   $auth_passphrase    La phrase secrète d'authentification.
 * @param string   $priv_protocol    Le protocole privé (DES ou AES).
 * @param string   $priv_passphrase    La phrase secrète privée.
 * @param string   $object_id    L'identifiant de l'objet SNMP.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param string   $retries    Le nombre de tentatives dans le cas où un délai d'expiration survient.
 *
 * @return array	Retourne un tableau associatif d'identifiants d'objets SNMP ainsi que leurs valeurs en cas de succès, ou FALSE si une erreur survient. Dans le cas où une erreur survient, une alerte de niveau E_WARNING est émise.
 *
 */
if(!function_exists('snmp3_real_walkThis'))
{
    function snmp3_real_walkThis($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$sec_name = (string)$sec_name;
		$sec_level = (string)$sec_level;
		$auth_protocol = (string)$auth_protocol;
		$auth_passphrase = (string)$auth_passphrase;
		$priv_protocol = (string)$priv_protocol;
		$priv_passphrase = (string)$priv_passphrase;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp3_real_walk($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout, $retries);
    }
}

/**
 * snmp3_setThis
 *
 * Définit la valeur d'un objet SNMP.
 *
 * @link http://php.net/manual/fr/function.snmp3-set.php Documentation pour snmp3_set.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    Le nom de l'hôte de l'agent SNMP (serveur).
 * @param string   $sec_name    Le nom de la sécurité, habituellement, le nom d'utilisateur.
 * @param string   $sec_level    Le niveau de sécurité (noAuthNoPriv|authNoPriv|authPriv).
 * @param string   $auth_protocol    La protocole d'authentification (MD5 ou SHA).
 * @param string   $auth_passphrase    La phrase secrète pour l'authentification.
 * @param string   $priv_protocol    Le protocole privé (DES ou AES)
 * @param string   $priv_passphrase    La phrase secrète privée.
 * @param string   $object_id    L'identifiant de l'objet SNMP.
 * @param string   $type    Le MIB définit le type de chaque identifiant d'objets. Il doit être spécifié sous la forme d'un simple caractère depuis la liste suivante. Si la constante OPAQUE_SPECIAL_TYPES a été définie lors de la compilation de la bibliothèque SNMP, les caractères suivants seront également disponibles : La plupart de ces valeurs utilise le type ASN.1 correspondant. 's', 'x', 'd' et 'b' sont toutes des façons différentes de spécifier la valeur OCTET STRING et le type non-signé 'u' est également utilisé pour gérer les valeurs Gauge32. Si les fichiers MIB sont chargés dans l'arbre MIB avec "snmp_read_mib" ou en les spécifiant dans la configuration de libsnmp, '=' pourra être utilisé comme paramètre de type pour tous les identifiants d'objets, vu que le type peut automatiquement être lu depuis le MIB. Notez qu'il y a 2 façons de définir une variable de type BITS like i.e. "SYNTAX BITS {telnet(0), ftp(1), http(2), icmp(3), snmp(4), ssh(5), https(6)}": Reportez-vous à la section sur les exemples pour plus de détails.
 * @param string   $value    La nouvelle valeur.
 * @param int      $timeout    Le nombre de millisecondes avant le premier délai d'expiration.
 * @param int      $retries    Le nombre de tentative dans le cas où le délai d'expiration est atteint.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmp3_setThis'))
{
    function snmp3_setThis($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $type, $value, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$sec_name = (string)$sec_name;
		$sec_level = (string)$sec_level;
		$auth_protocol = (string)$auth_protocol;
		$auth_passphrase = (string)$auth_passphrase;
		$priv_protocol = (string)$priv_protocol;
		$priv_passphrase = (string)$priv_passphrase;
		$object_id = (string)$object_id;
		$type = (string)$type;
		$value = (string)$value;
		$timeout = (int)$timeout;
		$retries = (int)$retries;

		return snmp3_set($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $type, $value, $timeout, $retries);
    }
}

/**
 * snmp3_walkThis
 *
 * Récupère tous les objets SNMP depuis un agent.
 *
 * @link http://php.net/manual/fr/function.snmp3-walk.php Documentation pour snmp3_walk.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    Le nom de l'hôte de l'agent SNMP (serveur).
 * @param string   $sec_name    Le nom de la sécurité, habituellement, le nom de l'utilisateur.
 * @param string   $sec_level    Le niveau de sécurité (noAuthNoPriv|authNoPriv|authPriv).
 * @param string   $auth_protocol    Le protocole d'authentification (MD5 ou SHA).
 * @param string   $auth_passphrase    La phrase secrète d'authentification.
 * @param string   $priv_protocol    Le protocole privé (DES ou AES).
 * @param string   $priv_passphrase    La phrase secrète privée.
 * @param string   $object_id    Si vaut NULL, object_id sera la racine de l'arbre des objets SNMP et tous les objets sous-jacents sont retournés sous forme d'un tableau. Si object_id est spécifié, tous les objets SNMP sous l'objet object_id seront retournés.
 * @param string   $timeout    Le nombre de microsecondes avant le premier délai d'expiration
 * @param string   $retries    Le nombre de tentatives dans le cas où le délai d'expiration survient.
 *
 * @return array	Retourne un tableau de valeurs d'objets SNMP en commençant depuis l'objet object_id comme racine, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmp3_walkThis'))
{
    function snmp3_walkThis($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$sec_name = (string)$sec_name;
		$sec_level = (string)$sec_level;
		$auth_protocol = (string)$auth_protocol;
		$auth_passphrase = (string)$auth_passphrase;
		$priv_protocol = (string)$priv_protocol;
		$priv_passphrase = (string)$priv_passphrase;
		$object_id = (string)$object_id;
		$timeout = (string)$timeout;
		$retries = (string)$retries;

		return snmp3_walk($host, $sec_name, $sec_level, $auth_protocol, $auth_passphrase, $priv_protocol, $priv_passphrase, $object_id, $timeout, $retries);
    }
}

/**
 * snmp_get_quick_printThis
 *
 * Lit la valeur courante de l'option quick_print de la bibliothèque UCD.
 *
 * @link http://php.net/manual/fr/function.snmp-get-quick-print.php Documentation pour snmp_get_quick_print.
 *
 * @version PHP 4
 * @version PHP 5
 * @return bool	Retourne TRUE si quick_print est actif, FALSE sinon.
 *
 */
if(!function_exists('snmp_get_quick_printThis'))
{
    function snmp_get_quick_printThis()
    {
		return snmp_get_quick_print();
    }
}

/**
 * snmp_get_valueretrievalThis
 *
 * Retourne la méthode avec laquelle les valeurs SNMP seront retournées.
 *
 * @link http://php.net/manual/fr/function.snmp-get-valueretrieval.php Documentation pour snmp_get_valueretrieval.
 *
 * @version PHP 4 >= 4.3.3
 * @version PHP 5
 * @return int	Une combinaison de constantes ( SNMP_VALUE_LIBRARY ou SNMP_VALUE_PLAIN ) avec éventuellement une définition de SNMP_VALUE_OBJECT.
 *
 */
if(!function_exists('snmp_get_valueretrievalThis'))
{
    function snmp_get_valueretrievalThis()
    {
		return snmp_get_valueretrieval();
    }
}

/**
 * snmp_read_mibThis
 *
 * Lit et analyse un fichier MIB dans l'arbre actif MIB.
 *
 * @link http://php.net/manual/fr/function.snmp-read-mib.php Documentation pour snmp_read_mib.
 *
 * @version PHP 5
 *
 * @param string   $filename    Le nom de fichier du MIB.
 *
 */
if(!function_exists('snmp_read_mibThis'))
{
    function snmp_read_mibThis($filename)
    {
		$filename = (string)$filename;

		return snmp_read_mib($filename);
    }
}

/**
 * snmp_set_enum_printThis
 *
 * Retourne toutes les valeurs qui sont des énumérations avec leur valeur d'énumération au lieu de l'entier.
 *
 * @link http://php.net/manual/fr/function.snmp-set-enum-print.php Documentation pour snmp_set_enum_print.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $enum_print    Vu que la valeur est interprétée comme un booléen par la bibliothèque Net-SNMP library, il peut valoir "0" ou "1".
 *
 */
if(!function_exists('snmp_set_enum_printThis'))
{
    function snmp_set_enum_printThis($enum_print)
    {
		$enum_print = (int)$enum_print;

		return snmp_set_enum_print($enum_print);
    }
}

/**
 * snmp_set_oid_numeric_printThis
 *
 * Retourne tous les objets y compris leur identifiant d'objet dans celui spécifié.
 *
 * @link http://php.net/manual/fr/function.snmp-set-oid-numeric-print.php Documentation pour snmp_set_oid_numeric_print.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $oid_format
 *
 */
if(!function_exists('snmp_set_oid_numeric_printThis'))
{
    function snmp_set_oid_numeric_printThis($oid_format)
    {
		$oid_format = (int)$oid_format;

		return snmp_set_oid_numeric_print($oid_format);
    }
}

/**
 * snmp_set_oid_output_formatThis
 *
 * Définit le format de sortie OID.
 *
 * @link http://php.net/manual/fr/function.snmp-set-oid-output-format.php Documentation pour snmp_set_oid_output_format.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param int      $oid_format    Depuis PHP 5.4.0, 4 constantes de plus sont disponibles :
 *
 * @return bool	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('snmp_set_oid_output_formatThis'))
{
    function snmp_set_oid_output_formatThis($oid_format)
    {
		$oid_format = (int)$oid_format;

		return snmp_set_oid_output_format($oid_format);
    }
}

/**
 * snmp_set_quick_printThis
 *
 * Écrit la valeur courante de l'option quick_print de la bibliothèque UCD SNMP.
 *
 * @link http://php.net/manual/fr/function.snmp-set-quick-print.php Documentation pour snmp_set_quick_print.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param bool     $quick_print
 *
 * @return bool	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('snmp_set_quick_printThis'))
{
    function snmp_set_quick_printThis($quick_print)
    {
		$quick_print = (bool)$quick_print;

		return snmp_set_quick_print($quick_print);
    }
}

/**
 * snmp_set_valueretrievalThis
 *
 * Spécifie la méthode avec laquelle les valeurs SNMP seront retournées.
 *
 * @link http://php.net/manual/fr/function.snmp-set-valueretrieval.php Documentation pour snmp_set_valueretrieval.
 *
 * @version PHP 4 >= 4.3.3
 * @version PHP 5
 *
 * @param int      $method
 *
 */
if(!function_exists('snmp_set_valueretrievalThis'))
{
    function snmp_set_valueretrievalThis($method)
    {
		$method = (int)$method;

		return snmp_set_valueretrieval($method);
    }
}

/**
 * snmpgetThis
 *
 * Reçoit un objet SNMP.
 *
 * @link http://php.net/manual/fr/function.snmpget.php Documentation pour snmpget.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    L'agent SNMP.
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    L'objet SNMP.
 * @param int      $timeout    Le nombre de microsecondes depuis le premier timeout.
 * @param int      $retries    Le nombre d'essais lorsque le délai maximal d'attente survient.
 *
 * @return string	Retourne la valeur de l'objet SNMP en cas de succès, FALSE si une erreur survient.
 *
 */
if(!function_exists('snmpgetThis'))
{
    function snmpgetThis($hostname, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$hostname = (string)$hostname;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (int)$timeout;
		$retries = (int)$retries;

		return snmpget($hostname, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmpgetnextThis
 *
 * Récupère un objet SNMP qui suit immédiatement l'objet fourni.
 *
 * @link http://php.net/manual/fr/function.snmpgetnext.php Documentation pour snmpgetnext.
 *
 * @version PHP 5
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    The SNMP object id which precedes the wanted one.
 * @param int      $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param int      $retries    Le nombre de tentative dans le cas où le délai d'expiration survient.
 *
 * @return string	Retourne la valeur de l'objet SNMP en cas de succès ou FALSE si une erreur survient. Dans le cas où une erreur survient, une alerte de type E_WARNING sera émise.
 *
 */
if(!function_exists('snmpgetnextThis'))
{
    function snmpgetnextThis($host, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (int)$timeout;
		$retries = (int)$retries;

		return snmpgetnext($host, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmprealwalkThis
 *
 * Retourne tous les objets, y compris les identifiants respectifs inclus dans l'objet.
 *
 * @link http://php.net/manual/fr/function.snmprealwalk.php Documentation pour snmprealwalk.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    L'identifiant de l'objet SNMP qui précède celui désiré.
 * @param int      $timeout    Le nombre de microsecondes avant le premier délai d'expiration.
 * @param int      $retries    Le nombre de tentatives dans le cas où le délai d'expiration survient.
 *
 * @return array	Retourne un tableau associatif d'identifiants d'objets SNMP ainsi que leurs valeurs en cas de succès ou FALSE si une erreur survient. Dans le cas où une erreur survient, une alerte de type E_WARNING sera émise.
 *
 */
if(!function_exists('snmprealwalkThis'))
{
    function snmprealwalkThis($host, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (int)$timeout;
		$retries = (int)$retries;

		return snmprealwalk($host, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmpsetThis
 *
 * Définit la valeur d'un objet SNMP.
 *
 * @link http://php.net/manual/fr/function.snmpset.php Documentation pour snmpset.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $host    Le nom d'hôte de l'agent SNMP (serveur).
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    L'identifiant de l'objet SNMP.
 * @param string   $type    Le MIB définit le type de chaque identifiant d'objets. Il doit être spécifié sous la forme d'un simple caractère depuis la liste suivante. Si la constante OPAQUE_SPECIAL_TYPES a été définie lors de la compilation de la bibliothèque SNMP, les caractères suivants seront également disponibles : La plupart de ces valeurs utilise le type ASN.1 correspondant. 's', 'x', 'd' et 'b' sont toutes des façons différentes de spécifier la valeur OCTET STRING et le type non-signé 'u' est également utilisé pour gérer les valeurs Gauge32. Si les fichiers MIB sont chargés dans l'arbre MIB avec "snmp_read_mib" ou en les spécifiant dans la configuration de libsnmp, '=' pourra être utilisé comme paramètre de type pour tous les identifiants d'objets, vu que le type peut automatiquement être lu depuis le MIB. Notez qu'il y a 2 façons de définir une variable de type BITS like i.e. "SYNTAX BITS {telnet(0), ftp(1), http(2), icmp(3), snmp(4), ssh(5), https(6)}": Reportez-vous à la section sur les exemples pour plus de détails.
 * @param mixed     $value    La nouvelle valeur.
 * @param int      $timeout    Le nombre de microsecondes depuis le premier timeout.
 * @param int      $retries    Le nombre d'essais avant d'atteindre le délai maximal d'attente.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmpsetThis'))
{
    function snmpsetThis($host, $community, $object_id, $type, $value, $timeout = 1000000, $retries = 5)
    {
		$host = (string)$host;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$type = (string)$type;
		$value = ($value);
		$timeout = (int)$timeout;
		$retries = (int)$retries;

		return snmpset($host, $community, $object_id, $type, $value, $timeout, $retries);
    }
}

/**
 * snmpwalkThis
 *
 * Reçoit tous les objets SNMP d'un agent.
 *
 * @link http://php.net/manual/fr/function.snmpwalk.php Documentation pour snmpwalk.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    L'agent SNMP (serveur).
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    Si NULL, object_id est pris comme racine des objets SNMP et tous les objets de cet arbre sont retournés sous la forme d'un tableau. Si object_id est spécifié, tous les objets SNMP suivant cet object_id sont retournés.
 * @param int      $timeout    Le nombre de microsecondes depuis le premier timeout.
 * @param int      $retries    Le nombre de tentative dans le cas où le délai d'expiration survient.
 *
 * @return array	Retourne un tableau de valeurs de l'objet SNMP, en commençant par object_id ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmpwalkThis'))
{
    function snmpwalkThis($hostname, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$hostname = (string)$hostname;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (int)$timeout;
		$retries = (int)$retries;

		return snmpwalk($hostname, $community, $object_id, $timeout, $retries);
    }
}

/**
 * snmpwalkoidThis
 *
 * Demande d'informations d'arbre sur une entité du réseau.
 *
 * @link http://php.net/manual/fr/function.snmpwalkoid.php Documentation pour snmpwalkoid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $hostname    L'agent SNMP.
 * @param string   $community    La communauté de lecture.
 * @param string   $object_id    Si NULL, object_id est pris comme racine des objets SNMP et tous les objets de cet arbre sont retournés sous la forme d'un tableau. Si object_id est spécifié, tous les objets SNMP suivant cet object_id sont retournés.
 * @param int      $timeout    Le nombre de microsecondes depuis le premier timeout.
 * @param int      $retries    Le nombre de tentative dans le cas où le délai d'attente maximal survient.
 *
 * @return array	Retourne un tableau associatif contenant les identifiants des objets ainsi que leurs valeurs respectives, à partir de object_id, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('snmpwalkoidThis'))
{
    function snmpwalkoidThis($hostname, $community, $object_id, $timeout = 1000000, $retries = 5)
    {
		$hostname = (string)$hostname;
		$community = (string)$community;
		$object_id = (string)$object_id;
		$timeout = (int)$timeout;
		$retries = (int)$retries;

		return snmpwalkoid($hostname, $community, $object_id, $timeout, $retries);
    }
}

/**
 * socket_acceptThis
 *
 * Accepte une connexion sur un socket.
 *
 * @link http://php.net/manual/fr/function.socket-accept.php Documentation pour socket_accept.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create().
 *
 * @return resource	Retourne une nouvelle ressource de socket en cas de succès ou FALSE en cas d'erreur. Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour obtenir un message d'erreur, humainement lisible.
 *
 */
if(!function_exists('socket_acceptThis'))
{
    function socket_acceptThis($socket)
    {
		$socket = is_resource($socket) ? $socket : NULL;

		return socket_accept($socket);
    }
}

/**
 * socket_bindThis
 *
 * Lie un nom à un socket.
 *
 * @link http://php.net/manual/fr/function.socket-bind.php Documentation pour socket_bind.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide créée par la fonction socket_create().
 * @param string   $address    Si le socket est de la famille AF_INET, le paramètre address est une IP numérique (i.e. 27.0.0.1). Si le socket est de la famille AF_UNIX, le paramètre address représente le chemin d'un socket de domaine Unix (i.e. /tmp/my.sock).
 * @param int      $port    Le paramètre port est uniquement utilisé lors de la liaison à un socket AF_INET et désigne le port sur lequel écouter pour une connexion.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_bindThis'))
{
    function socket_bindThis($socket, $address, $port = 0)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$address = (string)$address;
		$port = (int)$port;

		return socket_bind($socket, $address, $port);
    }
}

/**
 * socket_clear_errorThis
 *
 * Efface toutes les erreurs précédemment générées par un socket.
 *
 * @link http://php.net/manual/fr/function.socket-clear-error.php Documentation pour socket_clear_error.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('socket_clear_errorThis'))
{
    function socket_clear_errorThis($socket = NULL)
    {
		$socket = is_resource($socket) ? $socket : NULL;

		return socket_clear_error($socket);
    }
}

/**
 * socket_closeThis
 *
 * Ferme un socket.
 *
 * @link http://php.net/manual/fr/function.socket-close.php Documentation pour socket_close.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('socket_closeThis'))
{
    function socket_closeThis($socket)
    {
		$socket = is_resource($socket) ? $socket : NULL;

		return socket_close($socket);
    }
}

/**
 * socket_connectThis
 *
 * Crée une connexion sur un socket.
 *
 * @link http://php.net/manual/fr/function.socket-connect.php Documentation pour socket_connect.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket
 * @param string   $address    Le paramètre address est soit une adresse valide IPv4 (e.g. 27.0.0.1) si socket vaut AF_INET, soit une adresse valide IPv6 (e.g. ::1) si le support IPv6 est actif et que le paramètre socket vaut AF_INET6, soit un chemin vers un socket de domaine Unix, si la famille de sockets vaut AF_UNIX.
 * @param int      $port    Le paramètre port n'est utilisé et mandaté que lors d'une connexion à un socket AF_INET ou AF_INET6, et désigne le port de l'hôte distant sur lequel la connexion doit être effectuée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour obtenir un message d'erreur humainement lisible.
 *
 */
if(!function_exists('socket_connectThis'))
{
    function socket_connectThis($socket, $address, $port = 0)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$address = (string)$address;
		$port = (int)$port;

		return socket_connect($socket, $address, $port);
    }
}

/**
 * socket_createThis
 *
 * Crée un socket.
 *
 * @link http://php.net/manual/fr/function.socket-create.php Documentation pour socket_create.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $domain    Le paramètre domain spécifie la famille de protocoles à utiliser par le socket.
 * @param int      $type    Le paramètre type sélectionne le type de communication à utiliser par le socket.
 * @param int      $protocol    Le paramètre protocol définit le protocole spécifique pour le domaine domain à utiliser lors de communications sur un socket retourné. La valeur appropriée peut être retrouvée par son nom en utilisant la fonction getprotobyname(). Si le protocole désiré est TCP ou UDP, les constantes correspondantes SOL_TCP et SOL_UDP peuvent être utilisées.
 *
 * @return resource	socket_create() retourne une ressource de socket en cas de succès et FALSE sinon. Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour obtenir un message d'erreur humainement lisible.
 *
 */
if(!function_exists('socket_createThis'))
{
    function socket_createThis($domain, $type, $protocol)
    {
		$domain = (int)$domain;
		$type = (int)$type;
		$protocol = (int)$protocol;

		return socket_create($domain, $type, $protocol);
    }
}

/**
 * socket_create_listenThis
 *
 * Ouvre un socket sur un port pour accepter les connexions.
 *
 * @link http://php.net/manual/fr/function.socket-create-listen.php Documentation pour socket_create_listen.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $port    Le port que l'on doit écouter sur toutes les interfaces.
 * @param int      $backlog    Le paramètre backlog définit la taille maximum de la queue de connexions en attente. SOMAXCONN peut être utilisée comme valeur pour le paramètre backlog. Reportez-vous à socket_listen() pour plus de détails.
 *
 * @return resource	socket_create_listen() retourne une nouvelle ressource de socket en cas de succès et FALSE en cas d'erreur. Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour obtenir un message d'erreur humainement lisible.
 *
 */
if(!function_exists('socket_create_listenThis'))
{
    function socket_create_listenThis($port, $backlog = 28)
    {
		$port = (int)$port;
		$backlog = (int)$backlog;

		return socket_create_listen($port, $backlog);
    }
}

/**
 * socket_create_pairThis
 *
 * Crée une paire de sockets identiques et les stocke dans un tableau.
 *
 * @link http://php.net/manual/fr/function.socket-create-pair.php Documentation pour socket_create_pair.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $domain    Le paramètre domain spécifie la famille du protocole à utiliser par le socket. Voir la documentation sur la fonction socket_create() pour une liste complète.
 * @param int      $type    Le paramètre type spécifie le type de communication à utiliser par le socket. Voir la documentation sur la fonction socket_create() pour une liste complète.
 * @param int      $protocol    Le paramètre protocol définit un protocole spécifique dans le domaine spécifié domain pour être utilisé lors d'une communication sur un socket retourné. La valeur appropriée peut être retrouvée par son nom en utilisant la fonction getprotobyname(). Si le protocole désiré est TCP ou UDP, les constantes correspondantes SOL_TCP et SOL_UDP peuvent être utilisées. Voir la documentation sur la fonction socket_create() pour une liste complète des protocoles supportés.
 * @param array    &$fd    Une référence vers un tableau dans lequel les deux ressources de sockets seront insérées.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_create_pairThis'))
{
    function socket_create_pairThis($domain, $type, $protocol, &$fd)
    {
		$domain = (int)$domain;
		$type = (int)$type;
		$protocol = (int)$protocol;
		$fd = (array)$fd;

		return socket_create_pair($domain, $type, $protocol, $fd);
    }
}

/**
 * socket_get_optionThis
 *
 * Lit les options du socket.
 *
 * @link http://php.net/manual/fr/function.socket-get-option.php Documentation pour socket_get_option.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 * @param int      $level    Le paramètre level spécifie la couche de protocole de l'option. Par exemple, pour connaître les options de la couche socket, la valeur SOL_SOCKET du paramètre level sera utilisée. Les autres degrés, comme TCP, peuvent être utilisés en spécifiant le numéro du protocole de cette couche. Les numéros de protocoles peuvent être trouvés en utilisant la fonction getprotobyname().
 * @param int      $optname
 *
 * @return mixed	Retourne la valeur de l'option fournie, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_get_optionThis'))
{
    function socket_get_optionThis($socket, $level, $optname)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$level = (int)$level;
		$optname = (int)$optname;

		return socket_get_option($socket, $level, $optname);
    }
}

/**
 * socket_getpeernameThis
 *
 * Interroge l'autre extrémité de la communication.
 *
 * @link http://php.net/manual/fr/function.socket-getpeername.php Documentation pour socket_getpeername.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 * @param string   &$address    Si le socket socket est de type AF_INET, ou AF_INET6 socket_getpeername() retournera l'adresse IP de l'hôte, en notation numérique (e.g. 27.0.0.1 ou fe80::1) dans le paramètre address, et si le paramètre optionnel port est présent, elle retournera aussi le port de la communication établie. Si le socket socket est de type AF_UNIX, socket_getpeername() retournera le chemin sur le système de fichiers (e.g. /var/run/daemon.sock) dans le paramètre address.
 * @param int      &$port    Si fourni, ce devra être le port associé à l'adresse du paramètre address.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. socket_getpeername() peut aussi retourner FALSE si le type de le socket n'est ni AF_INET AF_INET6, ni AF_UNIX, auquel cas le dernier code d'erreur socket n'est pas modifié.
 *
 */
if(!function_exists('socket_getpeernameThis'))
{
    function socket_getpeernameThis($socket, &$address, &$port = NULL)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$address = (string)$address;
		$port = (int)$port;

		return socket_getpeername($socket, $address, $port);
    }
}

/**
 * socket_getsocknameThis
 *
 * Interroge le socket local.
 *
 * @link http://php.net/manual/fr/function.socket-getsockname.php Documentation pour socket_getsockname.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 * @param string   &$addr    Si le socket socket est de type AF_INET, ou AF_INET6, socket_getsockname() retournera l'adresse IP locale, en notation numérique (e.g. 27.0.0.1 ou fe80::1) dans le paramètre address, et si le paramètre optionnel port est présent, elle retournera aussi le port de la communication établie. Si le socket socket est de type AF_UNIX, socket_getsockname() retournera le chemin sur le système de fichiers (e.g. /var/run/daemon.sock) dans le paramètre address.
 * @param int      &$port    Si fourni, ce devra être le port associé à l'adresse.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. socket_getsockname() peut aussi retourner FALSE si le type du socket n'est ni AF_INET, ni AF_INET, ni AF_UNIX, auquel cas le dernier code d'erreur socket n'est pas modifié.
 *
 */
if(!function_exists('socket_getsocknameThis'))
{
    function socket_getsocknameThis($socket, &$addr, &$port = NULL)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$addr = (string)$addr;
		$port = (int)$port;

		return socket_getsockname($socket, $addr, $port);
    }
}

/**
 * socket_import_streamThis
 *
 * Importe un flux.
 *
 * @link http://php.net/manual/fr/function.socket-import-stream.php Documentation pour socket_import_stream.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param resource $stream    La ressource de flux à importer.
 *
 * @return resource	Retourne FALSE ou NULL en cas d'échec.
 *
 */
if(!function_exists('socket_import_streamThis'))
{
    function socket_import_streamThis($stream)
    {
		$stream = is_resource($stream) ? $stream : NULL;

		return socket_import_stream($stream);
    }
}

/**
 * socket_last_errorThis
 *
 * Lit la dernière erreur générée par un socket.
 *
 * @link http://php.net/manual/fr/function.socket-last-error.php Documentation pour socket_last_error.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create().
 *
 * @return int	Retourne le code erreur associé au socket.
 *
 */
if(!function_exists('socket_last_errorThis'))
{
    function socket_last_errorThis($socket = NULL)
    {
		$socket = is_resource($socket) ? $socket : NULL;

		return socket_last_error($socket);
    }
}

/**
 * socket_listenThis
 *
 * Attend une connexion sur un socket.
 *
 * @link http://php.net/manual/fr/function.socket-listen.php Documentation pour socket_listen.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create().
 * @param int      $backlog    Un nombre maximum de backlog connexions seront mises en attente de traitement. Si une demande de connexion arrive et que la queue est pleine, le client recevra une erreur indiquant ECONNREFUSED, ou, si le protocole de support accepte les retransmissions, la requête sera ignorée pour que les tentatives ultérieures finissent par réussir.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour obtenir un message d'erreur humainement lisible.
 *
 */
if(!function_exists('socket_listenThis'))
{
    function socket_listenThis($socket, $backlog = 0)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$backlog = (int)$backlog;

		return socket_listen($socket, $backlog);
    }
}

/**
 * socket_readThis
 *
 * Lit des données d'un socket.
 *
 * @link http://php.net/manual/fr/function.socket-read.php Documentation pour socket_read.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 * @param int      $length    Elle lit un maximum de length octets. Sinon, vous pouvez utiliser \r, \n ou \0 pour terminer la lecture (suivant la valeur choisie pour type, voir ci-dessous).
 * @param int      $type    Le paramètre optionnel type peut prendre l'une des valeurs constantes suivantes :
 *
 * @return string	socket_read() retourne les données sous forme de chaîne en cas de succès, et FALSE sinon (y compris si l'hôte distant a fermé la connexion). Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour obtenir un message d'erreur humainement lisible.
 *
 */
if(!function_exists('socket_readThis'))
{
    function socket_readThis($socket, $length, $type = PHP_BINARY_READ)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$length = (int)$length;
		$type = (int)$type;

		return socket_read($socket, $length, $type);
    }
}

/**
 * socket_recvThis
 *
 * Reçoit des données d'un socket connecté.
 *
 * @link http://php.net/manual/fr/function.socket-recv.php Documentation pour socket_recv.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    socket doit être une ressource de socket précédemment créée par socket_create().
 * @param string   &$buf    Les données reçues seront transmises dans buf. Si une erreur survient, si la connexion est fermée ou si aucune donnée n'est disponible, buf vaudra alors NULL.
 * @param int      $len    Jusqu'à len octets seront lus depuis l'hôte distant.
 * @param int      $flags    La valeur de flags peut être une combinaison des drapeaux suivants, groupés au moyen de l'opérateur binaire OR (|).
 *
 * @return int	socket_recv() retourne le nombre d'octets reçus, ou FALSE si une erreur est apparue. Le code d'erreur actuel peut être récupéré en appelant socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour avoir une représentation textuelle de l'erreur.
 *
 */
if(!function_exists('socket_recvThis'))
{
    function socket_recvThis($socket, &$buf, $len, $flags)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$buf = (string)$buf;
		$len = (int)$len;
		$flags = (int)$flags;

		return socket_recv($socket, $buf, $len, $flags);
    }
}

/**
 * socket_recvfromThis
 *
 * Reçoit des données d'un socket, connecté ou pas.
 *
 * @link http://php.net/manual/fr/function.socket-recvfrom.php Documentation pour socket_recvfrom.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Le paramètre socket doit être une ressource de socket créé par la fonction socket_create().
 * @param string   &$buf    Les données récupérées seront placées dans la variable spécifiée par ce paramètre.
 * @param int      $len    Jusqu'à len octets doivent être récupérés de l'hôte distant.
 * @param int      $flags    La valeur de ce paramètre peut être une combinaison des drapeaux suivants, joints par un OU binaire (|).
 * @param string   &$name    Si le socket est du type AF_UNIX, name sera le chemin vers ce fichier. Sinon, pour les sockets non-connectés, name est l'adresse IP de l'hôte distant, ou NULL si le socket est connecté.
 * @param int      &$port    Cet argument ne s'applique qu'aux sockets AF_INET et AF_INET6, et spécifie le port distant depuis lequel les données sont reçues. Si la socket est connectée, port vaudra NULL.
 *
 * @return int	socket_recvfrom() retourne le nombre d'octets reçus, ou FALSE si une erreur survient. Le code erreur actuel peut être retrouvé en appelant la fonction socket_last_error(). Ce code erreur peut être passé à la fonction socket_strerror() afin de récupérer une explication textuelle de l'erreur.
 *
 */
if(!function_exists('socket_recvfromThis'))
{
    function socket_recvfromThis($socket, &$buf, $len, $flags, &$name, &$port = NULL)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$buf = (string)$buf;
		$len = (int)$len;
		$flags = (int)$flags;
		$name = (string)$name;
		$port = (int)$port;

		return socket_recvfrom($socket, $buf, $len, $flags, $name, $port);
    }
}

/**
 * socket_selectThis
 *
 * Exécute l'appel système select() sur un tableau de sockets avec une durée d'expiration.
 *
 * @link http://php.net/manual/fr/function.socket-select.php Documentation pour socket_select.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param array    &$read    Les sockets listés dans le paramètre read seront surveillés en lecture : pour savoir quand ils sont disponibles en lecture (plus précisément, si une lecture ne va pas bloquer, en particulier, une ressource de socket a déjà atteint une fin de fichier, auquel cas socket_read() retournera une chaîne de taille zéro).
 * @param array    &$write    Les sockets listés dans write seront surveillés en écriture : pour voir si une écriture ne va pas bloquer.
 * @param array    &$except    Les sockets listés dans except seront surveillés pour leurs exceptions.
 * @param int      $tv_sec    Les paramètres tv_sec et tv_usec ensembles forment le paramètre timeout (durée de vie). Le timeout est la durée maximale de temps avant que socket_select() ne se termine. tv_sec peut être zéro, ce qui fera que socket_select() retournera immédiatement. C'est très pratique pour faire du polling (sondage). Si tv_sec est NULL (pas de timeout), socket_select() peut se bloquer indéfiniment.
 * @param int      $tv_usec
 *
 * @return int	En cas de succès, socket_select() retourne le nombre de sockets contenues dans les tableaux modifiés. Ce nombre peut être zéro si la durée maximale d'attente a été atteinte. En cas d'erreur, FALSE est retourné. Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error().
 *
 */
if(!function_exists('socket_selectThis'))
{
    function socket_selectThis(&$read, &$write, &$except, $tv_sec, $tv_usec = 0)
    {
		$read = (array)$read;
		$write = (array)$write;
		$except = (array)$except;
		$tv_sec = (int)$tv_sec;
		$tv_usec = (int)$tv_usec;

		return socket_select($read, $write, $except, $tv_sec, $tv_usec);
    }
}

/**
 * socket_sendThis
 *
 * Envoie des données à un socket connecté.
 *
 * @link http://php.net/manual/fr/function.socket-send.php Documentation pour socket_send.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 * @param string   $buf    Un buffer contenant les données qui seront envoyées sur l'hôte distant.
 * @param int      $len    Le nombre d'octets qui doivent être envoyés à l'hôte distant depuis le buffer buf.
 * @param int      $flags    La valeur du paramètre flags peut être une combinaison des drapeaux suivants, joints par un OU binaire (|).
 *
 * @return int	Retourne le nombre d'octets envoyés, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_sendThis'))
{
    function socket_sendThis($socket, $buf, $len, $flags)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$buf = (string)$buf;
		$len = (int)$len;
		$flags = (int)$flags;

		return socket_send($socket, $buf, $len, $flags);
    }
}

/**
 * socket_sendtoThis
 *
 * Envoie un message à un socket, qu'il soit connecté ou pas.
 *
 * @link http://php.net/manual/fr/function.socket-sendto.php Documentation pour socket_sendto.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create().
 * @param string   $buf    Les données à envoyer seront prises depuis le buffer buf.
 * @param int      $len    len octets depuis buf doivent être envoyés.
 * @param int      $flags    Peut être une combinaison des drapeaux suivants, joints par un OU binaire (|).
 * @param string   $addr    L'adresse IP de l'hôte distant.
 * @param int      $port    port est le numéro de port sur lequel les données doivent être envoyées.
 *
 * @return int	socket_sendto() retourne le nombre d'octets envoyés sur l'hôte distant ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_sendtoThis'))
{
    function socket_sendtoThis($socket, $buf, $len, $flags, $addr, $port = 0)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$buf = (string)$buf;
		$len = (int)$len;
		$flags = (int)$flags;
		$addr = (string)$addr;
		$port = (int)$port;

		return socket_sendto($socket, $buf, $len, $flags, $addr, $port);
    }
}

/**
 * socket_set_blockThis
 *
 * Met le socket en mode bloquant.
 *
 * @link http://php.net/manual/fr/function.socket-set-block.php Documentation pour socket_set_block.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_set_blockThis'))
{
    function socket_set_blockThis($socket)
    {
		$socket = is_resource($socket) ? $socket : NULL;

		return socket_set_block($socket);
    }
}

/**
 * socket_set_nonblockThis
 *
 * Sélectionne le mode non bloquant d'un pointeur de fichier.
 *
 * @link http://php.net/manual/fr/function.socket-set-nonblock.php Documentation pour socket_set_nonblock.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_set_nonblockThis'))
{
    function socket_set_nonblockThis($socket)
    {
		$socket = is_resource($socket) ? $socket : NULL;

		return socket_set_nonblock($socket);
    }
}

/**
 * socket_set_optionThis
 *
 * Modifie les options de socket.
 *
 * @link http://php.net/manual/fr/function.socket-set-option.php Documentation pour socket_set_option.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create() ou la fonction socket_accept().
 * @param int      $level    Le paramètre level spécifie la couche du protocole de l'option. Par exemple, pour modifier une option de la couche socket, un niveau égal à SOL_SOCKET va être utilisé. Les autres niveaux, comme TCP, peuvent être utilisés en spécifiant un numéro de protocole pour ce niveau. Les numéros de protocoles peuvent être utilisés en utilisant la fonction getprotobyname().
 * @param int      $optname    Les options disponibles sont les mêmes que pour la fonction socket_get_option().
 * @param mixed     $optval    La valeur de l'option.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_set_optionThis'))
{
    function socket_set_optionThis($socket, $level, $optname, $optval)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$level = (int)$level;
		$optname = (int)$optname;
		$optval = ($optval);
		return socket_set_option($socket, $level, $optname, $optval);
    }
}

/**
 * socket_shutdownThis
 *
 * Éteint un socket en lecture et/ou écriture.
 *
 * @link http://php.net/manual/fr/function.socket-shutdown.php Documentation pour socket_shutdown.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket    Une ressource de socket valide, créée par la fonction socket_create().
 * @param int      $how    La valeur du paramètre how peut être une des valeurs suivantes :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('socket_shutdownThis'))
{
    function socket_shutdownThis($socket, $how = 2)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$how = (int)$how;

		return socket_shutdown($socket, $how);
    }
}

/**
 * socket_strerrorThis
 *
 * Retourne une chaîne décrivant un message d'erreur.
 *
 * @link http://php.net/manual/fr/function.socket-strerror.php Documentation pour socket_strerror.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param int      $errno    Une numéro d'erreur de socket valide, comme produit par la fonction socket_last_error().
 *
 * @return string	Retourne le message d'erreur associé avec le paramètre errno.
 *
 */
if(!function_exists('socket_strerrorThis'))
{
    function socket_strerrorThis($errno)
    {
		$errno = (int)$errno;

		return socket_strerror($errno);
    }
}

/**
 * socket_writeThis
 *
 * Écrit dans un socket.
 *
 * @link http://php.net/manual/fr/function.socket-write.php Documentation pour socket_write.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $socket
 * @param string   $buffer    Le buffer à écrire.
 * @param int      $length    Le paramètre optionnel length peut spécifier explicitement la taille des données qui doivent être écrites. Si cette longueur est plus grande que la taille du buffer, elle sera ramenée automatiquement à la taille du buffer lui-même.
 *
 * @return int	socket_write() retourne le nombre d'octets qui ont pu être écrits dans le socket ou FALSE si une erreur survient. Le code d'erreur généré peut être obtenu en appelant la fonction socket_last_error(). Ce code d'erreur peut être passé à la fonction socket_strerror() pour obtenir un message d'erreur, humainement lisible.
 *
 */
if(!function_exists('socket_writeThis'))
{
    function socket_writeThis($socket, $buffer, $length = 0)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$buffer = (string)$buffer;
		$length = (int)$length;

		return socket_write($socket, $buffer, $length);
    }
}

/**
 * sortThis
 *
 * Trie un tableau.
 *
 * @link http://php.net/manual/fr/function.sort.php Documentation pour sort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param int      $sort_flags    Le paramètre optionnel sort_flags peut être utilisé pour modifier le comportement de tri en utilisant ces valeurs : Constantes de type de tri :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sortThis'))
{
    function sortThis(&$array, $sort_flags = SORT_REGULAR)
    {
		$array = (array)$array;
		$sort_flags = (int)$sort_flags;

		return sort($array, $sort_flags);
    }
}

/**
 * soundexThis
 *
 * Calcule la clé soundex.
 *
 * @link http://php.net/manual/fr/function.soundex.php Documentation pour soundex.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la clé soundex, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('soundexThis'))
{
    function soundexThis($str)
    {
		$str = (string)$str;

		return soundex($str);
    }
}

/**
 * spl_autoloadThis
 *
 * Implémentation par défaut d'__autoload().
 *
 * @link http://php.net/manual/fr/function.spl-autoload.php Documentation pour spl_autoload.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param string   $class_name    Le nom de la classe (et de l'espace de noms), en minuscule, à instancier.
 * @param string   $file_extensions    Par défaut, la fonction vérifie tous les chemins d'inclusion qui pourraient contenir des noms de fichier ajoutés par le nom de classe, utilisant les extensions .inc et .php.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('spl_autoloadThis'))
{
    function spl_autoloadThis($class_name, $file_extensions = NULL)
    {
		$class_name = (string)$class_name;
		$file_extensions = empty($file_extensions) ? (string)spl_autoload_extensions() : (string)$file_extensions;

		return spl_autoload($class_name, $file_extensions);
    }
}

/**
 * spl_autoload_callThis
 *
 * Essai toutes les fonctions __autoload() enregistrées pour charger la classe demandée.
 *
 * @link http://php.net/manual/fr/function.spl-autoload-call.php Documentation pour spl_autoload_call.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param string   $class_name    Le nom de la classe cherchée.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('spl_autoload_callThis'))
{
    function spl_autoload_callThis($class_name)
    {
		$class_name = (string)$class_name;

		return spl_autoload_call($class_name);
    }
}

/**
 * spl_autoload_extensionsThis
 *
 * Enregistre et retourne l'extension du fichier par défaut pour spl_autoload.
 *
 * @link http://php.net/manual/fr/function.spl-autoload-extensions.php Documentation pour spl_autoload_extensions.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param string   $file_extensions    Lorsqu'appelée sans argument, elle retourne simplement la liste courante des extensions, séparées par une virgule. Pour modifier cette liste, appelez simplement la fonction avec la nouvelle liste d'extensions à utiliser dans un chaîne de caractères, dont chaque extension sera séparée par une virgule.
 *
 * @return string	Une liste d'extensions de fichier, délimitée par une virgule pour spl_autoload().
 *
 */
if(!function_exists('spl_autoload_extensionsThis'))
{
    function spl_autoload_extensionsThis($file_extensions = NULL)
    {
		$file_extensions = (string)$file_extensions;

		return spl_autoload_extensions($file_extensions);
    }
}

/**
 * spl_autoload_functionsThis
 *
 * Retourne toutes les fonctions __autoload() enregistrées.
 *
 * @link http://php.net/manual/fr/function.spl-autoload-functions.php Documentation pour spl_autoload_functions.
 *
 * @version PHP 5 >= 5.1.2
 * @return array	Un tableau contenant toutes les fonctions __autoload enregistrées. Si la pile d'autoload n'est pas active, alors la valeur de retour sera FALSE. Si aucune fonction n'est enregistrée, la valeur retournée sera un tableau vide.
 *
 */
if(!function_exists('spl_autoload_functionsThis'))
{
    function spl_autoload_functionsThis()
    {
		return spl_autoload_functions();
    }
}

/**
 * spl_autoload_registerThis
 *
 * Enregistre une fonction comme __autoload().
 *
 * @link http://php.net/manual/fr/function.spl-autoload-register.php Documentation pour spl_autoload_register.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param callable     $autoload_function    La fonction __autoload() à enregistrer. Si aucun paramètre n'est fourni, alors, l'implémentation par défaut de la fonction spl_autoload() sera enregistrée.
 * @param bool     $throw    Ce paramètre spécifie si spl_autoload_register() doit lancer des exceptions lorsque le paramètre autoload_function n'a pu être enregistré.
 * @param bool     $prepend    Si ce paramètre vaut TRUE, spl_autoload_register() ajoutera la fonction au début de la pile de l'autoloader au lieu de l'ajouter à la fin de la pile.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('spl_autoload_registerThis'))
{
    function spl_autoload_registerThis($autoload_function = NULL, $throw = true, $prepend = false)
    {
		$autoload_function = is_callable($autoload_function) ? $autoload_function : NULL;
		$throw = (bool)$throw;
		$prepend = (bool)$prepend;

		return spl_autoload_register($autoload_function, $throw, $prepend);
    }
}

/**
 * spl_autoload_unregisterThis
 *
 * Efface une fonction donnée de l'implémentation __autoload().
 *
 * @link http://php.net/manual/fr/function.spl-autoload-unregister.php Documentation pour spl_autoload_unregister.
 *
 * @version PHP 5 >= 5.1.2
 *
 * @param mixed     $autoload_function    La fonction autoload à enregistrer.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('spl_autoload_unregisterThis'))
{
    function spl_autoload_unregisterThis($autoload_function)
    {
		$autoload_function = ($autoload_function);
		return spl_autoload_unregister($autoload_function);
    }
}

/**
 * spl_classesThis
 *
 * Retourne les classes SPL disponibles.
 *
 * @link http://php.net/manual/fr/function.spl-classes.php Documentation pour spl_classes.
 *
 * @version PHP 5
 * @return array	Retourne un tableau contenant les classes SPL actuellement disponibles.
 *
 */
if(!function_exists('spl_classesThis'))
{
    function spl_classesThis()
    {
		return spl_classes();
    }
}

/**
 * spl_object_hashThis
 *
 * Retourne l'identifiant de hashage pour un objet donné.
 *
 * @link http://php.net/manual/fr/function.spl-object-hash.php Documentation pour spl_object_hash.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param object   $obj    N'importe quel objet.
 *
 * @return string	Une chaîne de caractères unique pour chaque élément existant dans l'objet et sera toujours identique pour chaque objet.
 *
 */
if(!function_exists('spl_object_hashThis'))
{
    function spl_object_hashThis($obj)
    {
		$obj = (object)$obj;

		return spl_object_hash($obj);
    }
}

/**
 * splitThis
 *
 * Scinde une chaîne en un tableau, grâce à une expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.split.php Documentation pour split.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $pattern    Expression rationnelle sensible à la casse. Si vous voulez utiliser n'importe quel caractère spécial des expressions rationnelles, vous devez les échapper. Si vous pensez que split() (ou toute autre expression rationnelle) se comporte bizarrement, lisez d'abord le fichier regex.7, inclus dans le dossier regex/ de la distribution PHP . Il est au format manpage, et vous pourrez le lire avec une commande telle que man /usr/local/src/regex/regex.7.
 * @param string   $string    La chaîne d'entrée.
 * @param int      $limit    Si limit est défini, le tableau retourné contiendra un maximum de limit éléments avec le dernier élément contenant le reste de la chaîne string.
 *
 * @return array	Retourne un tableau de chaînes : chacune d'entre elle est une sous-chaîne de string délimitée par les occurrences trouvées de l'expression rationnelle pattern.
 *
 */
if(!function_exists('splitThis'))
{
    function splitThis($pattern, $string, $limit = -1)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$limit = (int)$limit;

		return split($pattern, $string, $limit);
    }
}

/**
 * splitiThis
 *
 * Scinde une chaîne en un tableau, grâce à une expression rationnelle.
 *
 * @link http://php.net/manual/fr/function.spliti.php Documentation pour spliti.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $pattern    Expression rationnelle insensible à la casse. Si vous voulez effectuer la césure avec un caractère qui est considéré comme spécial par les expressions rationnelles, vous devez d'abord l'échapper. Si vous pensez que la fonction spliti() (ou tout autre fonction regex) fait quelque chose de bizarre, lisez le fichier regex.7, inclus dans le sous-dossier regex/ de la distribution PHP. Ce fichier est au format man, vous devrez donc utiliser la commande man /usr/local/src/regex/regex.7 pour le lire.
 * @param string   $string    La chaîne d'entrée.
 * @param int      $limit    Si limit est défini, le tableau retourné contiendra un maximum de limit éléments, dont le dernier élément contient le reste de la chaîne string.
 *
 * @return array	Retourne un tableau de chaînes, dont chaque élément est une sous-chaîne de string, formée par la césure réalisée grâce l'expression rationnelle pattern.
 *
 */
if(!function_exists('splitiThis'))
{
    function splitiThis($pattern, $string, $limit = -1)
    {
		$pattern = (string)$pattern;
		$string = (string)$string;
		$limit = (int)$limit;

		return spliti($pattern, $string, $limit);
    }
}

/**
 * sprintfThis
 *
 * Retourne une chaîne formatée.
 *
 * @link http://php.net/manual/fr/function.sprintf.php Documentation pour sprintf.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    La chaîne de format est composée de zéro, une ou plusieurs directives : les caractères ordinaires (à l'exception de %) qui sont copiés directement dans le résultat, et des spécifications de conversion, qui exploitent chacune un des arguments passés après la chaîne de format. Ces formats s'appliquent à sprintf() et printf(). Chaque spécification de conversion est constituée d'un signe de pourcentage (%), suivi d'un ou plusieurs des éléments suivants, dans cet ordre : La chaîne de format supporte le numérotage et l'échange d'arguments. Par exemple :
 * @param mixed     $args
 * @param mixed     $item
 *
 * @return string	Retourne une chaîne de caractères créée suivant le format format.
 *
 */
if(!function_exists('sprintfThis'))
{
    function sprintfThis($format, $args = NULL, $args1 = NULL)
    {
		$format = (string)$format;
		$args = ($args);
		$args1 = ($args1);
		return sprintf($format, $args, $args1);
    }
}

/**
 * sql_regcaseThis
 *
 * Prépare une expression rationnelle pour effectuer une recherche insensible à la casse.
 *
 * @link http://php.net/manual/fr/function.sql-regcase.php Documentation pour sql_regcase.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne d'entrée.
 *
 * @return string	sql_regcase() retourne une expression rationnelle valide qui acceptera la chaîne string, et toutes les variantes majuscule/minuscule possibles de cette chaîne. Cette expression sera construite à partir de la chaîne string en remplaçant tous les caractères par des expressions entre crochets (des classes de caractères), contenant la lettre majuscule et minuscule. Les autres caractères ne sont pas modifiés.
 *
 */
if(!function_exists('sql_regcaseThis'))
{
    function sql_regcaseThis($string)
    {
		$string = (string)$string;

		return sql_regcase($string);
    }
}

/**
 * sqlite_create_functionThis
 *
 * Enregistre une fonction utilisateur "classique" UDF pour SQLite.
 *
 * @link http://php.net/manual/fr/function.sqlite-create-function.php Documentation pour sqlite_create_function.
 *
 * @version PHP 5 < 5.4.0
 * @version sqlite >= 1.0.0
 *
 * @param resource $dbhandle    La ressource de base de données SQLite; retournée par sqlite_open() lorsqu'utilisée de manière procédurale. Ce paramètre n'est pas requis si vous utilisez la méthode orientée objet.
 * @param string   $function_name    Le nom de la fonction utilisée dans les requêtes SQL.
 * @param callable     $callback    Fonction de procédure de rappel pour gérer les fonctions SQL définies.
 * @param int      $num_args    Conseil à l'analyseur SQLite si la fonction de procédure de rappel accepte un nombre prédéterminé d'arguments.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('sqlite_create_functionThis'))
{
    function sqlite_create_functionThis($dbhandle, $function_name, $callback, $num_args = -1)
    {
		$dbhandle = is_resource($dbhandle) ? $dbhandle : NULL;
		$function_name = (string)$function_name;
		$callback = is_callable($callback) ? $callback : NULL;
		$num_args = (int)$num_args;

		return sqlite_create_function($dbhandle, $function_name, $callback, $num_args);
    }
}

/**
 * sqlite_factoryThis
 *
 * Ouvre une base SQLite et crée un objet pour elle.
 *
 * @link http://php.net/manual/fr/function.sqlite-factory.php Documentation pour sqlite_factory.
 *
 * @version PHP 5 < 5.4.0
 *
 * @param string   $filename    Le nom du fichier de la base de données SQLite.
 * @param int      $mode    Le mode du fichier. Devrait être utilisé pour ouvrir une base de données en mode lecture seule. Actuellement, ce paramètre est ignoré par la bibliothèque sqlite. La valeur par défaut pour le mode est 0666 en octal et cela est la valeur recommandée.
 * @param string   &$error_message    Passée par référence et est affectée afin de contenir la description du message d'erreur qui explique pourquoi la base de données ne pouvait pas être ouverte s'il y avait une erreur.
 *
 * @return SQLiteDatabase	Retourne un objet SQLiteDatabase en cas de succès, NULL en cas d'erreur.
 *
 */
if(!function_exists('sqlite_factoryThis'))
{
    function sqlite_factoryThis($filename, $mode = 666, &$error_message = NULL)
    {
		$filename = (string)$filename;
		$mode = (int)$mode;
		$error_message = (string)$error_message;

		return sqlite_factory($filename, $mode, $error_message);
    }
}

/**
 * sqlite_fetch_column_typesThis
 *
 * Retourne un tableau des types de colonnes d'une certaine table.
 *
 * @link http://php.net/manual/fr/function.sqlite-fetch-column-types.php Documentation pour sqlite_fetch_column_types.
 *
 * @version PHP 5 < 5.4.0
 *
 * @param string   $table_name    Le nom de la table à interroger.
 * @param resource $dbhandle    La ressource de base de données SQLite; retournée par sqlite_open() lorsqu'utilisée de manière procédurale. Ce paramètre n'est pas requis si vous utilisez la méthode orientée objet.
 * @param int      $result_type    Le paramètre optionnel result_type accepte une constante et détermine comment le tableau retourné doit être indexé. L'utilisation de SQLITE_ASSOC retournera uniquement un tableau associatif (nom des champs) tandis que SQLITE_NUM retournera un tableau indexé numériquement (numéro ordinal des champs). SQLITE_ASSOC est la valeur par défaut pour cette fonction.
 *
 * @return array	Retourne un tableau des types de données des colonnes; FALSE en cas d'erreur.
 *
 */
if(!function_exists('sqlite_fetch_column_typesThis'))
{
    function sqlite_fetch_column_typesThis($table_name, $dbhandle, $result_type = SQLITE_ASSOC)
    {
		$table_name = (string)$table_name;
		$dbhandle = is_resource($dbhandle) ? $dbhandle : NULL;
		$result_type = (int)$result_type;

		return sqlite_fetch_column_types($table_name, $dbhandle, $result_type);
    }
}

/**
 * sqlite_fetch_objectThis
 *
 * Retourne la ligne suivante du jeu de résultats en tant qu'objet.
 *
 * @link http://php.net/manual/fr/function.sqlite-fetch-object.php Documentation pour sqlite_fetch_object.
 *
 * @version PHP 5 < 5.4.0
 *
 * @param resource $result
 * @param string   $class_name
 * @param array    $ctor_params
 * @param bool     $decode_binary
 *
 */
if(!function_exists('sqlite_fetch_objectThis'))
{
    function sqlite_fetch_objectThis($result, $class_name = NULL, $ctor_params = NULL, $decode_binary = true)
    {
		$result = is_resource($result) ? $result : NULL;
		$class_name = (string)$class_name;
		$ctor_params = (array)$ctor_params;
		$decode_binary = (bool)$decode_binary;

		return sqlite_fetch_object($result, $class_name, $ctor_params, $decode_binary);
    }
}

/**
 * sqlite_has_prevThis
 *
 * Retourne si oui ou non une ligne précédente est disponible.
 *
 * @link http://php.net/manual/fr/function.sqlite-has-prev.php Documentation pour sqlite_has_prev.
 *
 * @version PHP 5 < 5.4.0
 *
 * @param resource $result    La ressource de résultat SQLite. Ce paramètre n'est pas requis lorsque vous utilisez la méthode orientée objet.
 *
 * @return bool	Retourne TRUE s'il y a d'autres lignes précédentes de résultat à lire dans la ressource result ou FALSE sinon.
 *
 */
if(!function_exists('sqlite_has_prevThis'))
{
    function sqlite_has_prevThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sqlite_has_prev($result);
    }
}

/**
 * sqlite_keyThis
 *
 * Retourne l'index de la ligne courante.
 *
 * @link http://php.net/manual/fr/function.sqlite-key.php Documentation pour sqlite_key.
 *
 * @version PHP 5 >= 5.1.0 and < 5.4.0
 * @return int	Retourne l'index de la ligne courante du jeu de résultats bufferisé result.
 *
 */
if(!function_exists('sqlite_keyThis'))
{
    function sqlite_keyThis()
    {
		return sqlite_key();
    }
}

/**
 * sqlite_prevThis
 *
 * Se positionne sur le numéro de ligne précédent du jeu de résultats.
 *
 * @link http://php.net/manual/fr/function.sqlite-prev.php Documentation pour sqlite_prev.
 *
 * @version PHP 5 < 5.4.0
 *
 * @param resource $result    La ressource de résultat SQLite. Ce paramètre n'est pas requis lorsque vous utilisez la méthode orientée objet.
 *
 * @return bool	Retourne TRUE en cas de succès ou FALSE s'il n'y a plus de ligne précédente.
 *
 */
if(!function_exists('sqlite_prevThis'))
{
    function sqlite_prevThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sqlite_prev($result);
    }
}

/**
 * sqlite_validThis
 *
 * Retourne si oui ou non il reste des lignes disponibles.
 *
 * @link http://php.net/manual/fr/function.sqlite-valid.php Documentation pour sqlite_valid.
 *
 * @version PHP 5 < 5.4.0
 *
 * @param resource $result    La ressource de résultat SQLite. Ce paramètre n'est pas requis lorsque vous utilisez la méthode orientée objet.
 *
 * @return bool	Retourne TRUE s'il y a encore des lignes disponibles de la ressource result ou FALSE autrement.
 *
 */
if(!function_exists('sqlite_validThis'))
{
    function sqlite_validThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sqlite_valid($result);
    }
}

/**
 * sqlsrv_begin_transactionThis
 *
 * Commence une transaction.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-begin-transaction.php Documentation pour sqlsrv_begin_transaction.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    La ressource de connexion retournée par un appel à la fonction sqlsrv_connect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_begin_transactionThis'))
{
    function sqlsrv_begin_transactionThis($conn)
    {
		$conn = is_resource($conn) ? $conn : NULL;

		return sqlsrv_begin_transaction($conn);
    }
}

/**
 * sqlsrv_cancelThis
 *
 * Annule une requête.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-cancel.php Documentation pour sqlsrv_cancel.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    La ressource de la requête à annuler.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_cancelThis'))
{
    function sqlsrv_cancelThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_cancel($stmt);
    }
}

/**
 * sqlsrv_client_infoThis
 *
 * Retourne les informations sur le client ainsi que sur la connexion spécifiée.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-client-info.php Documentation pour sqlsrv_client_info.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    La connexion sur laquelle on souhaite des informations.
 *
 * @return array	Retourne un tableau associatif dont les clés sont décrites dans la table ci-dessous. Retourne FALSE sinon.
 *
 */
if(!function_exists('sqlsrv_client_infoThis'))
{
    function sqlsrv_client_infoThis($conn)
    {
		$conn = is_resource($conn) ? $conn : NULL;

		return sqlsrv_client_info($conn);
    }
}

/**
 * sqlsrv_closeThis
 *
 * Clôture une connexion établie et libère les ressources associées.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-close.php Documentation pour sqlsrv_close.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    La connexion à fermer.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_closeThis'))
{
    function sqlsrv_closeThis($conn)
    {
		$conn = is_resource($conn) ? $conn : NULL;

		return sqlsrv_close($conn);
    }
}

/**
 * sqlsrv_commitThis
 *
 * Valide une transaction commencée avec la fonction sqlsrv_begin_transaction().
 *
 * @link http://php.net/manual/fr/function.sqlsrv-commit.php Documentation pour sqlsrv_commit.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    La connexion sur laquelle la transaction va être validée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_commitThis'))
{
    function sqlsrv_commitThis($conn)
    {
		$conn = is_resource($conn) ? $conn : NULL;

		return sqlsrv_commit($conn);
    }
}

/**
 * sqlsrv_configureThis
 *
 * Modifie la configuration du gestionnaire d'erreurs et d'historisations du driver.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-configure.php Documentation pour sqlsrv_configure.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param string   $setting    Le nom de la configuration à définir. Les valeurs possibles sont "WarningsReturnAsErrors", "LogSubsystems", et "LogSeverity".
 * @param mixed     $value    La valeur de la configuration à définir. La table suivante montre les valeurs possibles :
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_configureThis'))
{
    function sqlsrv_configureThis($setting, $value)
    {
		$setting = (string)$setting;
		$value = ($value);
		return sqlsrv_configure($setting, $value);
    }
}

/**
 * sqlsrv_connectThis
 *
 * Ouvre une connexion sur une base de données Microsoft SQL Server.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-connect.php Documentation pour sqlsrv_connect.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param string   $serverName    Le nom du serveur sur lequel nous souhaitons réaliser une connexion. Pour se connecter sur une instance particulière, faites suivre le nom du serveur, puis un anti- slash, puis le nom de l'instance (i.e. serverName\sqlexpress).
 * @param array    $connectionInfo    Un tableau associatif spécifiant les options pour la connexion sur le serveur. Si les valeurs des clés UID et PWD ne sont pas spécifiées, la connexion tentera d'utiliser l'authentification Windows. Pour une liste complète des clés supportées, reportez-vous aux » options de connexion SQLSRV.
 *
 * @return resource	Une ressource de connexion. Si la connexion n'a pu être ouverte, FALSE sera retourné.
 *
 */
if(!function_exists('sqlsrv_connectThis'))
{
    function sqlsrv_connectThis($serverName, $connectionInfo = NULL)
    {
		$serverName = (string)$serverName;
		$connectionInfo = (array)$connectionInfo;

		return sqlsrv_connect($serverName, $connectionInfo);
    }
}

/**
 * sqlsrv_errorsThis
 *
 * Retourne une erreur ainsi que certaines informations sur la dernière opération SQLSRV effectuée.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-errors.php Documentation pour sqlsrv_errors.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param int      $errorsOrWarnings    Détermine si l'on doit retourner des informations sur l'erreur, des informations sur l'alerte, ou les deux. Si ce paramètre n'est pas fourni, les deux informations seront retournées. Voici la liste des valeurs supportées par ce paramètre : SQLSRV_ERR_ALL, SQLSRV_ERR_ERRORS, SQLSRV_ERR_WARNINGS.
 *
 * @return mixed	Si une erreur et/ou une alerte survient lors de la dernière opération SQLSRV, un tableau de tableaux contenant les informations de l'erreur sera retourné. Si aucune erreur ni alerte ne survient, NULL sera retourné. Le tableau suivant décrit la structure du tableau retourné :
 *
 */
if(!function_exists('sqlsrv_errorsThis'))
{
    function sqlsrv_errorsThis($errorsOrWarnings = NULL)
    {
		$errorsOrWarnings = (int)$errorsOrWarnings;

		return sqlsrv_errors($errorsOrWarnings);
    }
}

/**
 * sqlsrv_executeThis
 *
 * Exécute une requête préparée avec la fonction sqlsrv_prepare().
 *
 * @link http://php.net/manual/fr/function.sqlsrv-execute.php Documentation pour sqlsrv_execute.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête retournée par la fonction sqlsrv_prepare().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_executeThis'))
{
    function sqlsrv_executeThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_execute($stmt);
    }
}

/**
 * sqlsrv_fetchThis
 *
 * Rend la prochaine ligne d'un jeu de résultats disponible pour lecture.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-fetch.php Documentation pour sqlsrv_fetch.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête créée par l'exécution de la fonction sqlsrv_query() ou de la fonction sqlsrv_execute().
 * @param int      $row    La ligne à traiter. Ce paramètre ne peut être utilisé que si la requête spécifiée a été préparée avec un curseur scrollable. Dans ce cas, ce paramètre peut prendre une des valeurs suivantes :
 * @param int      $offset    Spécifie la ligne à traiter si le paramètre row est défini à SQLSRV_SCROLL_ABSOLUTE ou SQLSRV_SCROLL_RELATIVE. Notez que la première ligne d'un jeu de résultats a l'index 0.
 *
 * @return mixed	Retourne TRUE si la prochaine ligne du jeu de résultats a été récupérée avec succès, FALSE si une erreur survient et NULL s'il n'y a plus de ligne à récupérer dans le jeu de résultats.
 *
 */
if(!function_exists('sqlsrv_fetchThis'))
{
    function sqlsrv_fetchThis($stmt, $row = NULL, $offset = NULL)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;
		$row = (int)$row;
		$offset = (int)$offset;

		return sqlsrv_fetch($stmt, $row, $offset);
    }
}

/**
 * sqlsrv_fetch_arrayThis
 *
 * Retourne une ligne sous la forme d'un tableau.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-fetch-array.php Documentation pour sqlsrv_fetch_array.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête retournée par sqlsrv_query ou sqlsrv_execute.
 * @param int      $fetchType    Une constante prédéfinie spécifiant le type de tableau à retourner. Les valeurs possibles sont SQLSRV_FETCH_ASSOC, SQLSRV_FETCH_NUMERIC, et SQLSRV_FETCH_BOTH (la valeur par défaut). Le type de récupération SQLSRV_FETCH_ASSOC ne doit pas être utilisé lors du traitement d'un jeu de résultats possédant des colonnes dont le nom est identique.
 * @param int      $row    Spécifie la ligne à traiter dans le jeu de résultats utilisant un curseur scrollable. Les valeurs possibles sont SQLSRV_SCROLL_NEXT, SQLSRV_SCROLL_PRIOR, SQLSRV_SCROLL_FIRST, SQLSRV_SCROLL_LAST, SQLSRV_SCROLL_ABSOLUTE et, SQLSRV_SCROLL_RELATIVE (la valeur par défaut). Lorsque ce paramètre est spécifié, le paramètre fetchType doit également être explicitement défini.
 * @param int      $offset    Spécifie la ligne à accéder si le paramètre row est défini à SQLSRV_SCROLL_ABSOLUTE ou SQLSRV_SCROLL_RELATIVE. Notez que la première ligne du jeu de résultats a comme index 0.
 *
 * @return array	Retourne un tableau en cas de succès, NULL s'il n'y a plus de ligne à retourner, et FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_fetch_arrayThis'))
{
    function sqlsrv_fetch_arrayThis($stmt, $fetchType = NULL, $row = NULL, $offset = NULL)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;
		$fetchType = (int)$fetchType;
		$row = (int)$row;
		$offset = (int)$offset;

		return sqlsrv_fetch_array($stmt, $fetchType, $row, $offset);
    }
}

/**
 * sqlsrv_fetch_objectThis
 *
 * Récupère la prochaine ligne de données du jeu de résultats sous la forme d'un objet.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-fetch-object.php Documentation pour sqlsrv_fetch_object.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête créée par la fonction sqlsrv_query() ou la fonction sqlsrv_execute().
 * @param string   $className    Le nom de la classe à instancier. Si aucun nom de classe n'est spécifié, stdClass sera instanciée.
 * @param array    $ctorParams    Valeurs à passer au constructeur de la classe spécifiée. Si le constructeur de la classe spécifiée prend des paramètres, le tableau ctorParams doit être fourni.
 * @param int      $row    La ligne à traiter. Ce paramètre ne peut être utilisé que si la requête spécifié a été préparée avec un curseur scrollable. Dans ce cas, ce paramètre peut prend un des valeurs suivantes :
 * @param int      $offset    Spécifie la ligne à traiter si le paramètre row est défini à la valeur SQLSRV_SCROLL_ABSOLUTE ou SQLSRV_SCROLL_RELATIVE. Notez que la première ligne du jeu de résultats a un index de 0.
 *
 * @return mixed	Retourne un objet en cas de succès, NULL s'il n'y a plus de ligne à retourner, et FALSE si une erreur survient ou si la classe spécifiée n'existe pas.
 *
 */
if(!function_exists('sqlsrv_fetch_objectThis'))
{
    function sqlsrv_fetch_objectThis($stmt, $className = NULL, $ctorParams = NULL, $row = NULL, $offset = NULL)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;
		$className = (string)$className;
		$ctorParams = (array)$ctorParams;
		$row = (int)$row;
		$offset = (int)$offset;

		return sqlsrv_fetch_object($stmt, $className, $ctorParams, $row, $offset);
    }
}

/**
 * sqlsrv_field_metadataThis
 *
 * Récupère les données méta pour les champs d'une requête préparée par la fonction sqlsrv_prepare() ou la fonction sqlsrv_query().
 *
 * @link http://php.net/manual/fr/function.sqlsrv-field-metadata.php Documentation pour sqlsrv_field_metadata.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête depuis laquelle les données méta seront récupérées.
 *
 * @return mixed	Retourne un tableau de tableaux en cas de succès, FALSE si une erreur survient. Chaque tableau retourné est décrit dans la table suivante :
 *
 */
if(!function_exists('sqlsrv_field_metadataThis'))
{
    function sqlsrv_field_metadataThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_field_metadata($stmt);
    }
}

/**
 * sqlsrv_free_stmtThis
 *
 * Libère toutes les ressources de la requête spécifiée.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-free-stmt.php Documentation pour sqlsrv_free_stmt.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    La requête dont les ressources seront libérées. Notez que NULL est une valeur de paramètre valide. Cette valeur permet à la fonction d'être appelée à plusieurs reprises dans un script.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_free_stmtThis'))
{
    function sqlsrv_free_stmtThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_free_stmt($stmt);
    }
}

/**
 * sqlsrv_get_configThis
 *
 * Retourne la valeur de la configuration spécifiée.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-get-config.php Documentation pour sqlsrv_get_config.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param string   $setting    Le nom de la configuration pour laquelle la valeur sera retournée. Pour une liste des configurations, voir la fonction sqlsrv_configure().
 *
 * @return mixed	Retourne la valeur de la configuration demandée. Si une configuration invalide est fournie, FALSE sera retourné.
 *
 */
if(!function_exists('sqlsrv_get_configThis'))
{
    function sqlsrv_get_configThis($setting)
    {
		$setting = (string)$setting;

		return sqlsrv_get_config($setting);
    }
}

/**
 * sqlsrv_get_fieldThis
 *
 * Récupère les données du champ depuis la ligne actuellement sélectionnée.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-get-field.php Documentation pour sqlsrv_get_field.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête retournée par la fonction sqlsrv_query() ou la fonction sqlsrv_execute().
 * @param int      $fieldIndex    L'index du champ à récupérer. Les indices des champs commencent à 0. Les champs doit être lus dans l'ordre, i.e. si vous accédez au champ d'indice 1, alors le champ d'indice 0 ne sera plus disponible.
 * @param int      $getAsType    Le type de données PHP pour les données du champ retourné. Si ce paramètre n'est pas défini, les données du champ seront retournées sous la forme d'un type de données PHP par défaut. Pour plus d'informations sur les types de données PHP par défaut, reportez-vous à la section sur » les types de données PHP par défaut de la documentation Microsoft SQLSRV.
 *
 * @return mixed	Retourne les données depuis le champ spécifié en cas de succès. Retourne FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_get_fieldThis'))
{
    function sqlsrv_get_fieldThis($stmt, $fieldIndex, $getAsType = NULL)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;
		$fieldIndex = (int)$fieldIndex;
		$getAsType = (int)$getAsType;

		return sqlsrv_get_field($stmt, $fieldIndex, $getAsType);
    }
}

/**
 * sqlsrv_has_rowsThis
 *
 * Indique si la requête spécifiée contient des lignes.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-has-rows.php Documentation pour sqlsrv_has_rows.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête retournée par la fonction sqlsrv_query() ou la fonction sqlsrv_execute().
 *
 * @return bool	Retourne TRUE si la requête spécifiée contient des lignes, FALSE si elle n'en contient pas ou bien si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_has_rowsThis'))
{
    function sqlsrv_has_rowsThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_has_rows($stmt);
    }
}

/**
 * sqlsrv_next_resultThis
 *
 * Rend actif le prochain résultat de la requête spécifiée.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-next-result.php Documentation pour sqlsrv_next_result.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    La requête sur laquelle le prochain résultat sera appelé.
 *
 * @return mixed	Retourne TRUE si le prochain résultat a été récupéré avec succès, FALSE si une erreur survient, et NULL s'il n'y a plus de résultat à récupérer.
 *
 */
if(!function_exists('sqlsrv_next_resultThis'))
{
    function sqlsrv_next_resultThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_next_result($stmt);
    }
}

/**
 * sqlsrv_num_fieldsThis
 *
 * Récupère le nombre de champs (colonnes) dans une requête.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-num-fields.php Documentation pour sqlsrv_num_fields.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    La requête depuis laquelle le nombre de champs est retournée. La fonction sqlsrv_num_fields() peut être appelée sur une requête avant ou après l'exécution de la requête.
 *
 * @return mixed	Retourne le nombre de champs en cas de succès. Retourne FALSE sinon.
 *
 */
if(!function_exists('sqlsrv_num_fieldsThis'))
{
    function sqlsrv_num_fieldsThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_num_fields($stmt);
    }
}

/**
 * sqlsrv_num_rowsThis
 *
 * Récupère le nombre de lignes d'un jeu de résultats.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-num-rows.php Documentation pour sqlsrv_num_rows.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    La requête depuis laquelle le nombre total de lignes est retourné. La ressource de requête doit avoir été créée avec un curseur statique ou keyset. Pour plus d'informations, reportez-vous aux fonctions sqlsrv_query(), sqlsrv_prepare(), ou au chapitre » Spécifier un type de curseur et sélectionner des lignes dans la documentation de Microsoft SQLSRV.
 *
 * @return mixed	Retourne le nombre total de lignes récupérées en cas de succès, et FALSE si une erreur survient. Si un curseur précédent (par défaut), ou un curseur dynamique est utilisé, FALSE sera retourné.
 *
 */
if(!function_exists('sqlsrv_num_rowsThis'))
{
    function sqlsrv_num_rowsThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_num_rows($stmt);
    }
}

/**
 * sqlsrv_prepareThis
 *
 * Prépare une requête pour exécution.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-prepare.php Documentation pour sqlsrv_prepare.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    Une ressource de connexion retournée par la fonction sqlsrv_connect().
 * @param string   $sql    La chaîne qui définit la requête à préparer et à exécuter.
 * @param array    $params    Un tableau spécifiant les informations de paramètres lors de l'exécution d'une requête contenant des paramètres. Les éléments du tableau peuvent être n'importe lequel de ceux qui suivent :
 * @param array    $options    Un tableau spécifiant les options de propriétés de la requête. Les clés supportées sont décrites dans le tableau suivant :
 *
 * @return mixed	Retourne une ressource de requête en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_prepareThis'))
{
    function sqlsrv_prepareThis($conn, $sql, $params = NULL, $options = NULL)
    {
		$conn = is_resource($conn) ? $conn : NULL;
		$sql = (string)$sql;
		$params = (array)$params;
		$options = (array)$options;

		return sqlsrv_prepare($conn, $sql, $params, $options);
    }
}

/**
 * sqlsrv_queryThis
 *
 * Prépare et exécute une requête.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-query.php Documentation pour sqlsrv_query.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    Une ressource de connexion retournée par la fonction sqlsrv_connect().
 * @param string   $sql    La chaîne qui définit la requête à préparer et à exécuter.
 * @param array    $params    Un tableau spécifiant les paramètres lors de l'exécution d'une requête les autorisant. Les éléments du tableau peuvent être n'importe lequel parmi la liste ci-dessous :
 * @param array    $options    Un tableau spécifiant les options de la requête. Les clés supportés sont décrites dans le tableau suivant :
 *
 * @return mixed	Retourne une ressource de requête en cas de succès, et FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_queryThis'))
{
    function sqlsrv_queryThis($conn, $sql, $params = NULL, $options = NULL)
    {
		$conn = is_resource($conn) ? $conn : NULL;
		$sql = (string)$sql;
		$params = (array)$params;
		$options = (array)$options;

		return sqlsrv_query($conn, $sql, $params, $options);
    }
}

/**
 * sqlsrv_rollbackThis
 *
 * Annule une transaction qui a été commencée grâce à la fonction sqlsrv_begin_transaction().
 *
 * @link http://php.net/manual/fr/function.sqlsrv-rollback.php Documentation pour sqlsrv_rollback.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    La ressource de connexion retournée par un appel à la fonction sqlsrv_connect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sqlsrv_rollbackThis'))
{
    function sqlsrv_rollbackThis($conn)
    {
		$conn = is_resource($conn) ? $conn : NULL;

		return sqlsrv_rollback($conn);
    }
}

/**
 * sqlsrv_rows_affectedThis
 *
 * Retourne le nombre de lignes modifiées par la dernière requête de type INSERT, UPDATE, ou DELETE.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-rows-affected.php Documentation pour sqlsrv_rows_affected.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    La ressource de requête exécutée.
 *
 * @return int	Retourne le nombre de lignes affectées par la dernière requête INSERT, UPDATE, ou DELETE. Si aucune ligne n'est affectée, 0 sera retourné. Si le nombre de lignes affectées ne peut être déterminé, -1 sera retourné. Si une erreur survient, FALSE sera retourné.
 *
 */
if(!function_exists('sqlsrv_rows_affectedThis'))
{
    function sqlsrv_rows_affectedThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_rows_affected($stmt);
    }
}

/**
 * sqlsrv_send_stream_dataThis
 *
 * Envoie des données depuis le flux vers le serveur.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-send-stream-data.php Documentation pour sqlsrv_send_stream_data.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stmt    Une ressource de requête retournée par la fonction sqlsrv_query() ou par la fonction sqlsrv_execute().
 *
 * @return bool	Retourne TRUE s'il y a encore des données à envoyer, et FALSE s'il n'y en a plus.
 *
 */
if(!function_exists('sqlsrv_send_stream_dataThis'))
{
    function sqlsrv_send_stream_dataThis($stmt)
    {
		$stmt = is_resource($stmt) ? $stmt : NULL;

		return sqlsrv_send_stream_data($stmt);
    }
}

/**
 * sqlsrv_server_infoThis
 *
 * Retourne des informations sur le serveur.
 *
 * @link http://php.net/manual/fr/function.sqlsrv-server-info.php Documentation pour sqlsrv_server_info.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $conn    La ressource de connexion qui connecte le client et le serveur.
 *
 * @return array	Retourne un tableau tel que décrit dans la table suivante :
 *
 */
if(!function_exists('sqlsrv_server_infoThis'))
{
    function sqlsrv_server_infoThis($conn)
    {
		$conn = is_resource($conn) ? $conn : NULL;

		return sqlsrv_server_info($conn);
    }
}

/**
 * sqrtThis
 *
 * Racine carrée.
 *
 * @link http://php.net/manual/fr/function.sqrt.php Documentation pour sqrt.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	La racine carrée de arg ou la valeur spéciale NAN pour les nombres négatifs.
 *
 */
if(!function_exists('sqrtThis'))
{
    function sqrtThis($arg)
    {
		$arg = (float)$arg;

		return sqrt($arg);
    }
}

/**
 * srandThis
 *
 * Initialise le générateur de nombres aléatoires.
 *
 * @link http://php.net/manual/fr/function.srand.php Documentation pour srand.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $seed    Valeur d'initialisation, optionnelle
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('srandThis'))
{
    function srandThis($seed = NULL)
    {
		$seed = (int)$seed;

		return srand($seed);
    }
}

/**
 * sscanfThis
 *
 * Analyse une chaîne à l'aide d'un format.
 *
 * @link http://php.net/manual/fr/function.sscanf.php Documentation pour sscanf.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $str    La chaîne à analyser.
 * @param string   $format    Le format interprété pour la chaîne str, qui est décrit dans la documentation de la fonction sprintf() avec les différences suivantes :
 * @param mixed     &$item    Optionnellement, vous pouvez passer des variables dans ce paramètre, par référence qui contiendront les valeurs de l'analyse.
 *
 * @return mixed	Si seulement deux paramètres sont fournis, les valeurs trouvées seront retournées sous forme de tableau. Sinon, si le paramètre optionnel sont fourni, la fonction retournera le nombre de valeurs assignées. Le paramètre optionnel doit être passé par référence.
 *
 */
if(!function_exists('sscanfThis'))
{
    function sscanfThis($str, $format, &$format1 = NULL)
    {
		$str = (string)$str;
		$format = (string)$format;
		$format1 = ($format1);
		return sscanf($str, $format, $format1);
    }
}

/**
 * statThis
 *
 * Renvoie les informations à propos d'un fichier.
 *
 * @link http://php.net/manual/fr/function.stat.php Documentation pour stat.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le chemin vers le fichier.
 *
 */
if(!function_exists('statThis'))
{
    function statThis($filename)
    {
		$filename = (string)$filename;

		return stat($filename);
    }
}

/**
 * str_getcsvThis
 *
 * Analyse une chaîne de caractères CSV dans un tableau.
 *
 * @link http://php.net/manual/fr/function.str-getcsv.php Documentation pour str_getcsv.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param string   $input    La chaîne à analyser.
 * @param string   $delimiter    Le délimiteur de champ (un seul caractère).
 * @param string   $enclosure    Le caractère d'encadrement (un seul caractère).
 * @param string   $escape    Le caractère de protection (un seul caractère). Par défaut, c'est l'antislash. (\)
 *
 * @return array	Retourne un tableau contenant les champs lus.
 *
 */
if(!function_exists('str_getcsvThis'))
{
    function str_getcsvThis($input, $delimiter = ',', $enclosure = '"', $escape = '\\')
    {
		$input = (string)$input;
		$delimiter = (string)$delimiter;
		$enclosure = (string)$enclosure;
		$escape = (string)$escape;

		return str_getcsv($input, $delimiter, $enclosure, $escape);
    }
}

/**
 * str_ireplaceThis
 *
 * Version insensible à la casse de str_replace().
 *
 * @link http://php.net/manual/fr/function.str-ireplace.php Documentation pour str_ireplace.
 *
 * @version PHP 5
 *
 * @param mixed     $search    La valeur à chercher, connue aussi sous le nom de needle. Un tableau peut être utilisé pour désigner plusieurs needles.
 * @param mixed     $replace    La valeur de remplacement utilisée pour chaque valeur trouvée dans search. Un tableau peut être utilisé pour désigner plusieurs remplacements.
 * @param mixed     $subject    Une chaîne de caractères ou un tableau dans lequel la recherche s'effectue, aussi connu sous le nom de haystack. Si subject est un tableau, le remplacement est effectué sur chacun des éléments du sujet subject, et la valeur retournée est aussi un tableau.
 * @param int      &$count    Si fournie, cette variable contiendra le nombre de remplacements effectués.
 *
 * @return mixed	Retourne une chaîne ou un tableau de remplacement.
 *
 */
if(!function_exists('str_ireplaceThis'))
{
    function str_ireplaceThis($search, $replace, $subject, &$count = NULL)
    {
		$search = ($search);
		$replace = ($replace);
		$subject = ($subject);
		$count = (int)$count;

		return str_ireplace($search, $replace, $subject, $count);
    }
}

/**
 * str_padThis
 *
 * Complète une chaîne jusqu'à une taille donnée.
 *
 * @link http://php.net/manual/fr/function.str-pad.php Documentation pour str_pad.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $input    La chaîne d'entrée.
 * @param int      $pad_length    Si la valeur de pad_length est négative, plus petite que, ou égale à la taille courante de la chaîne input, input est retournée inchangée.
 * @param string   $pad_string
 * @param int      $pad_type    L'argument optionnel pad_type peut être l'une des constantes suivantes : STR_PAD_RIGHT, STR_PAD_LEFT, ou STR_PAD_BOTH. Si pad_type n'est pas spécifié, il prend la valeur par défaut de STR_PAD_RIGHT.
 *
 * @return string	Retourne la chaîne complétée.
 *
 */
if(!function_exists('str_padThis'))
{
    function str_padThis($input, $pad_length, $pad_string = " ", $pad_type = STR_PAD_RIGHT)
    {
		$input = (string)$input;
		$pad_length = (int)$pad_length;
		$pad_string = (string)$pad_string;
		$pad_type = (int)$pad_type;

		return str_pad($input, $pad_length, $pad_string, $pad_type);
    }
}

/**
 * str_repeatThis
 *
 * Répète une chaîne.
 *
 * @link http://php.net/manual/fr/function.str-repeat.php Documentation pour str_repeat.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $input    La chaîne à répéter.
 * @param int      $multiplier    Nombre de fois où la chaîne input doit être multipliée. multiplier doit être positif ou nul. Si multiplier vaut 0, la fonction retourne la chaîne vide.
 *
 * @return string	Retourne la chaîne, répétée multiplier fois.
 *
 */
if(!function_exists('str_repeatThis'))
{
    function str_repeatThis($input, $multiplier)
    {
		$input = (string)$input;
		$multiplier = (int)$multiplier;

		return str_repeat($input, $multiplier);
    }
}

/**
 * str_replaceThis
 *
 * Remplace toutes les occurrences dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.str-replace.php Documentation pour str_replace.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $search    La valeur à chercher, autrement connue comme le masque. Un tableau peut être utilisé pour désigner plusieurs masques.
 * @param mixed     $replace    La valeur de remplacement à substituer aux valeurs trouvées. Un tableau peut être utilisé pour désigner plusieurs valeurs de remplacement.
 * @param mixed     $subject    La chaîne de caractères ou le tableau sur lequel on va effectuer la recherche et le remplacement, aussi connu sous le nom de haystack. Si subject est un tableau, alors le remplacement se fera sur chaque élément de celui-ci, et la valeur retournée sera aussi un tableau.
 * @param int      &$count    Si fournie, cette variable contiendra le nombre de remplacements effectués.
 *
 * @return mixed	Cette fonction retourne une chaîne, ou un tableau, contenant les valeurs remplacées.
 *
 */
if(!function_exists('str_replaceThis'))
{
    function str_replaceThis($search, $replace, $subject, &$count = NULL)
    {
		$search = ($search);
		$replace = ($replace);
		$subject = ($subject);
		$count = (int)$count;

		return str_replace($search, $replace, $subject, $count);
    }
}

/**
 * str_rot13This
 *
 * Effectue une transformation ROT13.
 *
 * @link http://php.net/manual/fr/function.str-rot13.php Documentation pour str_rot13.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la version ROT13 de la chaîne fournie.
 *
 */
if(!function_exists('str_rot13This'))
{
    function str_rot13This($str)
    {
		$str = (string)$str;

		return str_rot13($str);
    }
}

/**
 * str_shuffleThis
 *
 * Mélange les caractères d'une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.str-shuffle.php Documentation pour str_shuffle.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne mélangée.
 *
 */
if(!function_exists('str_shuffleThis'))
{
    function str_shuffleThis($str)
    {
		$str = (string)$str;

		return str_shuffle($str);
    }
}

/**
 * str_splitThis
 *
 * Convertit une chaîne de caractères en tableau.
 *
 * @link http://php.net/manual/fr/function.str-split.php Documentation pour str_split.
 *
 * @version PHP 5
 *
 * @param string   $string    La chaîne d'entrée.
 * @param int      $split_length    Longueur maximale de chaque élément.
 *
 * @return array	Si le paramètre optionnel split_length est spécifié, le tableau retourné sera découpé en sous-parties, chacune de taille split_length, sinon, chaque sous-partie aura la taille d'un caractère.
 *
 */
if(!function_exists('str_splitThis'))
{
    function str_splitThis($string, $split_length = 1)
    {
		$string = (string)$string;
		$split_length = (int)$split_length;

		return str_split($string, $split_length);
    }
}

/**
 * str_word_countThis
 *
 * Compte le nombre de mots utilisés dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.str-word-count.php Documentation pour str_word_count.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $string    La chaîne de caractères
 * @param int      $format    Spécifie la valeur de retour de cette fonction. Les valeurs actuellement supportées sont :
 * @param string   $charlist    Une liste des caractères additionnels qui seront considérés comme un mot
 *
 * @return mixed	Retourne un tableau ou un entier, dépendemment du format choisi.
 *
 */
if(!function_exists('str_word_countThis'))
{
    function str_word_countThis($string, $format = 0, $charlist = NULL)
    {
		$string = (string)$string;
		$format = (int)$format;
		$charlist = (string)$charlist;

		return str_word_count($string, $format, $charlist);
    }
}

/**
 * strcasecmpThis
 *
 * Comparaison insensible à la casse de chaînes binaires.
 *
 * @link http://php.net/manual/fr/function.strcasecmp.php Documentation pour strcasecmp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 *
 * @return int	Retourne < 0 si str1 est inférieure à str2; > 0 si str1 est plus grande que str2, et 0 si les deux chaînes sont égales.
 *
 */
if(!function_exists('strcasecmpThis'))
{
    function strcasecmpThis($str1, $str2)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;

		return strcasecmp($str1, $str2);
    }
}

/**
 * strcmpThis
 *
 * Comparaison binaire de chaînes.
 *
 * @link http://php.net/manual/fr/function.strcmp.php Documentation pour strcmp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 *
 * @return int	Retourne < 0 si str1 est inférieure à str2; > 0 si str1 est supérieure à str2, et 0 si les deux chaînes sont égales.
 *
 */
if(!function_exists('strcmpThis'))
{
    function strcmpThis($str1, $str2)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;

		return strcmp($str1, $str2);
    }
}

/**
 * strcollThis
 *
 * Comparaison de chaînes localisées.
 *
 * @link http://php.net/manual/fr/function.strcoll.php Documentation pour strcoll.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 *
 * @return int	Retourne < 0 si str1 est inférieure à str2; > 0 si str1 est supérieure à str2, et 0 si les deux chaînes sont égales.
 *
 */
if(!function_exists('strcollThis'))
{
    function strcollThis($str1, $str2)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;

		return strcoll($str1, $str2);
    }
}

/**
 * strcspnThis
 *
 * Trouve un segment de chaîne ne contenant pas certains caractères.
 *
 * @link http://php.net/manual/fr/function.strcspn.php Documentation pour strcspn.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 * @param int      $start    La position sur la chaîne à partir de laquelle on analyse.
 * @param int      $length    La taille à examiner de la chaîne.
 *
 * @return int	Retourne la longueur du segment, sous la forme d'un entier.
 *
 */
if(!function_exists('strcspnThis'))
{
    function strcspnThis($str1, $str2, $start = NULL, $length = NULL)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;
		$start = (int)$start;
		$length = (int)$length;

		return strcspn($str1, $str2, $start, $length);
    }
}

/**
 * stream_bucket_appendThis
 *
 * Ajoute un compartiment au corps.
 *
 * @link http://php.net/manual/fr/function.stream-bucket-append.php Documentation pour stream_bucket_append.
 *
 * @version PHP 5
 *
 * @param resource $brigade
 * @param resource $bucket
 *
 */
if(!function_exists('stream_bucket_appendThis'))
{
    function stream_bucket_appendThis($brigade, $bucket)
    {
		$brigade = is_resource($brigade) ? $brigade : NULL;
		$bucket = is_resource($bucket) ? $bucket : NULL;

		return stream_bucket_append($brigade, $bucket);
    }
}

/**
 * stream_bucket_make_writeableThis
 *
 * Retourne un objet de compartiment depuis le corps pour des opérations sur celui-ci.
 *
 * @link http://php.net/manual/fr/function.stream-bucket-make-writeable.php Documentation pour stream_bucket_make_writeable.
 *
 * @version PHP 5
 *
 * @param resource $brigade
 *
 */
if(!function_exists('stream_bucket_make_writeableThis'))
{
    function stream_bucket_make_writeableThis($brigade)
    {
		$brigade = is_resource($brigade) ? $brigade : NULL;

		return stream_bucket_make_writeable($brigade);
    }
}

/**
 * stream_bucket_newThis
 *
 * Crée un nouveau compartiment pour l'utiliser sur le flux courant.
 *
 * @link http://php.net/manual/fr/function.stream-bucket-new.php Documentation pour stream_bucket_new.
 *
 * @version PHP 5
 *
 * @param resource $stream
 * @param string   $buffer
 *
 */
if(!function_exists('stream_bucket_newThis'))
{
    function stream_bucket_newThis($stream, $buffer)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$buffer = (string)$buffer;

		return stream_bucket_new($stream, $buffer);
    }
}

/**
 * stream_bucket_prependThis
 *
 * Ajout initial d'un bucket dans une brigade.
 *
 * @link http://php.net/manual/fr/function.stream-bucket-prepend.php Documentation pour stream_bucket_prepend.
 *
 * @version PHP 5
 *
 * @param resource $brigade    brigade est une ressource pointant vers une bucket brigade qui contient un ou plusieurs objets bucket.
 * @param resource $bucket    Un objet bucket.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('stream_bucket_prependThis'))
{
    function stream_bucket_prependThis($brigade, $bucket)
    {
		$brigade = is_resource($brigade) ? $brigade : NULL;
		$bucket = is_resource($bucket) ? $bucket : NULL;

		return stream_bucket_prepend($brigade, $bucket);
    }
}

/**
 * stream_context_createThis
 *
 * Crée un contexte de flux.
 *
 * @link http://php.net/manual/fr/function.stream-context-create.php Documentation pour stream_context_create.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param array    $options    Doit être un tableau associatif, au format $arr['wrapper']['option'] = $value. Voyez la section sur les contextes pour connaître la liste des paramètres standard de flux. Par défaut, c'est un tableau vide.
 * @param array    $params    Doit être un tableau associatif de format $arr['parameter'] = $value. Référez-vous à la documentation de la fonction stream_context_set_params() pour une liste des paramètres de flux standards.
 *
 * @return resource	Une ressource représentant le contexte du flux.
 *
 */
if(!function_exists('stream_context_createThis'))
{
    function stream_context_createThis($options = NULL, $params = NULL)
    {
		$options = (array)$options;
		$params = (array)$params;

		return stream_context_create($options, $params);
    }
}

/**
 * stream_context_get_defaultThis
 *
 * Lit le contexte par défaut des flux.
 *
 * @link http://php.net/manual/fr/function.stream-context-get-default.php Documentation pour stream_context_get_default.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param array    $options
 *
 * @return resource	Une resource de contexte de flux.
 *
 */
if(!function_exists('stream_context_get_defaultThis'))
{
    function stream_context_get_defaultThis($options = NULL)
    {
		$options = (array)$options;

		return stream_context_get_default($options);
    }
}

/**
 * stream_context_get_optionsThis
 *
 * Lit la valeur des options pour un flux/gestionnaire/contexte.
 *
 * @link http://php.net/manual/fr/function.stream-context-get-options.php Documentation pour stream_context_get_options.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream_or_context    Le stream ou context dont il faut lire les options.
 *
 * @return array	Retourne un tableau associatif contenant les options.
 *
 */
if(!function_exists('stream_context_get_optionsThis'))
{
    function stream_context_get_optionsThis($stream_or_context)
    {
		$stream_or_context = is_resource($stream_or_context) ? $stream_or_context : NULL;

		return stream_context_get_options($stream_or_context);
    }
}

/**
 * stream_context_get_paramsThis
 *
 * Lit les paramètres d'un contexte.
 *
 * @link http://php.net/manual/fr/function.stream-context-get-params.php Documentation pour stream_context_get_params.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param resource $stream_or_context    Une ressource de flux ou de contexte.
 *
 * @return array	Retourne un tableau associatif contenant les options de contexte et leur valeur.
 *
 */
if(!function_exists('stream_context_get_paramsThis'))
{
    function stream_context_get_paramsThis($stream_or_context)
    {
		$stream_or_context = is_resource($stream_or_context) ? $stream_or_context : NULL;

		return stream_context_get_params($stream_or_context);
    }
}

/**
 * stream_context_set_defaultThis
 *
 * Configure le contexte par défaut des flux.
 *
 * @link http://php.net/manual/fr/function.stream-context-set-default.php Documentation pour stream_context_set_default.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param array    $options    Les options à configurer pour le contexte par défaut.
 *
 * @return resource	Retourne le contexte de flux par défaut.
 *
 */
if(!function_exists('stream_context_set_defaultThis'))
{
    function stream_context_set_defaultThis($options)
    {
		$options = (array)$options;

		return stream_context_set_default($options);
    }
}

/**
 * stream_context_set_optionThis
 *
 * Configure une option pour un flux/gestionnaire/contexte.
 *
 * @link http://php.net/manual/fr/function.stream-context-set-option.php Documentation pour stream_context_set_option.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream_or_context    Le flux ou la ressource de contexte sur lequel on applique l'option.
 * @param string   $wrapper    L'option à définir au contexte par défaut.
 * @param string   $option
 * @param mixed     $value
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_context_set_optionThis'))
{
    function stream_context_set_optionThis($stream_or_context, $wrapper, $option, $value)
    {
		$stream_or_context = is_resource($stream_or_context) ? $stream_or_context : NULL;
		$wrapper = (string)$wrapper;
		$option = (string)$option;
		$value = ($value);
		return stream_context_set_option($stream_or_context, $wrapper, $option, $value);
    }
}

/**
 * stream_context_set_paramsThis
 *
 * Configure les paramètres pour un flux/gestionnaire/contexte.
 *
 * @link http://php.net/manual/fr/function.stream-context-set-params.php Documentation pour stream_context_set_params.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream_or_context    Le flux ou le contexte sur lequel on applique les paramètres.
 * @param array    $params    Un tableau de paramètres à définir.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_context_set_paramsThis'))
{
    function stream_context_set_paramsThis($stream_or_context, $params)
    {
		$stream_or_context = is_resource($stream_or_context) ? $stream_or_context : NULL;
		$params = (array)$params;

		return stream_context_set_params($stream_or_context, $params);
    }
}

/**
 * stream_copy_to_streamThis
 *
 * Copie des données depuis un flux vers un autre.
 *
 * @link http://php.net/manual/fr/function.stream-copy-to-stream.php Documentation pour stream_copy_to_stream.
 *
 * @version PHP 5
 *
 * @param resource $source    Le flux de source
 * @param resource $dest    Le flux de destination
 * @param int      $maxlength    Nombre maximal d'octets à copier
 * @param int      $offset    L'offset où démarrer la copie de données
 *
 * @return int	Retourne le nombre total d'octets copiés.
 *
 */
if(!function_exists('stream_copy_to_streamThis'))
{
    function stream_copy_to_streamThis($source, $dest, $maxlength = -1, $offset = 0)
    {
		$source = is_resource($source) ? $source : NULL;
		$dest = is_resource($dest) ? $dest : NULL;
		$maxlength = (int)$maxlength;
		$offset = (int)$offset;

		return stream_copy_to_stream($source, $dest, $maxlength, $offset);
    }
}

/**
 * stream_encodingThis
 *
 * Définit le jeu de caractères pour l'encodage du flux.
 *
 * @link http://php.net/manual/fr/function.stream-encoding.php Documentation pour stream_encoding.
 *
 * @version No version information available
 * @version might only be in SVN
 *
 * @param resource $stream
 * @param string   $encoding
 *
 */
if(!function_exists('stream_encodingThis'))
{
    function stream_encodingThis($stream, $encoding = NULL)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$encoding = (string)$encoding;

		return stream_encoding($stream, $encoding);
    }
}

/**
 * stream_filter_appendThis
 *
 * Attache un filtre à un flux en fin de liste.
 *
 * @link http://php.net/manual/fr/function.stream-filter-append.php Documentation pour stream_filter_append.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream    Le flux cible.
 * @param string   $filtername    Le nom du filtre.
 * @param int      $read_write    Par défaut, stream_filter_append() va ajouter le filtre à la liste de filtres de lecture si le fichier a été ouvert en mode lecture (r et/ou +). Le filtre sera aussi attaché à la liste des filtres de lecture si le fichier a été ouvert en mode lecture (w, a et/ou +). STREAM_FILTER_READ, STREAM_FILTER_WRITE, et/ou STREAM_FILTER_ALL peuvent aussi être utilisées dans le paramètre read_write pour contrôler ce comportement.
 * @param mixed     $params    Ce filtre sera ajouté avec les paramètres params à la fin de la liste des filtres, et sera ainsi appelé à la fin des opérations de filtres. Pour ajouter un filtre au début de la liste, utilisez la fonction stream_filter_prepend().
 *
 * @return resource	Retourne une ressource qui peut être utilisez pour identifier ce filtre lors de l'effacement du filtre avec stream_filter_remove().
 *
 */
if(!function_exists('stream_filter_appendThis'))
{
    function stream_filter_appendThis($stream, $filtername, $read_write = NULL, $params = NULL)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$filtername = (string)$filtername;
		$read_write = (int)$read_write;
		$params = ($params);
		return stream_filter_append($stream, $filtername, $read_write, $params);
    }
}

/**
 * stream_filter_prependThis
 *
 * Attache un filtre à un flux en début de liste.
 *
 * @link http://php.net/manual/fr/function.stream-filter-prepend.php Documentation pour stream_filter_prepend.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream    Le flux cible.
 * @param string   $filtername    Le nom du filtre.
 * @param int      $read_write    Par défaut, stream_filter_prepend() va attacher le filtre à la chaîne de filtre de lectures si le fichier a été ouvert en lecture (i.e. mode r, et/ou +). Le filtre va aussi être attaché à la chaîne de filtres d'écriture si le fichier a été ouvert en écriture (i.e. mode w, a, et/ou +). STREAM_FILTER_READ, STREAM_FILTER_WRITE, et/ou STREAM_FILTER_ALL peuvent aussi être passés dans le paramètre read_write pour imposer le comportement désiré. Voyez stream_filter_append() pour un exemple d'utilisation de ce paramètre.
 * @param mixed     $params    Le filtre sera ajouté avec les paramètres spécifiés dans params, au début de la liste, et sera ainsi appelé en premier dans les opérations du flux. Pour ajouter un filtre à la fin de la liste, utilisez stream_filter_append().
 *
 * @return resource	Retourne une ressource qui peut être utilisée pour faire référence à ce filtre, durant les opérations de stream_filter_remove().
 *
 */
if(!function_exists('stream_filter_prependThis'))
{
    function stream_filter_prependThis($stream, $filtername, $read_write = NULL, $params = NULL)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$filtername = (string)$filtername;
		$read_write = (int)$read_write;
		$params = ($params);
		return stream_filter_prepend($stream, $filtername, $read_write, $params);
    }
}

/**
 * stream_filter_registerThis
 *
 * Enregistre un filtre de flux.
 *
 * @link http://php.net/manual/fr/function.stream-filter-register.php Documentation pour stream_filter_register.
 *
 * @version PHP 5
 *
 * @param string   $filtername    Le nom du filtre à enregistrer.
 * @param string   $classname    Pour créer une classe de filtre, vous devez définir une classe qui étend la classe php_user_fitler. Lorsque vous réalisez des opérations de lecture et d'écriture dans le flux auquel votre filtre est attaché, PHP passera les données à travers votre filtre (et tous les autres filtres attachés), de façon à ce que les données soient modifiées tel que désiré. Vous devez implémenter les méthodes tel que décrit dans php_user_filter, sous peine de comportements indéfinis.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_filter_registerThis'))
{
    function stream_filter_registerThis($filtername, $classname)
    {
		$filtername = (string)$filtername;
		$classname = (string)$classname;

		return stream_filter_register($filtername, $classname);
    }
}

/**
 * stream_filter_removeThis
 *
 * Retire un filtre d'un flux.
 *
 * @link http://php.net/manual/fr/function.stream-filter-remove.php Documentation pour stream_filter_remove.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $stream_filter    Le filtre de flux à supprimer.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_filter_removeThis'))
{
    function stream_filter_removeThis($stream_filter)
    {
		$stream_filter = is_resource($stream_filter) ? $stream_filter : NULL;

		return stream_filter_remove($stream_filter);
    }
}

/**
 * stream_get_contentsThis
 *
 * Lit tout un flux dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.stream-get-contents.php Documentation pour stream_get_contents.
 *
 * @version PHP 5
 *
 * @param resource $handle    Une ressource de flux (e.g. retournée par la fonction fopen())
 * @param int      $maxlength    Le nombre maximal d'octets à lire. Par défaut, -1 (lit tout le contenu restant du buffer).
 * @param int      $offset    Se déplace à la position spécifiée avant la lecture. Si le nombre passé est négatif, aucun déplacement ne sera effectué et la lecture commencera de la position courante.
 *
 * @return string	Retourne une chaîne de caractères ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_get_contentsThis'))
{
    function stream_get_contentsThis($handle, $maxlength = -1, $offset = -1)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$maxlength = (int)$maxlength;
		$offset = (int)$offset;

		return stream_get_contents($handle, $maxlength, $offset);
    }
}

/**
 * stream_get_filtersThis
 *
 * Liste les filtres enregistrés.
 *
 * @link http://php.net/manual/fr/function.stream-get-filters.php Documentation pour stream_get_filters.
 *
 * @version PHP 5
 * @return array	Retourne un tableau indexé contenant la liste des filtres de flux disponibles sur le système.
 *
 */
if(!function_exists('stream_get_filtersThis'))
{
    function stream_get_filtersThis()
    {
		return stream_get_filters();
    }
}

/**
 * stream_get_lineThis
 *
 * Lit une ligne dans un flux.
 *
 * @link http://php.net/manual/fr/function.stream-get-line.php Documentation pour stream_get_line.
 *
 * @version PHP 5
 *
 * @param resource $handle    Une ressource valide de fichier.
 * @param int      $length    Le nombre d'octets à lire dans la ressource.
 * @param string   $ending    Un délimiteur de chaîne optionnel.
 *
 * @return string	stream_get_line() lit une ligne de taille maximale length dans le flux handle.
 *
 */
if(!function_exists('stream_get_lineThis'))
{
    function stream_get_lineThis($handle, $length, $ending = NULL)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$length = (int)$length;
		$ending = (string)$ending;

		return stream_get_line($handle, $length, $ending);
    }
}

/**
 * stream_get_meta_dataThis
 *
 * Lit les en-têtes et données méta des flux.
 *
 * @link http://php.net/manual/fr/function.stream-get-meta-data.php Documentation pour stream_get_meta_data.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream    Le flux peut être n'importe quel flux créé par les fonctions fopen(), fsockopen() ou pfsockopen().
 *
 * @return array	Le tableau résultant peut contenir les éléments suivants :
 *
 */
if(!function_exists('stream_get_meta_dataThis'))
{
    function stream_get_meta_dataThis($stream)
    {
		$stream = is_resource($stream) ? $stream : NULL;

		return stream_get_meta_data($stream);
    }
}

/**
 * stream_get_transportsThis
 *
 * Liste les gestionnaires de transports de sockets disponibles.
 *
 * @link http://php.net/manual/fr/function.stream-get-transports.php Documentation pour stream_get_transports.
 *
 * @version PHP 5
 * @return array	Retourne un tableau indexé de nom de sockets de transport.
 *
 */
if(!function_exists('stream_get_transportsThis'))
{
    function stream_get_transportsThis()
    {
		return stream_get_transports();
    }
}

/**
 * stream_get_wrappersThis
 *
 * Liste les gestionnaires de flux.
 *
 * @link http://php.net/manual/fr/function.stream-get-wrappers.php Documentation pour stream_get_wrappers.
 *
 * @version PHP 5
 * @return array	stream_get_wrappers() retourne un tableau indexé contenant le nom de tous les gestionnaires de flux disponibles sur le système.
 *
 */
if(!function_exists('stream_get_wrappersThis'))
{
    function stream_get_wrappersThis()
    {
		return stream_get_wrappers();
    }
}

/**
 * stream_is_localThis
 *
 * Vérifie si un flux est local.
 *
 * @link http://php.net/manual/fr/function.stream-is-local.php Documentation pour stream_is_local.
 *
 * @version PHP 5 >= 5.2.4
 *
 * @param mixed     $stream_or_url    La ressource de flux ou l'URL à vérifier.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_is_localThis'))
{
    function stream_is_localThis($stream_or_url)
    {
		$stream_or_url = ($stream_or_url);
		return stream_is_local($stream_or_url);
    }
}

/**
 * stream_notification_callbackThis
 *
 * Une fonction de rappel pour le paramètre de contexte notification.
 *
 * @link http://php.net/manual/fr/function.stream-notification-callback.php Documentation pour stream_notification_callback.
 *
 * @version PHP 5 >= 5.2.0
 *
 * @param int      $notification_code    Une des constantes de notification STREAM_NOTIFY_*.
 * @param int      $severity    Une des constantes de notification STREAM_NOTIFY_SEVERITY_*.
 * @param string   $message    Passé si un message descriptif est disponible pour cet événement.
 * @param int      $message_code    Passé si un code de message descriptif est disponible pour cet événement. La signification de cette valeur dépend du gestionnaire spécifique utilisé.
 * @param int      $bytes_transferred    Si c'est possible, bytes_transferred sera rempli.
 * @param int      $bytes_max    Si c'est possible, bytes_max sera rempli.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('stream_notification_callbackThis'))
{
    function stream_notification_callbackThis($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max)
    {
		$notification_code = (int)$notification_code;
		$severity = (int)$severity;
		$message = (string)$message;
		$message_code = (int)$message_code;
		$bytes_transferred = (int)$bytes_transferred;
		$bytes_max = (int)$bytes_max;

		return stream_notification_callback($notification_code, $severity, $message, $message_code, $bytes_transferred, $bytes_max);
    }
}

/**
 * stream_resolve_include_pathThis
 *
 * Résout un nom de fichier suivant les règles du chemin d'inclusion.
 *
 * @link http://php.net/manual/fr/function.stream-resolve-include-path.php Documentation pour stream_resolve_include_path.
 *
 * @version PHP 5 >= 5.3.2
 *
 * @param string   $filename    Le nom de fichier à résoudre.
 *
 * @return string	Retourne une chaîne de caractères contenant le nom de fichier absolu résolu, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_resolve_include_pathThis'))
{
    function stream_resolve_include_pathThis($filename)
    {
		$filename = (string)$filename;

		return stream_resolve_include_path($filename);
    }
}

/**
 * stream_selectThis
 *
 * Surveille la modification d'un ou plusieurs flux.
 *
 * @link http://php.net/manual/fr/function.stream-select.php Documentation pour stream_select.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param array    &$read    Les flux qui sont listés dans le paramètre read seront surveillés en lecture, c'est-à-dire si de nouveaux octets sont disponibles en lecture (pour être précis, si une lecture ne bloquera pas, ce qui inclut aussi les flux qui sont en fin de fichier, auquel cas un appel à la fonction fread() retournera une chaîne de taille 0).
 * @param array    &$write    Les flux qui sont listés dans le paramètre write seront surveillés en écriture (pour être précis, si une écriture ne bloquera pas).
 * @param array    &$except    Les flux qui sont listés dans le paramètre except seront surveillés pour voir si une exception est levée.
 * @param int      $tv_sec    Les paramètres tv_sec et tv_usec forment le délai d'expiration, tv_sec spécifie le nombre de secondes tandis que tv_usec, le nombre de microsecondes. Le paramètre timeout représente la limite supérieure du temps que stream_select() doit attendre avant de se terminer. Si tv_sec et tv_usec sont tous les deux définis à 0, , stream_select() n'attendra pas de données - à la place, elle se terminera immédiatement, indiquant le statut courant du flux. Si tv_sec vaut NULL, stream_select() peut se bloquer indéfiniment, se terminant uniquement lorsqu'un événement sur un des flux surveillés survient (ou si un signal interrompt l'appel système).
 * @param int      $tv_usec    Voyez la description de tv_sec.
 *
 * @return int	En cas de succès, stream_select() retourne le nombre de flux qui ont évolué, ce qui peut être 0, si le délai d'expiration a été atteint avant que les flux n'évoluent. En cas d'erreur, la fonction retournera FALSE et un avertissement sera renvoyé (cela peut apparaître si l'appel système est interrompu par un signal entrant).
 *
 */
if(!function_exists('stream_selectThis'))
{
    function stream_selectThis(&$read, &$write, &$except, $tv_sec, $tv_usec = 0)
    {
		$read = (array)$read;
		$write = (array)$write;
		$except = (array)$except;
		$tv_sec = (int)$tv_sec;
		$tv_usec = (int)$tv_usec;

		return stream_select($read, $write, $except, $tv_sec, $tv_usec);
    }
}

/**
 * stream_set_blockingThis
 *
 * Configure le mode bloquant d'un flux.
 *
 * @link http://php.net/manual/fr/function.stream-set-blocking.php Documentation pour stream_set_blocking.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream    Le flux.
 * @param int      $mode    Si mode vaut 0, stream sera configuré en mode non-bloquant, et s'il vaut 1, stream sera configuré en mode bloquant. Cet appel affecte les fonctions telles que fgets() et fread() qui lisent dans des flux. En mode non-bloquant, la fonction fgets() s'exécute juste après son appel, alors qu'en mode bloquant, elle attendra des données.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_set_blockingThis'))
{
    function stream_set_blockingThis($stream, $mode)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$mode = (int)$mode;

		return stream_set_blocking($stream, $mode);
    }
}

/**
 * stream_set_chunk_sizeThis
 *
 * Change la taille du segment du flux.
 *
 * @link http://php.net/manual/fr/function.stream-set-chunk-size.php Documentation pour stream_set_chunk_size.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param resource $fp    Le flux en question.
 * @param int      $chunk_size    La nouvelle taille de segment désirée.
 *
 * @return int	Retourne la taille précédente du segment en cas de succès.
 *
 */
if(!function_exists('stream_set_chunk_sizeThis'))
{
    function stream_set_chunk_sizeThis($fp, $chunk_size)
    {
		$fp = is_resource($fp) ? $fp : NULL;
		$chunk_size = (int)$chunk_size;

		return stream_set_chunk_size($fp, $chunk_size);
    }
}

/**
 * stream_set_read_bufferThis
 *
 * Configure le buffer de lecture d'un flux.
 *
 * @link http://php.net/manual/fr/function.stream-set-read-buffer.php Documentation pour stream_set_read_buffer.
 *
 * @version PHP 5 >= 5.3.3
 *
 * @param resource $stream    Le pointeur de fichier.
 * @param int      $buffer    Le nombre d'octets à mettre en buffer. Si buffer vaut 0 alors les opérations sont sans buffer. Cela garantit que les opérations avec fread() sont achevées avant que d'autres processus ne soient autorisés à lire dans le flux de sortie.
 *
 * @return int	Retourne 0 en cas de succès, ou EOF si la requête échoue.
 *
 */
if(!function_exists('stream_set_read_bufferThis'))
{
    function stream_set_read_bufferThis($stream, $buffer)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$buffer = (int)$buffer;

		return stream_set_read_buffer($stream, $buffer);
    }
}

/**
 * stream_set_timeoutThis
 *
 * Configure la durée d'expiration d'un flux.
 *
 * @link http://php.net/manual/fr/function.stream-set-timeout.php Documentation pour stream_set_timeout.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream    Le flux cible.
 * @param int      $seconds    Le nombre de secondes entières du délai d'expiration.
 * @param int      $microseconds    Le nombre de microsecondes entières du délai d'expiration.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_set_timeoutThis'))
{
    function stream_set_timeoutThis($stream, $seconds, $microseconds = 0)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$seconds = (int)$seconds;
		$microseconds = (int)$microseconds;

		return stream_set_timeout($stream, $seconds, $microseconds);
    }
}

/**
 * stream_set_write_bufferThis
 *
 * Configure le buffer d'écriture d'un flux.
 *
 * @link http://php.net/manual/fr/function.stream-set-write-buffer.php Documentation pour stream_set_write_buffer.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $stream    Le pointeur de fichier.
 * @param int      $buffer    Le nombre d'octets à mettre en buffer. Si buffer vaut 0 alors les opérations sont sans buffer. Cela garantit que les opérations avec fwrite() sont achevées avant que d'autres processus ne soient autorisés à écrire dans le flux de sortie.
 *
 * @return int	Retourne 0 en cas de succès, et EOF si la requête échoue.
 *
 */
if(!function_exists('stream_set_write_bufferThis'))
{
    function stream_set_write_bufferThis($stream, $buffer)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$buffer = (int)$buffer;

		return stream_set_write_buffer($stream, $buffer);
    }
}

/**
 * stream_socket_acceptThis
 *
 * Accepte une connexion sur un socket créé par stream_socket_server().
 *
 * @link http://php.net/manual/fr/function.stream-socket-accept.php Documentation pour stream_socket_accept.
 *
 * @version PHP 5
 *
 * @param resource $server_socket    Le socket serveur depuis lequel accepter une connexion.
 * @param float    $timeout    Remplace le délai d'expiration par défaut du socket. Ce délai doit être donné en secondes.
 * @param string   &$peername    Le nom (adresse) du client connecté, si fourni et si disponible pour le transport sélectionné.
 *
 * @return resource	Retourne un flux vers la connexion socket acceptée ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_socket_acceptThis'))
{
    function stream_socket_acceptThis($server_socket, $timeout = NULL, &$peername = NULL)
    {
		$server_socket = is_resource($server_socket) ? $server_socket : NULL;
		$timeout = empty($timeout) ? (float)ini_get("default_socket_timeout") : (float)$timeout;
		$peername = (string)$peername;

		return stream_socket_accept($server_socket, $timeout, $peername);
    }
}

/**
 * stream_socket_clientThis
 *
 * Ouvre une connexion socket Internet ou Unix.
 *
 * @link http://php.net/manual/fr/function.stream-socket-client.php Documentation pour stream_socket_client.
 *
 * @version PHP 5
 *
 * @param string   $remote_socket    L'adresse du socket.
 * @param int      &$errno    Contiendra le numéro de l'erreur système si la connexion échoue.
 * @param string   &$errstr    Contiendra le message de l'erreur système si la connexion échoue.
 * @param float    $timeout    Délai d'expiration, en secondes, pour l'appel système connect().
 * @param int      $flags    Champ de bits qui peut être la combinaison de n'importe quelles options de connexion. Actuellement, les valeurs possibles pour ces options sont STREAM_CLIENT_CONNECT (défaut), STREAM_CLIENT_ASYNC_CONNECT et STREAM_CLIENT_PERSISTENT.
 * @param resource $context    Une ressource de contexte valide, créée par la fonction stream_context_create().
 *
 * @return resource	En cas de succès, une ressource de flux est retournée, qui peut être utilisée avec d'autres fonctions de fichiers, comme fgets(), fgetss(), fwrite(), fclose(), et feof(), FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_socket_clientThis'))
{
    function stream_socket_clientThis($remote_socket, &$errno = NULL, &$errstr = NULL, $timeout = NULL, $flags = STREAM_CLIENT_CONNECT, $context = NULL)
    {
		$remote_socket = (string)$remote_socket;
		$errno = (int)$errno;
		$errstr = (string)$errstr;
		$timeout = empty($timeout) ? (float)ini_get("default_socket_timeout") : (float)$timeout;
		$flags = (int)$flags;
		$context = is_resource($context) ? $context : NULL;

		return stream_socket_client($remote_socket, $errno, $errstr, $timeout, $flags, $context);
    }
}

/**
 * stream_socket_enable_cryptoThis
 *
 * Active ou non le chiffrement, pour un socket déjà connecté.
 *
 * @link http://php.net/manual/fr/function.stream-socket-enable-crypto.php Documentation pour stream_socket_enable_crypto.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param resource $stream    La ressource de flux.
 * @param bool     $enable    Active ou non le chiffrement sur le flux.
 * @param int      $crypto_type    Configure le chiffrement sur le flux. Les méthodes valides sont
 * @param resource $session_stream    Initialise le flux avec la configuration issue du paramètre session_stream.
 *
 * @return mixed	Retourne TRUE en cas de succès, FALSE si la négociation a échoué ou 0 s'il n'y a pas assez de données et que vous devez essayer encore (uniquement pour les sockets non-bloquants).
 *
 */
if(!function_exists('stream_socket_enable_cryptoThis'))
{
    function stream_socket_enable_cryptoThis($stream, $enable, $crypto_type = NULL, $session_stream = NULL)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$enable = (bool)$enable;
		$crypto_type = (int)$crypto_type;
		$session_stream = is_resource($session_stream) ? $session_stream : NULL;

		return stream_socket_enable_crypto($stream, $enable, $crypto_type, $session_stream);
    }
}

/**
 * stream_socket_get_nameThis
 *
 * Lit le nom de la socket locale ou distante.
 *
 * @link http://php.net/manual/fr/function.stream-socket-get-name.php Documentation pour stream_socket_get_name.
 *
 * @version PHP 5
 *
 * @param resource $handle    Le socket dont il faut lire le nom.
 * @param bool     $want_peer    Si ce paramètre vaut TRUE le nom du socket remote (distant) sera retourné, et si ce paramètre vaut FALSE le socket local (local) sera retourné.
 *
 * @return string	Le nom du socket.
 *
 */
if(!function_exists('stream_socket_get_nameThis'))
{
    function stream_socket_get_nameThis($handle, $want_peer)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$want_peer = (bool)$want_peer;

		return stream_socket_get_name($handle, $want_peer);
    }
}

/**
 * stream_socket_pairThis
 *
 * Crée une paire de sockets connectées et indissociables.
 *
 * @link http://php.net/manual/fr/function.stream-socket-pair.php Documentation pour stream_socket_pair.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param int      $domain    La famille de protocole à utiliser : STREAM_PF_INET, STREAM_PF_INET6 ou STREAM_PF_UNIX
 * @param int      $type    Le type de communication à utiliser : STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM, STREAM_SOCK_SEQPACKET ou STREAM_SOCK_STREAM
 * @param int      $protocol    Le protocole à utiliser : STREAM_IPPROTO_ICMP, STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW, STREAM_IPPROTO_TCP ou STREAM_IPPROTO_UDP
 *
 * @return array	Retourne un tableau contenant les ressources des deux sockets en cas de succès, ou FALSE en cas d'échec.
 *
 */
if(!function_exists('stream_socket_pairThis'))
{
    function stream_socket_pairThis($domain, $type, $protocol)
    {
		$domain = (int)$domain;
		$type = (int)$type;
		$protocol = (int)$protocol;

		return stream_socket_pair($domain, $type, $protocol);
    }
}

/**
 * stream_socket_recvfromThis
 *
 * Lit des données depuis un socket, connecté ou pas.
 *
 * @link http://php.net/manual/fr/function.stream-socket-recvfrom.php Documentation pour stream_socket_recvfrom.
 *
 * @version PHP 5
 *
 * @param resource $socket    Le socket distant.
 * @param int      $length    Le nombre d'octets à recevoir de socket.
 * @param int      $flags    La valeur de flags peut être la combinaison des constantes suivantes :
 * @param string   &$address    Si le paramètre address est fourni, il recevra l'adresse du socket distant.
 *
 * @return string	Retourne les données lues, sous forme de chaîne de caractères
 *
 */
if(!function_exists('stream_socket_recvfromThis'))
{
    function stream_socket_recvfromThis($socket, $length, $flags = 0, &$address = NULL)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$length = (int)$length;
		$flags = (int)$flags;
		$address = (string)$address;

		return stream_socket_recvfrom($socket, $length, $flags, $address);
    }
}

/**
 * stream_socket_sendtoThis
 *
 * Envoie un message au socket, connecté ou pas.
 *
 * @link http://php.net/manual/fr/function.stream-socket-sendto.php Documentation pour stream_socket_sendto.
 *
 * @version PHP 5
 *
 * @param resource $socket    Le socket vers lequel envoyer les données data.
 * @param string   $data    Les données à envoyer.
 * @param int      $flags    La valeur de flags peut être la combinaison des constantes suivantes :
 * @param string   $address    L'adresse du socket est spécifiée lorsque le socket est créé, et sera utilisé si une autre adresse n'est pas spécifiée dans le paramètre address. Quand elle est fournie, elle doit être au format IP numérique (version 4 ou 6).
 *
 * @return int	Retourne le code de résultat, sous forme d'entier.
 *
 */
if(!function_exists('stream_socket_sendtoThis'))
{
    function stream_socket_sendtoThis($socket, $data, $flags = 0, $address = NULL)
    {
		$socket = is_resource($socket) ? $socket : NULL;
		$data = (string)$data;
		$flags = (int)$flags;
		$address = (string)$address;

		return stream_socket_sendto($socket, $data, $flags, $address);
    }
}

/**
 * stream_socket_serverThis
 *
 * Crée un socket serveur Unix ou Internet.
 *
 * @link http://php.net/manual/fr/function.stream-socket-server.php Documentation pour stream_socket_server.
 *
 * @version PHP 5
 *
 * @param string   $local_socket    Le type de socket créé est déterminé par le transport spécifié avec le formatage URL suivant : transport://target. Pour un socket Internet,(AF_INET) comme TCP et UDP, la cible de remote_socket sera une adresse IP ou un nom d'hôte suivi de deux points et d'un numéro de port. Pour un socket Unix, la cible doit être un fichier de socket du système. En fonction de votre environnement, les sockets de domaine Unix peuvent être indisponibles. Une liste des transports disponibles est accessible via stream_get_transports(). Voyez Liste des modes de transport de sockets disponibles pour connaître la liste des transports natifs.
 * @param int      &$errno    Si les arguments optionnels errno et errstr sont présents, ils seront configurés pour indiquer le niveau d'erreur actuel des fonctions système socket(), bind() et listen(). Si la valeur retournée dans errno est 0, et que la fonction retourne FALSE, c'est une indication que l'erreur est survenue avant l'appel à bind(). Ceci est probablement dû à un problème d'initialisation du socket. Notez que les arguments errno et errstr seront toujours passés par référence.
 * @param string   &$errstr    Voyez la description de errno.
 * @param int      $flags    Un champ de bits, qui peut être la combinaison de n'importe quelle option de création de socket.
 * @param resource $context
 *
 * @return resource	Retourne le flux créé, ou bien FALSE en cas d'erreur.
 *
 */
if(!function_exists('stream_socket_serverThis'))
{
    function stream_socket_serverThis($local_socket, &$errno = NULL, &$errstr = NULL, $flags = NULL, $context = NULL)
    {
		$local_socket = (string)$local_socket;
		$errno = (int)$errno;
		$errstr = (string)$errstr;
		$flags = empty($flags) ? (int)STREAM_SERVER_BIND | STREAM_SERVER_LISTEN : (int)$flags;
		$context = is_resource($context) ? $context : NULL;

		return stream_socket_server($local_socket, $errno, $errstr, $flags, $context);
    }
}

/**
 * stream_socket_shutdownThis
 *
 * Arrête une connexion full-duplex.
 *
 * @link http://php.net/manual/fr/function.stream-socket-shutdown.php Documentation pour stream_socket_shutdown.
 *
 * @version PHP 5 >= 5.2.1
 *
 * @param resource $stream    Un flux ouvert (ouvert avec la fonction stream_socket_client(), par exemple)
 * @param int      $how    Une des constantes suivantes : STREAM_SHUT_RD (désactive les réceptions futures), STREAM_SHUT_WR (désactive les transmissions futures) ou STREAM_SHUT_RDWR (désactive les réceptions ou les transmissions futures).
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_socket_shutdownThis'))
{
    function stream_socket_shutdownThis($stream, $how)
    {
		$stream = is_resource($stream) ? $stream : NULL;
		$how = (int)$how;

		return stream_socket_shutdown($stream, $how);
    }
}

/**
 * stream_supports_lockThis
 *
 * Indique si le flux supporte les verrous.
 *
 * @link http://php.net/manual/fr/function.stream-supports-lock.php Documentation pour stream_supports_lock.
 *
 * @version PHP 5 >= 5.3.0
 *
 * @param resource $stream    Le flux à tester.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_supports_lockThis'))
{
    function stream_supports_lockThis($stream)
    {
		$stream = is_resource($stream) ? $stream : NULL;

		return stream_supports_lock($stream);
    }
}

/**
 * stream_wrapper_registerThis
 *
 * Enregistre un gestionnaire d'URL.
 *
 * @link http://php.net/manual/fr/function.stream-wrapper-register.php Documentation pour stream_wrapper_register.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 *
 * @param string   $protocol    Le nom du gestionnaire à enregistrer.
 * @param string   $classname    La classe qui implémente le protocole protocol.
 * @param int      $flags    Doit être configuré à STREAM_IS_URL si protocol est un protocole à URL. Par défaut, cette option vaut 0, et est valable pour les flux locaux.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_wrapper_registerThis'))
{
    function stream_wrapper_registerThis($protocol, $classname, $flags = 0)
    {
		$protocol = (string)$protocol;
		$classname = (string)$classname;
		$flags = (int)$flags;

		return stream_wrapper_register($protocol, $classname, $flags);
    }
}

/**
 * stream_wrapper_restoreThis
 *
 * Restaure un gestionnaire d'URL supprimé.
 *
 * @link http://php.net/manual/fr/function.stream-wrapper-restore.php Documentation pour stream_wrapper_restore.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $protocol
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_wrapper_restoreThis'))
{
    function stream_wrapper_restoreThis($protocol)
    {
		$protocol = (string)$protocol;

		return stream_wrapper_restore($protocol);
    }
}

/**
 * stream_wrapper_unregisterThis
 *
 * Supprime un gestionnaire d'URL.
 *
 * @link http://php.net/manual/fr/function.stream-wrapper-unregister.php Documentation pour stream_wrapper_unregister.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $protocol
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('stream_wrapper_unregisterThis'))
{
    function stream_wrapper_unregisterThis($protocol)
    {
		$protocol = (string)$protocol;

		return stream_wrapper_unregister($protocol);
    }
}

/**
 * strftimeThis
 *
 * Formate une date/heure locale avec la configuration locale.
 *
 * @link http://php.net/manual/fr/function.strftime.php Documentation pour strftime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    La longueur maximale de ce paramètre est de 103 caractères.
 * @param int      $timestamp    Le paramètre optionnel timestamp est un timestamp Unix de type entier qui vaut par défaut l'heure courante locale si le paramètre timestamp n'est pas fourni. En d'autres termes, il vaut par défaut la valeur de la fonction time().
 *
 * @return string	Retourne une chaîne de caractères formatée suivant le paramètre format donné, en utilisant le paramètre timestamp ou la date locale courante si aucun timestamp n'est fourni. Les noms des mois, des jours de la semaine mais aussi d'autres chaînes dépendant de la location, respecteront la localisation courante définie par la fonction setlocale().
 *
 */
if(!function_exists('strftimeThis'))
{
    function strftimeThis($format, $timestamp = NULL)
    {
		$format = (string)$format;
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;

		return strftime($format, $timestamp);
    }
}

/**
 * strip_tagsThis
 *
 * Supprime les balises HTML et PHP d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.strip-tags.php Documentation pour strip_tags.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param string   $allowable_tags    Vous pouvez utiliser ce paramètre optionnel pour spécifier les balises qui ne doivent pas être supprimées.
 *
 * @return string	Retourne la chaîne échappée.
 *
 */
if(!function_exists('strip_tagsThis'))
{
    function strip_tagsThis($str, $allowable_tags = NULL)
    {
		$str = (string)$str;
		$allowable_tags = (string)$allowable_tags;

		return strip_tags($str, $allowable_tags);
    }
}

/**
 * stripcslashesThis
 *
 * Décode une chaîne encodée avec addcslashes().
 *
 * @link http://php.net/manual/fr/function.stripcslashes.php Documentation pour stripcslashes.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne à traiter.
 *
 * @return string	Retourne la chaîne modifiée.
 *
 */
if(!function_exists('stripcslashesThis'))
{
    function stripcslashesThis($str)
    {
		$str = (string)$str;

		return stripcslashes($str);
    }
}

/**
 * striposThis
 *
 * Recherche la position de la première occurrence dans une chaîne, sans tenir compte de la casse.
 *
 * @link http://php.net/manual/fr/function.stripos.php Documentation pour stripos.
 *
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne dans laquelle on effectue la recherche.
 * @param string   $needle    Le paramètre needle peut être une chaîne d'un ou plusieurs caractères. Si needle n'est pas une chaîne, il est converti en entier, et utilisé comme valeur d'un caractère.
 * @param int      $offset    Si spécifié, la recherche commencera à partir de ce nombre de caractères, compté depuis le début de la chaîne. Contrairement aux fonctions strrpos() et strripos(), ce paramètre ne peut être négatif.
 *
 * @return int	Retourne la position de la première occurrence dans la chaîne relativement au début de la chaîne haystack (indépendamment de l'offset). Notez également que la position dans la chaîne commence à 0, et non pas à 1.
 *
 */
if(!function_exists('striposThis'))
{
    function striposThis($haystack, $needle, $offset = 0)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;

		return stripos($haystack, $needle, $offset);
    }
}

/**
 * stripslashesThis
 *
 * Supprime les antislashs d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.stripslashes.php Documentation pour stripslashes.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne une chaîne dont les antislashs on été supprimés. \' devient ', etc. Les doubles antislashs (\\) sont réduits à un seul antislash (\).
 *
 */
if(!function_exists('stripslashesThis'))
{
    function stripslashesThis($str)
    {
		$str = (string)$str;

		return stripslashes($str);
    }
}

/**
 * stristrThis
 *
 * Version insensible à la casse de strstr().
 *
 * @link http://php.net/manual/fr/function.stristr.php Documentation pour stristr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne à chercher.
 * @param mixed     $needle    Si needle n'est pas une chaîne, elle sera convertie en entier, et utilisée comme code ASCII du caractère correspondant.
 * @param bool     $before_needle    Si vaut TRUE, stristr() retourne la partie de haystack avant la première occurrence de needle (needle exclus).
 *
 * @return string	Retourne la partie de la chaîne correspondante. Si needle n'est pas trouvé, la fonction retourne FALSE.
 *
 */
if(!function_exists('stristrThis'))
{
    function stristrThis($haystack, $needle, $before_needle = false)
    {
		$haystack = (string)$haystack;
		$needle = ($needle);
		$before_needle = (bool)$before_needle;

		return stristr($haystack, $needle, $before_needle);
    }
}

/**
 * strlenThis
 *
 * Calcule la taille d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.strlen.php Documentation pour strlen.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne de caractères à mesurer.
 *
 * @return int	La taille de la chaîne string est 0 si le paramètre string est vide.
 *
 */
if(!function_exists('strlenThis'))
{
    function strlenThis($string)
    {
		$string = (string)$string;

		return strlen($string);
    }
}

/**
 * strnatcasecmpThis
 *
 * Comparaison de chaînes avec l'algorithme d'"ordre naturel" (insensible à la casse).
 *
 * @link http://php.net/manual/fr/function.strnatcasecmp.php Documentation pour strnatcasecmp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 *
 * @return int	Tout comme les autres fonctions de comparaison de chaînes, celle-ci retourne < 0 si str1 est inférieure à str2 > 0 si str1 est supérieure à str2, et 0 si les deux chaînes sont égales.
 *
 */
if(!function_exists('strnatcasecmpThis'))
{
    function strnatcasecmpThis($str1, $str2)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;

		return strnatcasecmp($str1, $str2);
    }
}

/**
 * strnatcmpThis
 *
 * Comparaison de chaînes avec l'algorithme d'"ordre naturel".
 *
 * @link http://php.net/manual/fr/function.strnatcmp.php Documentation pour strnatcmp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 *
 * @return int	De la même façon que les autres fonctions comparant deux chaînes, la fonction retourne < 0 si str1 est inférieure à str2; > 0 si str1 est supérieure à str2, et 0 si les deux chaînes sont égales.
 *
 */
if(!function_exists('strnatcmpThis'))
{
    function strnatcmpThis($str1, $str2)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;

		return strnatcmp($str1, $str2);
    }
}

/**
 * strncasecmpThis
 *
 * Compare en binaire des chaînes de caractères.
 *
 * @link http://php.net/manual/fr/function.strncasecmp.php Documentation pour strncasecmp.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 * @param int      $len    La longueur des chaînes à utiliser dans la comparaison.
 *
 * @return int	Retourne < 0 si str1 est plus petite que str2; > 0 si str1 est plus grande que str2, et 0 si elles sont égales.
 *
 */
if(!function_exists('strncasecmpThis'))
{
    function strncasecmpThis($str1, $str2, $len)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;
		$len = (int)$len;

		return strncasecmp($str1, $str2, $len);
    }
}

/**
 * strncmpThis
 *
 * Comparaison binaire des n premiers caractères.
 *
 * @link http://php.net/manual/fr/function.strncmp.php Documentation pour strncmp.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str1    La première chaîne.
 * @param string   $str2    La seconde chaîne.
 * @param int      $len    Nombre de caractères à utiliser pour la comparaison.
 *
 * @return int	Retourne < 0 si str1 est inférieure à str2; > 0 si str1 est supérieure à str2, et 0 si les deux chaînes sont égales.
 *
 */
if(!function_exists('strncmpThis'))
{
    function strncmpThis($str1, $str2, $len)
    {
		$str1 = (string)$str1;
		$str2 = (string)$str2;
		$len = (int)$len;

		return strncmp($str1, $str2, $len);
    }
}

/**
 * strpbrkThis
 *
 * Recherche un ensemble de caractères dans une chaîne de caractères.
 *
 * @link http://php.net/manual/fr/function.strpbrk.php Documentation pour strpbrk.
 *
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne dans laquelle on cherche char_list.
 * @param string   $char_list    Ce paramètre est sensible à la casse.
 *
 * @return string	Retourne une chaîne, commençant au premier caractère trouvé, ou FALSE s'il n'a pas été trouvé.
 *
 */
if(!function_exists('strpbrkThis'))
{
    function strpbrkThis($haystack, $char_list)
    {
		$haystack = (string)$haystack;
		$char_list = (string)$char_list;

		return strpbrk($haystack, $char_list);
    }
}

/**
 * strposThis
 *
 * Cherche la position de la première occurrence dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.strpos.php Documentation pour strpos.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne dans laquelle on doit chercher.
 * @param mixed     $needle    Si needle n'est pas une chaîne, il est converti en entier, et utilisé comme caractère de code ASCII correspondant.
 * @param int      $offset    Si spécifié, la recherche commencera à partir de ce nombre de caractères compté depuis le début de la chaîne. Contrairement aux fonctions strrpos() et strripos(), ce paramètre ne peut être négatif.
 *
 * @return int	Retourne la position numérique de l'occurrence relativement au début de la chaîne haystack (indépendamment de l'offset). Notez également que la position dans la chaîne commence à 0, et non pas à 1.
 *
 */
if(!function_exists('strposThis'))
{
    function strposThis($haystack, $needle, $offset = 0)
    {
		$haystack = (string)$haystack;
		$needle = ($needle);
		$offset = (int)$offset;

		return strpos($haystack, $needle, $offset);
    }
}

/**
 * strptimeThis
 *
 * Analyse une date générée par strftime().
 *
 * @link http://php.net/manual/fr/function.strptime.php Documentation pour strptime.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param string   $date    La chaîne à analyser (e.g. retournée par strftime())
 * @param string   $format    Le format utilisé par date (e.g. le même que celui qui a été utilisé par strftime()). Pour plus d'informations sur les spécificateurs de formats, voyez la fonction strftime().
 *
 * @return array	Retourne un tableau ou FALSE si une erreur survient.
 *
 */
if(!function_exists('strptimeThis'))
{
    function strptimeThis($date, $format)
    {
		$date = (string)$date;
		$format = (string)$format;

		return strptime($date, $format);
    }
}

/**
 * strrchrThis
 *
 * Trouve la dernière occurrence d'un caractère dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.strrchr.php Documentation pour strrchr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne dans laquelle on doit chercher.
 * @param mixed     $needle    Si needle contient plus d'un caractère, seul le premier sera utilisé. Ce comportement est différent de celui de strchr(). Si needle n'est pas une chaîne, il est converti en entier, et utilisée comme caractère de code ASCII correspondant.
 *
 * @return string	Retourne la portion de la chaîne, ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('strrchrThis'))
{
    function strrchrThis($haystack, $needle)
    {
		$haystack = (string)$haystack;
		$needle = ($needle);
		return strrchr($haystack, $needle);
    }
}

/**
 * strrevThis
 *
 * Inverse une chaîne.
 *
 * @link http://php.net/manual/fr/function.strrev.php Documentation pour strrev.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne à inverser.
 *
 * @return string	Retourne la chaîne inversée.
 *
 */
if(!function_exists('strrevThis'))
{
    function strrevThis($string)
    {
		$string = (string)$string;

		return strrev($string);
    }
}

/**
 * strriposThis
 *
 * Cherche la position de la dernière occurrence d'une chaîne contenue dans une autre, de façon insensible à la casse.
 *
 * @link http://php.net/manual/fr/function.strripos.php Documentation pour strripos.
 *
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne dans laquelle on doit chercher.
 * @param string   $needle    Si needle n'est pas une chaîne, il sera converti en un entier, et appliqué comme valeur ordinale d'un caractère.
 * @param int      $offset    Si spécifié, la recherche commencera à ce nombre de caractères compté depuis le début de la chaîne. Si la valeur est négative, la recherche commencera depuis ce nombre de caractères depuis la fin de la chaîne, en cherchant en arrière.
 *
 * @return int	Retourne la position de la dernière occurrence de needle relativement au début de la chaîne haystack (indépendamment de la direction de recherche ou de l'offset). Notez que la position commence à partir de 0, et non de 1.
 *
 */
if(!function_exists('strriposThis'))
{
    function strriposThis($haystack, $needle, $offset = 0)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;

		return strripos($haystack, $needle, $offset);
    }
}

/**
 * strrposThis
 *
 * Cherche la position de la dernière occurrence d'une sous-chaine dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.strrpos.php Documentation pour strrpos.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne dans laquelle chercher.
 * @param string   $needle    Si needle n'est pas une chaîne de caractères, il sera converti en un entier et utilisé comme valeur ordinale du caractère.
 * @param int      $offset    Si spécifié, la recherche commencera à ce nombre de caractères, compté depuis le début de la chaîne. Si la valeur est négative, la recherche commencera depuis ce nombre de caractères, depuis la fin de la chaîne, en cherchant en arrière.
 *
 * @return int	Retourne la position à laquelle l'occurrence a été trouvée relativement au debut de la chaîne haystack (indépendamment de la direction de recherche ou de l'offset).
 *
 */
if(!function_exists('strrposThis'))
{
    function strrposThis($haystack, $needle, $offset = 0)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;

		return strrpos($haystack, $needle, $offset);
    }
}

/**
 * strspnThis
 *
 * Trouve la longueur du segment initial d'une chaîne contenant tous les caractères d'un masque donné.
 *
 * @link http://php.net/manual/fr/function.strspn.php Documentation pour strspn.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $subject    La chaîne à analyser.
 * @param string   $mask    La liste des caractères autorisés.
 * @param int      $start    La position dans la chaîne subject à partir de laquelle nous devons chercher. Si start est fourni et n'est pas négatif, alors strspn() commencera à analyser la chaîne subject à la position start. Par exemple, dans la chaîne 'abcdef', le caractère à la position 0 est 'a', le caractère à la position 2 est 'c', et ainsi de suite. Si start est fourni et est négatif, alors strspn() commencera à analyser la chaîne subject à la position start depuis la fin de la chaîne subject.
 * @param int      $length    La longueur de la chaîne à analyser. Si length est fourni et n'est pas négatif, alors subject sera examiné sur length caractères après la position de départ. Si length est fourni et est négatif, alors subject sera examiné sur length caractères depuis la fin de la chaîne subject.
 *
 * @return int	Retourne la taille du segment initial de la chaîne subject qui est entièrement constitué de caractères contenus dans mask.
 *
 */
if(!function_exists('strspnThis'))
{
    function strspnThis($subject, $mask, $start = NULL, $length = NULL)
    {
		$subject = (string)$subject;
		$mask = (string)$mask;
		$start = (int)$start;
		$length = (int)$length;

		return strspn($subject, $mask, $start, $length);
    }
}

/**
 * strstrThis
 *
 * Trouve la première occurrence dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.strstr.php Documentation pour strstr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne d'entrée.
 * @param mixed     $needle    Si needle n'est pas une chaîne, elle sera convertie en entier, et utilisée comme code ASCII du caractère correspondant.
 * @param bool     $before_needle    Si vaut TRUE, strstr() retourne la partie de haystack avant la première occurrence de needle (needle étant exclus).
 *
 * @return string	Retourne la portion de la chaîne, ou FALSE si needle n'est pas trouvé.
 *
 */
if(!function_exists('strstrThis'))
{
    function strstrThis($haystack, $needle, $before_needle = false)
    {
		$haystack = (string)$haystack;
		$needle = ($needle);
		$before_needle = (bool)$before_needle;

		return strstr($haystack, $needle, $before_needle);
    }
}

/**
 * strtokThis
 *
 * Coupe une chaîne en segments.
 *
 * @link http://php.net/manual/fr/function.strtok.php Documentation pour strtok.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne que l'on doit couper en plusieurs chaînes de tailles plus petites.
 * @param string   $token    Le délimiteur utilisé lors de la découpe.
 *
 * @return string	Une chaîne coupée.
 *
 */
if(!function_exists('strtokThis'))
{
    function strtokThis($str, $token)
    {
		$str = (string)$str;
		$token = (string)$token;

		return strtok($str, $token);
    }
}

/**
 * strtolowerThis
 *
 * Renvoie une chaîne en minuscules.
 *
 * @link http://php.net/manual/fr/function.strtolower.php Documentation pour strtolower.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne en minuscule.
 *
 */
if(!function_exists('strtolowerThis'))
{
    function strtolowerThis($str)
    {
		$str = (string)$str;

		return strtolower($str);
    }
}

/**
 * strtotimeThis
 *
 * Transforme un texte anglais en timestamp.
 *
 * @link http://php.net/manual/fr/function.strtotime.php Documentation pour strtotime.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $time    Une chaîne date/heure. Les formats valides sont expliqués dans la documentation sur les formats Date et Heure.
 * @param int      $now    Le timestamp, représentant la date courante, utilisé pour le calcul relative des dates.
 *
 * @return int	Retourne un timestamp en cas de succès, FALSE sinon. Avant PHP 5.1.0, cette fonction retournait -1 en cas d'échec.
 *
 */
if(!function_exists('strtotimeThis'))
{
    function strtotimeThis($time, $now = NULL)
    {
		$time = (string)$time;
		$now = empty($now) ? (int)time() : (int)$now;

		return strtotime($time, $now);
    }
}

/**
 * strtoupperThis
 *
 * Renvoie une chaîne en majuscules.
 *
 * @link http://php.net/manual/fr/function.strtoupper.php Documentation pour strtoupper.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne en majuscule.
 *
 */
if(!function_exists('strtoupperThis'))
{
    function strtoupperThis($string)
    {
		$string = (string)$string;

		return strtoupper($string);
    }
}

/**
 * strtrThis
 *
 * Remplace des caractères dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.strtr.php Documentation pour strtr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne à traiter.
 * @param string   $from    Les caractères de départ.
 * @param string   $to    Les caractères de remplacement.
 *
 * @return string	Retourne la chaîne de caractères modifiée.
 *
 */
if(!function_exists('strtrThis'))
{
    function strtrThis($str, $from, $to)
    {
		$str = (string)$str;
		$from = (string)$from;
		$to = (string)$to;

		return strtr($str, $from, $to);
    }
}

/**
 * strvalThis
 *
 * Récupère la valeur d'une variable, au format chaîne.
 *
 * @link http://php.net/manual/fr/function.strval.php Documentation pour strval.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à convertir en chaîne de caractères. var peut être un scalaire ou un objet implémentant la méthode magique __toString(). Vous ne pouvez pas utiliser la fonction strval() avec des tableaux ou des objets qui n'implémentent pas la méthode magique __toString().
 *
 * @return string	La valeur de la variable var sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('strvalThis'))
{
    function strvalThis($var)
    {
		$var = ($var);
		return strval($var);
    }
}

/**
 * substrThis
 *
 * Retourne un segment de chaîne.
 *
 * @link http://php.net/manual/fr/function.substr.php Documentation pour substr.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $string    La chaîne d'entrée. Doit comporter au moins un caractère.
 * @param int      $start    Si start est positif, la chaîne retournée commencera au caractère numéro start, dans la chaîne string. Le premier caractère est numéroté zéro. En effet, dans la chaîne 'abcdef', le caractère à la position 0 est 'a', le caractère à la position 2 est 'c', et ainsi de suite. Si start est négatif, la chaîne retournée commencera au caractère numéro start à compter de la fin de la chaîne string. Si string est plus petit ou égal à start caractères de long, FALSE sera retourné.
 * @param int      $length    Si length est fourni et est positif, la chaîne retournée contiendra au plus length caractères, en commençant à partir du caractère start (en fonction de la taille de la chaîne string). Si length est fourni et négatif, alors le même nombre de caractères sera omis, en partant de la fin de la chaîne string. Si start représente une position hors de la chaîne, une chaîne vide sera retournée. Si le paramètre length est fourni et vaut 0, FALSE ou NULL, une chaîne vide sera retournée. Si length est omis, la sous chaine commençant à partir de start jusqu'à la fin sera retournée.
 *
 * @return string	Retourne la partie extraite de la chaîne ou FALSE si une erreur survient ou une chaine string vide.
 *
 */
if(!function_exists('substrThis'))
{
    function substrThis($string, $start, $length = NULL)
    {
		$string = (string)$string;
		$start = (int)$start;
		$length = (int)$length;

		return substr($string, $start, $length);
    }
}

/**
 * substr_compareThis
 *
 * Compare deux chaînes depuis un offset jusqu'à une longueur en caractères.
 *
 * @link http://php.net/manual/fr/function.substr-compare.php Documentation pour substr_compare.
 *
 * @version PHP 5
 *
 * @param string   $main_str    La chaîne principale à comparer.
 * @param string   $str    La chaîne secondaire à comparer.
 * @param int      $offset    La position de départ de la comparaison. Si c'est une valeur négative, on commence à compter à partir de la fin de la chaîne.
 * @param int      $length    La longueur de la comparaison. La valeur par défaut est la plus grande longueur du paramètre str comparée à la longueur de main_str, moins la valeur du paramètre offset.
 * @param bool     $case_insensitivity    Si case_insensitivity vaut TRUE, la comparaison est insensible à la casse.
 *
 * @return int	Retourne < 0 si main_str à partir de offset est inférieur à str, > 0 s'il est plus grand que str, et 0 si ils sont égaux. Si length est égal ou plus grand que la taille de main_str ou que length est configuré et est inférieur à 1, substr_compare() affiche une alerte et retourne FALSE.
 *
 */
if(!function_exists('substr_compareThis'))
{
    function substr_compareThis($main_str, $str, $offset, $length = NULL, $case_insensitivity = false)
    {
		$main_str = (string)$main_str;
		$str = (string)$str;
		$offset = (int)$offset;
		$length = (int)$length;
		$case_insensitivity = (bool)$case_insensitivity;

		return substr_compare($main_str, $str, $offset, $length, $case_insensitivity);
    }
}

/**
 * substr_countThis
 *
 * Compte le nombre d'occurrences de segments dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.substr-count.php Documentation pour substr_count.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $haystack    La chaîne de caractères pour rechercher à l'intérieur
 * @param string   $needle    La chaîne de caractères que l'on recherche
 * @param int      $offset    Le décalage où on commence à compter
 * @param int      $length    La taille maximale après le décalage spécifié pour rechercher la chaîne. La fonction émet une erreur si le décalage plus la taille est plus grand que la taille de haystack.
 *
 * @return int	Cette fonction retourne un entier.
 *
 */
if(!function_exists('substr_countThis'))
{
    function substr_countThis($haystack, $needle, $offset = 0, $length = NULL)
    {
		$haystack = (string)$haystack;
		$needle = (string)$needle;
		$offset = (int)$offset;
		$length = (int)$length;

		return substr_count($haystack, $needle, $offset, $length);
    }
}

/**
 * substr_replaceThis
 *
 * Remplace un segment dans une chaîne.
 *
 * @link http://php.net/manual/fr/function.substr-replace.php Documentation pour substr_replace.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $string    La chaîne d'entrée. Un tableau de chaînes de caractères peut être fourni, et dans ce cas, les remplacements surviendront sur chacune des chaînes. Dans cette situation, les paramètres replacement, start length doivent être fournis soit comme valeurs scalaires à appliquer sur chaque chaîne, ou comme tableaux où l'élément du tableau correspondant sera utilisé pour chaque chaîne d'entrée.
 * @param mixed     $replacement    La chaîne de remplacement.
 * @param mixed     $start    Si start est positif, le remplacement se fera à partir du caractère numéro start dans string. Si start est négatif, le remplacement se fera à partir du start-ième caractère en partant de la fin de la chaîne string.
 * @param mixed     $length    Si length est fourni et positif, il représentera la longueur du segment de code remplacé dans la chaîne string. S'il est négatif, il représentera la longueur du segment remplacé, mais compté dans l'ordre inverse de la chaîne string. S'il est omis, il prendra la valeur par défaut de la taille de la chaîne, et remplacera tout jusqu'à la fin de la chaîne string. Bien sûr, si length vaut 0, alors, cette fonction aura comme effet d'insérer replacement dans string à la position start donnée.
 *
 * @return mixed	La chaîne résultante est retournée. Si le paramètre string est un tableau, alors un tableau sera retourné.
 *
 */
if(!function_exists('substr_replaceThis'))
{
    function substr_replaceThis($string, $replacement, $start, $length = NULL)
    {
		$string = ($string);
		$replacement = ($replacement);
		$start = ($start);
		$length = ($length);
		return substr_replace($string, $replacement, $start, $length);
    }
}

/**
 * swf_actiongeturlThis
 *
 * Retourne l'URL d'une animation Shockwave Flash.
 *
 * @link http://php.net/manual/fr/function.swf-actiongeturl.php Documentation pour swf_actiongeturl.
 *
 * @version PHP 4
 *
 * @param string   $url    L'RUL, sous la forme d'une chaîne de caractères.
 * @param string   $target    La cible, sous la forme d'une chaîne de caractères.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actiongeturlThis'))
{
    function swf_actiongeturlThis($url, $target)
    {
		$url = (string)$url;
		$target = (string)$target;

		return swf_actiongeturl($url, $target);
    }
}

/**
 * swf_actiongotoframeThis
 *
 * Joue un cadre puis stoppe.
 *
 * @link http://php.net/manual/fr/function.swf-actiongotoframe.php Documentation pour swf_actiongotoframe.
 *
 * @version PHP 4
 *
 * @param int      $framenumber    Le numéro du cadre.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actiongotoframeThis'))
{
    function swf_actiongotoframeThis($framenumber)
    {
		$framenumber = (int)$framenumber;

		return swf_actiongotoframe($framenumber);
    }
}

/**
 * swf_actiongotolabelThis
 *
 * Joue le cadre Flash spécifié.
 *
 * @link http://php.net/manual/fr/function.swf-actiongotolabel.php Documentation pour swf_actiongotolabel.
 *
 * @version PHP 4
 *
 * @param string   $label    Le libellé du cadre.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actiongotolabelThis'))
{
    function swf_actiongotolabelThis($label)
    {
		$label = (string)$label;

		return swf_actiongotolabel($label);
    }
}

/**
 * swf_actionnextframeThis
 *
 * Avance d'un cadre.
 *
 * @link http://php.net/manual/fr/function.swf-actionnextframe.php Documentation pour swf_actionnextframe.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actionnextframeThis'))
{
    function swf_actionnextframeThis()
    {
		return swf_actionnextframe();
    }
}

/**
 * swf_actionplayThis
 *
 * Joue l'animation Flash à partir du cadre courant.
 *
 * @link http://php.net/manual/fr/function.swf-actionplay.php Documentation pour swf_actionplay.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actionplayThis'))
{
    function swf_actionplayThis()
    {
		return swf_actionplay();
    }
}

/**
 * swf_actionprevframeThis
 *
 * Recule d'un cadre.
 *
 * @link http://php.net/manual/fr/function.swf-actionprevframe.php Documentation pour swf_actionprevframe.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actionprevframeThis'))
{
    function swf_actionprevframeThis()
    {
		return swf_actionprevframe();
    }
}

/**
 * swf_actionsettargetThis
 *
 * Fixe le contexte des actions.
 *
 * @link http://php.net/manual/fr/function.swf-actionsettarget.php Documentation pour swf_actionsettarget.
 *
 * @version PHP 4
 *
 * @param string   $target    La cible, sous la forme d'une chaîne de caractères.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actionsettargetThis'))
{
    function swf_actionsettargetThis($target)
    {
		$target = (string)$target;

		return swf_actionsettarget($target);
    }
}

/**
 * swf_actionstopThis
 *
 * Arrête l'animation Flash.
 *
 * @link http://php.net/manual/fr/function.swf-actionstop.php Documentation pour swf_actionstop.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actionstopThis'))
{
    function swf_actionstopThis()
    {
		return swf_actionstop();
    }
}

/**
 * swf_actiontogglequalityThis
 *
 * Choisit le niveau de qualité de l'animation Flash.
 *
 * @link http://php.net/manual/fr/function.swf-actiontogglequality.php Documentation pour swf_actiontogglequality.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actiontogglequalityThis'))
{
    function swf_actiontogglequalityThis()
    {
		return swf_actiontogglequality();
    }
}

/**
 * swf_actionwaitforframeThis
 *
 * Ignore les actions si le cadre Flash n'est pas chargé.
 *
 * @link http://php.net/manual/fr/function.swf-actionwaitforframe.php Documentation pour swf_actionwaitforframe.
 *
 * @version PHP 4
 *
 * @param int      $framenumber    Le numéro du cadre.
 * @param int      $skipcount    Le numéro des actions à ignorer.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_actionwaitforframeThis'))
{
    function swf_actionwaitforframeThis($framenumber, $skipcount)
    {
		$framenumber = (int)$framenumber;
		$skipcount = (int)$skipcount;

		return swf_actionwaitforframe($framenumber, $skipcount);
    }
}

/**
 * swf_addbuttonrecordThis
 *
 * Contrôle la situation, l'apparence et la zone active du bouton Flash courant.
 *
 * @link http://php.net/manual/fr/function.swf-addbuttonrecord.php Documentation pour swf_addbuttonrecord.
 *
 * @version PHP 4
 *
 * @param int      $states    Définit les états du bouton autorisés : ce peut être BSHitTest, BSDown, BSOver ou BSUp.
 * @param int      $shapeid    shapeid est l'apparence du bouton, c'est-à-dire l'objet qui représente le bouton.
 * @param int      $depth    La profondeur de placement du bouton, dans le cadre courant.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_addbuttonrecordThis'))
{
    function swf_addbuttonrecordThis($states, $shapeid, $depth)
    {
		$states = (int)$states;
		$shapeid = (int)$shapeid;
		$depth = (int)$depth;

		return swf_addbuttonrecord($states, $shapeid, $depth);
    }
}

/**
 * swf_addcolorThis
 *
 * Fixe la couleur globale d'addition Flash.
 *
 * @link http://php.net/manual/fr/function.swf-addcolor.php Documentation pour swf_addcolor.
 *
 * @version PHP 4
 *
 * @param float    $r    La valeur pour le rouge
 * @param float    $g    La valeur pour le vert
 * @param float    $b    La valeur pour le bleu
 * @param float    $a    La valeur pour l'alpha
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_addcolorThis'))
{
    function swf_addcolorThis($r, $g, $b, $a)
    {
		$r = (float)$r;
		$g = (float)$g;
		$b = (float)$b;
		$a = (float)$a;

		return swf_addcolor($r, $g, $b, $a);
    }
}

/**
 * swf_closefileThis
 *
 * Ferme le fichier courant Shockwave Flash.
 *
 * @link http://php.net/manual/fr/function.swf-closefile.php Documentation pour swf_closefile.
 *
 * @version PHP 4
 *
 * @param int      $return_file    Si le paramètre return_file a été fourni, il contiendra le fichier SWF fermé.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_closefileThis'))
{
    function swf_closefileThis($return_file = NULL)
    {
		$return_file = (int)$return_file;

		return swf_closefile($return_file);
    }
}

/**
 * swf_definebitmapThis
 *
 * Définit une image bitmap.
 *
 * @link http://php.net/manual/fr/function.swf-definebitmap.php Documentation pour swf_definebitmap.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet SWF.
 * @param string   $image_name    Une image GIF, JPEG, RGB ou FI. L'image sera convertie en Flash JPEG ou Flash color map.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_definebitmapThis'))
{
    function swf_definebitmapThis($objid, $image_name)
    {
		$objid = (int)$objid;
		$image_name = (string)$image_name;

		return swf_definebitmap($objid, $image_name);
    }
}

/**
 * swf_definefontThis
 *
 * Définit une police Flash.
 *
 * @link http://php.net/manual/fr/function.swf-definefont.php Documentation pour swf_definefont.
 *
 * @version PHP 4
 *
 * @param int      $fontid    L'identifiant à donner à la police.
 * @param string   $fontname    La police définie comme police courante.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_definefontThis'))
{
    function swf_definefontThis($fontid, $fontname)
    {
		$fontid = (int)$fontid;
		$fontname = (string)$fontname;

		return swf_definefont($fontid, $fontname);
    }
}

/**
 * swf_definelineThis
 *
 * Définit une ligne.
 *
 * @link http://php.net/manual/fr/function.swf-defineline.php Documentation pour swf_defineline.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet.
 * @param float    $x1    X : coordonnée du point de départ.
 * @param float    $y1    Y : coordonnée du point de départ.
 * @param float    $x2    X : coordonnée du point de fin.
 * @param float    $y2    Y : coordonnée du point de fin.
 * @param float    $width    L'épaisseur de la ligne.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_definelineThis'))
{
    function swf_definelineThis($objid, $x1, $y1, $x2, $y2, $width)
    {
		$objid = (int)$objid;
		$x1 = (float)$x1;
		$y1 = (float)$y1;
		$x2 = (float)$x2;
		$y2 = (float)$y2;
		$width = (float)$width;

		return swf_defineline($objid, $x1, $y1, $x2, $y2, $width);
    }
}

/**
 * swf_definepolyThis
 *
 * Définit un polygone Flash.
 *
 * @link http://php.net/manual/fr/function.swf-definepoly.php Documentation pour swf_definepoly.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet.
 * @param array    $coords    Un tableau de coordonnées x et y.
 * @param int      $npoints    Le nombre de points contenus dans le tableau coords.
 * @param float    $width    La largeur des bords du polygone. Si width vaut 0.0, le polygone sera rempli.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_definepolyThis'))
{
    function swf_definepolyThis($objid, $coords, $npoints, $width)
    {
		$objid = (int)$objid;
		$coords = (array)$coords;
		$npoints = (int)$npoints;
		$width = (float)$width;

		return swf_definepoly($objid, $coords, $npoints, $width);
    }
}

/**
 * swf_definerectThis
 *
 * Définit un rectangle.
 *
 * @link http://php.net/manual/fr/function.swf-definerect.php Documentation pour swf_definerect.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet.
 * @param float    $x1    X : coordonnée du point en haut, à gauche.
 * @param float    $y1    Y : coordonnée du point en haut, à gauche.
 * @param float    $x2    X : coordonnée du point en bas, à droite.
 * @param float    $y2    Y : coordonnée du point en bas, à droite.
 * @param float    $width    L'épaisseur des bords est donnée par le paramètre width. width, 0.0 le rectangle sera rempli.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_definerectThis'))
{
    function swf_definerectThis($objid, $x1, $y1, $x2, $y2, $width)
    {
		$objid = (int)$objid;
		$x1 = (float)$x1;
		$y1 = (float)$y1;
		$x2 = (float)$x2;
		$y2 = (float)$y2;
		$width = (float)$width;

		return swf_definerect($objid, $x1, $y1, $x2, $y2, $width);
    }
}

/**
 * swf_definetextThis
 *
 * Définit une chaîne de texte.
 *
 * @link http://php.net/manual/fr/function.swf-definetext.php Documentation pour swf_definetext.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet.
 * @param string   $str    Le texte, sous la forme d'une chaîne de caractères.
 * @param int      $docenter    docenter indique si la chaîne doit être centrée (valeur de 1), ou pas.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_definetextThis'))
{
    function swf_definetextThis($objid, $str, $docenter)
    {
		$objid = (int)$objid;
		$str = (string)$str;
		$docenter = (int)$docenter;

		return swf_definetext($objid, $str, $docenter);
    }
}

/**
 * swf_endbuttonThis
 *
 * Termine la définition du bouton Flash courant.
 *
 * @link http://php.net/manual/fr/function.swf-endbutton.php Documentation pour swf_endbutton.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_endbuttonThis'))
{
    function swf_endbuttonThis()
    {
		return swf_endbutton();
    }
}

/**
 * swf_enddoactionThis
 *
 * Termine l'action courante.
 *
 * @link http://php.net/manual/fr/function.swf-enddoaction.php Documentation pour swf_enddoaction.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_enddoactionThis'))
{
    function swf_enddoactionThis()
    {
		return swf_enddoaction();
    }
}

/**
 * swf_endshapeThis
 *
 * Complète la définition de la forme Flash courante.
 *
 * @link http://php.net/manual/fr/function.swf-endshape.php Documentation pour swf_endshape.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_endshapeThis'))
{
    function swf_endshapeThis()
    {
		return swf_endshape();
    }
}

/**
 * swf_endsymbolThis
 *
 * Termine la définition de symbole.
 *
 * @link http://php.net/manual/fr/function.swf-endsymbol.php Documentation pour swf_endsymbol.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_endsymbolThis'))
{
    function swf_endsymbolThis()
    {
		return swf_endsymbol();
    }
}

/**
 * swf_fontsizeThis
 *
 * Change la taille de la police.
 *
 * @link http://php.net/manual/fr/function.swf-fontsize.php Documentation pour swf_fontsize.
 *
 * @version PHP 4
 *
 * @param float    $size    La taille de la police, sous la forme d'un entier.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_fontsizeThis'))
{
    function swf_fontsizeThis($size)
    {
		$size = (float)$size;

		return swf_fontsize($size);
    }
}

/**
 * swf_fontslantThis
 *
 * Change l'inclinaison de la police courante.
 *
 * @link http://php.net/manual/fr/function.swf-fontslant.php Documentation pour swf_fontslant.
 *
 * @version PHP 4
 *
 * @param float    $slant    Les valeurs positives créeront une inclinaison vers la droite, les négatives, vers la gauche.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_fontslantThis'))
{
    function swf_fontslantThis($slant)
    {
		$slant = (float)$slant;

		return swf_fontslant($slant);
    }
}

/**
 * swf_fonttrackingThis
 *
 * Change l'espacement des caractères.
 *
 * @link http://php.net/manual/fr/function.swf-fonttracking.php Documentation pour swf_fonttracking.
 *
 * @version PHP 4
 *
 * @param float    $tracking    L'espacement entre les caractères.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_fonttrackingThis'))
{
    function swf_fonttrackingThis($tracking)
    {
		$tracking = (float)$tracking;

		return swf_fonttracking($tracking);
    }
}

/**
 * swf_getbitmapinfoThis
 *
 * Lit les informations sur une image.
 *
 * @link http://php.net/manual/fr/function.swf-getbitmapinfo.php Documentation pour swf_getbitmapinfo.
 *
 * @version PHP 4
 *
 * @param int      $bitmapid    L'identifiant de l'image bitmap.
 *
 * @return array	Le tableau contient les éléments suivants :
 *
 */
if(!function_exists('swf_getbitmapinfoThis'))
{
    function swf_getbitmapinfoThis($bitmapid)
    {
		$bitmapid = (int)$bitmapid;

		return swf_getbitmapinfo($bitmapid);
    }
}

/**
 * swf_getfontinfoThis
 *
 * Retourne des informations sur la police.
 *
 * @link http://php.net/manual/fr/function.swf-getfontinfo.php Documentation pour swf_getfontinfo.
 *
 * @version PHP 4
 * @return array	Retourne un tableau associatif avec les paramètres suivants :
 *
 */
if(!function_exists('swf_getfontinfoThis'))
{
    function swf_getfontinfoThis()
    {
		return swf_getfontinfo();
    }
}

/**
 * swf_getframeThis
 *
 * Retourne le numéro de cadre courant.
 *
 * @link http://php.net/manual/fr/function.swf-getframe.php Documentation pour swf_getframe.
 *
 * @version PHP 4
 * @return int	Retourne le numéro du cadre courant, sous la forme d'un entier.
 *
 */
if(!function_exists('swf_getframeThis'))
{
    function swf_getframeThis()
    {
		return swf_getframe();
    }
}

/**
 * swf_labelframeThis
 *
 * Nomme le cadre courant.
 *
 * @link http://php.net/manual/fr/function.swf-labelframe.php Documentation pour swf_labelframe.
 *
 * @version PHP 4
 *
 * @param string   $name    Le nom du cadre.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_labelframeThis'))
{
    function swf_labelframeThis($name)
    {
		$name = (string)$name;

		return swf_labelframe($name);
    }
}

/**
 * swf_lookatThis
 *
 * Définit une transformation de vue.
 *
 * @link http://php.net/manual/fr/function.swf-lookat.php Documentation pour swf_lookat.
 *
 * @version PHP 4
 *
 * @param float    $view_x    X : coordonnée de la position de la vue.
 * @param float    $view_y    Y : coordonnée de la position de la vue.
 * @param float    $view_z    Z : coordonnée de la position de la vue.
 * @param float    $reference_x    X : coordonnée du point de référence.
 * @param float    $reference_y    Y : coordonnée du point de référence.
 * @param float    $reference_z    Z : coordonnée du point de référence.
 * @param float    $twist    Contrôle la rotation autour de l'axe Z.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_lookatThis'))
{
    function swf_lookatThis($view_x, $view_y, $view_z, $reference_x, $reference_y, $reference_z, $twist)
    {
		$view_x = (float)$view_x;
		$view_y = (float)$view_y;
		$view_z = (float)$view_z;
		$reference_x = (float)$reference_x;
		$reference_y = (float)$reference_y;
		$reference_z = (float)$reference_z;
		$twist = (float)$twist;

		return swf_lookat($view_x, $view_y, $view_z, $reference_x, $reference_y, $reference_z, $twist);
    }
}

/**
 * swf_modifyobjectThis
 *
 * Modifie un objet Flash.
 *
 * @link http://php.net/manual/fr/function.swf-modifyobject.php Documentation pour swf_modifyobject.
 *
 * @version PHP 4
 *
 * @param int      $depth    La profondeur, sous la forme d'un entier.
 * @param int      $how    Détermine ce qui doit être modifié. how peut prendre les valeurs de MOD_MATRIX, MOD_COLOR ou la combinaison des deux. MOD_COLOR utilise la couleur courante de multiplication (spécifiée par swf_mulcolor()) et la couleur courante d'addition (spécifiée par swf_addcolor()) pour colorer l'objet, et MOD_MATRIX utilise la matrice courante pour positionner l'objet.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_modifyobjectThis'))
{
    function swf_modifyobjectThis($depth, $how)
    {
		$depth = (int)$depth;
		$how = (int)$how;

		return swf_modifyobject($depth, $how);
    }
}

/**
 * swf_mulcolorThis
 *
 * Fixe la couleur globale de multiplication.
 *
 * @link http://php.net/manual/fr/function.swf-mulcolor.php Documentation pour swf_mulcolor.
 *
 * @version PHP 4
 *
 * @param float    $r    La valeur pour le rouge
 * @param float    $g    La valeur pour le vert
 * @param float    $b    La valeur pour le bleu
 * @param float    $a    La valeur pour l'alpha
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_mulcolorThis'))
{
    function swf_mulcolorThis($r, $g, $b, $a)
    {
		$r = (float)$r;
		$g = (float)$g;
		$b = (float)$b;
		$a = (float)$a;

		return swf_mulcolor($r, $g, $b, $a);
    }
}

/**
 * swf_nextidThis
 *
 * Retourne le prochain identifiant d'objet libre.
 *
 * @link http://php.net/manual/fr/function.swf-nextid.php Documentation pour swf_nextid.
 *
 * @version PHP 4
 * @return int	Retourne l'identifiant, sous la forme d'un entier.
 *
 */
if(!function_exists('swf_nextidThis'))
{
    function swf_nextidThis()
    {
		return swf_nextid();
    }
}

/**
 * swf_onconditionThis
 *
 * Décrit la transition utilisée pour déclencher une liste d'actions.
 *
 * @link http://php.net/manual/fr/function.swf-oncondition.php Documentation pour swf_oncondition.
 *
 * @version PHP 4
 *
 * @param int      $transition    Il y a plusieurs types de transitions possibles, les suivantes sont destinées aux boutons de type TYPE_MENUBUTTON :
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_onconditionThis'))
{
    function swf_onconditionThis($transition)
    {
		$transition = (int)$transition;

		return swf_oncondition($transition);
    }
}

/**
 * swf_openfileThis
 *
 * Ouvre un nouveau fichier Shockwave Flash.
 *
 * @link http://php.net/manual/fr/function.swf-openfile.php Documentation pour swf_openfile.
 *
 * @version PHP 4
 *
 * @param string   $filename    Le chemin vers le fichier SWF. Si vous voulez envoyer la sortie à l'écran, définissez ce paramètre à php://stdout.
 * @param float    $width    La largeur de la vidéo
 * @param float    $height    La hauteur de la vidéo
 * @param float    $framerate    L'échantillonnage du cadre
 * @param float    $r    Valeur du rouge pour l'arrière-plan
 * @param float    $g    Valeur du vert pour l'arrière-plan
 * @param float    $b    Valeur du bleu pour l'arrière-plan
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_openfileThis'))
{
    function swf_openfileThis($filename, $width, $height, $framerate, $r, $g, $b)
    {
		$filename = (string)$filename;
		$width = (float)$width;
		$height = (float)$height;
		$framerate = (float)$framerate;
		$r = (float)$r;
		$g = (float)$g;
		$b = (float)$b;

		return swf_openfile($filename, $width, $height, $framerate, $r, $g, $b);
    }
}

/**
 * swf_orthoThis
 *
 * Définit une projection orthogonale entre les coordonnées utilisateur et le port courant.
 *
 * @link http://php.net/manual/fr/function.swf-ortho.php Documentation pour swf_ortho.
 *
 * @version PHP 4 >= 4.0.1
 *
 * @param float    $xmin
 * @param float    $xmax
 * @param float    $ymin
 * @param float    $ymax
 * @param float    $zmin
 * @param float    $zmax
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_orthoThis'))
{
    function swf_orthoThis($xmin, $xmax, $ymin, $ymax, $zmin, $zmax)
    {
		$xmin = (float)$xmin;
		$xmax = (float)$xmax;
		$ymin = (float)$ymin;
		$ymax = (float)$ymax;
		$zmin = (float)$zmin;
		$zmax = (float)$zmax;

		return swf_ortho($xmin, $xmax, $ymin, $ymax, $zmin, $zmax);
    }
}

/**
 * swf_ortho2This
 *
 * Définit une projection orthogonale à 2 dimensions entre les coordonnées utilisateur et le port courant.
 *
 * @link http://php.net/manual/fr/function.swf-ortho2.php Documentation pour swf_ortho2.
 *
 * @version PHP 4
 *
 * @param float    $xmin
 * @param float    $xmax
 * @param float    $ymin
 * @param float    $ymax
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_ortho2This'))
{
    function swf_ortho2This($xmin, $xmax, $ymin, $ymax)
    {
		$xmin = (float)$xmin;
		$xmax = (float)$xmax;
		$ymin = (float)$ymin;
		$ymax = (float)$ymax;

		return swf_ortho2($xmin, $xmax, $ymin, $ymax);
    }
}

/**
 * swf_perspectiveThis
 *
 * Définit une projection orthogonale à 3 dimensions entre les coordonnées utilisateur et le port courant.
 *
 * @link http://php.net/manual/fr/function.swf-perspective.php Documentation pour swf_perspective.
 *
 * @version PHP 4
 *
 * @param float    $fovy    L'angle de vue de la direction y.
 * @param float    $aspect    Le paramètre aspect doit être choisi pour correspondre au ratio de la vue utilisée.
 * @param float    $near    Le plan adjacent proche.
 * @param float    $far    Le plan adjacent distant.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_perspectiveThis'))
{
    function swf_perspectiveThis($fovy, $aspect, $near, $far)
    {
		$fovy = (float)$fovy;
		$aspect = (float)$aspect;
		$near = (float)$near;
		$far = (float)$far;

		return swf_perspective($fovy, $aspect, $near, $far);
    }
}

/**
 * swf_placeobjectThis
 *
 * Place un objet sur la scène.
 *
 * @link http://php.net/manual/fr/function.swf-placeobject.php Documentation pour swf_placeobject.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet.
 * @param int      $depth    Doivent être compris entre 1 et 65535.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_placeobjectThis'))
{
    function swf_placeobjectThis($objid, $depth)
    {
		$objid = (int)$objid;
		$depth = (int)$depth;

		return swf_placeobject($objid, $depth);
    }
}

/**
 * swf_polarviewThis
 *
 * Définit le point de vue de l'utilisateur en coordonnées polaires.
 *
 * @link http://php.net/manual/fr/function.swf-polarview.php Documentation pour swf_polarview.
 *
 * @version PHP 4
 *
 * @param float    $dist    La distance entre le point de vue et l'origine.
 * @param float    $azimuth    Définit l'angle azimutal dans le plan x,y mesuré en distance depuis l'axe y.
 * @param float    $incidence    Définit l'angle d'incidence dans le plan y,z, mesuré en distance depuis l'axe z.
 * @param float    $twist    L'angle de rotation du point de vue sur la ligne de vue, en utilisant la règle de la main droite.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_polarviewThis'))
{
    function swf_polarviewThis($dist, $azimuth, $incidence, $twist)
    {
		$dist = (float)$dist;
		$azimuth = (float)$azimuth;
		$incidence = (float)$incidence;
		$twist = (float)$twist;

		return swf_polarview($dist, $azimuth, $incidence, $twist);
    }
}

/**
 * swf_popmatrixThis
 *
 * Dépile la matrice de transformation.
 *
 * @link http://php.net/manual/fr/function.swf-popmatrix.php Documentation pour swf_popmatrix.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_popmatrixThis'))
{
    function swf_popmatrixThis()
    {
		return swf_popmatrix();
    }
}

/**
 * swf_posroundThis
 *
 * Active l'approximation des translations d'objets Flash.
 *
 * @link http://php.net/manual/fr/function.swf-posround.php Documentation pour swf_posround.
 *
 * @version PHP 4
 *
 * @param int      $round    Active l'approximation (1) ou la désactive (0).
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_posroundThis'))
{
    function swf_posroundThis($round)
    {
		$round = (int)$round;

		return swf_posround($round);
    }
}

/**
 * swf_pushmatrixThis
 *
 * Empile la matrice de transformations courante dans la pile.
 *
 * @link http://php.net/manual/fr/function.swf-pushmatrix.php Documentation pour swf_pushmatrix.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_pushmatrixThis'))
{
    function swf_pushmatrixThis()
    {
		return swf_pushmatrix();
    }
}

/**
 * swf_removeobjectThis
 *
 * Enlève un objet.
 *
 * @link http://php.net/manual/fr/function.swf-removeobject.php Documentation pour swf_removeobject.
 *
 * @version PHP 4
 *
 * @param int      $depth    La profondeur, sous la forme d'un entier.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_removeobjectThis'))
{
    function swf_removeobjectThis($depth)
    {
		$depth = (int)$depth;

		return swf_removeobject($depth);
    }
}

/**
 * swf_rotateThis
 *
 * Rotation de la transformation courante.
 *
 * @link http://php.net/manual/fr/function.swf-rotate.php Documentation pour swf_rotate.
 *
 * @version PHP 4
 *
 * @param float    $angle    L'angle de rotation.
 * @param string   $axis    Les valeurs possibles pour axis sont : 'x' (abscisses), 'y' (ordonnées) ou 'z' (cote).
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_rotateThis'))
{
    function swf_rotateThis($angle, $axis)
    {
		$angle = (float)$angle;
		$axis = (string)$axis;

		return swf_rotate($angle, $axis);
    }
}

/**
 * swf_scaleThis
 *
 * Homothétie.
 *
 * @link http://php.net/manual/fr/function.swf-scale.php Documentation pour swf_scale.
 *
 * @version PHP 4
 *
 * @param float    $x    Facteur X.
 * @param float    $y    Facteur Y.
 * @param float    $z    Facteur Z.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_scaleThis'))
{
    function swf_scaleThis($x, $y, $z)
    {
		$x = (float)$x;
		$y = (float)$y;
		$z = (float)$z;

		return swf_scale($x, $y, $z);
    }
}

/**
 * swf_setfontThis
 *
 * Change la police courante.
 *
 * @link http://php.net/manual/fr/function.swf-setfont.php Documentation pour swf_setfont.
 *
 * @version PHP 4
 *
 * @param int      $fontid    L'identifiant de la police.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_setfontThis'))
{
    function swf_setfontThis($fontid)
    {
		$fontid = (int)$fontid;

		return swf_setfont($fontid);
    }
}

/**
 * swf_setframeThis
 *
 * Fixe le cadre courant.
 *
 * @link http://php.net/manual/fr/function.swf-setframe.php Documentation pour swf_setframe.
 *
 * @version PHP 4
 *
 * @param int      $framenumber    Le numéro du cadre à définir.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_setframeThis'))
{
    function swf_setframeThis($framenumber)
    {
		$framenumber = (int)$framenumber;

		return swf_setframe($framenumber);
    }
}

/**
 * swf_shapearcThis
 *
 * Dessine un arc de cercle.
 *
 * @link http://php.net/manual/fr/function.swf-shapearc.php Documentation pour swf_shapearc.
 *
 * @version PHP 4
 *
 * @param float    $x    X : coordonnée du centre.
 * @param float    $y    Y : coordonnée du centre.
 * @param float    $r    Le radius de l'arc.
 * @param float    $ang1    L'angle de départ.
 * @param float    $ang2    L'angle de fin.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapearcThis'))
{
    function swf_shapearcThis($x, $y, $r, $ang1, $ang2)
    {
		$x = (float)$x;
		$y = (float)$y;
		$r = (float)$r;
		$ang1 = (float)$ang1;
		$ang2 = (float)$ang2;

		return swf_shapearc($x, $y, $r, $ang1, $ang2);
    }
}

/**
 * swf_shapecurvetoThis
 *
 * Dessine une courbe de Bézier quadratique entre deux points.
 *
 * @link http://php.net/manual/fr/function.swf-shapecurveto.php Documentation pour swf_shapecurveto.
 *
 * @version PHP 4
 *
 * @param float    $x1    X : coordonnée du premier point.
 * @param float    $y1    Y : coordonnée du premier point.
 * @param float    $x2    X : coordonnée du second point.
 * @param float    $y2    Y : coordonnée du second point.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapecurvetoThis'))
{
    function swf_shapecurvetoThis($x1, $y1, $x2, $y2)
    {
		$x1 = (float)$x1;
		$y1 = (float)$y1;
		$x2 = (float)$x2;
		$y2 = (float)$y2;

		return swf_shapecurveto($x1, $y1, $x2, $y2);
    }
}

/**
 * swf_shapecurveto3This
 *
 * Dessine une courbe Bézier cubique.
 *
 * @link http://php.net/manual/fr/function.swf-shapecurveto3.php Documentation pour swf_shapecurveto3.
 *
 * @version PHP 4
 *
 * @param float    $x1    X : coordonnée du premier point de contrôle.
 * @param float    $y1    Y : coordonnée du premier point de contrôle.
 * @param float    $x2    X : coordonnée du second point de contrôle.
 * @param float    $y2    Y : coordonnée du second point de contrôle.
 * @param float    $x3    X : coordonnée du point final.
 * @param float    $y3    Y : coordonnée du point final.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapecurveto3This'))
{
    function swf_shapecurveto3This($x1, $y1, $x2, $y2, $x3, $y3)
    {
		$x1 = (float)$x1;
		$y1 = (float)$y1;
		$x2 = (float)$x2;
		$y2 = (float)$y2;
		$x3 = (float)$x3;
		$y3 = (float)$y3;

		return swf_shapecurveto3($x1, $y1, $x2, $y2, $x3, $y3);
    }
}

/**
 * swf_shapefillbitmapclipThis
 *
 * Choisit le mode de remplissage Flash par texture.
 *
 * @link http://php.net/manual/fr/function.swf-shapefillbitmapclip.php Documentation pour swf_shapefillbitmapclip.
 *
 * @version PHP 4
 *
 * @param int      $bitmapid    L'identifiant du bitmap.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapefillbitmapclipThis'))
{
    function swf_shapefillbitmapclipThis($bitmapid)
    {
		$bitmapid = (int)$bitmapid;

		return swf_shapefillbitmapclip($bitmapid);
    }
}

/**
 * swf_shapefillbitmaptileThis
 *
 * Choisit le mode de remplissage par texture Flash répétée.
 *
 * @link http://php.net/manual/fr/function.swf-shapefillbitmaptile.php Documentation pour swf_shapefillbitmaptile.
 *
 * @version PHP 4
 *
 * @param int      $bitmapid    L'identifiant du bitmap.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapefillbitmaptileThis'))
{
    function swf_shapefillbitmaptileThis($bitmapid)
    {
		$bitmapid = (int)$bitmapid;

		return swf_shapefillbitmaptile($bitmapid);
    }
}

/**
 * swf_shapefilloffThis
 *
 * Désactive le remplissage de formes Flash.
 *
 * @link http://php.net/manual/fr/function.swf-shapefilloff.php Documentation pour swf_shapefilloff.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapefilloffThis'))
{
    function swf_shapefilloffThis()
    {
		return swf_shapefilloff();
    }
}

/**
 * swf_shapefillsolidThis
 *
 * Fixe la couleur pour le style courant de remplissage Flash.
 *
 * @link http://php.net/manual/fr/function.swf-shapefillsolid.php Documentation pour swf_shapefillsolid.
 *
 * @version PHP 4
 *
 * @param float    $r    La valeur pour le rouge
 * @param float    $g    La valeur pour le vert
 * @param float    $b    La valeur pour le bleu
 * @param float    $a    La valeur pour l'alpha
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapefillsolidThis'))
{
    function swf_shapefillsolidThis($r, $g, $b, $a)
    {
		$r = (float)$r;
		$g = (float)$g;
		$b = (float)$b;
		$a = (float)$a;

		return swf_shapefillsolid($r, $g, $b, $a);
    }
}

/**
 * swf_shapelinesolidThis
 *
 * Fixe le style courant de ligne.
 *
 * @link http://php.net/manual/fr/function.swf-shapelinesolid.php Documentation pour swf_shapelinesolid.
 *
 * @version PHP 4
 *
 * @param float    $r    La valeur pour le rouge
 * @param float    $g    La valeur pour le vert
 * @param float    $b    La valeur pour le bleu
 * @param float    $a    La valeur pour l'alpha
 * @param float    $width    L'épaisseur de la ligne. Si défini à 0.0, aucune ligne ne sera tracée.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapelinesolidThis'))
{
    function swf_shapelinesolidThis($r, $g, $b, $a, $width)
    {
		$r = (float)$r;
		$g = (float)$g;
		$b = (float)$b;
		$a = (float)$a;
		$width = (float)$width;

		return swf_shapelinesolid($r, $g, $b, $a, $width);
    }
}

/**
 * swf_shapelinetoThis
 *
 * Dessine une ligne.
 *
 * @link http://php.net/manual/fr/function.swf-shapelineto.php Documentation pour swf_shapelineto.
 *
 * @version PHP 4
 *
 * @param float    $x    X : coordonnée de la cible.
 * @param float    $y    Y : coordonnée de la cible.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapelinetoThis'))
{
    function swf_shapelinetoThis($x, $y)
    {
		$x = (float)$x;
		$y = (float)$y;

		return swf_shapelineto($x, $y);
    }
}

/**
 * swf_shapemovetoThis
 *
 * Change la position courante.
 *
 * @link http://php.net/manual/fr/function.swf-shapemoveto.php Documentation pour swf_shapemoveto.
 *
 * @version PHP 4
 *
 * @param float    $x    X : coordonnée de la cible.
 * @param float    $y    Y : coordonnée de la cible.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_shapemovetoThis'))
{
    function swf_shapemovetoThis($x, $y)
    {
		$x = (float)$x;
		$y = (float)$y;

		return swf_shapemoveto($x, $y);
    }
}

/**
 * swf_showframeThis
 *
 * Affiche le cadre courant.
 *
 * @link http://php.net/manual/fr/function.swf-showframe.php Documentation pour swf_showframe.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_showframeThis'))
{
    function swf_showframeThis()
    {
		return swf_showframe();
    }
}

/**
 * swf_startbuttonThis
 *
 * Commence la définition d'un bouton.
 *
 * @link http://php.net/manual/fr/function.swf-startbutton.php Documentation pour swf_startbutton.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet.
 * @param int      $type    Peut prendre les valeurs de TYPE_MENUBUTTON ou TYPE_PUSHBUTTON. La constante TYPE_MENUBUTTON permet au focus de traverser lorsque la souris est cliquée, alors que TYPE_PUSHBUTTON ne le permet pas.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_startbuttonThis'))
{
    function swf_startbuttonThis($objid, $type)
    {
		$objid = (int)$objid;
		$type = (int)$type;

		return swf_startbutton($objid, $type);
    }
}

/**
 * swf_startdoactionThis
 *
 * Commence la description d'une liste d'actions pour le cadre courant.
 *
 * @link http://php.net/manual/fr/function.swf-startdoaction.php Documentation pour swf_startdoaction.
 *
 * @version PHP 4
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_startdoactionThis'))
{
    function swf_startdoactionThis()
    {
		return swf_startdoaction();
    }
}

/**
 * swf_startshapeThis
 *
 * Commence une forme complexe.
 *
 * @link http://php.net/manual/fr/function.swf-startshape.php Documentation pour swf_startshape.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_startshapeThis'))
{
    function swf_startshapeThis($objid)
    {
		$objid = (int)$objid;

		return swf_startshape($objid);
    }
}

/**
 * swf_startsymbolThis
 *
 * Définit un symbole.
 *
 * @link http://php.net/manual/fr/function.swf-startsymbol.php Documentation pour swf_startsymbol.
 *
 * @version PHP 4
 *
 * @param int      $objid    L'identifiant de l'objet que vous voulez définir comme symbole.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_startsymbolThis'))
{
    function swf_startsymbolThis($objid)
    {
		$objid = (int)$objid;

		return swf_startsymbol($objid);
    }
}

/**
 * swf_textwidthThis
 *
 * Retourne la longueur d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.swf-textwidth.php Documentation pour swf_textwidth.
 *
 * @version PHP 4
 *
 * @param string   $str    La chaîne de caractères.
 *
 * @return float	Retourne la longueur de la ligne, sous la forme d'un nombre décimal.
 *
 */
if(!function_exists('swf_textwidthThis'))
{
    function swf_textwidthThis($str)
    {
		$str = (string)$str;

		return swf_textwidth($str);
    }
}

/**
 * swf_translateThis
 *
 * Déplace la transformation courante.
 *
 * @link http://php.net/manual/fr/function.swf-translate.php Documentation pour swf_translate.
 *
 * @version PHP 4
 *
 * @param float    $x    Valeur X.
 * @param float    $y    Valeur Y.
 * @param float    $z    Valeur Z.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_translateThis'))
{
    function swf_translateThis($x, $y, $z)
    {
		$x = (float)$x;
		$y = (float)$y;
		$z = (float)$z;

		return swf_translate($x, $y, $z);
    }
}

/**
 * swf_viewportThis
 *
 * Sélectionne une nouvelle zone pour un dessin ultérieur.
 *
 * @link http://php.net/manual/fr/function.swf-viewport.php Documentation pour swf_viewport.
 *
 * @version PHP 4
 *
 * @param float    $xmin
 * @param float    $xmax
 * @param float    $ymin
 * @param float    $ymax
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('swf_viewportThis'))
{
    function swf_viewportThis($xmin, $xmax, $ymin, $ymax)
    {
		$xmin = (float)$xmin;
		$xmax = (float)$xmax;
		$ymin = (float)$ymin;
		$ymax = (float)$ymax;

		return swf_viewport($xmin, $xmax, $ymin, $ymax);
    }
}

/**
 * sybase_affected_rowsThis
 *
 * Retourne le nombre de lignes affectées par la dernière requête Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-affected-rows.php Documentation pour sybase_affected_rows.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    Si l'identifiant de connexion n'est pas spécifié, la dernière connexion ouverte sera utilisée.
 *
 * @return int	Retourne le nombre de lignes affectées, sous la forme d'un entier.
 *
 */
if(!function_exists('sybase_affected_rowsThis'))
{
    function sybase_affected_rowsThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return sybase_affected_rows($link_identifier);
    }
}

/**
 * sybase_closeThis
 *
 * Ferme une connexion Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-close.php Documentation pour sybase_close.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $link_identifier    Si l'identifiant de connexion n'est pas spécifié, la dernière connexion sera utilisée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_closeThis'))
{
    function sybase_closeThis($link_identifier = NULL)
    {
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return sybase_close($link_identifier);
    }
}

/**
 * sybase_connectThis
 *
 * Ouvre une connexion à un serveur Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-connect.php Documentation pour sybase_connect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $servername    Le nom de serveur servername doit être valide, défini dans le fichier d'interface.
 * @param string   $username    Nom d'utilisateur Sybase
 * @param string   $password    Mot de passe associé à l'utilisateur username.
 * @param string   $charset    Spécifie le charset pour la connexion
 * @param string   $appname    Spécifie un appname pour la connexion Sybase. Cela permet d'établir des connexions distinctes dans le même script, avec la même base de données. Cela peut être pratique quand vous avez démarré une connexion et que vous devez lancer une requête séparée, qui ne peut pas être exécutée dans la transaction courante.
 * @param bool     $new    Si l'on doit ouvrir une nouvelle connexion ou utiliser l'existante.
 *
 * @return resource	Retourne un identifiant de connexion Sybase positif en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_connectThis'))
{
    function sybase_connectThis($servername = NULL, $username = NULL, $password = NULL, $charset = NULL, $appname = NULL, $new = false)
    {
		$servername = (string)$servername;
		$username = (string)$username;
		$password = (string)$password;
		$charset = (string)$charset;
		$appname = (string)$appname;
		$new = (bool)$new;

		return sybase_connect($servername, $username, $password, $charset, $appname, $new);
    }
}

/**
 * sybase_data_seekThis
 *
 * Déplace le pointeur interne de lignes Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-data-seek.php Documentation pour sybase_data_seek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result_identifier
 * @param int      $row_number
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_data_seekThis'))
{
    function sybase_data_seekThis($result_identifier, $row_number)
    {
		$result_identifier = is_resource($result_identifier) ? $result_identifier : NULL;
		$row_number = (int)$row_number;

		return sybase_data_seek($result_identifier, $row_number);
    }
}

/**
 * sybase_deadlock_retry_countThis
 *
 * Configure le nombre de tentatives lors de blocages.
 *
 * @link http://php.net/manual/fr/function.sybase-deadlock-retry-count.php Documentation pour sybase_deadlock_retry_count.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param int      $retry_count
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('sybase_deadlock_retry_countThis'))
{
    function sybase_deadlock_retry_countThis($retry_count)
    {
		$retry_count = (int)$retry_count;

		return sybase_deadlock_retry_count($retry_count);
    }
}

/**
 * sybase_fetch_arrayThis
 *
 * Retourne une ligne Sybase sous la forme d'un tableau.
 *
 * @link http://php.net/manual/fr/function.sybase-fetch-array.php Documentation pour sybase_fetch_array.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 *
 * @return array	Retourne un tableau qui contient la ligne demandée, ou FALSE s'il ne reste plus de ligne.
 *
 */
if(!function_exists('sybase_fetch_arrayThis'))
{
    function sybase_fetch_arrayThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sybase_fetch_array($result);
    }
}

/**
 * sybase_fetch_assocThis
 *
 * Lit une ligne de résultat Sybase sous forme de tableau associatif.
 *
 * @link http://php.net/manual/fr/function.sybase-fetch-assoc.php Documentation pour sybase_fetch_assoc.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param resource $result
 *
 * @return array	Retourne un tableau contenant la ligne lue, ou bien FALSE s'il n'y a plus de lignes.
 *
 */
if(!function_exists('sybase_fetch_assocThis'))
{
    function sybase_fetch_assocThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sybase_fetch_assoc($result);
    }
}

/**
 * sybase_fetch_fieldThis
 *
 * Lit les informations d'un champ Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-fetch-field.php Documentation pour sybase_fetch_field.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 * @param int      $field_offset    Si l'offset du champ n'est pas précisé, le champ suivant est traité.
 *
 * @return object	Retourne un objet contenant les informations du champ.
 *
 */
if(!function_exists('sybase_fetch_fieldThis'))
{
    function sybase_fetch_fieldThis($result, $field_offset = -1)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return sybase_fetch_field($result, $field_offset);
    }
}

/**
 * sybase_fetch_objectThis
 *
 * Retourne une ligne Sybase sous la forme d'un objet.
 *
 * @link http://php.net/manual/fr/function.sybase-fetch-object.php Documentation pour sybase_fetch_object.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 * @param mixed     $object    Utilisez le second paramètre object pour spécifier le type d'objet que vous voulez retourner. Si ce paramètre est omis, l'objet résultant sera de classe stdClass.
 *
 * @return object	retourne un objet qui contient la ligne demandée, en cas de succès, et FALSE s'il n'y a plus de ligne.
 *
 */
if(!function_exists('sybase_fetch_objectThis'))
{
    function sybase_fetch_objectThis($result, $object = NULL)
    {
		$result = is_resource($result) ? $result : NULL;
		$object = ($object);
		return sybase_fetch_object($result, $object);
    }
}

/**
 * sybase_fetch_rowThis
 *
 * Retourne une ligne Sybase sous la forme d'un tableau numérique.
 *
 * @link http://php.net/manual/fr/function.sybase-fetch-row.php Documentation pour sybase_fetch_row.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 *
 * @return array	Retourne un tableau qui contient la ligne demandée, en cas de succès, et FALSE s'il n'y a plus de ligne. Chaque colonne du résultat est stocké dans un élément du tableau, en commençant à la position 0.
 *
 */
if(!function_exists('sybase_fetch_rowThis'))
{
    function sybase_fetch_rowThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sybase_fetch_row($result);
    }
}

/**
 * sybase_field_seekThis
 *
 * Modifie l'index d'un champ Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-field-seek.php Documentation pour sybase_field_seek.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 * @param int      $field_offset
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_field_seekThis'))
{
    function sybase_field_seekThis($result, $field_offset)
    {
		$result = is_resource($result) ? $result : NULL;
		$field_offset = (int)$field_offset;

		return sybase_field_seek($result, $field_offset);
    }
}

/**
 * sybase_free_resultThis
 *
 * Libère un résultat Sybase de la mémoire.
 *
 * @link http://php.net/manual/fr/function.sybase-free-result.php Documentation pour sybase_free_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_free_resultThis'))
{
    function sybase_free_resultThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sybase_free_result($result);
    }
}

/**
 * sybase_get_last_messageThis
 *
 * Retourne le dernier message du serveur.
 *
 * @link http://php.net/manual/fr/function.sybase-get-last-message.php Documentation pour sybase_get_last_message.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le message, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('sybase_get_last_messageThis'))
{
    function sybase_get_last_messageThis()
    {
		return sybase_get_last_message();
    }
}

/**
 * sybase_min_client_severityThis
 *
 * Fixe la sévérité minimale du client Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-min-client-severity.php Documentation pour sybase_min_client_severity.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $severity
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('sybase_min_client_severityThis'))
{
    function sybase_min_client_severityThis($severity)
    {
		$severity = (int)$severity;

		return sybase_min_client_severity($severity);
    }
}

/**
 * sybase_min_error_severityThis
 *
 * Fixe la sévérité minimale du client pour les erreurs.
 *
 * @link http://php.net/manual/fr/function.sybase-min-error-severity.php Documentation pour sybase_min_error_severity.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $severity
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('sybase_min_error_severityThis'))
{
    function sybase_min_error_severityThis($severity)
    {
		$severity = (int)$severity;

		return sybase_min_error_severity($severity);
    }
}

/**
 * sybase_min_message_severityThis
 *
 * Fixe la sévérité minimale du client pour les messages.
 *
 * @link http://php.net/manual/fr/function.sybase-min-message-severity.php Documentation pour sybase_min_message_severity.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $severity
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('sybase_min_message_severityThis'))
{
    function sybase_min_message_severityThis($severity)
    {
		$severity = (int)$severity;

		return sybase_min_message_severity($severity);
    }
}

/**
 * sybase_min_server_severityThis
 *
 * Fixe la sévérité minimale du client pour le serveur Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-min-server-severity.php Documentation pour sybase_min_server_severity.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $severity
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('sybase_min_server_severityThis'))
{
    function sybase_min_server_severityThis($severity)
    {
		$severity = (int)$severity;

		return sybase_min_server_severity($severity);
    }
}

/**
 * sybase_num_fieldsThis
 *
 * Retourne le nombre de champs dans un résultat Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-num-fields.php Documentation pour sybase_num_fields.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 *
 * @return int	Retourne le nombre de champs, sous la forme d'un entier.
 *
 */
if(!function_exists('sybase_num_fieldsThis'))
{
    function sybase_num_fieldsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sybase_num_fields($result);
    }
}

/**
 * sybase_num_rowsThis
 *
 * Retourne le nombre de lignes dans un résultat Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-num-rows.php Documentation pour sybase_num_rows.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 *
 * @return int	Retourne le nombre de lignes, sous la forme d'un entier.
 *
 */
if(!function_exists('sybase_num_rowsThis'))
{
    function sybase_num_rowsThis($result)
    {
		$result = is_resource($result) ? $result : NULL;

		return sybase_num_rows($result);
    }
}

/**
 * sybase_pconnectThis
 *
 * Ouvre une connexion persistante à un serveur Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-pconnect.php Documentation pour sybase_pconnect.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $servername    Doit être un nom de serveur valide, défini dans le fichier 'interfaces'.
 * @param string   $username    Le nom d'utilisateur Sybase
 * @param string   $password    Le mot de passe, associé avec l'utilisateur username.
 * @param string   $charset    Spécifie le jeu de caractères pour la connexion
 * @param string   $appname    Spécifie un appname pour la connexion Sybase. Cela permet d'établir des connexions distinctes dans le même script, avec la même base de données. Cela peut être pratique quand vous avez démarré une connexion et que vous devez lancer une requête séparée, qui ne peut pas être exécutée dans la transaction courante.
 *
 * @return resource	Retourne un identifiant de connexion persistant Sybase en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_pconnectThis'))
{
    function sybase_pconnectThis($servername = NULL, $username = NULL, $password = NULL, $charset = NULL, $appname = NULL)
    {
		$servername = (string)$servername;
		$username = (string)$username;
		$password = (string)$password;
		$charset = (string)$charset;
		$appname = (string)$appname;

		return sybase_pconnect($servername, $username, $password, $charset, $appname);
    }
}

/**
 * sybase_queryThis
 *
 * Envoie une requête à une base Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-query.php Documentation pour sybase_query.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $query
 * @param resource $link_identifier    Si l'identifiant de connexion n'est pas précisé, la fonction essaiera d'utiliser la dernière connexion ouverte. Si aucune connexion n'a été ouverte, la fonction va tenter d'ouvrir une connexion avec la fonction sybase_connect().
 *
 * @return mixed	Retourne un identifiant de résultat positif en cas de succès, FALSE si une erreur survient, ou TRUE si la requête a été effectuée avec succès, mais n'a retourné aucune colonne.
 *
 */
if(!function_exists('sybase_queryThis'))
{
    function sybase_queryThis($query, $link_identifier = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return sybase_query($query, $link_identifier);
    }
}

/**
 * sybase_resultThis
 *
 * Lit une valeur dans un résultat.
 *
 * @link http://php.net/manual/fr/function.sybase-result.php Documentation pour sybase_result.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $result
 * @param int      $row
 * @param mixed     $field    Peut être la position du champ, le nom du champ ou la table suivie d'un point, puis du nom du champ (nom_table.nom_champ). Si le nom de la colonne est un alias ('select foo as bar from...'), utilisez l'alias au lieu du nom de la colonne.
 *
 * @return string	sybase_result() retourne le contenu d'une cellule, depuis le jeu de résultat Sybase.
 *
 */
if(!function_exists('sybase_resultThis'))
{
    function sybase_resultThis($result, $row, $field)
    {
		$result = is_resource($result) ? $result : NULL;
		$row = (int)$row;
		$field = ($field);
		return sybase_result($result, $row, $field);
    }
}

/**
 * sybase_select_dbThis
 *
 * Sélectionne une base de données Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-select-db.php Documentation pour sybase_select_db.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $database_name
 * @param resource $link_identifier    Si link_identifier n'est pas précisé, le dernier lien ouvert est utilisé. Si aucun lien n'a été ouvert, la fonction va tenter d'en établir un en appelant sybase_connect().
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_select_dbThis'))
{
    function sybase_select_dbThis($database_name, $link_identifier = NULL)
    {
		$database_name = (string)$database_name;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return sybase_select_db($database_name, $link_identifier);
    }
}

/**
 * sybase_set_message_handlerThis
 *
 * Configure le gestionnaire de messages Sybase.
 *
 * @link http://php.net/manual/fr/function.sybase-set-message-handler.php Documentation pour sybase_set_message_handler.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param callable     $handler    Le gestionnaire attend 5 arguments, dans l'ordre suivant : numéro de message, sévérité, état, numéro de ligne et description. Les 4 premiers paramètres sont des entiers et le dernier est une chaîne de caractères. Si ce gestionnaire retourne la valeur FALSE, PHP retournera un message d'erreur classique.
 * @param resource $link_identifier    Si non spécifié, le dernier lien ouvert sera utilisé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_set_message_handlerThis'))
{
    function sybase_set_message_handlerThis($handler, $link_identifier = NULL)
    {
		$handler = is_callable($handler) ? $handler : NULL;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;

		return sybase_set_message_handler($handler, $link_identifier);
    }
}

/**
 * sybase_unbuffered_queryThis
 *
 * Envoie une requête à Sybase et ne bloque pas.
 *
 * @link http://php.net/manual/fr/function.sybase-unbuffered-query.php Documentation pour sybase_unbuffered_query.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param string   $query
 * @param resource $link_identifier
 * @param bool     $store_result    Le paramètre optionnel store_result peut valoir FALSE pour indiquer que les lignes ne doivent pas être ramenées en mémoire, afin de réduire la consommation, surtout dans le cas de très grands résultats.
 *
 * @return resource	Retourne un identifiant de résultat Sybase en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('sybase_unbuffered_queryThis'))
{
    function sybase_unbuffered_queryThis($query, $link_identifier, $store_result = NULL)
    {
		$query = (string)$query;
		$link_identifier = is_resource($link_identifier) ? $link_identifier : NULL;
		$store_result = (bool)$store_result;

		return sybase_unbuffered_query($query, $link_identifier, $store_result);
    }
}

/**
 * symlinkThis
 *
 * Crée un lien symbolique.
 *
 * @link http://php.net/manual/fr/function.symlink.php Documentation pour symlink.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $target    La cible du lien.
 * @param string   $link    Le nom du lien.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('symlinkThis'))
{
    function symlinkThis($target, $link)
    {
		$target = (string)$target;
		$link = (string)$link;

		return symlink($target, $link);
    }
}

/**
 * sys_get_temp_dirThis
 *
 * Retourne le chemin du répertoire utilisé pour les fichiers temporaires.
 *
 * @link http://php.net/manual/fr/function.sys-get-temp-dir.php Documentation pour sys_get_temp_dir.
 *
 * @version PHP 5 >= 5.2.1
 * @return string	Retourne le chemin du répertoire temporaire.
 *
 */
if(!function_exists('sys_get_temp_dirThis'))
{
    function sys_get_temp_dirThis()
    {
		return sys_get_temp_dir();
    }
}

/**
 * sys_getloadavgThis
 *
 * Récupère la charge moyenne du système.
 *
 * @link http://php.net/manual/fr/function.sys-getloadavg.php Documentation pour sys_getloadavg.
 *
 * @version PHP 5 >= 5.1.3
 * @return array	Retourne un array avec trois échantillons (dernières 1, 5 et 15 minutes).
 *
 */
if(!function_exists('sys_getloadavgThis'))
{
    function sys_getloadavgThis()
    {
		return sys_getloadavg();
    }
}

/**
 * syslogThis
 *
 * Génère un message dans l'historique système.
 *
 * @link http://php.net/manual/fr/function.syslog.php Documentation pour syslog.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $priority    priority est une combinaison des valeurs d'accès et de niveau. Les valeurs possibles sont :
 * @param string   $message    Le message à envoyer. Attention : les caractères %m seront remplacés par l'erreur (sous forme de chaîne), présente dans errno.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('syslogThis'))
{
    function syslogThis($priority, $message)
    {
		$priority = (int)$priority;
		$message = (string)$message;

		return syslog($priority, $message);
    }
}

/**
 * systemThis
 *
 * Exécute un programme externe et affiche le résultat.
 *
 * @link http://php.net/manual/fr/function.system.php Documentation pour system.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $command    La commande à exécuter.
 * @param int      &$return_var    Si l'argument return_var est présent, alors le statut retourné de l'exécution de la commande sera écrit dans cette variable.
 *
 * @return string	Retourne la dernière ligne de la sortie de la commande en cas de succès, et FALSE si une erreur survient.
 *
 */
if(!function_exists('systemThis'))
{
    function systemThis($command, &$return_var = NULL)
    {
		$command = (string)$command;
		$return_var = (int)$return_var;

		return system($command, $return_var);
    }
}

/**
 * tanThis
 *
 * Tangente.
 *
 * @link http://php.net/manual/fr/function.tan.php Documentation pour tan.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter, en radians
 *
 * @return float	La tangente de arg
 *
 */
if(!function_exists('tanThis'))
{
    function tanThis($arg)
    {
		$arg = (float)$arg;

		return tan($arg);
    }
}

/**
 * tanhThis
 *
 * Tangente hyperbolique.
 *
 * @link http://php.net/manual/fr/function.tanh.php Documentation pour tanh.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param float    $arg    L'argument à traiter
 *
 * @return float	La tangente hyperbolique de arg.
 *
 */
if(!function_exists('tanhThis'))
{
    function tanhThis($arg)
    {
		$arg = (float)$arg;

		return tanh($arg);
    }
}

/**
 * tempnamThis
 *
 * Crée un fichier avec un nom unique.
 *
 * @link http://php.net/manual/fr/function.tempnam.php Documentation pour tempnam.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $dir    Le dossier dans lequel le fichier temporaire sera créé.
 * @param string   $prefix    Le préfixe du fichier temporaire généré.
 *
 * @return string	Retourne un nouveau fichier temporaire, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('tempnamThis'))
{
    function tempnamThis($dir, $prefix)
    {
		$dir = (string)$dir;
		$prefix = (string)$prefix;

		return tempnam($dir, $prefix);
    }
}

/**
 * textdomainThis
 *
 * Fixe le domaine par défaut.
 *
 * @link http://php.net/manual/fr/function.textdomain.php Documentation pour textdomain.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $text_domain    Le nouveau domaine des messages, ou NULL pour récupérer la configuration courante sans la modifier.
 *
 * @return string	Cette fonction retourne le message courant du domaine en cas de succès, après une possible modification.
 *
 */
if(!function_exists('textdomainThis'))
{
    function textdomainThis($text_domain)
    {
		$text_domain = (string)$text_domain;

		return textdomain($text_domain);
    }
}

/**
 * timeThis
 *
 * Retourne le timestamp UNIX actuel.
 *
 * @link http://php.net/manual/fr/function.time.php Documentation pour time.
 *
 * @version PHP 4
 * @version PHP 5
 *
 */
if(!function_exists('timeThis'))
{
    function timeThis()
    {
		return time();
    }
}

/**
 * time_nanosleepThis
 *
 * Attendre pendant un nombre de secondes et de nanosecondes.
 *
 * @link http://php.net/manual/fr/function.time-nanosleep.php Documentation pour time_nanosleep.
 *
 * @version PHP 5
 *
 * @param int      $seconds    Doit être un entier non-négatif.
 * @param int      $nanoseconds    Doit être un entier non-négatif, inférieur à 1 milliard.
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('time_nanosleepThis'))
{
    function time_nanosleepThis($seconds, $nanoseconds)
    {
		$seconds = (int)$seconds;
		$nanoseconds = (int)$nanoseconds;

		return time_nanosleep($seconds, $nanoseconds);
    }
}

/**
 * time_sleep_untilThis
 *
 * Arrête le script pendant une durée spécifiée.
 *
 * @link http://php.net/manual/fr/function.time-sleep-until.php Documentation pour time_sleep_until.
 *
 * @version PHP 5 >= 5.1.0
 *
 * @param float    $timestamp    Le timestamp correspondant à la durée de la pause.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('time_sleep_untilThis'))
{
    function time_sleep_untilThis($timestamp)
    {
		$timestamp = (float)$timestamp;

		return time_sleep_until($timestamp);
    }
}

/**
 * timezone_name_from_abbrThis
 *
 * Retourne le nom du fuseau horaire à partir de son abréviation.
 *
 * @link http://php.net/manual/fr/function.timezone-name-from-abbr.php Documentation pour timezone_name_from_abbr.
 *
 * @version PHP 5 >= 5.1.3
 *
 * @param string   $abbr    Abréviation du fuseau horaire.
 * @param int      $gmtOffset    Décalage à partir du GMT en seconde. La valeur par défaut est -1 ce qui signifie que le premier fuseau horaire trouvé correspondant à abbr est retourné. Autrement, le décalage exact est recherché et seulement s'il n'est pas trouvé alors le premier fuseau horaire avec n'importe quel décalage est retourné.
 * @param int      $isdst    Indicateur d'heure d'été/heure d'hiver. Par défaut -1 qui signifie que le décalage heure d'été/heure d'hiver n'est pas pris en compte dans la recherche même si le fuseau le gère. Si mis à 1, alors le gmtOffset est supposé comprendre le décalage heure d'été /heure d'hiver; si 0 alors gmtOffset est supposé représenter un décalage ne prennant pas en compte l'heure d'été/hiver. Si abbr n'existe pas alors le fuseau horaire est cherché uniquement au moyen de gmtOffset et isdst.
 *
 * @return string	Retourne un nom de fuseau horaire en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('timezone_name_from_abbrThis'))
{
    function timezone_name_from_abbrThis($abbr, $gmtOffset = -1, $isdst = -1)
    {
		$abbr = (string)$abbr;
		$gmtOffset = (int)$gmtOffset;
		$isdst = (int)$isdst;

		return timezone_name_from_abbr($abbr, $gmtOffset, $isdst);
    }
}

/**
 * timezone_version_getThis
 *
 * Lit la version de la timezonedb.
 *
 * @link http://php.net/manual/fr/function.timezone-version-get.php Documentation pour timezone_version_get.
 *
 * @version PHP 5 >= 5.3.0
 * @return string	Retourne une chaîne de caractères.
 *
 */
if(!function_exists('timezone_version_getThis'))
{
    function timezone_version_getThis()
    {
		return timezone_version_get();
    }
}

/**
 * tmpfileThis
 *
 * Crée un fichier temporaire.
 *
 * @link http://php.net/manual/fr/function.tmpfile.php Documentation pour tmpfile.
 *
 * @version PHP 4
 * @version PHP 5
 * @return resource	Retourne un pointeur de fichier, identique à celui retourné par la fonction fopen(), pour le nouveau fichier ou FALSE si une erreur survient.
 *
 */
if(!function_exists('tmpfileThis'))
{
    function tmpfileThis()
    {
		return tmpfile();
    }
}

/**
 * token_get_allThis
 *
 * Scinde un code source en éléments de base.
 *
 * @link http://php.net/manual/fr/function.token-get-all.php Documentation pour token_get_all.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param string   $source    Le source PHP à analyser.
 *
 * @return array	Un tableau contenant la liste des descriptions des éléments. Chaque élément du tableau peut être un caractère unique (i.e.: ;, ., >, !, etc.), ou un tableau contenant un identifiant de token dans l'élément 0, la représentation textuelle originale de ce token dans l'élément 1, et le numéro de la ligne dans l'élément 2.
 *
 */
if(!function_exists('token_get_allThis'))
{
    function token_get_allThis($source)
    {
		$source = (string)$source;

		return token_get_all($source);
    }
}

/**
 * token_nameThis
 *
 * Retourne le nom d'un élément de code source.
 *
 * @link http://php.net/manual/fr/function.token-name.php Documentation pour token_name.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param int      $token    La valeur du token.
 *
 * @return string	Le nom symbolique du token donné.
 *
 */
if(!function_exists('token_nameThis'))
{
    function token_nameThis($token)
    {
		$token = (int)$token;

		return token_name($token);
    }
}

/**
 * touchThis
 *
 * Modifie la date de modification et de dernier accès d'un fichier.
 *
 * @link http://php.net/manual/fr/function.touch.php Documentation pour touch.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le nom du fichier à créer.
 * @param int      $time    La date de création. Si time est omis, c'est l'heure courante qui est utilisée.
 * @param int      $atime    Si présent, l'heure d'accès au fichier fourni sera défini à la valeur du paramètre atime. Sinon, l'heure d'accès sera défini à la valeur passée au paramètre time. S'il n'est pas présent non plus, l'heure courant du système sera utilisé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('touchThis'))
{
    function touchThis($filename, $time = NULL, $atime = NULL)
    {
		$filename = (string)$filename;
		$time = empty($time) ? (int)time() : (int)$time;
		$atime = (int)$atime;

		return touch($filename, $time, $atime);
    }
}

/**
 * trait_existsThis
 *
 * Vérifie si un trait existe.
 *
 * @link http://php.net/manual/fr/function.trait-exists.php Documentation pour trait_exists.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param string   $traitname    Nom du trait à vérifier
 * @param bool     $autoload    TRUE s'il faut charger le trait dans le cas où ce n'est pas encore fait.
 *
 * @return bool	Retourne TRUE si le trait existe, FALSE s'il n'existe pas, NULL en cas d'erreur.
 *
 */
if(!function_exists('trait_existsThis'))
{
    function trait_existsThis($traitname, $autoload = NULL)
    {
		$traitname = (string)$traitname;
		$autoload = (bool)$autoload;

		return trait_exists($traitname, $autoload);
    }
}

/**
 * trigger_errorThis
 *
 * Déclenche une erreur utilisateur.
 *
 * @link http://php.net/manual/fr/function.trigger-error.php Documentation pour trigger_error.
 *
 * @version PHP 4 >= 4.0.1
 * @version PHP 5
 *
 * @param string   $error_msg    Le message d'erreur désigné pour cette erreur. Il est limité en longueur à 1024 octets. Tous caractères après les 1024 octets seront ignorés.
 * @param int      $error_type    Le type d'erreur désigné pour cette erreur. Cela ne fonctionne qu'avec la famille de constantes E_USER et sera par défaut E_USER_NOTICE.
 *
 * @return bool	Cette fonction retourne FALSE si un paramètre incorrect est passé à error_type, TRUE sinon.
 *
 */
if(!function_exists('trigger_errorThis'))
{
    function trigger_errorThis($error_msg, $error_type = E_USER_NOTICE)
    {
		$error_msg = (string)$error_msg;
		$error_type = (int)$error_type;

		return trigger_error($error_msg, $error_type);
    }
}

/**
 * trimThis
 *
 * Supprime les espaces (ou d'autres caractères) en début et fin de chaîne.
 *
 * @link http://php.net/manual/fr/function.trim.php Documentation pour trim.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne de caractères qui sera coupée.
 * @param string   $charlist    Optionnellement, les caractères supprimés peuvent aussi être spécifiés en utilisant le paramètre charlist. Listez simplement tous les caractères que vous voulez supprimer. Avec .. vous pouvez spécifier une plage de caractères.
 *
 * @return string	La chaîne de caractères coupée.
 *
 */
if(!function_exists('trimThis'))
{
    function trimThis($str, $charlist = " \t\n\r\0\x0B")
    {
		$str = (string)$str;
		$charlist = (string)$charlist;

		return trim($str, $charlist);
    }
}

/**
 * uasortThis
 *
 * Trie un tableau en utilisant une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.uasort.php Documentation pour uasort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param callable     $cmp_function    Voyez les fonctions usort() et uksort() pour des exemples de tris avec utilisation de fonction personnalisée.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('uasortThis'))
{
    function uasortThis(&$array, $cmp_function)
    {
		$array = (array)$array;
		$cmp_function = is_callable($cmp_function) ? $cmp_function : NULL;

		return uasort($array, $cmp_function);
    }
}

/**
 * ucfirstThis
 *
 * Met le premier caractère en majuscule.
 *
 * @link http://php.net/manual/fr/function.ucfirst.php Documentation pour ucfirst.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne après modification.
 *
 */
if(!function_exists('ucfirstThis'))
{
    function ucfirstThis($str)
    {
		$str = (string)$str;

		return ucfirst($str);
    }
}

/**
 * ucwordsThis
 *
 * Met en majuscule la première lettre de tous les mots.
 *
 * @link http://php.net/manual/fr/function.ucwords.php Documentation pour ucwords.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 *
 * @return string	Retourne la chaîne, après modification.
 *
 */
if(!function_exists('ucwordsThis'))
{
    function ucwordsThis($str)
    {
		$str = (string)$str;

		return ucwords($str);
    }
}

/**
 * udm_check_storedThis
 *
 * Vérifie la connexion MnoGoSearch avec le document stocké.
 *
 * @link http://php.net/manual/fr/function.udm-check-stored.php Documentation pour udm_check_stored.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param resource $agent
 * @param int      $link
 * @param string   $doc_id
 *
 */
if(!function_exists('udm_check_storedThis'))
{
    function udm_check_storedThis($agent, $link, $doc_id)
    {
		$agent = is_resource($agent) ? $agent : NULL;
		$link = (int)$link;
		$doc_id = (string)$doc_id;

		return udm_check_stored($agent, $link, $doc_id);
    }
}

/**
 * udm_close_storedThis
 *
 * Ferme la connexion MnoGoSearch avec le document enregistré.
 *
 * @link http://php.net/manual/fr/function.udm-close-stored.php Documentation pour udm_close_stored.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param resource $agent
 * @param int      $link
 *
 */
if(!function_exists('udm_close_storedThis'))
{
    function udm_close_storedThis($agent, $link)
    {
		$agent = is_resource($agent) ? $agent : NULL;
		$link = (int)$link;

		return udm_close_stored($agent, $link);
    }
}

/**
 * udm_open_storedThis
 *
 * Ouvre une connexion MnoGoSearch avec un document stocké.
 *
 * @link http://php.net/manual/fr/function.udm-open-stored.php Documentation pour udm_open_stored.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param resource $agent
 * @param string   $storedaddr
 *
 */
if(!function_exists('udm_open_storedThis'))
{
    function udm_open_storedThis($agent, $storedaddr)
    {
		$agent = is_resource($agent) ? $agent : NULL;
		$storedaddr = (string)$storedaddr;

		return udm_open_stored($agent, $storedaddr);
    }
}

/**
 * uksortThis
 *
 * Trie un tableau par ses clés en utilisant une fonction de rappel.
 *
 * @link http://php.net/manual/fr/function.uksort.php Documentation pour uksort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param callable     $cmp_function    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('uksortThis'))
{
    function uksortThis(&$array, $cmp_function)
    {
		$array = (array)$array;
		$cmp_function = is_callable($cmp_function) ? $cmp_function : NULL;

		return uksort($array, $cmp_function);
    }
}

/**
 * umaskThis
 *
 * Change le "umask" courant.
 *
 * @link http://php.net/manual/fr/function.umask.php Documentation pour umask.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $mask    Le nouvel umask.
 *
 * @return int	umask(), appelée sans arguments, retourne simplement le umask courant, sinon, ce sera l'ancien umask qui sera retourné.
 *
 */
if(!function_exists('umaskThis'))
{
    function umaskThis($mask = NULL)
    {
		$mask = (int)$mask;

		return umask($mask);
    }
}

/**
 * uniqidThis
 *
 * Génère un identifiant unique.
 *
 * @link http://php.net/manual/fr/function.uniqid.php Documentation pour uniqid.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $prefix    Peut être utile, par exemple, pour identifier facilement différents hôtes, si vous générez simultanément des fichiers depuis plusieurs hôtes, à la même microseconde. Sans prefix (préfixe vide), la chaîne retournée fera 13 caractères. Si more_entropy est à TRUE, elle fera 3 caractères.
 * @param bool     $more_entropy    Si le paramètre optionnel more_entropy est TRUE, uniqid() ajoutera une entropie "combined LCG" à la fin de la valeur retournée, ce qui augmente la probabilité de l'unicité du résultat.
 *
 * @return string	Retourne un identifiant unique, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('uniqidThis'))
{
    function uniqidThis($prefix = "", $more_entropy = false)
    {
		$prefix = (string)$prefix;
		$more_entropy = (bool)$more_entropy;

		return uniqid($prefix, $more_entropy);
    }
}

/**
 * unixtojdThis
 *
 * Convertit un timestamp UNIX en un jour Julien.
 *
 * @link http://php.net/manual/fr/function.unixtojd.php Documentation pour unixtojd.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $timestamp    Un timestamp unix à convertir.
 *
 * @return int	Un nombre de jours Julien, sous la forme d'un entier.
 *
 */
if(!function_exists('unixtojdThis'))
{
    function unixtojdThis($timestamp = NULL)
    {
		$timestamp = empty($timestamp) ? (int)time() : (int)$timestamp;

		return unixtojd($timestamp);
    }
}

/**
 * unlinkThis
 *
 * Efface un fichier.
 *
 * @link http://php.net/manual/fr/function.unlink.php Documentation pour unlink.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Chemin vers le fichier.
 * @param resource $context
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('unlinkThis'))
{
    function unlinkThis($filename, $context = NULL)
    {
		$filename = (string)$filename;
		$context = is_resource($context) ? $context : NULL;

		return unlink($filename, $context);
    }
}

/**
 * unpackThis
 *
 * Déconditionne des données depuis une chaîne binaire.
 *
 * @link http://php.net/manual/fr/function.unpack.php Documentation pour unpack.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $format    Voir la fonction pack() pour une explication des codes de format.
 * @param string   $data    Les données conditionnées.
 *
 * @return array	Retourne un tableau associatif contenant les éléments déconditionnés d'une chaîne binaire.
 *
 */
if(!function_exists('unpackThis'))
{
    function unpackThis($format, $data)
    {
		$format = (string)$format;
		$data = (string)$data;

		return unpack($format, $data);
    }
}

/**
 * unregister_tick_functionThis
 *
 * Annule la fonction exécutée à chaque tick.
 *
 * @link http://php.net/manual/fr/function.unregister-tick-function.php Documentation pour unregister_tick_function.
 *
 * @version PHP 4 >= 4.0.3
 * @version PHP 5
 *
 * @param string   $function_name    Le nom de la fonction, sous la forme d'une chaîne de caractères.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('unregister_tick_functionThis'))
{
    function unregister_tick_functionThis($function_name)
    {
		$function_name = (string)$function_name;

		return unregister_tick_function($function_name);
    }
}

/**
 * unserializeThis
 *
 * Crée une variable PHP à partir d'une valeur linéarisée.
 *
 * @link http://php.net/manual/fr/function.unserialize.php Documentation pour unserialize.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne linéarisée. Si la variable délinéarisée est un objet, après avoir réussi à le reconstruire, PHP appellera automatiquement la méthode __wakeup si elle existe.
 *
 * @return mixed	La valeur convertie est retournée par la fonction, et peut être de type booléen, entier, nombre décimal, chaîne de caractères, tableau ou objet.
 *
 */
if(!function_exists('unserializeThis'))
{
    function unserializeThis($str)
    {
		$str = (string)$str;

		return unserialize($str);
    }
}

/**
 * unsetThis
 *
 * Détruit une variable.
 *
 * @link http://php.net/manual/fr/function.unset.php Documentation pour unset.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La variable à détruire.
 * @param mixed     $item    Autres variables...
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('unsetThis'))
{
    function unsetThis($var, $var1 = NULL)
    {
		$var = ($var);
		$var1 = ($var1);
		return unset($var, $var1);
    }
}

/**
 * urldecodeThis
 *
 * Décode une chaîne encodée URL.
 *
 * @link http://php.net/manual/fr/function.urldecode.php Documentation pour urldecode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne de caractères à décoder.
 *
 * @return string	Retourne la chaîne de caractères décodée.
 *
 */
if(!function_exists('urldecodeThis'))
{
    function urldecodeThis($str)
    {
		$str = (string)$str;

		return urldecode($str);
    }
}

/**
 * urlencodeThis
 *
 * Encode une chaîne en URL.
 *
 * @link http://php.net/manual/fr/function.urlencode.php Documentation pour urlencode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $str    La chaîne de caractères à encoder.
 *
 * @return string	Retourne une chaîne dont les caractères non alphanumériques (hormis -_.) sont remplacés par des séquences commençant par un caractère pourcentage (%), suivi de deux chiffres hexadécimaux. Les espaces sont remplacés par des signes plus (+). Ce codage est celui qui est utilisé pour poster des informations dans les formulaires HTML. Le type MIME est application/x-www-form-urlencoded. Ce codage est différent de celui spécifié dans la » RFC 3986 (voir rawurlencode()) : pour des raisons historiques, les espaces sont remplacés par des signes plus (+).
 *
 */
if(!function_exists('urlencodeThis'))
{
    function urlencodeThis($str)
    {
		$str = (string)$str;

		return urlencode($str);
    }
}

/**
 * use_soap_error_handlerThis
 *
 * Active le gestionnaire d'erreurs SOAP natif.
 *
 * @link http://php.net/manual/fr/function.use-soap-error-handler.php Documentation pour use_soap_error_handler.
 *
 * @version Unknown
 *
 * @param bool     $handler    Avec la valeur TRUE, le détail des erreurs sera envoyé aux clients.
 *
 * @return bool	Retourne la valeur originale.
 *
 */
if(!function_exists('use_soap_error_handlerThis'))
{
    function use_soap_error_handlerThis($handler = true)
    {
		$handler = (bool)$handler;

		return use_soap_error_handler($handler);
    }
}

/**
 * usleepThis
 *
 * Arrête l'exécution durant quelques microsecondes.
 *
 * @link http://php.net/manual/fr/function.usleep.php Documentation pour usleep.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $micro_seconds    Durée de l'arrêt, en microsecondes. Une microseconde est un millionième de seconde.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('usleepThis'))
{
    function usleepThis($micro_seconds)
    {
		$micro_seconds = (int)$micro_seconds;

		return usleep($micro_seconds);
    }
}

/**
 * usortThis
 *
 * Trie un tableau en utilisant une fonction de comparaison.
 *
 * @link http://php.net/manual/fr/function.usort.php Documentation pour usort.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param array    &$array    Le tableau d'entrée.
 * @param callable     $cmp_function    La fonction de comparaison doit retourner un entier inférieur à, égal à, ou supérieur à 0 si le premier argument est considéré comme, respectivement, inférieur à, égal à, ou supérieur au second.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('usortThis'))
{
    function usortThis(&$array, $cmp_function)
    {
		$array = (array)$array;
		$cmp_function = is_callable($cmp_function) ? $cmp_function : NULL;

		return usort($array, $cmp_function);
    }
}

/**
 * utf8_decodeThis
 *
 * Convertit une chaîne UTF-8 en ISO-8859-1.
 *
 * @link http://php.net/manual/fr/function.utf8-decode.php Documentation pour utf8_decode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $data    La chaîne encodée UTF-8.
 *
 * @return string	Retourne la chaîne convertie.
 *
 */
if(!function_exists('utf8_decodeThis'))
{
    function utf8_decodeThis($data)
    {
		$data = (string)$data;

		return utf8_decode($data);
    }
}

/**
 * utf8_encodeThis
 *
 * Convertit une chaîne ISO-8859-1 en UTF-8.
 *
 * @link http://php.net/manual/fr/function.utf8-encode.php Documentation pour utf8_encode.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $data    Une chaîne ISO-8859-1.
 *
 * @return string	Retour la version UTF-8 de data.
 *
 */
if(!function_exists('utf8_encodeThis'))
{
    function utf8_encodeThis($data)
    {
		$data = (string)$data;

		return utf8_encode($data);
    }
}

/**
 * var_dumpThis
 *
 * Affiche les informations d'une variable.
 *
 * @link http://php.net/manual/fr/function.var-dump.php Documentation pour var_dump.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $expression    La variable que vous voulez afficher.
 * @param mixed     $item
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('var_dumpThis'))
{
    function var_dumpThis($expression, $expression1 = NULL)
    {
		$expression = ($expression);
		$expression1 = ($expression1);
		return var_dump($expression, $expression1);
    }
}

/**
 * var_exportThis
 *
 * Retourne le code PHP utilisé pour générer une variable.
 *
 * @link http://php.net/manual/fr/function.var-export.php Documentation pour var_export.
 *
 * @version PHP 4 >= 4.2.0
 * @version PHP 5
 *
 * @param mixed     $expression    La variable que vous voulez exporter.
 * @param bool     $return    Si utilisé et mis à TRUE, var_export() retournera la représentation de la variable au lieu de l'afficher.
 *
 * @return mixed	Retourne la représentation de la variable lorsque le paramètre return est utilisé et évalué à TRUE. Autrement, cette fonction retournera NULL.
 *
 */
if(!function_exists('var_exportThis'))
{
    function var_exportThis($expression, $return = false)
    {
		$expression = ($expression);
		$return = (bool)$return;

		return var_export($expression, $return);
    }
}

/**
 * variant_absThis
 *
 * Retourne la valeur absolue d'un variant.
 *
 * @link http://php.net/manual/fr/function.variant-abs.php Documentation pour variant_abs.
 *
 * @version PHP 5
 *
 * @param mixed     $val    Le variant.
 *
 * @return mixed	Retourne la valeur absolue de val.
 *
 */
if(!function_exists('variant_absThis'))
{
    function variant_absThis($val)
    {
		$val = ($val);
		return variant_abs($val);
    }
}

/**
 * variant_addThis
 *
 * "Ajoute" deux valeurs de variants et retourne le résultat.
 *
 * @link http://php.net/manual/fr/function.variant-add.php Documentation pour variant_add.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 * @return mixed	Retourne le résultat.
 *
 */
if(!function_exists('variant_addThis'))
{
    function variant_addThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_add($left, $right);
    }
}

/**
 * variant_andThis
 *
 * Effectue un ET entre deux variants et retourne le résultat.
 *
 * @link http://php.net/manual/fr/function.variant-and.php Documentation pour variant_and.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_andThis'))
{
    function variant_andThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_and($left, $right);
    }
}

/**
 * variant_castThis
 *
 * Convertit un variant en un nouvel objet variant de type différent.
 *
 * @link http://php.net/manual/fr/function.variant-cast.php Documentation pour variant_cast.
 *
 * @version PHP 5
 *
 * @param variant  $variant    Le variant.
 * @param int      $type    type doit être un type parmi les constantes VT_XXX.
 *
 * @return variant	Retourne un variant VT_DATE.
 *
 */
if(!function_exists('variant_castThis'))
{
    function variant_castThis($variant, $type)
    {
		$variant = ($variant);
		$type = (int)$type;

		return variant_cast($variant, $type);
    }
}

/**
 * variant_catThis
 *
 * Assemble deux valeurs variantes ensemble et retourne le résultat.
 *
 * @link http://php.net/manual/fr/function.variant-cat.php Documentation pour variant_cat.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 * @return mixed	Retourne le résultat de la concaténation.
 *
 */
if(!function_exists('variant_catThis'))
{
    function variant_catThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_cat($left, $right);
    }
}

/**
 * variant_cmpThis
 *
 * Compare deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-cmp.php Documentation pour variant_cmp.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 * @param int      $lcid    Locale Identifier valide à utiliser lors des comparaisons des chaînes (cela affecte la collation de la chaîne).
 * @param int      $flags    flags peut être une ou plusieurs des valeurs suivantes, jointes avec des OR, et affecte les comparaisons de chaînes :
 *
 * @return int	Retourne une des valeurs suivantes :
 *
 */
if(!function_exists('variant_cmpThis'))
{
    function variant_cmpThis($left, $right, $lcid = NULL, $flags = NULL)
    {
		$left = ($left);
		$right = ($right);
		$lcid = (int)$lcid;
		$flags = (int)$flags;

		return variant_cmp($left, $right, $lcid, $flags);
    }
}

/**
 * variant_date_from_timestampThis
 *
 * Retourne une représentation date en variant d'un timestamp Unix.
 *
 * @link http://php.net/manual/fr/function.variant-date-from-timestamp.php Documentation pour variant_date_from_timestamp.
 *
 * @version PHP 5
 *
 * @param int      $timestamp    Un timestamp Unix.
 *
 * @return variant	Retourne un variant VT_DATE.
 *
 */
if(!function_exists('variant_date_from_timestampThis'))
{
    function variant_date_from_timestampThis($timestamp)
    {
		$timestamp = (int)$timestamp;

		return variant_date_from_timestamp($timestamp);
    }
}

/**
 * variant_date_to_timestampThis
 *
 * Convertit une valeur date/temps variante en un timestamp Unix.
 *
 * @link http://php.net/manual/fr/function.variant-date-to-timestamp.php Documentation pour variant_date_to_timestamp.
 *
 * @version PHP 5
 *
 * @param variant  $variant    Le variant.
 *
 * @return int	Retourne un timestamp Unix.
 *
 */
if(!function_exists('variant_date_to_timestampThis'))
{
    function variant_date_to_timestampThis($variant)
    {
		$variant = ($variant);

		return variant_date_to_timestamp($variant);
    }
}

/**
 * variant_divThis
 *
 * Retourne le résultat de la division de deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-div.php Documentation pour variant_div.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_divThis'))
{
    function variant_divThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_div($left, $right);
    }
}

/**
 * variant_eqvThis
 *
 * Effectue une équivalence de bits de deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-eqv.php Documentation pour variant_eqv.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 * @return mixed	Si chaque bit dans left est égal au bit correspondant dans right alors la fonction retourne TRUE, sinon elle retourne FALSE.
 *
 */
if(!function_exists('variant_eqvThis'))
{
    function variant_eqvThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_eqv($left, $right);
    }
}

/**
 * variant_fixThis
 *
 * Récupère la portion entière d'un variant.
 *
 * @link http://php.net/manual/fr/function.variant-fix.php Documentation pour variant_fix.
 *
 * @version PHP 5
 *
 * @param mixed     $variant    Le variant.
 *
 * @return mixed	Si variant est négatif, le premier entier négatif plus grand ou égal au variant est retourné, sinon cette fonction retourne la portion entière de la valeur de variant.
 *
 */
if(!function_exists('variant_fixThis'))
{
    function variant_fixThis($variant)
    {
		$variant = ($variant);
		return variant_fix($variant);
    }
}

/**
 * variant_get_typeThis
 *
 * Retourne le type d'un objet variant.
 *
 * @link http://php.net/manual/fr/function.variant-get-type.php Documentation pour variant_get_type.
 *
 * @version PHP 5
 *
 * @param variant  $variant    L'objet variant.
 *
 * @return int	Retourne une valeur entière qui indique le type de variant, qui peut être une instance de COM, DOTNET ou de VARIANT. La valeur de retour peut être comparée à l'une des constantes VT_XXX.
 *
 */
if(!function_exists('variant_get_typeThis'))
{
    function variant_get_typeThis($variant)
    {
		$variant = ($variant);

		return variant_get_type($variant);
    }
}

/**
 * variant_idivThis
 *
 * Convertit des variants en valeurs entières, et effectue alors une division.
 *
 * @link http://php.net/manual/fr/function.variant-idiv.php Documentation pour variant_idiv.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_idivThis'))
{
    function variant_idivThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_idiv($left, $right);
    }
}

/**
 * variant_impThis
 *
 * Exécute une implication sur les bits de deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-imp.php Documentation pour variant_imp.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_impThis'))
{
    function variant_impThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_imp($left, $right);
    }
}

/**
 * variant_intThis
 *
 * Retourne la partie entière d'un variant.
 *
 * @link http://php.net/manual/fr/function.variant-int.php Documentation pour variant_int.
 *
 * @version PHP 5
 *
 * @param mixed     $variant    Le variant.
 *
 * @return mixed	Si variant est négatif, le premier entier négatif supérieur ou égal à ce variant est retourné, sinon cette fonction retourne la partie entière de la valeur de variant.
 *
 */
if(!function_exists('variant_intThis'))
{
    function variant_intThis($variant)
    {
		$variant = ($variant);
		return variant_int($variant);
    }
}

/**
 * variant_modThis
 *
 * Divise deux variantes et retourne le reste.
 *
 * @link http://php.net/manual/fr/function.variant-mod.php Documentation pour variant_mod.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 * @return mixed	Retourne le reste de la division.
 *
 */
if(!function_exists('variant_modThis'))
{
    function variant_modThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_mod($left, $right);
    }
}

/**
 * variant_mulThis
 *
 * Multiplie les valeurs de deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-mul.php Documentation pour variant_mul.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_mulThis'))
{
    function variant_mulThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_mul($left, $right);
    }
}

/**
 * variant_negThis
 *
 * Effectue une négation logique sur un variant.
 *
 * @link http://php.net/manual/fr/function.variant-neg.php Documentation pour variant_neg.
 *
 * @version PHP 5
 *
 * @param mixed     $variant    Le variant.
 *
 * @return mixed	Retourne le résultat de la négation logique.
 *
 */
if(!function_exists('variant_negThis'))
{
    function variant_negThis($variant)
    {
		$variant = ($variant);
		return variant_neg($variant);
    }
}

/**
 * variant_notThis
 *
 * Exécute une négation sur les bits sur un variant.
 *
 * @link http://php.net/manual/fr/function.variant-not.php Documentation pour variant_not.
 *
 * @version PHP 5
 *
 * @param mixed     $variant    Le variant.
 *
 * @return mixed	Retourne la négation. Si variant vaut NULL, le résultat sera également NULL.
 *
 */
if(!function_exists('variant_notThis'))
{
    function variant_notThis($variant)
    {
		$variant = ($variant);
		return variant_not($variant);
    }
}

/**
 * variant_orThis
 *
 * Performe une disjonction logique sur deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-or.php Documentation pour variant_or.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_orThis'))
{
    function variant_orThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_or($left, $right);
    }
}

/**
 * variant_powThis
 *
 * Retourne le résultat de la fonction puissance avec deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-pow.php Documentation pour variant_pow.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 * @return mixed	Retourne le résultat de left à la puissance right.
 *
 */
if(!function_exists('variant_powThis'))
{
    function variant_powThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_pow($left, $right);
    }
}

/**
 * variant_roundThis
 *
 * Arrondit le variant au nombre spécifié de décimales.
 *
 * @link http://php.net/manual/fr/function.variant-round.php Documentation pour variant_round.
 *
 * @version PHP 5
 *
 * @param mixed     $variant    Le variant.
 * @param int      $decimals    Nombre de décimales.
 *
 * @return mixed	Retourne la valeur arrondie.
 *
 */
if(!function_exists('variant_roundThis'))
{
    function variant_roundThis($variant, $decimals)
    {
		$variant = ($variant);
		$decimals = (int)$decimals;

		return variant_round($variant, $decimals);
    }
}

/**
 * variant_setThis
 *
 * Assigne une nouvelle valeur pour un objet variant.
 *
 * @link http://php.net/manual/fr/function.variant-set.php Documentation pour variant_set.
 *
 * @version PHP 5
 *
 * @param variant  $variant    Le variant.
 * @param mixed     $value
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('variant_setThis'))
{
    function variant_setThis($variant, $value)
    {
		$variant = ($variant);
		$value = ($value);
		return variant_set($variant, $value);
    }
}

/**
 * variant_set_typeThis
 *
 * Convertit un variant en un autre type "sur-place".
 *
 * @link http://php.net/manual/fr/function.variant-set-type.php Documentation pour variant_set_type.
 *
 * @version PHP 5
 *
 * @param variant  $variant    Le variant.
 * @param int      $type
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('variant_set_typeThis'))
{
    function variant_set_typeThis($variant, $type)
    {
		$variant = ($variant);
		$type = (int)$type;

		return variant_set_type($variant, $type);
    }
}

/**
 * variant_subThis
 *
 * Soustrait la valeur du variant de droite de la valeur de celui de gauche.
 *
 * @link http://php.net/manual/fr/function.variant-sub.php Documentation pour variant_sub.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_subThis'))
{
    function variant_subThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_sub($left, $right);
    }
}

/**
 * variant_xorThis
 *
 * Exécute une exclusion logique sur deux variants.
 *
 * @link http://php.net/manual/fr/function.variant-xor.php Documentation pour variant_xor.
 *
 * @version PHP 5
 *
 * @param mixed     $left    L'opérande de gauche.
 * @param mixed     $right    L'opérande de droite.
 *
 */
if(!function_exists('variant_xorThis'))
{
    function variant_xorThis($left, $right)
    {
		$left = ($left);
		$right = ($right);
		return variant_xor($left, $right);
    }
}

/**
 * version_compareThis
 *
 * Compare deux chaînes de version au format des versions PHP.
 *
 * @link http://php.net/manual/fr/function.version-compare.php Documentation pour version_compare.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $version1    Premier numéro de version.
 * @param string   $version2    Second numéro de version.
 * @param string   $operator    Si troisième argument optionnel operator est spécifié, il est possible de tester une relation particulière. Les opérateurs possibles sont : <, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=, <>, ne. Ce paramètre est sensible à la casse, aussi les valeurs doivent être en minuscule.
 *
 * @return mixed	Par défaut, version_compare() retourne -1 si la première version est inférieure à la seconde, 0 si elles sont égales, et 1 si la seconde est inférieure à la première.
 *
 */
if(!function_exists('version_compareThis'))
{
    function version_compareThis($version1, $version2, $operator = NULL)
    {
		$version1 = (string)$version1;
		$version2 = (string)$version2;
		$operator = (string)$operator;

		return version_compare($version1, $version2, $operator);
    }
}

/**
 * vfprintfThis
 *
 * Écrit une chaîne formatée dans un flux.
 *
 * @link http://php.net/manual/fr/function.vfprintf.php Documentation pour vfprintf.
 *
 * @version PHP 5
 *
 * @param resource $handle
 * @param string   $format    Voir la documentation de la fonction sprintf() pour une description complète du paramètre format.
 * @param array    $args
 *
 * @return int	Retourne la longueur de la chaîne retournée.
 *
 */
if(!function_exists('vfprintfThis'))
{
    function vfprintfThis($handle, $format, $args)
    {
		$handle = is_resource($handle) ? $handle : NULL;
		$format = (string)$format;
		$args = (array)$args;

		return vfprintf($handle, $format, $args);
    }
}

/**
 * virtualThis
 *
 * Effectue une sous-requête Apache.
 *
 * @link http://php.net/manual/fr/function.virtual.php Documentation pour virtual.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $filename    Le fichier sur lequel la commande virtuelle sera effectuée.
 *
 * @return bool	Exécute une commande virtuelle en cas de succès ou retourne FALSE en cas d'échec.
 *
 */
if(!function_exists('virtualThis'))
{
    function virtualThis($filename)
    {
		$filename = (string)$filename;

		return virtual($filename);
    }
}

/**
 * vprintfThis
 *
 * Affiche une chaîne formatée.
 *
 * @link http://php.net/manual/fr/function.vprintf.php Documentation pour vprintf.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $format    Voir la documentation de la fonction sprintf() pour une description détaillée du paramètre format.
 * @param array    $args
 *
 * @return int	Retourne la longueur de la chaîne retournée.
 *
 */
if(!function_exists('vprintfThis'))
{
    function vprintfThis($format, $args)
    {
		$format = (string)$format;
		$args = (array)$args;

		return vprintf($format, $args);
    }
}

/**
 * vsprintfThis
 *
 * Retourne une chaîne formatée.
 *
 * @link http://php.net/manual/fr/function.vsprintf.php Documentation pour vsprintf.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $format    Voir la documentation de la fonction sprintf() pour une description détaillée du paramètre format.
 * @param array    $args
 *
 * @return string	Retourne une chaîne formatée à partir du tableau de valeurs args, et en utilisant le format format. Le format est le même que celui utilisé par sprintf().
 *
 */
if(!function_exists('vsprintfThis'))
{
    function vsprintfThis($format, $args)
    {
		$format = (string)$format;
		$args = (array)$args;

		return vsprintf($format, $args);
    }
}

/**
 * w32api_deftypeThis
 *
 * Définit un type pour utilisation avec les fonctions windows API.
 *
 * @link http://php.net/manual/fr/function.w32api-deftype.php Documentation pour w32api_deftype.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param string   $typename    Le nom du type.
 * @param string   $member1_type    Un membre peut être de type défini par le programmeur. Tous les noms de types sont sensibles à la casse. Les noms de types intégrés doivent être fournis en minuscules.
 * @param string   $member1_name    Le nom du membre member1_type.
 * @param string   $item
 * @param string   $item
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('w32api_deftypeThis'))
{
    function w32api_deftypeThis($typename, $member1_type, $member1_name, $member1_name1 = NULL, $item1 = NULL)
    {
		$typename = (string)$typename;
		$member1_type = (string)$member1_type;
		$member1_name = (string)$member1_name;
		$member1_name1 = (string)$member1_name1;
		$item1 = (string)$item1;

		return w32api_deftype($typename, $member1_type, $member1_name, $member1_name1, $item1);
    }
}

/**
 * w32api_init_dtypeThis
 *
 * Crée une instance de type de données Win32 et la remplit.
 *
 * @link http://php.net/manual/fr/function.w32api-init-dtype.php Documentation pour w32api_init_dtype.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param string   $typename    Le paramètre typename est sensible à la casse.
 * @param mixed     $value    Il faut donner les valeurs dans le même ordre que lors de la définition du type, avec w32api_deftype().
 * @param mixed     $item
 *
 * @return resource	Retourne la ressource dynaparm.
 *
 */
if(!function_exists('w32api_init_dtypeThis'))
{
    function w32api_init_dtypeThis($typename, $value, $value1 = NULL)
    {
		$typename = (string)$typename;
		$value = ($value);
		$value1 = ($value1);
		return w32api_init_dtype($typename, $value, $value1);
    }
}

/**
 * w32api_invoke_functionThis
 *
 * Appelle une fonction Windows 32.
 *
 * @link http://php.net/manual/fr/function.w32api-invoke-function.php Documentation pour w32api_invoke_function.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param string   $funcname    Le nom de la fonction.
 * @param mixed     $argument    Les arguments peuvent être n'importe lequel de ceux de PHP, ou un type défini via la fonction w32api_deftype().
 * @param mixed     $item
 *
 * @return mixed	Le type retourné est celui que vous avez enregistré avec la fonction. La valeur est celle retournée par la fonction.
 *
 */
if(!function_exists('w32api_invoke_functionThis'))
{
    function w32api_invoke_functionThis($funcname, $argument, $argument1 = NULL)
    {
		$funcname = (string)$funcname;
		$argument = ($argument);
		$argument1 = ($argument1);
		return w32api_invoke_function($funcname, $argument, $argument1);
    }
}

/**
 * w32api_register_functionThis
 *
 * Enregistre une fonction Win32 dans PHP.
 *
 * @link http://php.net/manual/fr/function.w32api-register-function.php Documentation pour w32api_register_function.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param string   $library    Le nom de la bibliothèque, sous la forme d'une chaîne de caractères.
 * @param string   $function_name    Le nom de la fonction, sous la forme d'une chaîne de caractères.
 * @param string   $return_type    La fonction sera alors enregistrée avec le type de valeur de retour return_type. return_type peut être un type générique de PHP ou bien un type défini par le programmeur avec la fonction w32api_deftype(). Tous les noms de type sont sensibles à la casse. Les types intégrés doivent être fournis en minuscules.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('w32api_register_functionThis'))
{
    function w32api_register_functionThis($library, $function_name, $return_type)
    {
		$library = (string)$library;
		$function_name = (string)$function_name;
		$return_type = (string)$return_type;

		return w32api_register_function($library, $function_name, $return_type);
    }
}

/**
 * w32api_set_call_methodThis
 *
 * Modifie le type d'appel de la fonction Win32.
 *
 * @link http://php.net/manual/fr/function.w32api-set-call-method.php Documentation pour w32api_set_call_method.
 *
 * @version PHP 4 >= 4.2.0
 *
 * @param int      $method    Peut être l'une des constantes suivantes : DC_CALL_CDECL ou DC_CALL_STD (l'extension par défaut).
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('w32api_set_call_methodThis'))
{
    function w32api_set_call_methodThis($method)
    {
		$method = (int)$method;

		return w32api_set_call_method($method);
    }
}

/**
 * wddx_add_varsThis
 *
 * Ajoute des variables à un paquet WDDX.
 *
 * @link http://php.net/manual/fr/function.wddx-add-vars.php Documentation pour wddx_add_vars.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $packet_id    Un paquet WDDX, retourné par la fonction wddx_packet_start().
 * @param mixed     $var_name    Peut être une chaîne de caractères nommant une variable ou un tableau contenant des noms de variables ou d'autres tableaux, etc..
 * @param mixed     $item
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('wddx_add_varsThis'))
{
    function wddx_add_varsThis($packet_id, $var_name, $var_name1 = NULL)
    {
		$packet_id = is_resource($packet_id) ? $packet_id : NULL;
		$var_name = ($var_name);
		$var_name1 = ($var_name1);
		return wddx_add_vars($packet_id, $var_name, $var_name1);
    }
}

/**
 * wddx_deserializeThis
 *
 * Délinéarise un paquet WDDX.
 *
 * @link http://php.net/manual/fr/function.wddx-deserialize.php Documentation pour wddx_deserialize.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $packet    Un paquet WDDX, sous la forme d'une chaîne de caractères ou d'un flux.
 *
 * @return mixed	Retourne la valeur délinéarisée, pouvant être une chaîne de caractères, un nombre ou un tableau. Notez que les structures sont délinéarisées dans des tableaux associatifs.
 *
 */
if(!function_exists('wddx_deserializeThis'))
{
    function wddx_deserializeThis($packet)
    {
		$packet = (string)$packet;

		return wddx_deserialize($packet);
    }
}

/**
 * wddx_packet_endThis
 *
 * Clôt un paquet WDDX.
 *
 * @link http://php.net/manual/fr/function.wddx-packet-end.php Documentation pour wddx_packet_end.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $packet_id    Un paquet WDDX, retourné par la fonction wddx_packet_start().
 *
 * @return string	Retourne une chaîne de caractères contenant le paquet WDDX.
 *
 */
if(!function_exists('wddx_packet_endThis'))
{
    function wddx_packet_endThis($packet_id)
    {
		$packet_id = is_resource($packet_id) ? $packet_id : NULL;

		return wddx_packet_end($packet_id);
    }
}

/**
 * wddx_packet_startThis
 *
 * Commence un nouveau paquet WDDX avec une structure.
 *
 * @link http://php.net/manual/fr/function.wddx-packet-start.php Documentation pour wddx_packet_start.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $comment    Une chaîne de caractères optionnelle contenant le commentaire.
 *
 * @return resource	Retourne un identifiant de paquet pour utilisation ultérieure avec les fonctions WDDX, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('wddx_packet_startThis'))
{
    function wddx_packet_startThis($comment = NULL)
    {
		$comment = (string)$comment;

		return wddx_packet_start($comment);
    }
}

/**
 * wddx_serialize_valueThis
 *
 * Enregistre une valeur dans un paquet WDDX.
 *
 * @link http://php.net/manual/fr/function.wddx-serialize-value.php Documentation pour wddx_serialize_value.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var    La valeur à linéariser.
 * @param string   $comment    Une chaîne de caractères optionnelle contenant un commentaire qui apparaît dans l'en-tête du paquet.
 *
 * @return string	Retourne le paquet WDDX, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('wddx_serialize_valueThis'))
{
    function wddx_serialize_valueThis($var, $comment = NULL)
    {
		$var = ($var);
		$comment = (string)$comment;

		return wddx_serialize_value($var, $comment);
    }
}

/**
 * wddx_serialize_varsThis
 *
 * Enregistre plusieurs valeurs dans un paquet WDDX.
 *
 * @link http://php.net/manual/fr/function.wddx-serialize-vars.php Documentation pour wddx_serialize_vars.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param mixed     $var_name    Peut être soit une chaîne de caractères nommant une variable ou un tableau contenant des noms de variables ou d'autres tableaux, etc..
 * @param mixed     $item
 *
 * @return string	Retourne le paquet WDDX, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('wddx_serialize_varsThis'))
{
    function wddx_serialize_varsThis($var_name, $var_name1 = NULL)
    {
		$var_name = ($var_name);
		$var_name1 = ($var_name1);
		return wddx_serialize_vars($var_name, $var_name1);
    }
}

/**
 * wordwrapThis
 *
 * Effectue la césure d'une chaîne.
 *
 * @link http://php.net/manual/fr/function.wordwrap.php Documentation pour wordwrap.
 *
 * @version PHP 4 >= 4.0.2
 * @version PHP 5
 *
 * @param string   $str    La chaîne d'entrée.
 * @param int      $width    Le nombre de caractères à partir duquel la chaîne sera coupée.
 * @param string   $break    La ligne est rompue en utilisant ce paramètre optionnel.
 * @param bool     $cut    Si le paramètre cut vaut TRUE, la césure de la chaîne sera toujours à la taille width plus petit. Si vous avez un mot qui est plus long que la taille de césure, il sera coupé en morceaux : voir le second exemple.
 *
 * @return string	Retourne la chaîne fournie coupée à la longueur spécifiée.
 *
 */
if(!function_exists('wordwrapThis'))
{
    function wordwrapThis($str, $width = 75, $break = "\n", $cut = false)
    {
		$str = (string)$str;
		$width = (int)$width;
		$break = (string)$break;
		$cut = (bool)$cut;

		return wordwrap($str, $width, $break, $cut);
    }
}

/**
 * xml_error_stringThis
 *
 * Lit le message d'erreur de l'analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-error-string.php Documentation pour xml_error_string.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param int      $code    Un code erreur provenant de xml_get_error_code().
 *
 * @return string	Retourne une chaîne représentant la description de l'erreur code, ou FALSE si aucune description n'est trouvée.
 *
 */
if(!function_exists('xml_error_stringThis'))
{
    function xml_error_stringThis($code)
    {
		$code = (int)$code;

		return xml_error_string($code);
    }
}

/**
 * xml_get_current_byte_indexThis
 *
 * Retourne l'index de l'octet courant d'un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-get-current-byte-index.php Documentation pour xml_get_current_byte_index.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence sur un analyseur XML valide.
 *
 * @return int	xml_get_current_byte_index() retourne FALSE si parser n'est pas valide ou, sinon, retourne l'index de l'octet d'analyse courante de l'analyseur XML (débute à 0).
 *
 */
if(!function_exists('xml_get_current_byte_indexThis'))
{
    function xml_get_current_byte_indexThis($parser)
    {
		$parser = is_resource($parser) ? $parser : NULL;

		return xml_get_current_byte_index($parser);
    }
}

/**
 * xml_get_current_column_numberThis
 *
 * Retourne le numéro de colonne courant d'un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-get-current-column-number.php Documentation pour xml_get_current_column_number.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence sur un analyseur XML valide.
 *
 * @return int	xml_get_current_column_number() retourne FALSE si parser n'est pas valide, ou sinon, retourne le numéro de colonne courant de la ligne courante de l'analyseur, qui correspond à la position d'analyse courante de l'analyseur XML (comme retourné par xml_get_current_line_number()).
 *
 */
if(!function_exists('xml_get_current_column_numberThis'))
{
    function xml_get_current_column_numberThis($parser)
    {
		$parser = is_resource($parser) ? $parser : NULL;

		return xml_get_current_column_number($parser);
    }
}

/**
 * xml_get_current_line_numberThis
 *
 * Retourne le numéro de ligne courant d'un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-get-current-line-number.php Documentation pour xml_get_current_line_number.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence sur un analyseur XML valide.
 *
 * @return int	xml_get_current_line_number() retourne FALSE si parser n'est pas valide ou, sinon, retourne le numéro de la ligne en cours d'analyse.
 *
 */
if(!function_exists('xml_get_current_line_numberThis'))
{
    function xml_get_current_line_numberThis($parser)
    {
		$parser = is_resource($parser) ? $parser : NULL;

		return xml_get_current_line_number($parser);
    }
}

/**
 * xml_get_error_codeThis
 *
 * Récupère le code erreur de l'analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-get-error-code.php Documentation pour xml_get_error_code.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence sur un analyseur XML valide.
 *
 * @return int	xml_get_error_code() retourne FALSE si parser n'est pas une référence à une analyseur XML valide ou, sinon, retourne un des codes erreur listés dans la section sur les codes erreur.
 *
 */
if(!function_exists('xml_get_error_codeThis'))
{
    function xml_get_error_codeThis($parser)
    {
		$parser = is_resource($parser) ? $parser : NULL;

		return xml_get_error_code($parser);
    }
}

/**
 * xml_parseThis
 *
 * Commence l'analyse d'un document XML.
 *
 * @link http://php.net/manual/fr/function.xml-parse.php Documentation pour xml_parse.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence sur l'analyseur XML à utiliser.
 * @param string   $data    Une partie des données à analyser. Un document peut être analysé morceau par morceau par appels successifs à xml_parse() avec de nouvelles données, aussi longtemps que le paramètre is_final est défini et TRUE lorsque les dernières données sont analysées.
 * @param bool     $is_final    Si défini et vaut TRUE, data sera le dernier morceau de données envoyées à l'analyseur.
 *
 * @return int	Retourne 1 en cas de succès ou 0 en cas d'échec.
 *
 */
if(!function_exists('xml_parseThis'))
{
    function xml_parseThis($parser, $data, $is_final = false)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$data = (string)$data;
		$is_final = (bool)$is_final;

		return xml_parse($parser, $data, $is_final);
    }
}

/**
 * xml_parse_into_structThis
 *
 * Analyse une structure XML.
 *
 * @link http://php.net/manual/fr/function.xml-parse-into-struct.php Documentation pour xml_parse_into_struct.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence à une analyseur XML.
 * @param string   $data    Une chaîne de caractères contenant les données XML.
 * @param array    &$values    Un tableau contenant les valeurs des données XML.
 * @param array    &$index    Un tableau contenant les pointeurs vers les valeurs appropriées dans le paramètre $values.
 *
 * @return int	xml_parse_into_struct() retourne 0 si une erreur survient et 1 en cas de succès. Ce n'est pas la même chose que FALSE et TRUE, soyez prudent avec les opérateurs comme ===.
 *
 */
if(!function_exists('xml_parse_into_structThis'))
{
    function xml_parse_into_structThis($parser, $data, &$values, &$index = NULL)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$data = (string)$data;
		$values = (array)$values;
		$index = (array)$index;

		return xml_parse_into_struct($parser, $data, $values, $index);
    }
}

/**
 * xml_parser_createThis
 *
 * Création d'un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-parser-create.php Documentation pour xml_parser_create.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param string   $encoding    Le paramètre optionnel encoding spécifie le jeu de caractères d'encodage pour l'entrée/sortie dans PHP 4. Depuis PHP 5, ce jeu de caractères est automatiquement détecté et, donc, le paramètre encoding ne spécifie plus que la sortie. En PHP 4, le jeu de caractères de sortie par défaut est le même que celui d'entrée. Si une chaîne vide est passée, l'analyseur tente d'identifier quel jeu de caractère a été utilisé pour encoder le document en regardant les 3 ou 4 octets du haut. En PHP 5.0.0 et PHP 5.0.1, le jeu de caractères d'entrée par défaut est ISO-8859-1, tandis qu'en PHP 5.0.2 et suivant, il vaut UTF-8. Les jeux de caractères supportés sont ISO-8859-1, UTF-8 et US-ASCII.
 *
 * @return resource	Retourne une ressource, gérant le nouvel analyseur XML.
 *
 */
if(!function_exists('xml_parser_createThis'))
{
    function xml_parser_createThis($encoding = NULL)
    {
		$encoding = (string)$encoding;

		return xml_parser_create($encoding);
    }
}

/**
 * xml_parser_create_nsThis
 *
 * Crée un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-parser-create-ns.php Documentation pour xml_parser_create_ns.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param string   $encoding    Le paramètre optionnel encoding spécifie le jeu de caractères d'encodage pour l'entrée/sortie dans PHP 4. Depuis PHP 5, ce jeu de caractères est automatiquement détecté et, donc, le paramètre encoding ne spécifie plus que la sortie. En PHP 4, le jeu de caractères de sortie par défaut est le même que celui d'entrée. En PHP 5.0.0 et PHP 5.0.1, le jeu de caractères d'entrée par défaut est ISO-8859-1, tandis qu'en PHP 5.0.2 et suivant, il vaut UTF-8. Les jeux de caractères supportés sont ISO-8859-1, UTF-8 et US-ASCII.
 * @param string   $separator    Avec un analyseur qui supporte les espaces de noms, les balises qui sont passées aux différentes fonctions de gestion seront constituées du nom de l'espace et du nom de balise, séparé par la chaîne seperator.
 *
 * @return resource	Retourne une ressource pour le nouvel analyseur XML.
 *
 */
if(!function_exists('xml_parser_create_nsThis'))
{
    function xml_parser_create_nsThis($encoding = NULL, $separator = ':')
    {
		$encoding = (string)$encoding;
		$separator = (string)$separator;

		return xml_parser_create_ns($encoding, $separator);
    }
}

/**
 * xml_parser_freeThis
 *
 * Détruit un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-parser-free.php Documentation pour xml_parser_free.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser
 *
 * @return bool	Cette fonction retourne FALSE si parser n'est pas une référence valide ou, sinon, détruit l'analyseur et retourne TRUE.
 *
 */
if(!function_exists('xml_parser_freeThis'))
{
    function xml_parser_freeThis($parser)
    {
		$parser = is_resource($parser) ? $parser : NULL;

		return xml_parser_free($parser);
    }
}

/**
 * xml_parser_get_optionThis
 *
 * Lit les options d'un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-parser-get-option.php Documentation pour xml_parser_get_option.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser
 * @param int      $option
 *
 * @return mixed	xml_parser_get_option() retourne FALSE si parser n'est pas un analyseur valide ou si option n'est pas valide (génère aussi un E_WARNING). Sinon, elle retourne la valeur de l'option demandée.
 *
 */
if(!function_exists('xml_parser_get_optionThis'))
{
    function xml_parser_get_optionThis($parser, $option)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$option = (int)$option;

		return xml_parser_get_option($parser, $option);
    }
}

/**
 * xml_parser_set_optionThis
 *
 * Affecte les options d'un analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-parser-set-option.php Documentation pour xml_parser_set_option.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence vers un analyseur XML.
 * @param int      $option    L'option à modifier. Voir ci-dessous. Les options suivantes sont disponibles :
 * @param mixed     $value    La nouvelle valeur de l'option.
 *
 * @return bool	Retourne FALSE si parser n'est pas une référence valide sur un analyseur XML, ou si l'option n'a pas pu être modifiée. Sinon, l'option est effectivement modifiée, et la fonction retourne TRUE.
 *
 */
if(!function_exists('xml_parser_set_optionThis'))
{
    function xml_parser_set_optionThis($parser, $option, $value)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$option = (int)$option;
		$value = ($value);
		return xml_parser_set_option($parser, $option, $value);
    }
}

/**
 * xml_set_character_data_handlerThis
 *
 * Affecte les gestionnaires de texte littéral.
 *
 * @link http://php.net/manual/fr/function.xml-set-character-data-handler.php Documentation pour xml_set_character_data_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence à un analyseur XML à définir comme fonction gérant les données.
 * @param callable     $handler    handler est une chaîne qui contient le nom d'une fonction qui existe lorsque xml_parse() est appelé pour créer parser. La fonction handler doit accepter deux paramètres : Le gestionnaire des données est appelé pour chaque pièce du texte d'un document XML. Il peut être appelé plusieurs fois dans chaque fragment (e.g. pour les chaînes non-ASCII). Si un gestionnaire reçoit une chaîne vide ou FALSE, c'est qu'il est désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_character_data_handlerThis'))
{
    function xml_set_character_data_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_character_data_handler($parser, $handler);
    }
}

/**
 * xml_set_default_handlerThis
 *
 * Affecte le gestionnaire XML par défaut.
 *
 * @link http://php.net/manual/fr/function.xml-set-default-handler.php Documentation pour xml_set_default_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence à un analyseur XML à définir comme fonction d'analyse par défaut.
 * @param callable     $handler    handler est une chaîne qui contient le nom d'une fonction qui existe lorsque xml_parse() est appelé pour créer parser. La fonction handler doit accepter deux paramètres : Si un gestionnaire reçoit une chaîne vide ou FALSE, c'est qu'il est désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_default_handlerThis'))
{
    function xml_set_default_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_default_handler($parser, $handler);
    }
}

/**
 * xml_set_element_handlerThis
 *
 * Affecte les gestionnaires de début et de fin de balise XML.
 *
 * @link http://php.net/manual/fr/function.xml-set-element-handler.php Documentation pour xml_set_element_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence d'analyseur XML à définir comme fonction gérant les éléments de début et de fin.
 * @param callable     $start_element_handler    La fonction start_element_handler doit accepter trois paramètres :
 * @param callable     $end_element_handler
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_element_handlerThis'))
{
    function xml_set_element_handlerThis($parser, $start_element_handler, $end_element_handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$start_element_handler = is_callable($start_element_handler) ? $start_element_handler : NULL;
		$end_element_handler = is_callable($end_element_handler) ? $end_element_handler : NULL;

		return xml_set_element_handler($parser, $start_element_handler, $end_element_handler);
    }
}

/**
 * xml_set_end_namespace_decl_handlerThis
 *
 * Configure le gestionnaire XML de données.
 *
 * @link http://php.net/manual/fr/function.xml-set-end-namespace-decl-handler.php Documentation pour xml_set_end_namespace_decl_handler.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $parser    Une référence à un analyseur XML.
 * @param callable     $handler    handler est une chaîne contenant le nom d'une fonction qui doit exister lorsque la fonction xml_parse() est appelée pour l'analyseur parser. La fonction nommée par le paramètre handler doit accepter 2 paramètres, et doit retourner une valeur entière. Si la valeur retournée du gestionnaire est FALSE (ce qui sera le cas si aucune valeur n'est retournée), l'analyseur XML arrêtera l'analyse et la fonction xml_get_error_code() retournera XML_ERROR_EXTERNAL_ENTITY_HANDLING. Si une chaîne vide, ou FALSE, est passée à la fonction représentant le gestionnaire, le gestionnaire en question sera désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_end_namespace_decl_handlerThis'))
{
    function xml_set_end_namespace_decl_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_end_namespace_decl_handler($parser, $handler);
    }
}

/**
 * xml_set_external_entity_ref_handlerThis
 *
 * Configure le gestionnaire XML de références externes.
 *
 * @link http://php.net/manual/fr/function.xml-set-external-entity-ref-handler.php Documentation pour xml_set_external_entity_ref_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence d'analyseur XML à définir comme fonction de référence d'entités externes.
 * @param callable     $handler    handler est une chaîne qui contient les noms de fonctions qui existent lorsque xml_parse() est appelé pour créer le parser. La fonction handler doit accepter 5 paramètres, et retourner un entier. Si la valeur retournée par le gestionnaire est FALSE (par exemple si aucune valeur n'est retournée), l'analyseur XML s'arrêtera, et la fonction xml_get_error_code() retournera XML_ERROR_EXTERNAL_ENTITY_HANDLING. Si un gestionnaire reçoit une chaîne vide, ou FALSE, c'est qu'il est en train d'être désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_external_entity_ref_handlerThis'))
{
    function xml_set_external_entity_ref_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_external_entity_ref_handler($parser, $handler);
    }
}

/**
 * xml_set_notation_decl_handlerThis
 *
 * Configure le gestionnaire XML de notations.
 *
 * @link http://php.net/manual/fr/function.xml-set-notation-decl-handler.php Documentation pour xml_set_notation_decl_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence d'analyseur XML à définir comme fonction de déclaration de notation.
 * @param callable     $handler    handler est une chaîne qui contient le nom d'une fonction qui existe lorsque xml_parse() est appelé pour créer parser. La fonction handler doit accepter cinq paramètres : Si un gestionnaire reçoit une chaîne vide ou FALSE, c'est qu'il est en train d'être désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_notation_decl_handlerThis'))
{
    function xml_set_notation_decl_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_notation_decl_handler($parser, $handler);
    }
}

/**
 * xml_set_objectThis
 *
 * Configure un objet comme analyseur XML.
 *
 * @link http://php.net/manual/fr/function.xml-set-object.php Documentation pour xml_set_object.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence d'analyseur XML à utiliser dans l'objet.
 * @param object   &$object    L'objet dans lequel nous devons utiliser l'analyseur XML.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_objectThis'))
{
    function xml_set_objectThis($parser, &$object)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$object = (object)$object;

		return xml_set_object($parser, $object);
    }
}

/**
 * xml_set_processing_instruction_handlerThis
 *
 * Affecte les gestionnaires d'instructions exécutables.
 *
 * @link http://php.net/manual/fr/function.xml-set-processing-instruction-handler.php Documentation pour xml_set_processing_instruction_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence à l'analyseur XML à définir comme fonction d'analyse d'instructions (PI).
 * @param callable     $handler    handler est une chaîne qui contient le nom d'une fonction qui existe lorsque xml_parse() est appelé pour créer parser. La fonction handler doit accepter trois paramètres : Si un gestionnaire reçoit une chaîne vide, ou FALSE, c'est qu'il est désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_processing_instruction_handlerThis'))
{
    function xml_set_processing_instruction_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_processing_instruction_handler($parser, $handler);
    }
}

/**
 * xml_set_start_namespace_decl_handlerThis
 *
 * Configure le gestionnaire de caractères.
 *
 * @link http://php.net/manual/fr/function.xml-set-start-namespace-decl-handler.php Documentation pour xml_set_start_namespace_decl_handler.
 *
 * @version PHP 4 >= 4.0.5
 * @version PHP 5
 *
 * @param resource $parser    Une référence vers l'analyseur XML.
 * @param callable     $handler    handler est une chaîne contenant le nom d'une fonction devant exister lorsque la fonction xml_parse() est appelé pour l'analyseur parser. La fonction nommée par le paramètre handler doit accepter 3 paramètres, et doit retourner une valeur entière. Si la valeur retournée par le gestionnaire vaut FALSE (ce qui sera le cas lorsqu'aucune valeur n'est retourné), l'analyseur XML arrêtera l'analyse et la fonction xml_get_error_code() retournera XML_ERROR_EXTERNAL_ENTITY_HANDLING. Si une chaîne vide, ou la valeur FALSE, est passée en guise de fonction pour le gestionnaire, il sera désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_start_namespace_decl_handlerThis'))
{
    function xml_set_start_namespace_decl_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_start_namespace_decl_handler($parser, $handler);
    }
}

/**
 * xml_set_unparsed_entity_decl_handlerThis
 *
 * Affecte les gestionnaires d'entités non déclarées.
 *
 * @link http://php.net/manual/fr/function.xml-set-unparsed-entity-decl-handler.php Documentation pour xml_set_unparsed_entity_decl_handler.
 *
 * @version PHP 4
 * @version PHP 5
 *
 * @param resource $parser    Une référence à l'analyseur XML à définir à la fonction utilisée par traiter les déclarations d'entités non-analysées.
 * @param callable     $handler    handler est une chaîne qui contient le nom d'une fonction qui existe lorsque xml_parse() est appelé pour créer parser. La fonction handler doit accepter six paramètres : Si un gestionnaire reçoit une chaîne vide ou FALSE, c'est qu'il est en train d'être désactivé.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xml_set_unparsed_entity_decl_handlerThis'))
{
    function xml_set_unparsed_entity_decl_handlerThis($parser, $handler)
    {
		$parser = is_resource($parser) ? $parser : NULL;
		$handler = is_callable($handler) ? $handler : NULL;

		return xml_set_unparsed_entity_decl_handler($parser, $handler);
    }
}

/**
 * xmlrpc_decodeThis
 *
 * Décode le XML en types PHP natifs.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-decode.php Documentation pour xmlrpc_decode.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $xml    Réponse XML retournée par la méthode XMLRPC.
 * @param string   $encoding    Encodage d'entrée, supporté par iconv.
 *
 * @return mixed	Retourne soit un tableau, soit un entier, soit une chaîne, soit un booléen, en fonction de la réponse retournée par la méthode XMLRPC.
 *
 */
if(!function_exists('xmlrpc_decodeThis'))
{
    function xmlrpc_decodeThis($xml, $encoding = "iso-8859-1")
    {
		$xml = (string)$xml;
		$encoding = (string)$encoding;

		return xmlrpc_decode($xml, $encoding);
    }
}

/**
 * xmlrpc_decode_requestThis
 *
 * Décode le code XML en variables PHP natives.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-decode-request.php Documentation pour xmlrpc_decode_request.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $xml
 * @param string   &$method
 * @param string   $encoding
 *
 */
if(!function_exists('xmlrpc_decode_requestThis'))
{
    function xmlrpc_decode_requestThis($xml, &$method, $encoding = NULL)
    {
		$xml = (string)$xml;
		$method = (string)$method;
		$encoding = (string)$encoding;

		return xmlrpc_decode_request($xml, $method, $encoding);
    }
}

/**
 * xmlrpc_encodeThis
 *
 * Génère le code XML pour une valeur PHP.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-encode.php Documentation pour xmlrpc_encode.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param mixed     $value
 *
 */
if(!function_exists('xmlrpc_encodeThis'))
{
    function xmlrpc_encodeThis($value)
    {
		$value = ($value);
		return xmlrpc_encode($value);
    }
}

/**
 * xmlrpc_encode_requestThis
 *
 * Génère le XML pour une méthode.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-encode-request.php Documentation pour xmlrpc_encode_request.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $method    Nom de la méthode à appeler.
 * @param mixed     $params    Paramètres de la méthode, compatibles avec la signature de la méthode.
 * @param array    $output_options    Tableau spécifiant les options de sortie pouvant contenir (les valeurs par défaut sont en gras) :
 *
 * @return string	Retourne une chaîne contenant la représentation XML de la demande.
 *
 */
if(!function_exists('xmlrpc_encode_requestThis'))
{
    function xmlrpc_encode_requestThis($method, $params, $output_options = NULL)
    {
		$method = (string)$method;
		$params = ($params);
		$output_options = (array)$output_options;

		return xmlrpc_encode_request($method, $params, $output_options);
    }
}

/**
 * xmlrpc_get_typeThis
 *
 * Retourne le type XMLRPC d'une valeur PHP.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-get-type.php Documentation pour xmlrpc_get_type.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param mixed     $value    Valeur PHP
 *
 * @return string	Retourne le type XML-RPC.
 *
 */
if(!function_exists('xmlrpc_get_typeThis'))
{
    function xmlrpc_get_typeThis($value)
    {
		$value = ($value);
		return xmlrpc_get_type($value);
    }
}

/**
 * xmlrpc_is_faultThis
 *
 * Détermine si un tableau de valeurs représente un XMLRPC.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-is-fault.php Documentation pour xmlrpc_is_fault.
 *
 * @version PHP 4 >= 4.3.0
 * @version PHP 5
 *
 * @param array    $arg    Tableau retourné par la fonction xmlrpc_decode().
 *
 * @return bool	Retourne TRUE si l'argument signifie fault, FALSE sinon. La description de fault est disponible dans la variable $arg["faultString"], le code de fault est disponible dans la variable $arg["faultCode"].
 *
 */
if(!function_exists('xmlrpc_is_faultThis'))
{
    function xmlrpc_is_faultThis($arg)
    {
		$arg = (array)$arg;

		return xmlrpc_is_fault($arg);
    }
}

/**
 * xmlrpc_parse_method_descriptionsThis
 *
 * Décode le code XML en une liste de descriptions de méthodes.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-parse-method-descriptions.php Documentation pour xmlrpc_parse_method_descriptions.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   $xml
 *
 */
if(!function_exists('xmlrpc_parse_method_descriptionsThis'))
{
    function xmlrpc_parse_method_descriptionsThis($xml)
    {
		$xml = (string)$xml;

		return xmlrpc_parse_method_descriptions($xml);
    }
}

/**
 * xmlrpc_server_add_introspection_dataThis
 *
 * Ajoute des données d'introspection.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-server-add-introspection-data.php Documentation pour xmlrpc_server_add_introspection_data.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $server
 * @param array    $desc
 *
 */
if(!function_exists('xmlrpc_server_add_introspection_dataThis'))
{
    function xmlrpc_server_add_introspection_dataThis($server, $desc)
    {
		$server = is_resource($server) ? $server : NULL;
		$desc = (array)$desc;

		return xmlrpc_server_add_introspection_data($server, $desc);
    }
}

/**
 * xmlrpc_server_call_methodThis
 *
 * Analyse une requête XML et appelle les méthodes associées.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-server-call-method.php Documentation pour xmlrpc_server_call_method.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $server
 * @param string   $xml
 * @param mixed     $user_data
 * @param array    $output_options
 *
 */
if(!function_exists('xmlrpc_server_call_methodThis'))
{
    function xmlrpc_server_call_methodThis($server, $xml, $user_data, $output_options = NULL)
    {
		$server = is_resource($server) ? $server : NULL;
		$xml = (string)$xml;
		$user_data = ($user_data);
		$output_options = (array)$output_options;

		return xmlrpc_server_call_method($server, $xml, $user_data, $output_options);
    }
}

/**
 * xmlrpc_server_createThis
 *
 * Crée un serveur XMLRPC.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-server-create.php Documentation pour xmlrpc_server_create.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 */
if(!function_exists('xmlrpc_server_createThis'))
{
    function xmlrpc_server_createThis()
    {
		return xmlrpc_server_create();
    }
}

/**
 * xmlrpc_server_destroyThis
 *
 * Détruit un serveur XMLRPC.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-server-destroy.php Documentation pour xmlrpc_server_destroy.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $server
 *
 */
if(!function_exists('xmlrpc_server_destroyThis'))
{
    function xmlrpc_server_destroyThis($server)
    {
		$server = is_resource($server) ? $server : NULL;

		return xmlrpc_server_destroy($server);
    }
}

/**
 * xmlrpc_server_register_introspection_callbackThis
 *
 * Enregistre une fonction PHP pour générer la documentation.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-server-register-introspection-callback.php Documentation pour xmlrpc_server_register_introspection_callback.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $server
 * @param string   $function
 *
 */
if(!function_exists('xmlrpc_server_register_introspection_callbackThis'))
{
    function xmlrpc_server_register_introspection_callbackThis($server, $function)
    {
		$server = is_resource($server) ? $server : NULL;
		$function = (string)$function;

		return xmlrpc_server_register_introspection_callback($server, $function);
    }
}

/**
 * xmlrpc_server_register_methodThis
 *
 * Enregistre une fonction PHP avec une méthode.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-server-register-method.php Documentation pour xmlrpc_server_register_method.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param resource $server
 * @param string   $method_name
 * @param string   $function
 *
 */
if(!function_exists('xmlrpc_server_register_methodThis'))
{
    function xmlrpc_server_register_methodThis($server, $method_name, $function)
    {
		$server = is_resource($server) ? $server : NULL;
		$method_name = (string)$method_name;
		$function = (string)$function;

		return xmlrpc_server_register_method($server, $method_name, $function);
    }
}

/**
 * xmlrpc_set_typeThis
 *
 * Définit le type xmlrpc, base64 ou datetime, d'une valeur PHP.
 *
 * @link http://php.net/manual/fr/function.xmlrpc-set-type.php Documentation pour xmlrpc_set_type.
 *
 * @version PHP 4 >= 4.1.0
 * @version PHP 5
 *
 * @param string   &$value    Valeur dont on veut modifier le type
 * @param string   $type    base64 ou datetime
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. En cas de réussite, value sera converti en objet.
 *
 */
if(!function_exists('xmlrpc_set_typeThis'))
{
    function xmlrpc_set_typeThis(&$value, $type)
    {
		$value = (string)$value;
		$type = (string)$type;

		return xmlrpc_set_type($value, $type);
    }
}

/**
 * xslt_backend_infoThis
 *
 * Retourne les informations sur les paramètres de compilation du backend.
 *
 * @link http://php.net/manual/fr/function.xslt-backend-info.php Documentation pour xslt_backend_info.
 *
 * @version PHP 4 >= 4.3.0
 * @return string	Retourne une chaîne contenant des informations à propos de la compilation du backend, ou une chaîne d'erreur lorsque l'information n'est pas disponible.
 *
 */
if(!function_exists('xslt_backend_infoThis'))
{
    function xslt_backend_infoThis()
    {
		return xslt_backend_info();
    }
}

/**
 * xslt_backend_nameThis
 *
 * Retourne le nom du backend.
 *
 * @link http://php.net/manual/fr/function.xslt-backend-name.php Documentation pour xslt_backend_name.
 *
 * @version PHP 4 >= 4.3.0
 * @return string	Retourne Sablotron.
 *
 */
if(!function_exists('xslt_backend_nameThis'))
{
    function xslt_backend_nameThis()
    {
		return xslt_backend_name();
    }
}

/**
 * xslt_backend_versionThis
 *
 * Retourne le numéro de version de Sablotron.
 *
 * @link http://php.net/manual/fr/function.xslt-backend-version.php Documentation pour xslt_backend_version.
 *
 * @version PHP 4 >= 4.3.0
 * @return string	Retourne le numéro de version, ou FALSE s'il n'est pas disponible.
 *
 */
if(!function_exists('xslt_backend_versionThis'))
{
    function xslt_backend_versionThis()
    {
		return xslt_backend_version();
    }
}

/**
 * xslt_createThis
 *
 * Crée un nouvel analyseur XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-create.php Documentation pour xslt_create.
 *
 * @version PHP 4 >= 4.0.3
 * @return resource	Retourne un identifiant de processus XSLT en cas de succès, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xslt_createThis'))
{
    function xslt_createThis()
    {
		return xslt_create();
    }
}

/**
 * xslt_errnoThis
 *
 * Retourne le numéro d'erreur.
 *
 * @link http://php.net/manual/fr/function.xslt-errno.php Documentation pour xslt_errno.
 *
 * @version PHP 4 >= 4.0.3
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 *
 * @return int	Retourne le code erreur, sous la forme d'un entier.
 *
 */
if(!function_exists('xslt_errnoThis'))
{
    function xslt_errnoThis($xh)
    {
		$xh = is_resource($xh) ? $xh : NULL;

		return xslt_errno($xh);
    }
}

/**
 * xslt_errorThis
 *
 * Retourne un message d'erreur.
 *
 * @link http://php.net/manual/fr/function.xslt-error.php Documentation pour xslt_error.
 *
 * @version PHP 4 >= 4.0.3
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 *
 * @return string	Retourne le message d'erreur, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('xslt_errorThis'))
{
    function xslt_errorThis($xh)
    {
		$xh = is_resource($xh) ? $xh : NULL;

		return xslt_error($xh);
    }
}

/**
 * xslt_freeThis
 *
 * Détruit le processus XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-free.php Documentation pour xslt_free.
 *
 * @version PHP 4 >= 4.0.3
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_freeThis'))
{
    function xslt_freeThis($xh)
    {
		$xh = is_resource($xh) ? $xh : NULL;

		return xslt_free($xh);
    }
}

/**
 * xslt_getoptThis
 *
 * Récupère les options d'un processeur xsl donné.
 *
 * @link http://php.net/manual/fr/function.xslt-getopt.php Documentation pour xslt_getopt.
 *
 * @version PHP 4 >= 4.3.0
 *
 * @param resource $processor    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 *
 * @return int	Retourne les options, sous la forme d'un masque construit avec les constantes XSLT_SABOPT_XXX.
 *
 */
if(!function_exists('xslt_getoptThis'))
{
    function xslt_getoptThis($processor)
    {
		$processor = is_resource($processor) ? $processor : NULL;

		return xslt_getopt($processor);
    }
}

/**
 * xslt_processThis
 *
 * Effectue une transformation XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-process.php Documentation pour xslt_process.
 *
 * @version PHP 4 >= 4.0.3
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param string   $xmlcontainer    Chemin vers le fichier XML ou le marqueur pour l'argument XML.
 * @param string   $xslcontainer    Chemin vers le fichier XSL ou le marqueur pour l'argument XML.
 * @param string   $resultcontainer    Le conteneur de résultat est, par défaut, un fichier qui recevra le document traité. Si le conteneur de résultat n'est pas fourni (l'argument vaut alors NULL), le résultat sera retourné par la fonction.
 * @param array    $arguments    Au lieu de fichiers comme arguments XML et XSLT à la fonction xslt_process(), vous pouvez spécifier "des marqueurs" qui seront substitués par les valeurs données dans le tableau arguments.
 * @param array    $parameters    Un tableau pour les paramètres de haut niveau, qui seront passés au document XSLT. Ces paramètres sont accessibles depuis le fichier XSL en utilisant l'instruction <xsl:param name="parameter_name">. Les paramètres doivent être encodés au format UTF-8 et leur valeur sera interprétée comme une chaîne de caractères par l'analyseur Sablotron. En d'autres termes, vous ne pouvez pas passer des groupes de noeuds (node-sets) comme paramètres au document XSLT.
 *
 * @return mixed	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient. si le conteneur n'est pas spécifié - i.e. NULL - sinon, le résultat sera retourné.
 *
 */
if(!function_exists('xslt_processThis'))
{
    function xslt_processThis($xh, $xmlcontainer, $xslcontainer, $resultcontainer = NULL, $arguments = NULL, $parameters = NULL)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$xmlcontainer = (string)$xmlcontainer;
		$xslcontainer = (string)$xslcontainer;
		$resultcontainer = (string)$resultcontainer;
		$arguments = (array)$arguments;
		$parameters = (array)$parameters;

		return xslt_process($xh, $xmlcontainer, $xslcontainer, $resultcontainer, $arguments, $parameters);
    }
}

/**
 * xslt_set_baseThis
 *
 * Configure l'URI de base de toutes les transformations XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-set-base.php Documentation pour xslt_set_base.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param string   $uri    L'URI de base à utiliser.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_baseThis'))
{
    function xslt_set_baseThis($xh, $uri)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$uri = (string)$uri;

		return xslt_set_base($xh, $uri);
    }
}

/**
 * xslt_set_encodingThis
 *
 * Configure le jeu de caractères pour l'analyse des documents XML.
 *
 * @link http://php.net/manual/fr/function.xslt-set-encoding.php Documentation pour xslt_set_encoding.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param string   $encoding    Un encodage de sortie, e.g iso-8859-1.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_encodingThis'))
{
    function xslt_set_encodingThis($xh, $encoding)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$encoding = (string)$encoding;

		return xslt_set_encoding($xh, $encoding);
    }
}

/**
 * xslt_set_error_handlerThis
 *
 * Configure le gestionnaire d'erreurs du processeur XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-set-error-handler.php Documentation pour xslt_set_error_handler.
 *
 * @version PHP 4 >= 4.0.4
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param mixed     $handler    La fonction utilisateur, qui doit accepter quatre paramètres : le processeur XSLT, le niveau d'erreur, le code erreur et un tableau de messages. La fonction peut être définie comme :
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_error_handlerThis'))
{
    function xslt_set_error_handlerThis($xh, $handler)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$handler = ($handler);
		return xslt_set_error_handler($xh, $handler);
    }
}

/**
 * xslt_set_logThis
 *
 * Configure le fichier d'historique pour les messages XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-set-log.php Documentation pour xslt_set_log.
 *
 * @version PHP 4 >= 4.0.6
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param mixed     $log    Ce paramètre est soit un booléen, qui active ou non l'enregistrement dans le fichier d'historique, ou une chaîne contenant le nom du fichier d'historique dans lequel les erreurs seront enregistrées.
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_logThis'))
{
    function xslt_set_logThis($xh, $log = NULL)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$log = ($log);
		return xslt_set_log($xh, $log);
    }
}

/**
 * xslt_set_objectThis
 *
 * Définit l'objet dans lequel doivent être résolues les fonctions de rappel.
 *
 * @link http://php.net/manual/fr/function.xslt-set-object.php Documentation pour xslt_set_object.
 *
 * @version PHP 4 >= 4.3.0
 *
 * @param resource $processor    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param object   &$obj    Un objet.
 *
 * @return bool	Cette fonction retourne TRUE en cas de succès ou FALSE si une erreur survient.
 *
 */
if(!function_exists('xslt_set_objectThis'))
{
    function xslt_set_objectThis($processor, &$obj)
    {
		$processor = is_resource($processor) ? $processor : NULL;
		$obj = (object)$obj;

		return xslt_set_object($processor, $obj);
    }
}

/**
 * xslt_set_sax_handlerThis
 *
 * Modifie les gestionnaires SAX de l'analyseur XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-set-sax-handler.php Documentation pour xslt_set_sax_handler.
 *
 * @version PHP 4 >= 4.0.3
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param array    $handlers    Les gestionnaires SAX sont représentés par un tableau à deux dimensions, avec le format suivant (les éléments du premier niveau sont optionnels) :
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_sax_handlerThis'))
{
    function xslt_set_sax_handlerThis($xh, $handlers)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$handlers = (array)$handlers;

		return xslt_set_sax_handler($xh, $handlers);
    }
}

/**
 * xslt_set_sax_handlersThis
 *
 * Configure les gestionnaires SAX qui seront appelés pour gérer les documents XML.
 *
 * @link http://php.net/manual/fr/function.xslt-set-sax-handlers.php Documentation pour xslt_set_sax_handlers.
 *
 * @version PHP 4 >= 4.0.6
 *
 * @param resource $processor    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param array    $handlers    Le paramètre handlers doit être un tableau qui suit ce format : Chacune des fonctions du gestionnaire SAX correspond au format suivant :
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_sax_handlersThis'))
{
    function xslt_set_sax_handlersThis($processor, $handlers)
    {
		$processor = is_resource($processor) ? $processor : NULL;
		$handlers = (array)$handlers;

		return xslt_set_sax_handlers($processor, $handlers);
    }
}

/**
 * xslt_set_scheme_handlerThis
 *
 * Configure les gestionnaires de Scheme du processeur XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-set-scheme-handler.php Documentation pour xslt_set_scheme_handler.
 *
 * @version PHP 4 >= 4.0.5
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param array    $handlers    Les gestionnaires Scheme doivent être fournis sous forme de tableau (tous les éléments sont optionnels) :
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_scheme_handlerThis'))
{
    function xslt_set_scheme_handlerThis($xh, $handlers)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$handlers = (array)$handlers;

		return xslt_set_scheme_handler($xh, $handlers);
    }
}

/**
 * xslt_set_scheme_handlersThis
 *
 * Configure un gestionnaire de Scheme pour un processeur XSLT.
 *
 * @link http://php.net/manual/fr/function.xslt-set-scheme-handlers.php Documentation pour xslt_set_scheme_handlers.
 *
 * @version PHP 4 >= 4.0.6
 *
 * @param resource $xh    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param array    $handlers    Un tableau possédant les clés suivantes : "get_all", "open", "get", "put", et "close". Chaque entrée doit être un nom de fonction ou un tableau du format suivant : array($obj, "method"). Notez que le tableau fourni ne doit pas nécessairement contenir tous les éléments du gestionnaire (bien que cela reste possible), mais il doit uniquement correspondre au format "handler" => "function" décrit ci-dessus. Chacune des fonctions individuelles de scheme appelée est au format suivant :
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('xslt_set_scheme_handlersThis'))
{
    function xslt_set_scheme_handlersThis($xh, $handlers)
    {
		$xh = is_resource($xh) ? $xh : NULL;
		$handlers = (array)$handlers;

		return xslt_set_scheme_handlers($xh, $handlers);
    }
}

/**
 * xslt_setoptThis
 *
 * Définit les options d'un processeur XSLT donné.
 *
 * @link http://php.net/manual/fr/function.xslt-setopt.php Documentation pour xslt_setopt.
 *
 * @version PHP 4 >= 4.3.0
 *
 * @param resource $processor    Un identifiant de lien du processus XSLT créé avec la fonction xslt_create().
 * @param int      $newmask    Le paramètre newmask est un masque construit avec les constantes suivantes :
 *
 * @return mixed	Retourne le nombre de masques précédents possible, TRUE sinon, et FALSE si une erreur survient.
 *
 */
if(!function_exists('xslt_setoptThis'))
{
    function xslt_setoptThis($processor, $newmask)
    {
		$processor = is_resource($processor) ? $processor : NULL;
		$newmask = (int)$newmask;

		return xslt_setopt($processor, $newmask);
    }
}

/**
 * yp_allThis
 *
 * Traverse la carte et applique une fonction sur chaque entrée.
 *
 * @link http://php.net/manual/fr/function.yp-all.php Documentation pour yp_all.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $domain    Le nom du domaine NIS.
 * @param string   $map    La carte NIS.
 * @param string   $callback
 *
 * @return void	Aucune valeur n'est retournée.
 *
 */
if(!function_exists('yp_allThis'))
{
    function yp_allThis($domain, $map, $callback)
    {
		$domain = (string)$domain;
		$map = (string)$map;
		$callback = (string)$callback;

		return yp_all($domain, $map, $callback);
    }
}

/**
 * yp_catThis
 *
 * Retourne une tableau contenant la carte entière.
 *
 * @link http://php.net/manual/fr/function.yp-cat.php Documentation pour yp_cat.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $domain    Le nom du domaine NIS.
 * @param string   $map    La carte NIS.
 *
 * @return array	Retourne toutes les entrées de la carte sous forme de tableau associatif dont les clés et les valeurs sont respectivement les clés et les entrées de la carte.
 *
 */
if(!function_exists('yp_catThis'))
{
    function yp_catThis($domain, $map)
    {
		$domain = (string)$domain;
		$map = (string)$map;

		return yp_cat($domain, $map);
    }
}

/**
 * yp_err_stringThis
 *
 * Retourne la chaîne correspondant à l'erreur donnée.
 *
 * @link http://php.net/manual/fr/function.yp-err-string.php Documentation pour yp_err_string.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5 <= 5.0.5
 *
 * @param int      $errorcode    Le code erreur.
 *
 * @return string	Retourne le message d'erreur, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('yp_err_stringThis'))
{
    function yp_err_stringThis($errorcode)
    {
		$errorcode = (int)$errorcode;

		return yp_err_string($errorcode);
    }
}

/**
 * yp_errnoThis
 *
 * Retourne le code d'erreur de la dernière opération NIS.
 *
 * @link http://php.net/manual/fr/function.yp-errno.php Documentation pour yp_errno.
 *
 * @version PHP 4 >= 4.0.6
 * @version PHP 5 <= 5.0.5
 * @return int	Retourne une des constantes YPERR_XXX.
 *
 */
if(!function_exists('yp_errnoThis'))
{
    function yp_errnoThis()
    {
		return yp_errno();
    }
}

/**
 * yp_firstThis
 *
 * Retourne la première paire clé/valeur d'une carte donnée.
 *
 * @link http://php.net/manual/fr/function.yp-first.php Documentation pour yp_first.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $domain    Le nom du domaine NIS.
 * @param string   $map    La carte NIS.
 *
 * @return array	Retourne la première paire clé/valeur d'une carte donnée, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('yp_firstThis'))
{
    function yp_firstThis($domain, $map)
    {
		$domain = (string)$domain;
		$map = (string)$map;

		return yp_first($domain, $map);
    }
}

/**
 * yp_get_default_domainThis
 *
 * Retourne le domaine NIS par défaut.
 *
 * @link http://php.net/manual/fr/function.yp-get-default-domain.php Documentation pour yp_get_default_domain.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.0.5
 * @return string	Retourne le domaine par défaut du noeud ou FALSE si une erreur survient. Peut être utilisé en tant que domaine pour les prochains appels NIS.
 *
 */
if(!function_exists('yp_get_default_domainThis'))
{
    function yp_get_default_domainThis()
    {
		return yp_get_default_domain();
    }
}

/**
 * yp_masterThis
 *
 * Retourne le nom de la machine maître pour une carte.
 *
 * @link http://php.net/manual/fr/function.yp-master.php Documentation pour yp_master.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $domain    Le nom du domaine NIS.
 * @param string   $map    La carte NIS.
 *
 */
if(!function_exists('yp_masterThis'))
{
    function yp_masterThis($domain, $map)
    {
		$domain = (string)$domain;
		$map = (string)$map;

		return yp_master($domain, $map);
    }
}

/**
 * yp_matchThis
 *
 * Retourne la ligne associée.
 *
 * @link http://php.net/manual/fr/function.yp-match.php Documentation pour yp_match.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $domain    Le nom du domaine NIS.
 * @param string   $map    La carte NIS.
 * @param string   $key    Cette clé doit être exacte.
 *
 * @return string	Retourne la valeur, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('yp_matchThis'))
{
    function yp_matchThis($domain, $map, $key)
    {
		$domain = (string)$domain;
		$map = (string)$map;
		$key = (string)$key;

		return yp_match($domain, $map, $key);
    }
}

/**
 * yp_nextThis
 *
 * Retourne la paire clé/valeur suivante d'une carte donnée.
 *
 * @link http://php.net/manual/fr/function.yp-next.php Documentation pour yp_next.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $domain
 * @param string   $map
 * @param string   $key
 *
 * @return array	Retourne la prochaine paire clé/valeur en tant que tableau, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('yp_nextThis'))
{
    function yp_nextThis($domain, $map, $key)
    {
		$domain = (string)$domain;
		$map = (string)$map;
		$key = (string)$key;

		return yp_next($domain, $map, $key);
    }
}

/**
 * yp_orderThis
 *
 * Retourne le numéro d'ordre d'une carte.
 *
 * @link http://php.net/manual/fr/function.yp-order.php Documentation pour yp_order.
 *
 * @version PHP 4
 * @version PHP 5 <= 5.0.5
 *
 * @param string   $domain
 * @param string   $map
 *
 * @return int	Retourne le numéro d'ordre pour la carte, ou FALSE si une erreur survient.
 *
 */
if(!function_exists('yp_orderThis'))
{
    function yp_orderThis($domain, $map)
    {
		$domain = (string)$domain;
		$map = (string)$map;

		return yp_order($domain, $map);
    }
}

/**
 * zend_logo_guidThis
 *
 * Retourne le logo de Zend.
 *
 * @link http://php.net/manual/fr/function.zend-logo-guid.php Documentation pour zend_logo_guid.
 *
 * @version PHP 4
 * @version PHP 5 < 5.5
 * @return string	Retourne PHPE9568F35-D428-11d2-A769-00AA01ACF42.
 *
 */
if(!function_exists('zend_logo_guidThis'))
{
    function zend_logo_guidThis()
    {
		return zend_logo_guid();
    }
}

/**
 * zend_thread_idThis
 *
 * Retourne un identifiant unique du thread courant.
 *
 * @link http://php.net/manual/fr/function.zend-thread-id.php Documentation pour zend_thread_id.
 *
 * @version PHP 5
 * @return int	Retourne l'identifiant du thread, sous la forme d'un entier.
 *
 */
if(!function_exists('zend_thread_idThis'))
{
    function zend_thread_idThis()
    {
		return zend_thread_id();
    }
}

/**
 * zend_versionThis
 *
 * Lit la version courante du moteur Zend.
 *
 * @link http://php.net/manual/fr/function.zend-version.php Documentation pour zend_version.
 *
 * @version PHP 4
 * @version PHP 5
 * @return string	Retourne le numéro de la version du moteur Zend, sous la forme d'une chaîne de caractères.
 *
 */
if(!function_exists('zend_versionThis'))
{
    function zend_versionThis()
    {
		return zend_version();
    }
}

/**
 * zlib_decodeThis
 *
 * Décompresse des données encodées raw/gzip/zlib.
 *
 * @link http://php.net/manual/fr/function.zlib-decode.php Documentation pour zlib_decode.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param string   $data
 * @param string   $max_decoded_len
 *
 */
if(!function_exists('zlib_decodeThis'))
{
    function zlib_decodeThis($data, $max_decoded_len = NULL)
    {
		$data = (string)$data;
		$max_decoded_len = (string)$max_decoded_len;

		return zlib_decode($data, $max_decoded_len);
    }
}

/**
 * zlib_encodeThis
 *
 * Compresse des données avec l'encodage spécifié.
 *
 * @link http://php.net/manual/fr/function.zlib-encode.php Documentation pour zlib_encode.
 *
 * @version PHP 5 >= 5.4.0
 *
 * @param string   $data
 * @param string   $encoding
 * @param string   $level
 *
 */
if(!function_exists('zlib_encodeThis'))
{
    function zlib_encodeThis($data, $encoding, $level = -1)
    {
		$data = (string)$data;
		$encoding = (string)$encoding;
		$level = (string)$level;

		return zlib_encode($data, $encoding, $level);
    }
}

/**
 * zlib_get_coding_typeThis
 *
 * Retourne la méthode de compression utilisée avec Gzip.
 *
 * @link http://php.net/manual/fr/function.zlib-get-coding-type.php Documentation pour zlib_get_coding_type.
 *
 * @version PHP 4 >= 4.3.2
 * @version PHP 5
 * @return string	Les valeurs possibles de retour sont gzip, deflate ou FALSE.
 *
 */
if(!function_exists('zlib_get_coding_typeThis'))
{
    function zlib_get_coding_typeThis()
    {
		return zlib_get_coding_type();
    }
}

